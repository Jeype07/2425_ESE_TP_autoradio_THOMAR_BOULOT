
TP-autoradio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f30  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  080080c0  080080c0  000090c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083a4  080083a4  0000a074  2**0
                  CONTENTS
  4 .ARM          00000008  080083a4  080083a4  000093a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083ac  080083ac  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083ac  080083ac  000093ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080083b0  080083b0  000093b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080083b4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001550  20000074  08008428  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015c4  08008428  0000a5c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a401  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ed6  00000000  00000000  000244a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  00028380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001168  00000000  00000000  00029a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a3f6  00000000  00000000  0002ab78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b863  00000000  00000000  00054f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd8e3  00000000  00000000  000707d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016e0b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066ec  00000000  00000000  0016e0f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001747e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080080a8 	.word	0x080080a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080080a8 	.word	0x080080a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	4a07      	ldr	r2, [pc, #28]	@ (800058c <vApplicationGetIdleTaskMemory+0x2c>)
 8000570:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	4a06      	ldr	r2, [pc, #24]	@ (8000590 <vApplicationGetIdleTaskMemory+0x30>)
 8000576:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2280      	movs	r2, #128	@ 0x80
 800057c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000094 	.word	0x20000094
 8000590:	20000134 	.word	0x20000134

08000594 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000594:	b5b0      	push	{r4, r5, r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800059a:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <MX_FREERTOS_Init+0x30>)
 800059c:	1d3c      	adds	r4, r7, #4
 800059e:	461d      	mov	r5, r3
 80005a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f004 f96c 	bl	800488e <osThreadCreate>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a03      	ldr	r2, [pc, #12]	@ (80005c8 <MX_FREERTOS_Init+0x34>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bdb0      	pop	{r4, r5, r7, pc}
 80005c4:	080080cc 	.word	0x080080cc
 80005c8:	20000090 	.word	0x20000090

080005cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f004 f9a6 	bl	8004926 <osDelay>
 80005da:	e7fb      	b.n	80005d4 <StartDefaultTask+0x8>

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	@ 0x28
 80005e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	4b2b      	ldr	r3, [pc, #172]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f6:	4a2a      	ldr	r2, [pc, #168]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005fe:	4b28      	ldr	r3, [pc, #160]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	f003 0304 	and.w	r3, r3, #4
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	4b25      	ldr	r3, [pc, #148]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060e:	4a24      	ldr	r2, [pc, #144]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000616:	4b22      	ldr	r3, [pc, #136]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b1f      	ldr	r3, [pc, #124]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000626:	4a1e      	ldr	r2, [pc, #120]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800062e:	4b1c      	ldr	r3, [pc, #112]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b19      	ldr	r3, [pc, #100]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063e:	4a18      	ldr	r2, [pc, #96]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000646:	4b16      	ldr	r3, [pc, #88]	@ (80006a0 <MX_GPIO_Init+0xc4>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2120      	movs	r1, #32
 8000656:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065a:	f000 fedf 	bl	800141c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800065e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000664:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	480b      	ldr	r0, [pc, #44]	@ (80006a4 <MX_GPIO_Init+0xc8>)
 8000676:	f000 fd27 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800067a:	2320      	movs	r3, #32
 800067c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067e:	2301      	movs	r3, #1
 8000680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	2300      	movs	r3, #0
 8000688:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000694:	f000 fd18 	bl	80010c8 <HAL_GPIO_Init>

}
 8000698:	bf00      	nop
 800069a:	3728      	adds	r7, #40	@ 0x28
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40021000 	.word	0x40021000
 80006a4:	48000800 	.word	0x48000800

080006a8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80006b0:	1d39      	adds	r1, r7, #4
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	2201      	movs	r2, #1
 80006b8:	4803      	ldr	r0, [pc, #12]	@ (80006c8 <__io_putchar+0x20>)
 80006ba:	f002 fd2d 	bl	8003118 <HAL_UART_Transmit>

	return ch;
 80006be:	687b      	ldr	r3, [r7, #4]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000388 	.word	0x20000388

080006cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a04      	ldr	r2, [pc, #16]	@ (80006ec <HAL_UART_RxCpltCallback+0x20>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d101      	bne.n	80006e2 <HAL_UART_RxCpltCallback+0x16>
	{
		shell_uart_receive_irq_cb();	// C'est la fonction qui donne le sémaphore!
 80006de:	f006 f8b3 	bl	8006848 <shell_uart_receive_irq_cb>
	}
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40004400 	.word	0x40004400

080006f0 <fonction>:

int fonction(int argc, char ** argv)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
	printf("Je suis une fonction bidon\r\n");
 80006fa:	4810      	ldr	r0, [pc, #64]	@ (800073c <fonction+0x4c>)
 80006fc:	f006 fc30 	bl	8006f60 <puts>

	printf("argc = %d\r\n", argc);
 8000700:	6879      	ldr	r1, [r7, #4]
 8000702:	480f      	ldr	r0, [pc, #60]	@ (8000740 <fonction+0x50>)
 8000704:	f006 fbc4 	bl	8006e90 <iprintf>

	for (int i = 0 ; i < argc ; i++)
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	e00c      	b.n	8000728 <fonction+0x38>
	{
		printf("arg %d = %s\r\n", i, argv[i]);
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	683a      	ldr	r2, [r7, #0]
 8000714:	4413      	add	r3, r2
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	461a      	mov	r2, r3
 800071a:	68f9      	ldr	r1, [r7, #12]
 800071c:	4809      	ldr	r0, [pc, #36]	@ (8000744 <fonction+0x54>)
 800071e:	f006 fbb7 	bl	8006e90 <iprintf>
	for (int i = 0 ; i < argc ; i++)
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	3301      	adds	r3, #1
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fa      	ldr	r2, [r7, #12]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	429a      	cmp	r2, r3
 800072e:	dbee      	blt.n	800070e <fonction+0x1e>
	}

	return 0;
 8000730:	2300      	movs	r3, #0
}
 8000732:	4618      	mov	r0, r3
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	080080e8 	.word	0x080080e8
 8000740:	08008104 	.word	0x08008104
 8000744:	08008110 	.word	0x08008110

08000748 <addition>:

int addition(int argc, char ** argv)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
	if (argc == 3)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2b03      	cmp	r3, #3
 8000756:	d117      	bne.n	8000788 <addition+0x40>
	{
		int a, b;
		a = atoi(argv[1]);
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	3304      	adds	r3, #4
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	f006 fa4c 	bl	8006bfc <atoi>
 8000764:	60f8      	str	r0, [r7, #12]
		b = atoi(argv[2]);
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	3308      	adds	r3, #8
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4618      	mov	r0, r3
 800076e:	f006 fa45 	bl	8006bfc <atoi>
 8000772:	60b8      	str	r0, [r7, #8]
		printf("%d + %d = %d\r\n", a, b, a+b);
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	4413      	add	r3, r2
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	68f9      	ldr	r1, [r7, #12]
 800077e:	4807      	ldr	r0, [pc, #28]	@ (800079c <addition+0x54>)
 8000780:	f006 fb86 	bl	8006e90 <iprintf>

		return 0;
 8000784:	2300      	movs	r3, #0
 8000786:	e004      	b.n	8000792 <addition+0x4a>
	}
	else
	{
		printf("Erreur, pas le bon nombre d'arguments\r\n");
 8000788:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <addition+0x58>)
 800078a:	f006 fbe9 	bl	8006f60 <puts>
		return -1;
 800078e:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000792:	4618      	mov	r0, r3
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	08008120 	.word	0x08008120
 80007a0:	08008130 	.word	0x08008130

080007a4 <task_shell>:

void task_shell(void * unused)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	shell_init();
 80007ac:	f006 f8d8 	bl	8006960 <shell_init>
	shell_add('f', fonction, "Une fonction inutile");
 80007b0:	4a07      	ldr	r2, [pc, #28]	@ (80007d0 <task_shell+0x2c>)
 80007b2:	4908      	ldr	r1, [pc, #32]	@ (80007d4 <task_shell+0x30>)
 80007b4:	2066      	movs	r0, #102	@ 0x66
 80007b6:	f006 f90b 	bl	80069d0 <shell_add>
	shell_add('a', addition, "Effectue une somme");
 80007ba:	4a07      	ldr	r2, [pc, #28]	@ (80007d8 <task_shell+0x34>)
 80007bc:	4907      	ldr	r1, [pc, #28]	@ (80007dc <task_shell+0x38>)
 80007be:	2061      	movs	r0, #97	@ 0x61
 80007c0:	f006 f906 	bl	80069d0 <shell_add>
	shell_run();	// boucle infinie
 80007c4:	f006 f9b0 	bl	8006b28 <shell_run>
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	08008158 	.word	0x08008158
 80007d4:	080006f1 	.word	0x080006f1
 80007d8:	08008170 	.word	0x08008170
 80007dc:	08000749 	.word	0x08000749

080007e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e6:	f000 facd 	bl	8000d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ea:	f000 f827 	bl	800083c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ee:	f7ff fef5 	bl	80005dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007f2:	f000 fa09 	bl	8000c08 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	if (xTaskCreate(task_shell, "Shell", TASK_SHELL_STACK_DEPTH, NULL, TASK_SHELL_PRIORITY, &h_task_shell) != pdPASS)
 80007f6:	4b0d      	ldr	r3, [pc, #52]	@ (800082c <main+0x4c>)
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	2301      	movs	r3, #1
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2300      	movs	r3, #0
 8000800:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000804:	490a      	ldr	r1, [pc, #40]	@ (8000830 <main+0x50>)
 8000806:	480b      	ldr	r0, [pc, #44]	@ (8000834 <main+0x54>)
 8000808:	f004 fc9a 	bl	8005140 <xTaskCreate>
 800080c:	4603      	mov	r3, r0
 800080e:	2b01      	cmp	r3, #1
 8000810:	d004      	beq.n	800081c <main+0x3c>
		{
			printf("Error creating task shell\r\n");
 8000812:	4809      	ldr	r0, [pc, #36]	@ (8000838 <main+0x58>)
 8000814:	f006 fba4 	bl	8006f60 <puts>
			Error_Handler();
 8000818:	f000 f874 	bl	8000904 <Error_Handler>
		}

		vTaskStartScheduler();
 800081c:	f004 fe16 	bl	800544c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000820:	f7ff feb8 	bl	8000594 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000824:	f004 f82c 	bl	8004880 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <main+0x48>
 800082c:	20000334 	.word	0x20000334
 8000830:	08008184 	.word	0x08008184
 8000834:	080007a5 	.word	0x080007a5
 8000838:	0800818c 	.word	0x0800818c

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b096      	sub	sp, #88	@ 0x58
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	2244      	movs	r2, #68	@ 0x44
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f006 fc9c 	bl	8007188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	463b      	mov	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800085e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000862:	f000 fe01 	bl	8001468 <HAL_PWREx_ControlVoltageScaling>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800086c:	f000 f84a 	bl	8000904 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000870:	2302      	movs	r3, #2
 8000872:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000874:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000878:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087a:	2310      	movs	r3, #16
 800087c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087e:	2302      	movs	r3, #2
 8000880:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000882:	2302      	movs	r3, #2
 8000884:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000886:	2301      	movs	r3, #1
 8000888:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800088a:	230a      	movs	r3, #10
 800088c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800088e:	2307      	movs	r3, #7
 8000890:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000892:	2302      	movs	r3, #2
 8000894:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000896:	2302      	movs	r3, #2
 8000898:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 fe38 	bl	8001514 <HAL_RCC_OscConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008aa:	f000 f82b 	bl	8000904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ae:	230f      	movs	r3, #15
 80008b0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b2:	2303      	movs	r3, #3
 80008b4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008c2:	463b      	mov	r3, r7
 80008c4:	2104      	movs	r1, #4
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 fa00 	bl	8001ccc <HAL_RCC_ClockConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008d2:	f000 f817 	bl	8000904 <Error_Handler>
  }
}
 80008d6:	bf00      	nop
 80008d8:	3758      	adds	r7, #88	@ 0x58
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a04      	ldr	r2, [pc, #16]	@ (8000900 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d101      	bne.n	80008f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008f2:	f000 fa67 	bl	8000dc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40012c00 	.word	0x40012c00

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <Error_Handler+0x8>

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	4b11      	ldr	r3, [pc, #68]	@ (800095c <HAL_MspInit+0x4c>)
 8000918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800091a:	4a10      	ldr	r2, [pc, #64]	@ (800095c <HAL_MspInit+0x4c>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6613      	str	r3, [r2, #96]	@ 0x60
 8000922:	4b0e      	ldr	r3, [pc, #56]	@ (800095c <HAL_MspInit+0x4c>)
 8000924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	4b0b      	ldr	r3, [pc, #44]	@ (800095c <HAL_MspInit+0x4c>)
 8000930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000932:	4a0a      	ldr	r2, [pc, #40]	@ (800095c <HAL_MspInit+0x4c>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000938:	6593      	str	r3, [r2, #88]	@ 0x58
 800093a:	4b08      	ldr	r3, [pc, #32]	@ (800095c <HAL_MspInit+0x4c>)
 800093c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800093e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	210f      	movs	r1, #15
 800094a:	f06f 0001 	mvn.w	r0, #1
 800094e:	f000 fb11 	bl	8000f74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08c      	sub	sp, #48	@ 0x30
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000968:	2300      	movs	r3, #0
 800096a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800096e:	4b2e      	ldr	r3, [pc, #184]	@ (8000a28 <HAL_InitTick+0xc8>)
 8000970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000972:	4a2d      	ldr	r2, [pc, #180]	@ (8000a28 <HAL_InitTick+0xc8>)
 8000974:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000978:	6613      	str	r3, [r2, #96]	@ 0x60
 800097a:	4b2b      	ldr	r3, [pc, #172]	@ (8000a28 <HAL_InitTick+0xc8>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800097e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000986:	f107 020c 	add.w	r2, r7, #12
 800098a:	f107 0310 	add.w	r3, r7, #16
 800098e:	4611      	mov	r1, r2
 8000990:	4618      	mov	r0, r3
 8000992:	f001 fb5f 	bl	8002054 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000996:	f001 fb47 	bl	8002028 <HAL_RCC_GetPCLK2Freq>
 800099a:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800099c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800099e:	4a23      	ldr	r2, [pc, #140]	@ (8000a2c <HAL_InitTick+0xcc>)
 80009a0:	fba2 2303 	umull	r2, r3, r2, r3
 80009a4:	0c9b      	lsrs	r3, r3, #18
 80009a6:	3b01      	subs	r3, #1
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009aa:	4b21      	ldr	r3, [pc, #132]	@ (8000a30 <HAL_InitTick+0xd0>)
 80009ac:	4a21      	ldr	r2, [pc, #132]	@ (8000a34 <HAL_InitTick+0xd4>)
 80009ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a30 <HAL_InitTick+0xd0>)
 80009b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009b6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009b8:	4a1d      	ldr	r2, [pc, #116]	@ (8000a30 <HAL_InitTick+0xd0>)
 80009ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009bc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009be:	4b1c      	ldr	r3, [pc, #112]	@ (8000a30 <HAL_InitTick+0xd0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a30 <HAL_InitTick+0xd0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ca:	4b19      	ldr	r3, [pc, #100]	@ (8000a30 <HAL_InitTick+0xd0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009d0:	4817      	ldr	r0, [pc, #92]	@ (8000a30 <HAL_InitTick+0xd0>)
 80009d2:	f002 f88d 	bl	8002af0 <HAL_TIM_Base_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80009dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d11b      	bne.n	8000a1c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009e4:	4812      	ldr	r0, [pc, #72]	@ (8000a30 <HAL_InitTick+0xd0>)
 80009e6:	f002 f8e5 	bl	8002bb4 <HAL_TIM_Base_Start_IT>
 80009ea:	4603      	mov	r3, r0
 80009ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80009f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d111      	bne.n	8000a1c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80009f8:	2019      	movs	r0, #25
 80009fa:	f000 fad7 	bl	8000fac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2b0f      	cmp	r3, #15
 8000a02:	d808      	bhi.n	8000a16 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000a04:	2200      	movs	r2, #0
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	2019      	movs	r0, #25
 8000a0a:	f000 fab3 	bl	8000f74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a38 <HAL_InitTick+0xd8>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	e002      	b.n	8000a1c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3730      	adds	r7, #48	@ 0x30
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	431bde83 	.word	0x431bde83
 8000a30:	20000338 	.word	0x20000338
 8000a34:	40012c00 	.word	0x40012c00
 8000a38:	20000004 	.word	0x20000004

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <NMI_Handler+0x4>

08000a44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <HardFault_Handler+0x4>

08000a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <MemManage_Handler+0x4>

08000a54 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
	...

08000a74 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a78:	4802      	ldr	r0, [pc, #8]	@ (8000a84 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a7a:	f002 f90b 	bl	8002c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000338 	.word	0x20000338

08000a88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a8c:	4802      	ldr	r0, [pc, #8]	@ (8000a98 <USART2_IRQHandler+0x10>)
 8000a8e:	f002 fc19 	bl	80032c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000388 	.word	0x20000388

08000a9c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	e00a      	b.n	8000ac4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aae:	f3af 8000 	nop.w
 8000ab2:	4601      	mov	r1, r0
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	1c5a      	adds	r2, r3, #1
 8000ab8:	60ba      	str	r2, [r7, #8]
 8000aba:	b2ca      	uxtb	r2, r1
 8000abc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	697a      	ldr	r2, [r7, #20]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	dbf0      	blt.n	8000aae <_read+0x12>
  }

  return len;
 8000acc:	687b      	ldr	r3, [r7, #4]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3718      	adds	r7, #24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b086      	sub	sp, #24
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	60f8      	str	r0, [r7, #12]
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	e009      	b.n	8000afc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	1c5a      	adds	r2, r3, #1
 8000aec:	60ba      	str	r2, [r7, #8]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fdd9 	bl	80006a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	3301      	adds	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	697a      	ldr	r2, [r7, #20]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	dbf1      	blt.n	8000ae8 <_write+0x12>
  }
  return len;
 8000b04:	687b      	ldr	r3, [r7, #4]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <_close>:

int _close(int file)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b36:	605a      	str	r2, [r3, #4]
  return 0;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <_isatty>:

int _isatty(int file)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b4e:	2301      	movs	r3, #1
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
	...

08000b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b80:	4a14      	ldr	r2, [pc, #80]	@ (8000bd4 <_sbrk+0x5c>)
 8000b82:	4b15      	ldr	r3, [pc, #84]	@ (8000bd8 <_sbrk+0x60>)
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b8c:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d102      	bne.n	8000b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b94:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <_sbrk+0x64>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	@ (8000be0 <_sbrk+0x68>)
 8000b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9a:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <_sbrk+0x64>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d207      	bcs.n	8000bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba8:	f006 fb92 	bl	80072d0 <__errno>
 8000bac:	4603      	mov	r3, r0
 8000bae:	220c      	movs	r2, #12
 8000bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb6:	e009      	b.n	8000bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb8:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <_sbrk+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	@ (8000bdc <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	4a05      	ldr	r2, [pc, #20]	@ (8000bdc <_sbrk+0x64>)
 8000bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bca:	68fb      	ldr	r3, [r7, #12]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20018000 	.word	0x20018000
 8000bd8:	00000400 	.word	0x00000400
 8000bdc:	20000384 	.word	0x20000384
 8000be0:	200015c8 	.word	0x200015c8

08000be4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000be8:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <SystemInit+0x20>)
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bee:	4a05      	ldr	r2, [pc, #20]	@ (8000c04 <SystemInit+0x20>)
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c0c:	4b14      	ldr	r3, [pc, #80]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c0e:	4a15      	ldr	r2, [pc, #84]	@ (8000c64 <MX_USART2_UART_Init+0x5c>)
 8000c10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c12:	4b13      	ldr	r3, [pc, #76]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1a:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c2e:	220c      	movs	r2, #12
 8000c30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c38:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c4a:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c4c:	f002 fa16 	bl	800307c <HAL_UART_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c56:	f7ff fe55 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000388 	.word	0x20000388
 8000c64:	40004400 	.word	0x40004400

08000c68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b0ac      	sub	sp, #176	@ 0xb0
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2288      	movs	r2, #136	@ 0x88
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f006 fa7d 	bl	8007188 <memset>
  if(uartHandle->Instance==USART2)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a25      	ldr	r2, [pc, #148]	@ (8000d28 <HAL_UART_MspInit+0xc0>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d143      	bne.n	8000d20 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f001 fa67 	bl	8002178 <HAL_RCCEx_PeriphCLKConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cb0:	f7ff fe28 	bl	8000904 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d2c <HAL_UART_MspInit+0xc4>)
 8000cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cb8:	4a1c      	ldr	r2, [pc, #112]	@ (8000d2c <HAL_UART_MspInit+0xc4>)
 8000cba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d2c <HAL_UART_MspInit+0xc4>)
 8000cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ccc:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <HAL_UART_MspInit+0xc4>)
 8000cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd0:	4a16      	ldr	r2, [pc, #88]	@ (8000d2c <HAL_UART_MspInit+0xc4>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd8:	4b14      	ldr	r3, [pc, #80]	@ (8000d2c <HAL_UART_MspInit+0xc4>)
 8000cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ce4:	230c      	movs	r3, #12
 8000ce6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d06:	4619      	mov	r1, r3
 8000d08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d0c:	f000 f9dc 	bl	80010c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2105      	movs	r1, #5
 8000d14:	2026      	movs	r0, #38	@ 0x26
 8000d16:	f000 f92d 	bl	8000f74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d1a:	2026      	movs	r0, #38	@ 0x26
 8000d1c:	f000 f946 	bl	8000fac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d20:	bf00      	nop
 8000d22:	37b0      	adds	r7, #176	@ 0xb0
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40004400 	.word	0x40004400
 8000d2c:	40021000 	.word	0x40021000

08000d30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d34:	f7ff ff56 	bl	8000be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d38:	480c      	ldr	r0, [pc, #48]	@ (8000d6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d3a:	490d      	ldr	r1, [pc, #52]	@ (8000d70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d74 <LoopForever+0xe>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d40:	e002      	b.n	8000d48 <LoopCopyDataInit>

08000d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d46:	3304      	adds	r3, #4

08000d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d4c:	d3f9      	bcc.n	8000d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d50:	4c0a      	ldr	r4, [pc, #40]	@ (8000d7c <LoopForever+0x16>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d54:	e001      	b.n	8000d5a <LoopFillZerobss>

08000d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d58:	3204      	adds	r2, #4

08000d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d5c:	d3fb      	bcc.n	8000d56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d5e:	f006 fabd 	bl	80072dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d62:	f7ff fd3d 	bl	80007e0 <main>

08000d66 <LoopForever>:

LoopForever:
    b LoopForever
 8000d66:	e7fe      	b.n	8000d66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d70:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d74:	080083b4 	.word	0x080083b4
  ldr r2, =_sbss
 8000d78:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d7c:	200015c4 	.word	0x200015c4

08000d80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC1_2_IRQHandler>
	...

08000d84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <HAL_Init+0x3c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc0 <HAL_Init+0x3c>)
 8000d94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d98:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9a:	2003      	movs	r0, #3
 8000d9c:	f000 f8df 	bl	8000f5e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000da0:	200f      	movs	r0, #15
 8000da2:	f7ff fddd 	bl	8000960 <HAL_InitTick>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d002      	beq.n	8000db2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	71fb      	strb	r3, [r7, #7]
 8000db0:	e001      	b.n	8000db6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000db2:	f7ff fdad 	bl	8000910 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000db6:	79fb      	ldrb	r3, [r7, #7]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40022000 	.word	0x40022000

08000dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <HAL_IncTick+0x20>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <HAL_IncTick+0x24>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a04      	ldr	r2, [pc, #16]	@ (8000de8 <HAL_IncTick+0x24>)
 8000dd6:	6013      	str	r3, [r2, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000008 	.word	0x20000008
 8000de8:	20000410 	.word	0x20000410

08000dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return uwTick;
 8000df0:	4b03      	ldr	r3, [pc, #12]	@ (8000e00 <HAL_GetTick+0x14>)
 8000df2:	681b      	ldr	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000410 	.word	0x20000410

08000e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e36:	4a04      	ldr	r2, [pc, #16]	@ (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	60d3      	str	r3, [r2, #12]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b04      	ldr	r3, [pc, #16]	@ (8000e64 <__NVIC_GetPriorityGrouping+0x18>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f003 0307 	and.w	r3, r3, #7
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db0b      	blt.n	8000e92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	f003 021f 	and.w	r2, r3, #31
 8000e80:	4907      	ldr	r1, [pc, #28]	@ (8000ea0 <__NVIC_EnableIRQ+0x38>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	2001      	movs	r0, #1
 8000e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e100 	.word	0xe000e100

08000ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	db0a      	blt.n	8000ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	490c      	ldr	r1, [pc, #48]	@ (8000ef0 <__NVIC_SetPriority+0x4c>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	0112      	lsls	r2, r2, #4
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ecc:	e00a      	b.n	8000ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4908      	ldr	r1, [pc, #32]	@ (8000ef4 <__NVIC_SetPriority+0x50>)
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	3b04      	subs	r3, #4
 8000edc:	0112      	lsls	r2, r2, #4
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	761a      	strb	r2, [r3, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000e100 	.word	0xe000e100
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	@ 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f1c3 0307 	rsb	r3, r3, #7
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	bf28      	it	cs
 8000f16:	2304      	movcs	r3, #4
 8000f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	2b06      	cmp	r3, #6
 8000f20:	d902      	bls.n	8000f28 <NVIC_EncodePriority+0x30>
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3b03      	subs	r3, #3
 8000f26:	e000      	b.n	8000f2a <NVIC_EncodePriority+0x32>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43da      	mvns	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	43d9      	mvns	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	4313      	orrs	r3, r2
         );
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3724      	adds	r7, #36	@ 0x24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff ff4c 	bl	8000e04 <__NVIC_SetPriorityGrouping>
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
 8000f80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f86:	f7ff ff61 	bl	8000e4c <__NVIC_GetPriorityGrouping>
 8000f8a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	68b9      	ldr	r1, [r7, #8]
 8000f90:	6978      	ldr	r0, [r7, #20]
 8000f92:	f7ff ffb1 	bl	8000ef8 <NVIC_EncodePriority>
 8000f96:	4602      	mov	r2, r0
 8000f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9c:	4611      	mov	r1, r2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff ff80 	bl	8000ea4 <__NVIC_SetPriority>
}
 8000fa4:	bf00      	nop
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff ff54 	bl	8000e68 <__NVIC_EnableIRQ>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d008      	beq.n	8000ff2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2204      	movs	r2, #4
 8000fe4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e022      	b.n	8001038 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f022 020e 	bic.w	r2, r2, #14
 8001000:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f022 0201 	bic.w	r2, r2, #1
 8001010:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001016:	f003 021c 	and.w	r2, r3, #28
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101e:	2101      	movs	r1, #1
 8001020:	fa01 f202 	lsl.w	r2, r1, r2
 8001024:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001036:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001038:	4618      	mov	r0, r3
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d005      	beq.n	8001068 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2204      	movs	r2, #4
 8001060:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	73fb      	strb	r3, [r7, #15]
 8001066:	e029      	b.n	80010bc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f022 020e 	bic.w	r2, r2, #14
 8001076:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0201 	bic.w	r2, r2, #1
 8001086:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108c:	f003 021c 	and.w	r2, r3, #28
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001094:	2101      	movs	r1, #1
 8001096:	fa01 f202 	lsl.w	r2, r1, r2
 800109a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2201      	movs	r2, #1
 80010a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	4798      	blx	r3
    }
  }
  return status;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b087      	sub	sp, #28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d6:	e17f      	b.n	80013d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	2101      	movs	r1, #1
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	fa01 f303 	lsl.w	r3, r1, r3
 80010e4:	4013      	ands	r3, r2
 80010e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 8171 	beq.w	80013d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d005      	beq.n	8001108 <HAL_GPIO_Init+0x40>
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d130      	bne.n	800116a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	68da      	ldr	r2, [r3, #12]
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800113e:	2201      	movs	r2, #1
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	091b      	lsrs	r3, r3, #4
 8001154:	f003 0201 	and.w	r2, r3, #1
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	2b03      	cmp	r3, #3
 8001174:	d118      	bne.n	80011a8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800117a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800117c:	2201      	movs	r2, #1
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	08db      	lsrs	r3, r3, #3
 8001192:	f003 0201 	and.w	r2, r3, #1
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	d017      	beq.n	80011e4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d123      	bne.n	8001238 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	08da      	lsrs	r2, r3, #3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3208      	adds	r2, #8
 80011f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	220f      	movs	r2, #15
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	691a      	ldr	r2, [r3, #16]
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	08da      	lsrs	r2, r3, #3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3208      	adds	r2, #8
 8001232:	6939      	ldr	r1, [r7, #16]
 8001234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	2203      	movs	r2, #3
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0203 	and.w	r2, r3, #3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 80ac 	beq.w	80013d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	4b5f      	ldr	r3, [pc, #380]	@ (80013f8 <HAL_GPIO_Init+0x330>)
 800127c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800127e:	4a5e      	ldr	r2, [pc, #376]	@ (80013f8 <HAL_GPIO_Init+0x330>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6613      	str	r3, [r2, #96]	@ 0x60
 8001286:	4b5c      	ldr	r3, [pc, #368]	@ (80013f8 <HAL_GPIO_Init+0x330>)
 8001288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001292:	4a5a      	ldr	r2, [pc, #360]	@ (80013fc <HAL_GPIO_Init+0x334>)
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	3302      	adds	r3, #2
 800129a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	220f      	movs	r2, #15
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012bc:	d025      	beq.n	800130a <HAL_GPIO_Init+0x242>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4f      	ldr	r2, [pc, #316]	@ (8001400 <HAL_GPIO_Init+0x338>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d01f      	beq.n	8001306 <HAL_GPIO_Init+0x23e>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4e      	ldr	r2, [pc, #312]	@ (8001404 <HAL_GPIO_Init+0x33c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d019      	beq.n	8001302 <HAL_GPIO_Init+0x23a>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4d      	ldr	r2, [pc, #308]	@ (8001408 <HAL_GPIO_Init+0x340>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d013      	beq.n	80012fe <HAL_GPIO_Init+0x236>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4c      	ldr	r2, [pc, #304]	@ (800140c <HAL_GPIO_Init+0x344>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d00d      	beq.n	80012fa <HAL_GPIO_Init+0x232>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4b      	ldr	r2, [pc, #300]	@ (8001410 <HAL_GPIO_Init+0x348>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d007      	beq.n	80012f6 <HAL_GPIO_Init+0x22e>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4a      	ldr	r2, [pc, #296]	@ (8001414 <HAL_GPIO_Init+0x34c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d101      	bne.n	80012f2 <HAL_GPIO_Init+0x22a>
 80012ee:	2306      	movs	r3, #6
 80012f0:	e00c      	b.n	800130c <HAL_GPIO_Init+0x244>
 80012f2:	2307      	movs	r3, #7
 80012f4:	e00a      	b.n	800130c <HAL_GPIO_Init+0x244>
 80012f6:	2305      	movs	r3, #5
 80012f8:	e008      	b.n	800130c <HAL_GPIO_Init+0x244>
 80012fa:	2304      	movs	r3, #4
 80012fc:	e006      	b.n	800130c <HAL_GPIO_Init+0x244>
 80012fe:	2303      	movs	r3, #3
 8001300:	e004      	b.n	800130c <HAL_GPIO_Init+0x244>
 8001302:	2302      	movs	r3, #2
 8001304:	e002      	b.n	800130c <HAL_GPIO_Init+0x244>
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <HAL_GPIO_Init+0x244>
 800130a:	2300      	movs	r3, #0
 800130c:	697a      	ldr	r2, [r7, #20]
 800130e:	f002 0203 	and.w	r2, r2, #3
 8001312:	0092      	lsls	r2, r2, #2
 8001314:	4093      	lsls	r3, r2
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800131c:	4937      	ldr	r1, [pc, #220]	@ (80013fc <HAL_GPIO_Init+0x334>)
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	089b      	lsrs	r3, r3, #2
 8001322:	3302      	adds	r3, #2
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800132a:	4b3b      	ldr	r3, [pc, #236]	@ (8001418 <HAL_GPIO_Init+0x350>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	43db      	mvns	r3, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800134e:	4a32      	ldr	r2, [pc, #200]	@ (8001418 <HAL_GPIO_Init+0x350>)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001354:	4b30      	ldr	r3, [pc, #192]	@ (8001418 <HAL_GPIO_Init+0x350>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	43db      	mvns	r3, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001378:	4a27      	ldr	r2, [pc, #156]	@ (8001418 <HAL_GPIO_Init+0x350>)
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800137e:	4b26      	ldr	r3, [pc, #152]	@ (8001418 <HAL_GPIO_Init+0x350>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	43db      	mvns	r3, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001418 <HAL_GPIO_Init+0x350>)
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001418 <HAL_GPIO_Init+0x350>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013cc:	4a12      	ldr	r2, [pc, #72]	@ (8001418 <HAL_GPIO_Init+0x350>)
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3301      	adds	r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa22 f303 	lsr.w	r3, r2, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f47f ae78 	bne.w	80010d8 <HAL_GPIO_Init+0x10>
  }
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	371c      	adds	r7, #28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40010000 	.word	0x40010000
 8001400:	48000400 	.word	0x48000400
 8001404:	48000800 	.word	0x48000800
 8001408:	48000c00 	.word	0x48000c00
 800140c:	48001000 	.word	0x48001000
 8001410:	48001400 	.word	0x48001400
 8001414:	48001800 	.word	0x48001800
 8001418:	40010400 	.word	0x40010400

0800141c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	807b      	strh	r3, [r7, #2]
 8001428:	4613      	mov	r3, r2
 800142a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800142c:	787b      	ldrb	r3, [r7, #1]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001432:	887a      	ldrh	r2, [r7, #2]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001438:	e002      	b.n	8001440 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800143a:	887a      	ldrh	r2, [r7, #2]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001450:	4b04      	ldr	r3, [pc, #16]	@ (8001464 <HAL_PWREx_GetVoltageRange+0x18>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40007000 	.word	0x40007000

08001468 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001476:	d130      	bne.n	80014da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001478:	4b23      	ldr	r3, [pc, #140]	@ (8001508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001480:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001484:	d038      	beq.n	80014f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001486:	4b20      	ldr	r3, [pc, #128]	@ (8001508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800148e:	4a1e      	ldr	r2, [pc, #120]	@ (8001508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001490:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001494:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001496:	4b1d      	ldr	r3, [pc, #116]	@ (800150c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2232      	movs	r2, #50	@ 0x32
 800149c:	fb02 f303 	mul.w	r3, r2, r3
 80014a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001510 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014a2:	fba2 2303 	umull	r2, r3, r2, r3
 80014a6:	0c9b      	lsrs	r3, r3, #18
 80014a8:	3301      	adds	r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ac:	e002      	b.n	80014b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	3b01      	subs	r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014b4:	4b14      	ldr	r3, [pc, #80]	@ (8001508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014c0:	d102      	bne.n	80014c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1f2      	bne.n	80014ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014d4:	d110      	bne.n	80014f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e00f      	b.n	80014fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014da:	4b0b      	ldr	r3, [pc, #44]	@ (8001508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014e6:	d007      	beq.n	80014f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014e8:	4b07      	ldr	r3, [pc, #28]	@ (8001508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014f0:	4a05      	ldr	r2, [pc, #20]	@ (8001508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40007000 	.word	0x40007000
 800150c:	20000000 	.word	0x20000000
 8001510:	431bde83 	.word	0x431bde83

08001514 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e3ca      	b.n	8001cbc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001526:	4b97      	ldr	r3, [pc, #604]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 030c 	and.w	r3, r3, #12
 800152e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001530:	4b94      	ldr	r3, [pc, #592]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0310 	and.w	r3, r3, #16
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 80e4 	beq.w	8001710 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d007      	beq.n	800155e <HAL_RCC_OscConfig+0x4a>
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	2b0c      	cmp	r3, #12
 8001552:	f040 808b 	bne.w	800166c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	2b01      	cmp	r3, #1
 800155a:	f040 8087 	bne.w	800166c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800155e:	4b89      	ldr	r3, [pc, #548]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d005      	beq.n	8001576 <HAL_RCC_OscConfig+0x62>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e3a2      	b.n	8001cbc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a1a      	ldr	r2, [r3, #32]
 800157a:	4b82      	ldr	r3, [pc, #520]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	2b00      	cmp	r3, #0
 8001584:	d004      	beq.n	8001590 <HAL_RCC_OscConfig+0x7c>
 8001586:	4b7f      	ldr	r3, [pc, #508]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800158e:	e005      	b.n	800159c <HAL_RCC_OscConfig+0x88>
 8001590:	4b7c      	ldr	r3, [pc, #496]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 8001592:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001596:	091b      	lsrs	r3, r3, #4
 8001598:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800159c:	4293      	cmp	r3, r2
 800159e:	d223      	bcs.n	80015e8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 fd87 	bl	80020b8 <RCC_SetFlashLatencyFromMSIRange>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e383      	b.n	8001cbc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015b4:	4b73      	ldr	r3, [pc, #460]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a72      	ldr	r2, [pc, #456]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 80015ba:	f043 0308 	orr.w	r3, r3, #8
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b70      	ldr	r3, [pc, #448]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	496d      	ldr	r1, [pc, #436]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015d2:	4b6c      	ldr	r3, [pc, #432]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	4968      	ldr	r1, [pc, #416]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	604b      	str	r3, [r1, #4]
 80015e6:	e025      	b.n	8001634 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015e8:	4b66      	ldr	r3, [pc, #408]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a65      	ldr	r2, [pc, #404]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 80015ee:	f043 0308 	orr.w	r3, r3, #8
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4b63      	ldr	r3, [pc, #396]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	4960      	ldr	r1, [pc, #384]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 8001602:	4313      	orrs	r3, r2
 8001604:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001606:	4b5f      	ldr	r3, [pc, #380]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	495b      	ldr	r1, [pc, #364]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 8001616:	4313      	orrs	r3, r2
 8001618:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d109      	bne.n	8001634 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	4618      	mov	r0, r3
 8001626:	f000 fd47 	bl	80020b8 <RCC_SetFlashLatencyFromMSIRange>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e343      	b.n	8001cbc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001634:	f000 fc4a 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8001638:	4602      	mov	r2, r0
 800163a:	4b52      	ldr	r3, [pc, #328]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	091b      	lsrs	r3, r3, #4
 8001640:	f003 030f 	and.w	r3, r3, #15
 8001644:	4950      	ldr	r1, [pc, #320]	@ (8001788 <HAL_RCC_OscConfig+0x274>)
 8001646:	5ccb      	ldrb	r3, [r1, r3]
 8001648:	f003 031f 	and.w	r3, r3, #31
 800164c:	fa22 f303 	lsr.w	r3, r2, r3
 8001650:	4a4e      	ldr	r2, [pc, #312]	@ (800178c <HAL_RCC_OscConfig+0x278>)
 8001652:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001654:	4b4e      	ldr	r3, [pc, #312]	@ (8001790 <HAL_RCC_OscConfig+0x27c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff f981 	bl	8000960 <HAL_InitTick>
 800165e:	4603      	mov	r3, r0
 8001660:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d052      	beq.n	800170e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	e327      	b.n	8001cbc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d032      	beq.n	80016da <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001674:	4b43      	ldr	r3, [pc, #268]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a42      	ldr	r2, [pc, #264]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001680:	f7ff fbb4 	bl	8000dec <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001688:	f7ff fbb0 	bl	8000dec <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e310      	b.n	8001cbc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800169a:	4b3a      	ldr	r3, [pc, #232]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f0      	beq.n	8001688 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016a6:	4b37      	ldr	r3, [pc, #220]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a36      	ldr	r2, [pc, #216]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 80016ac:	f043 0308 	orr.w	r3, r3, #8
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	4b34      	ldr	r3, [pc, #208]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	4931      	ldr	r1, [pc, #196]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	021b      	lsls	r3, r3, #8
 80016d2:	492c      	ldr	r1, [pc, #176]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	604b      	str	r3, [r1, #4]
 80016d8:	e01a      	b.n	8001710 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016da:	4b2a      	ldr	r3, [pc, #168]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a29      	ldr	r2, [pc, #164]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 80016e0:	f023 0301 	bic.w	r3, r3, #1
 80016e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016e6:	f7ff fb81 	bl	8000dec <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016ee:	f7ff fb7d 	bl	8000dec <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e2dd      	b.n	8001cbc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001700:	4b20      	ldr	r3, [pc, #128]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f0      	bne.n	80016ee <HAL_RCC_OscConfig+0x1da>
 800170c:	e000      	b.n	8001710 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800170e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b00      	cmp	r3, #0
 800171a:	d074      	beq.n	8001806 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	2b08      	cmp	r3, #8
 8001720:	d005      	beq.n	800172e <HAL_RCC_OscConfig+0x21a>
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	2b0c      	cmp	r3, #12
 8001726:	d10e      	bne.n	8001746 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	2b03      	cmp	r3, #3
 800172c:	d10b      	bne.n	8001746 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172e:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d064      	beq.n	8001804 <HAL_RCC_OscConfig+0x2f0>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d160      	bne.n	8001804 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e2ba      	b.n	8001cbc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800174e:	d106      	bne.n	800175e <HAL_RCC_OscConfig+0x24a>
 8001750:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0b      	ldr	r2, [pc, #44]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 8001756:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	e026      	b.n	80017ac <HAL_RCC_OscConfig+0x298>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001766:	d115      	bne.n	8001794 <HAL_RCC_OscConfig+0x280>
 8001768:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a05      	ldr	r2, [pc, #20]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 800176e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	4b03      	ldr	r3, [pc, #12]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a02      	ldr	r2, [pc, #8]	@ (8001784 <HAL_RCC_OscConfig+0x270>)
 800177a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	e014      	b.n	80017ac <HAL_RCC_OscConfig+0x298>
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000
 8001788:	08008228 	.word	0x08008228
 800178c:	20000000 	.word	0x20000000
 8001790:	20000004 	.word	0x20000004
 8001794:	4ba0      	ldr	r3, [pc, #640]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a9f      	ldr	r2, [pc, #636]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 800179a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	4b9d      	ldr	r3, [pc, #628]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a9c      	ldr	r2, [pc, #624]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 80017a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d013      	beq.n	80017dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b4:	f7ff fb1a 	bl	8000dec <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017bc:	f7ff fb16 	bl	8000dec <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b64      	cmp	r3, #100	@ 0x64
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e276      	b.n	8001cbc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ce:	4b92      	ldr	r3, [pc, #584]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0x2a8>
 80017da:	e014      	b.n	8001806 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017dc:	f7ff fb06 	bl	8000dec <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e4:	f7ff fb02 	bl	8000dec <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b64      	cmp	r3, #100	@ 0x64
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e262      	b.n	8001cbc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017f6:	4b88      	ldr	r3, [pc, #544]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x2d0>
 8001802:	e000      	b.n	8001806 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d060      	beq.n	80018d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	2b04      	cmp	r3, #4
 8001816:	d005      	beq.n	8001824 <HAL_RCC_OscConfig+0x310>
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	2b0c      	cmp	r3, #12
 800181c:	d119      	bne.n	8001852 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	2b02      	cmp	r3, #2
 8001822:	d116      	bne.n	8001852 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001824:	4b7c      	ldr	r3, [pc, #496]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <HAL_RCC_OscConfig+0x328>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e23f      	b.n	8001cbc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183c:	4b76      	ldr	r3, [pc, #472]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	061b      	lsls	r3, r3, #24
 800184a:	4973      	ldr	r1, [pc, #460]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 800184c:	4313      	orrs	r3, r2
 800184e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001850:	e040      	b.n	80018d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d023      	beq.n	80018a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800185a:	4b6f      	ldr	r3, [pc, #444]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a6e      	ldr	r2, [pc, #440]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 8001860:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001866:	f7ff fac1 	bl	8000dec <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800186e:	f7ff fabd 	bl	8000dec <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e21d      	b.n	8001cbc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001880:	4b65      	ldr	r3, [pc, #404]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0f0      	beq.n	800186e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188c:	4b62      	ldr	r3, [pc, #392]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	061b      	lsls	r3, r3, #24
 800189a:	495f      	ldr	r1, [pc, #380]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 800189c:	4313      	orrs	r3, r2
 800189e:	604b      	str	r3, [r1, #4]
 80018a0:	e018      	b.n	80018d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a5c      	ldr	r2, [pc, #368]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 80018a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ae:	f7ff fa9d 	bl	8000dec <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b6:	f7ff fa99 	bl	8000dec <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e1f9      	b.n	8001cbc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018c8:	4b53      	ldr	r3, [pc, #332]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f0      	bne.n	80018b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d03c      	beq.n	800195a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d01c      	beq.n	8001922 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018e8:	4b4b      	ldr	r3, [pc, #300]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 80018ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018ee:	4a4a      	ldr	r2, [pc, #296]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f8:	f7ff fa78 	bl	8000dec <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001900:	f7ff fa74 	bl	8000dec <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e1d4      	b.n	8001cbc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001912:	4b41      	ldr	r3, [pc, #260]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 8001914:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0ef      	beq.n	8001900 <HAL_RCC_OscConfig+0x3ec>
 8001920:	e01b      	b.n	800195a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001922:	4b3d      	ldr	r3, [pc, #244]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 8001924:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001928:	4a3b      	ldr	r2, [pc, #236]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 800192a:	f023 0301 	bic.w	r3, r3, #1
 800192e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001932:	f7ff fa5b 	bl	8000dec <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800193a:	f7ff fa57 	bl	8000dec <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e1b7      	b.n	8001cbc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800194c:	4b32      	ldr	r3, [pc, #200]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 800194e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1ef      	bne.n	800193a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 80a6 	beq.w	8001ab4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001968:	2300      	movs	r3, #0
 800196a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800196c:	4b2a      	ldr	r3, [pc, #168]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 800196e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10d      	bne.n	8001994 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001978:	4b27      	ldr	r3, [pc, #156]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 800197a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197c:	4a26      	ldr	r2, [pc, #152]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 800197e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001982:	6593      	str	r3, [r2, #88]	@ 0x58
 8001984:	4b24      	ldr	r3, [pc, #144]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 8001986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001990:	2301      	movs	r3, #1
 8001992:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001994:	4b21      	ldr	r3, [pc, #132]	@ (8001a1c <HAL_RCC_OscConfig+0x508>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800199c:	2b00      	cmp	r3, #0
 800199e:	d118      	bne.n	80019d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019a0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a1c <HAL_RCC_OscConfig+0x508>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a1d      	ldr	r2, [pc, #116]	@ (8001a1c <HAL_RCC_OscConfig+0x508>)
 80019a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ac:	f7ff fa1e 	bl	8000dec <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b4:	f7ff fa1a 	bl	8000dec <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e17a      	b.n	8001cbc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019c6:	4b15      	ldr	r3, [pc, #84]	@ (8001a1c <HAL_RCC_OscConfig+0x508>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0f0      	beq.n	80019b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d108      	bne.n	80019ec <HAL_RCC_OscConfig+0x4d8>
 80019da:	4b0f      	ldr	r3, [pc, #60]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 80019dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019ea:	e029      	b.n	8001a40 <HAL_RCC_OscConfig+0x52c>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b05      	cmp	r3, #5
 80019f2:	d115      	bne.n	8001a20 <HAL_RCC_OscConfig+0x50c>
 80019f4:	4b08      	ldr	r3, [pc, #32]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 80019f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019fa:	4a07      	ldr	r2, [pc, #28]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 80019fc:	f043 0304 	orr.w	r3, r3, #4
 8001a00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a04:	4b04      	ldr	r3, [pc, #16]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 8001a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a0a:	4a03      	ldr	r2, [pc, #12]	@ (8001a18 <HAL_RCC_OscConfig+0x504>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a14:	e014      	b.n	8001a40 <HAL_RCC_OscConfig+0x52c>
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40007000 	.word	0x40007000
 8001a20:	4b9c      	ldr	r3, [pc, #624]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a26:	4a9b      	ldr	r2, [pc, #620]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001a28:	f023 0301 	bic.w	r3, r3, #1
 8001a2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a30:	4b98      	ldr	r3, [pc, #608]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a36:	4a97      	ldr	r2, [pc, #604]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001a38:	f023 0304 	bic.w	r3, r3, #4
 8001a3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d016      	beq.n	8001a76 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a48:	f7ff f9d0 	bl	8000dec <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a4e:	e00a      	b.n	8001a66 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a50:	f7ff f9cc 	bl	8000dec <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e12a      	b.n	8001cbc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a66:	4b8b      	ldr	r3, [pc, #556]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0ed      	beq.n	8001a50 <HAL_RCC_OscConfig+0x53c>
 8001a74:	e015      	b.n	8001aa2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a76:	f7ff f9b9 	bl	8000dec <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a7c:	e00a      	b.n	8001a94 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7e:	f7ff f9b5 	bl	8000dec <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e113      	b.n	8001cbc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a94:	4b7f      	ldr	r3, [pc, #508]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1ed      	bne.n	8001a7e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aa2:	7ffb      	ldrb	r3, [r7, #31]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d105      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa8:	4b7a      	ldr	r3, [pc, #488]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aac:	4a79      	ldr	r2, [pc, #484]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001aae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ab2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80fe 	beq.w	8001cba <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	f040 80d0 	bne.w	8001c68 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ac8:	4b72      	ldr	r3, [pc, #456]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f003 0203 	and.w	r2, r3, #3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d130      	bne.n	8001b3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d127      	bne.n	8001b3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001af8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d11f      	bne.n	8001b3e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b08:	2a07      	cmp	r2, #7
 8001b0a:	bf14      	ite	ne
 8001b0c:	2201      	movne	r2, #1
 8001b0e:	2200      	moveq	r2, #0
 8001b10:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d113      	bne.n	8001b3e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b20:	085b      	lsrs	r3, r3, #1
 8001b22:	3b01      	subs	r3, #1
 8001b24:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d109      	bne.n	8001b3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b34:	085b      	lsrs	r3, r3, #1
 8001b36:	3b01      	subs	r3, #1
 8001b38:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d06e      	beq.n	8001c1c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	2b0c      	cmp	r3, #12
 8001b42:	d069      	beq.n	8001c18 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b44:	4b53      	ldr	r3, [pc, #332]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d105      	bne.n	8001b5c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b50:	4b50      	ldr	r3, [pc, #320]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0ad      	b.n	8001cbc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b60:	4b4c      	ldr	r3, [pc, #304]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a4b      	ldr	r2, [pc, #300]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001b66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b6a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b6c:	f7ff f93e 	bl	8000dec <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b74:	f7ff f93a 	bl	8000dec <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e09a      	b.n	8001cbc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b86:	4b43      	ldr	r3, [pc, #268]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b92:	4b40      	ldr	r3, [pc, #256]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	4b40      	ldr	r3, [pc, #256]	@ (8001c98 <HAL_RCC_OscConfig+0x784>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ba2:	3a01      	subs	r2, #1
 8001ba4:	0112      	lsls	r2, r2, #4
 8001ba6:	4311      	orrs	r1, r2
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001bac:	0212      	lsls	r2, r2, #8
 8001bae:	4311      	orrs	r1, r2
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001bb4:	0852      	lsrs	r2, r2, #1
 8001bb6:	3a01      	subs	r2, #1
 8001bb8:	0552      	lsls	r2, r2, #21
 8001bba:	4311      	orrs	r1, r2
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001bc0:	0852      	lsrs	r2, r2, #1
 8001bc2:	3a01      	subs	r2, #1
 8001bc4:	0652      	lsls	r2, r2, #25
 8001bc6:	4311      	orrs	r1, r2
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001bcc:	0912      	lsrs	r2, r2, #4
 8001bce:	0452      	lsls	r2, r2, #17
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	4930      	ldr	r1, [pc, #192]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bd8:	4b2e      	ldr	r3, [pc, #184]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a2d      	ldr	r2, [pc, #180]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001bde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001be2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001be4:	4b2b      	ldr	r3, [pc, #172]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	4a2a      	ldr	r2, [pc, #168]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001bea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bf0:	f7ff f8fc 	bl	8000dec <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf8:	f7ff f8f8 	bl	8000dec <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e058      	b.n	8001cbc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0a:	4b22      	ldr	r3, [pc, #136]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0f0      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c16:	e050      	b.n	8001cba <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e04f      	b.n	8001cbc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d148      	bne.n	8001cba <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c28:	4b1a      	ldr	r3, [pc, #104]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a19      	ldr	r2, [pc, #100]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001c2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c34:	4b17      	ldr	r3, [pc, #92]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	4a16      	ldr	r2, [pc, #88]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001c3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c40:	f7ff f8d4 	bl	8000dec <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c48:	f7ff f8d0 	bl	8000dec <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e030      	b.n	8001cbc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCC_OscConfig+0x734>
 8001c66:	e028      	b.n	8001cba <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	2b0c      	cmp	r3, #12
 8001c6c:	d023      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6e:	4b09      	ldr	r3, [pc, #36]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a08      	ldr	r2, [pc, #32]	@ (8001c94 <HAL_RCC_OscConfig+0x780>)
 8001c74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7a:	f7ff f8b7 	bl	8000dec <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c80:	e00c      	b.n	8001c9c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c82:	f7ff f8b3 	bl	8000dec <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d905      	bls.n	8001c9c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e013      	b.n	8001cbc <HAL_RCC_OscConfig+0x7a8>
 8001c94:	40021000 	.word	0x40021000
 8001c98:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c9c:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <HAL_RCC_OscConfig+0x7b0>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1ec      	bne.n	8001c82 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ca8:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <HAL_RCC_OscConfig+0x7b0>)
 8001caa:	68da      	ldr	r2, [r3, #12]
 8001cac:	4905      	ldr	r1, [pc, #20]	@ (8001cc4 <HAL_RCC_OscConfig+0x7b0>)
 8001cae:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <HAL_RCC_OscConfig+0x7b4>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60cb      	str	r3, [r1, #12]
 8001cb4:	e001      	b.n	8001cba <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3720      	adds	r7, #32
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	feeefffc 	.word	0xfeeefffc

08001ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e0e7      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b75      	ldr	r3, [pc, #468]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1ec>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d910      	bls.n	8001d10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	4b72      	ldr	r3, [pc, #456]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1ec>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f023 0207 	bic.w	r2, r3, #7
 8001cf6:	4970      	ldr	r1, [pc, #448]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1ec>)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfe:	4b6e      	ldr	r3, [pc, #440]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e0cf      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d010      	beq.n	8001d3e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	4b66      	ldr	r3, [pc, #408]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f0>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d908      	bls.n	8001d3e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d2c:	4b63      	ldr	r3, [pc, #396]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f0>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	4960      	ldr	r1, [pc, #384]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f0>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d04c      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d107      	bne.n	8001d62 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d52:	4b5a      	ldr	r3, [pc, #360]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d121      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e0a6      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d107      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d6a:	4b54      	ldr	r3, [pc, #336]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d115      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e09a      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d107      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d82:	4b4e      	ldr	r3, [pc, #312]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f0>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d109      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e08e      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d92:	4b4a      	ldr	r3, [pc, #296]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e086      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001da2:	4b46      	ldr	r3, [pc, #280]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f0>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f023 0203 	bic.w	r2, r3, #3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	4943      	ldr	r1, [pc, #268]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f0>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001db4:	f7ff f81a 	bl	8000dec <HAL_GetTick>
 8001db8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dba:	e00a      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dbc:	f7ff f816 	bl	8000dec <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e06e      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd2:	4b3a      	ldr	r3, [pc, #232]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f0>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 020c 	and.w	r2, r3, #12
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d1eb      	bne.n	8001dbc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d010      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	4b31      	ldr	r3, [pc, #196]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f0>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d208      	bcs.n	8001e12 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e00:	4b2e      	ldr	r3, [pc, #184]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f0>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	492b      	ldr	r1, [pc, #172]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f0>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e12:	4b29      	ldr	r3, [pc, #164]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d210      	bcs.n	8001e42 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e20:	4b25      	ldr	r3, [pc, #148]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f023 0207 	bic.w	r2, r3, #7
 8001e28:	4923      	ldr	r1, [pc, #140]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e30:	4b21      	ldr	r3, [pc, #132]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d001      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e036      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0304 	and.w	r3, r3, #4
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d008      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f0>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	4918      	ldr	r1, [pc, #96]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f0>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d009      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e6c:	4b13      	ldr	r3, [pc, #76]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f0>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4910      	ldr	r1, [pc, #64]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f0>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e80:	f000 f824 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8001e84:	4602      	mov	r2, r0
 8001e86:	4b0d      	ldr	r3, [pc, #52]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f0>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	091b      	lsrs	r3, r3, #4
 8001e8c:	f003 030f 	and.w	r3, r3, #15
 8001e90:	490b      	ldr	r1, [pc, #44]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1f4>)
 8001e92:	5ccb      	ldrb	r3, [r1, r3]
 8001e94:	f003 031f 	and.w	r3, r3, #31
 8001e98:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9c:	4a09      	ldr	r2, [pc, #36]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ea0:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1fc>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fd5b 	bl	8000960 <HAL_InitTick>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	72fb      	strb	r3, [r7, #11]

  return status;
 8001eae:	7afb      	ldrb	r3, [r7, #11]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40022000 	.word	0x40022000
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	08008228 	.word	0x08008228
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	20000004 	.word	0x20000004

08001ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b089      	sub	sp, #36	@ 0x24
 8001ed0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eda:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ee4:	4b3b      	ldr	r3, [pc, #236]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <HAL_RCC_GetSysClockFreq+0x34>
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	2b0c      	cmp	r3, #12
 8001ef8:	d121      	bne.n	8001f3e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d11e      	bne.n	8001f3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f00:	4b34      	ldr	r3, [pc, #208]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d107      	bne.n	8001f1c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f0c:	4b31      	ldr	r3, [pc, #196]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f12:	0a1b      	lsrs	r3, r3, #8
 8001f14:	f003 030f 	and.w	r3, r3, #15
 8001f18:	61fb      	str	r3, [r7, #28]
 8001f1a:	e005      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f28:	4a2b      	ldr	r2, [pc, #172]	@ (8001fd8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f30:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10d      	bne.n	8001f54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f3c:	e00a      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d102      	bne.n	8001f4a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f44:	4b25      	ldr	r3, [pc, #148]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x110>)
 8001f46:	61bb      	str	r3, [r7, #24]
 8001f48:	e004      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d101      	bne.n	8001f54 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f50:	4b23      	ldr	r3, [pc, #140]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f52:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	2b0c      	cmp	r3, #12
 8001f58:	d134      	bne.n	8001fc4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d003      	beq.n	8001f72 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d003      	beq.n	8001f78 <HAL_RCC_GetSysClockFreq+0xac>
 8001f70:	e005      	b.n	8001f7e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f72:	4b1a      	ldr	r3, [pc, #104]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x110>)
 8001f74:	617b      	str	r3, [r7, #20]
      break;
 8001f76:	e005      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f78:	4b19      	ldr	r3, [pc, #100]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f7a:	617b      	str	r3, [r7, #20]
      break;
 8001f7c:	e002      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	617b      	str	r3, [r7, #20]
      break;
 8001f82:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f84:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	091b      	lsrs	r3, r3, #4
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	3301      	adds	r3, #1
 8001f90:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f92:	4b10      	ldr	r3, [pc, #64]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	0a1b      	lsrs	r3, r3, #8
 8001f98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	fb03 f202 	mul.w	r2, r3, r2
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001faa:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	0e5b      	lsrs	r3, r3, #25
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fc4:	69bb      	ldr	r3, [r7, #24]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3724      	adds	r7, #36	@ 0x24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	08008240 	.word	0x08008240
 8001fdc:	00f42400 	.word	0x00f42400
 8001fe0:	007a1200 	.word	0x007a1200

08001fe4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe8:	4b03      	ldr	r3, [pc, #12]	@ (8001ff8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fea:	681b      	ldr	r3, [r3, #0]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20000000 	.word	0x20000000

08001ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002000:	f7ff fff0 	bl	8001fe4 <HAL_RCC_GetHCLKFreq>
 8002004:	4602      	mov	r2, r0
 8002006:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	0a1b      	lsrs	r3, r3, #8
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	4904      	ldr	r1, [pc, #16]	@ (8002024 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002012:	5ccb      	ldrb	r3, [r1, r3]
 8002014:	f003 031f 	and.w	r3, r3, #31
 8002018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800201c:	4618      	mov	r0, r3
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40021000 	.word	0x40021000
 8002024:	08008238 	.word	0x08008238

08002028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800202c:	f7ff ffda 	bl	8001fe4 <HAL_RCC_GetHCLKFreq>
 8002030:	4602      	mov	r2, r0
 8002032:	4b06      	ldr	r3, [pc, #24]	@ (800204c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	0adb      	lsrs	r3, r3, #11
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	4904      	ldr	r1, [pc, #16]	@ (8002050 <HAL_RCC_GetPCLK2Freq+0x28>)
 800203e:	5ccb      	ldrb	r3, [r1, r3]
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002048:	4618      	mov	r0, r3
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40021000 	.word	0x40021000
 8002050:	08008238 	.word	0x08008238

08002054 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	220f      	movs	r2, #15
 8002062:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002064:	4b12      	ldr	r3, [pc, #72]	@ (80020b0 <HAL_RCC_GetClockConfig+0x5c>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 0203 	and.w	r2, r3, #3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002070:	4b0f      	ldr	r3, [pc, #60]	@ (80020b0 <HAL_RCC_GetClockConfig+0x5c>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800207c:	4b0c      	ldr	r3, [pc, #48]	@ (80020b0 <HAL_RCC_GetClockConfig+0x5c>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002088:	4b09      	ldr	r3, [pc, #36]	@ (80020b0 <HAL_RCC_GetClockConfig+0x5c>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	08db      	lsrs	r3, r3, #3
 800208e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002096:	4b07      	ldr	r3, [pc, #28]	@ (80020b4 <HAL_RCC_GetClockConfig+0x60>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0207 	and.w	r2, r3, #7
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	601a      	str	r2, [r3, #0]
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40022000 	.word	0x40022000

080020b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020c0:	2300      	movs	r3, #0
 80020c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020d0:	f7ff f9bc 	bl	800144c <HAL_PWREx_GetVoltageRange>
 80020d4:	6178      	str	r0, [r7, #20]
 80020d6:	e014      	b.n	8002102 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020d8:	4b25      	ldr	r3, [pc, #148]	@ (8002170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020dc:	4a24      	ldr	r2, [pc, #144]	@ (8002170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80020e4:	4b22      	ldr	r3, [pc, #136]	@ (8002170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020f0:	f7ff f9ac 	bl	800144c <HAL_PWREx_GetVoltageRange>
 80020f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002100:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002108:	d10b      	bne.n	8002122 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b80      	cmp	r3, #128	@ 0x80
 800210e:	d919      	bls.n	8002144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2ba0      	cmp	r3, #160	@ 0xa0
 8002114:	d902      	bls.n	800211c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002116:	2302      	movs	r3, #2
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	e013      	b.n	8002144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800211c:	2301      	movs	r3, #1
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	e010      	b.n	8002144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b80      	cmp	r3, #128	@ 0x80
 8002126:	d902      	bls.n	800212e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002128:	2303      	movs	r3, #3
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	e00a      	b.n	8002144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b80      	cmp	r3, #128	@ 0x80
 8002132:	d102      	bne.n	800213a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002134:	2302      	movs	r3, #2
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	e004      	b.n	8002144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b70      	cmp	r3, #112	@ 0x70
 800213e:	d101      	bne.n	8002144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002140:	2301      	movs	r3, #1
 8002142:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002144:	4b0b      	ldr	r3, [pc, #44]	@ (8002174 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f023 0207 	bic.w	r2, r3, #7
 800214c:	4909      	ldr	r1, [pc, #36]	@ (8002174 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002154:	4b07      	ldr	r3, [pc, #28]	@ (8002174 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	429a      	cmp	r2, r3
 8002160:	d001      	beq.n	8002166 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40021000 	.word	0x40021000
 8002174:	40022000 	.word	0x40022000

08002178 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002180:	2300      	movs	r3, #0
 8002182:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002184:	2300      	movs	r3, #0
 8002186:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002190:	2b00      	cmp	r3, #0
 8002192:	d041      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002198:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800219c:	d02a      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800219e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80021a2:	d824      	bhi.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80021a8:	d008      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80021ae:	d81e      	bhi.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00a      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80021b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021b8:	d010      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021ba:	e018      	b.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021bc:	4b86      	ldr	r3, [pc, #536]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	4a85      	ldr	r2, [pc, #532]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021c6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021c8:	e015      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3304      	adds	r3, #4
 80021ce:	2100      	movs	r1, #0
 80021d0:	4618      	mov	r0, r3
 80021d2:	f000 fabb 	bl	800274c <RCCEx_PLLSAI1_Config>
 80021d6:	4603      	mov	r3, r0
 80021d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021da:	e00c      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3320      	adds	r3, #32
 80021e0:	2100      	movs	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 fba6 	bl	8002934 <RCCEx_PLLSAI2_Config>
 80021e8:	4603      	mov	r3, r0
 80021ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021ec:	e003      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	74fb      	strb	r3, [r7, #19]
      break;
 80021f2:	e000      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80021f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021f6:	7cfb      	ldrb	r3, [r7, #19]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10b      	bne.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021fc:	4b76      	ldr	r3, [pc, #472]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002202:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800220a:	4973      	ldr	r1, [pc, #460]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220c:	4313      	orrs	r3, r2
 800220e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002212:	e001      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002214:	7cfb      	ldrb	r3, [r7, #19]
 8002216:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d041      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002228:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800222c:	d02a      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800222e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002232:	d824      	bhi.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002234:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002238:	d008      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800223a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800223e:	d81e      	bhi.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00a      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002244:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002248:	d010      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800224a:	e018      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800224c:	4b62      	ldr	r3, [pc, #392]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a61      	ldr	r2, [pc, #388]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002252:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002256:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002258:	e015      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3304      	adds	r3, #4
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f000 fa73 	bl	800274c <RCCEx_PLLSAI1_Config>
 8002266:	4603      	mov	r3, r0
 8002268:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800226a:	e00c      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3320      	adds	r3, #32
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f000 fb5e 	bl	8002934 <RCCEx_PLLSAI2_Config>
 8002278:	4603      	mov	r3, r0
 800227a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800227c:	e003      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	74fb      	strb	r3, [r7, #19]
      break;
 8002282:	e000      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002284:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002286:	7cfb      	ldrb	r3, [r7, #19]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10b      	bne.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800228c:	4b52      	ldr	r3, [pc, #328]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002292:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800229a:	494f      	ldr	r1, [pc, #316]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80022a2:	e001      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022a4:	7cfb      	ldrb	r3, [r7, #19]
 80022a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 80a0 	beq.w	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022b6:	2300      	movs	r3, #0
 80022b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022ba:	4b47      	ldr	r3, [pc, #284]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x152>
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80022ca:	2300      	movs	r3, #0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00d      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d0:	4b41      	ldr	r3, [pc, #260]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d4:	4a40      	ldr	r2, [pc, #256]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022da:	6593      	str	r3, [r2, #88]	@ 0x58
 80022dc:	4b3e      	ldr	r3, [pc, #248]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e8:	2301      	movs	r3, #1
 80022ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022ec:	4b3b      	ldr	r3, [pc, #236]	@ (80023dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a3a      	ldr	r2, [pc, #232]	@ (80023dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022f8:	f7fe fd78 	bl	8000dec <HAL_GetTick>
 80022fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022fe:	e009      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002300:	f7fe fd74 	bl	8000dec <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d902      	bls.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	74fb      	strb	r3, [r7, #19]
        break;
 8002312:	e005      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002314:	4b31      	ldr	r3, [pc, #196]	@ (80023dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0ef      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d15c      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002326:	4b2c      	ldr	r3, [pc, #176]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800232c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002330:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d01f      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	429a      	cmp	r2, r3
 8002342:	d019      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002344:	4b24      	ldr	r3, [pc, #144]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800234a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800234e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002350:	4b21      	ldr	r3, [pc, #132]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002356:	4a20      	ldr	r2, [pc, #128]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800235c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002360:	4b1d      	ldr	r3, [pc, #116]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002366:	4a1c      	ldr	r2, [pc, #112]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002368:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800236c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002370:	4a19      	ldr	r2, [pc, #100]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d016      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002382:	f7fe fd33 	bl	8000dec <HAL_GetTick>
 8002386:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002388:	e00b      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238a:	f7fe fd2f 	bl	8000dec <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002398:	4293      	cmp	r3, r2
 800239a:	d902      	bls.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	74fb      	strb	r3, [r7, #19]
            break;
 80023a0:	e006      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a2:	4b0d      	ldr	r3, [pc, #52]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0ec      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80023b0:	7cfb      	ldrb	r3, [r7, #19]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023b6:	4b08      	ldr	r3, [pc, #32]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023c6:	4904      	ldr	r1, [pc, #16]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80023ce:	e009      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023d0:	7cfb      	ldrb	r3, [r7, #19]
 80023d2:	74bb      	strb	r3, [r7, #18]
 80023d4:	e006      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023e0:	7cfb      	ldrb	r3, [r7, #19]
 80023e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023e4:	7c7b      	ldrb	r3, [r7, #17]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d105      	bne.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ea:	4b9e      	ldr	r3, [pc, #632]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ee:	4a9d      	ldr	r2, [pc, #628]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023f4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00a      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002402:	4b98      	ldr	r3, [pc, #608]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002408:	f023 0203 	bic.w	r2, r3, #3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002410:	4994      	ldr	r1, [pc, #592]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00a      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002424:	4b8f      	ldr	r3, [pc, #572]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800242a:	f023 020c 	bic.w	r2, r3, #12
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002432:	498c      	ldr	r1, [pc, #560]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0304 	and.w	r3, r3, #4
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002446:	4b87      	ldr	r3, [pc, #540]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800244c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002454:	4983      	ldr	r1, [pc, #524]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002456:	4313      	orrs	r3, r2
 8002458:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00a      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002468:	4b7e      	ldr	r3, [pc, #504]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800246e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002476:	497b      	ldr	r1, [pc, #492]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0310 	and.w	r3, r3, #16
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00a      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800248a:	4b76      	ldr	r3, [pc, #472]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002490:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002498:	4972      	ldr	r1, [pc, #456]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0320 	and.w	r3, r3, #32
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00a      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024ac:	4b6d      	ldr	r3, [pc, #436]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ba:	496a      	ldr	r1, [pc, #424]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024ce:	4b65      	ldr	r3, [pc, #404]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024dc:	4961      	ldr	r1, [pc, #388]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00a      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024f0:	4b5c      	ldr	r3, [pc, #368]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024fe:	4959      	ldr	r1, [pc, #356]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00a      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002512:	4b54      	ldr	r3, [pc, #336]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002518:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002520:	4950      	ldr	r1, [pc, #320]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002522:	4313      	orrs	r3, r2
 8002524:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00a      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002534:	4b4b      	ldr	r3, [pc, #300]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800253a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002542:	4948      	ldr	r1, [pc, #288]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002544:	4313      	orrs	r3, r2
 8002546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00a      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002556:	4b43      	ldr	r3, [pc, #268]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800255c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002564:	493f      	ldr	r1, [pc, #252]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d028      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002578:	4b3a      	ldr	r3, [pc, #232]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002586:	4937      	ldr	r1, [pc, #220]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002592:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002596:	d106      	bne.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002598:	4b32      	ldr	r3, [pc, #200]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4a31      	ldr	r2, [pc, #196]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025a2:	60d3      	str	r3, [r2, #12]
 80025a4:	e011      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025ae:	d10c      	bne.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3304      	adds	r3, #4
 80025b4:	2101      	movs	r1, #1
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 f8c8 	bl	800274c <RCCEx_PLLSAI1_Config>
 80025bc:	4603      	mov	r3, r0
 80025be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025c0:	7cfb      	ldrb	r3, [r7, #19]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80025c6:	7cfb      	ldrb	r3, [r7, #19]
 80025c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d028      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025d6:	4b23      	ldr	r3, [pc, #140]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025dc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e4:	491f      	ldr	r1, [pc, #124]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025f4:	d106      	bne.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002600:	60d3      	str	r3, [r2, #12]
 8002602:	e011      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002608:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800260c:	d10c      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3304      	adds	r3, #4
 8002612:	2101      	movs	r1, #1
 8002614:	4618      	mov	r0, r3
 8002616:	f000 f899 	bl	800274c <RCCEx_PLLSAI1_Config>
 800261a:	4603      	mov	r3, r0
 800261c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800261e:	7cfb      	ldrb	r3, [r7, #19]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002624:	7cfb      	ldrb	r3, [r7, #19]
 8002626:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d02b      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002634:	4b0b      	ldr	r3, [pc, #44]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800263a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002642:	4908      	ldr	r1, [pc, #32]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800264e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002652:	d109      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002654:	4b03      	ldr	r3, [pc, #12]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4a02      	ldr	r2, [pc, #8]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800265e:	60d3      	str	r3, [r2, #12]
 8002660:	e014      	b.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800266c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002670:	d10c      	bne.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3304      	adds	r3, #4
 8002676:	2101      	movs	r1, #1
 8002678:	4618      	mov	r0, r3
 800267a:	f000 f867 	bl	800274c <RCCEx_PLLSAI1_Config>
 800267e:	4603      	mov	r3, r0
 8002680:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002682:	7cfb      	ldrb	r3, [r7, #19]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002688:	7cfb      	ldrb	r3, [r7, #19]
 800268a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d02f      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002698:	4b2b      	ldr	r3, [pc, #172]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026a6:	4928      	ldr	r1, [pc, #160]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026b6:	d10d      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3304      	adds	r3, #4
 80026bc:	2102      	movs	r1, #2
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f844 	bl	800274c <RCCEx_PLLSAI1_Config>
 80026c4:	4603      	mov	r3, r0
 80026c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026c8:	7cfb      	ldrb	r3, [r7, #19]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d014      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026ce:	7cfb      	ldrb	r3, [r7, #19]
 80026d0:	74bb      	strb	r3, [r7, #18]
 80026d2:	e011      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3320      	adds	r3, #32
 80026e2:	2102      	movs	r1, #2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 f925 	bl	8002934 <RCCEx_PLLSAI2_Config>
 80026ea:	4603      	mov	r3, r0
 80026ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026ee:	7cfb      	ldrb	r3, [r7, #19]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026f4:	7cfb      	ldrb	r3, [r7, #19]
 80026f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00a      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002704:	4b10      	ldr	r3, [pc, #64]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800270a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002712:	490d      	ldr	r1, [pc, #52]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00b      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002726:	4b08      	ldr	r3, [pc, #32]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800272c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002736:	4904      	ldr	r1, [pc, #16]	@ (8002748 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800273e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40021000 	.word	0x40021000

0800274c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800275a:	4b75      	ldr	r3, [pc, #468]	@ (8002930 <RCCEx_PLLSAI1_Config+0x1e4>)
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d018      	beq.n	8002798 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002766:	4b72      	ldr	r3, [pc, #456]	@ (8002930 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f003 0203 	and.w	r2, r3, #3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d10d      	bne.n	8002792 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
       ||
 800277a:	2b00      	cmp	r3, #0
 800277c:	d009      	beq.n	8002792 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800277e:	4b6c      	ldr	r3, [pc, #432]	@ (8002930 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	091b      	lsrs	r3, r3, #4
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
       ||
 800278e:	429a      	cmp	r2, r3
 8002790:	d047      	beq.n	8002822 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	73fb      	strb	r3, [r7, #15]
 8002796:	e044      	b.n	8002822 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b03      	cmp	r3, #3
 800279e:	d018      	beq.n	80027d2 <RCCEx_PLLSAI1_Config+0x86>
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d825      	bhi.n	80027f0 <RCCEx_PLLSAI1_Config+0xa4>
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d002      	beq.n	80027ae <RCCEx_PLLSAI1_Config+0x62>
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d009      	beq.n	80027c0 <RCCEx_PLLSAI1_Config+0x74>
 80027ac:	e020      	b.n	80027f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027ae:	4b60      	ldr	r3, [pc, #384]	@ (8002930 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d11d      	bne.n	80027f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027be:	e01a      	b.n	80027f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027c0:	4b5b      	ldr	r3, [pc, #364]	@ (8002930 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d116      	bne.n	80027fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d0:	e013      	b.n	80027fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027d2:	4b57      	ldr	r3, [pc, #348]	@ (8002930 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10f      	bne.n	80027fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027de:	4b54      	ldr	r3, [pc, #336]	@ (8002930 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d109      	bne.n	80027fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027ee:	e006      	b.n	80027fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	73fb      	strb	r3, [r7, #15]
      break;
 80027f4:	e004      	b.n	8002800 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027f6:	bf00      	nop
 80027f8:	e002      	b.n	8002800 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027fa:	bf00      	nop
 80027fc:	e000      	b.n	8002800 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002800:	7bfb      	ldrb	r3, [r7, #15]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10d      	bne.n	8002822 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002806:	4b4a      	ldr	r3, [pc, #296]	@ (8002930 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6819      	ldr	r1, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	3b01      	subs	r3, #1
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	430b      	orrs	r3, r1
 800281c:	4944      	ldr	r1, [pc, #272]	@ (8002930 <RCCEx_PLLSAI1_Config+0x1e4>)
 800281e:	4313      	orrs	r3, r2
 8002820:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d17d      	bne.n	8002924 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002828:	4b41      	ldr	r3, [pc, #260]	@ (8002930 <RCCEx_PLLSAI1_Config+0x1e4>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a40      	ldr	r2, [pc, #256]	@ (8002930 <RCCEx_PLLSAI1_Config+0x1e4>)
 800282e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002832:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002834:	f7fe fada 	bl	8000dec <HAL_GetTick>
 8002838:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800283a:	e009      	b.n	8002850 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800283c:	f7fe fad6 	bl	8000dec <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d902      	bls.n	8002850 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	73fb      	strb	r3, [r7, #15]
        break;
 800284e:	e005      	b.n	800285c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002850:	4b37      	ldr	r3, [pc, #220]	@ (8002930 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1ef      	bne.n	800283c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d160      	bne.n	8002924 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d111      	bne.n	800288c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002868:	4b31      	ldr	r3, [pc, #196]	@ (8002930 <RCCEx_PLLSAI1_Config+0x1e4>)
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002870:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6892      	ldr	r2, [r2, #8]
 8002878:	0211      	lsls	r1, r2, #8
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	68d2      	ldr	r2, [r2, #12]
 800287e:	0912      	lsrs	r2, r2, #4
 8002880:	0452      	lsls	r2, r2, #17
 8002882:	430a      	orrs	r2, r1
 8002884:	492a      	ldr	r1, [pc, #168]	@ (8002930 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002886:	4313      	orrs	r3, r2
 8002888:	610b      	str	r3, [r1, #16]
 800288a:	e027      	b.n	80028dc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d112      	bne.n	80028b8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002892:	4b27      	ldr	r3, [pc, #156]	@ (8002930 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800289a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6892      	ldr	r2, [r2, #8]
 80028a2:	0211      	lsls	r1, r2, #8
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6912      	ldr	r2, [r2, #16]
 80028a8:	0852      	lsrs	r2, r2, #1
 80028aa:	3a01      	subs	r2, #1
 80028ac:	0552      	lsls	r2, r2, #21
 80028ae:	430a      	orrs	r2, r1
 80028b0:	491f      	ldr	r1, [pc, #124]	@ (8002930 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	610b      	str	r3, [r1, #16]
 80028b6:	e011      	b.n	80028dc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002930 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80028c0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6892      	ldr	r2, [r2, #8]
 80028c8:	0211      	lsls	r1, r2, #8
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6952      	ldr	r2, [r2, #20]
 80028ce:	0852      	lsrs	r2, r2, #1
 80028d0:	3a01      	subs	r2, #1
 80028d2:	0652      	lsls	r2, r2, #25
 80028d4:	430a      	orrs	r2, r1
 80028d6:	4916      	ldr	r1, [pc, #88]	@ (8002930 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028dc:	4b14      	ldr	r3, [pc, #80]	@ (8002930 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a13      	ldr	r2, [pc, #76]	@ (8002930 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80028e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e8:	f7fe fa80 	bl	8000dec <HAL_GetTick>
 80028ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028ee:	e009      	b.n	8002904 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028f0:	f7fe fa7c 	bl	8000dec <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d902      	bls.n	8002904 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	73fb      	strb	r3, [r7, #15]
          break;
 8002902:	e005      	b.n	8002910 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002904:	4b0a      	ldr	r3, [pc, #40]	@ (8002930 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0ef      	beq.n	80028f0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002916:	4b06      	ldr	r3, [pc, #24]	@ (8002930 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002918:	691a      	ldr	r2, [r3, #16]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	4904      	ldr	r1, [pc, #16]	@ (8002930 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002920:	4313      	orrs	r3, r2
 8002922:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002924:	7bfb      	ldrb	r3, [r7, #15]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40021000 	.word	0x40021000

08002934 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002942:	4b6a      	ldr	r3, [pc, #424]	@ (8002aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d018      	beq.n	8002980 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800294e:	4b67      	ldr	r3, [pc, #412]	@ (8002aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f003 0203 	and.w	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d10d      	bne.n	800297a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
       ||
 8002962:	2b00      	cmp	r3, #0
 8002964:	d009      	beq.n	800297a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002966:	4b61      	ldr	r3, [pc, #388]	@ (8002aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	091b      	lsrs	r3, r3, #4
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
       ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d047      	beq.n	8002a0a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	73fb      	strb	r3, [r7, #15]
 800297e:	e044      	b.n	8002a0a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d018      	beq.n	80029ba <RCCEx_PLLSAI2_Config+0x86>
 8002988:	2b03      	cmp	r3, #3
 800298a:	d825      	bhi.n	80029d8 <RCCEx_PLLSAI2_Config+0xa4>
 800298c:	2b01      	cmp	r3, #1
 800298e:	d002      	beq.n	8002996 <RCCEx_PLLSAI2_Config+0x62>
 8002990:	2b02      	cmp	r3, #2
 8002992:	d009      	beq.n	80029a8 <RCCEx_PLLSAI2_Config+0x74>
 8002994:	e020      	b.n	80029d8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002996:	4b55      	ldr	r3, [pc, #340]	@ (8002aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d11d      	bne.n	80029de <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a6:	e01a      	b.n	80029de <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029a8:	4b50      	ldr	r3, [pc, #320]	@ (8002aec <RCCEx_PLLSAI2_Config+0x1b8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d116      	bne.n	80029e2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029b8:	e013      	b.n	80029e2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029ba:	4b4c      	ldr	r3, [pc, #304]	@ (8002aec <RCCEx_PLLSAI2_Config+0x1b8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10f      	bne.n	80029e6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029c6:	4b49      	ldr	r3, [pc, #292]	@ (8002aec <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d109      	bne.n	80029e6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029d6:	e006      	b.n	80029e6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	73fb      	strb	r3, [r7, #15]
      break;
 80029dc:	e004      	b.n	80029e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029de:	bf00      	nop
 80029e0:	e002      	b.n	80029e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029e2:	bf00      	nop
 80029e4:	e000      	b.n	80029e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10d      	bne.n	8002a0a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029ee:	4b3f      	ldr	r3, [pc, #252]	@ (8002aec <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6819      	ldr	r1, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	430b      	orrs	r3, r1
 8002a04:	4939      	ldr	r1, [pc, #228]	@ (8002aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d167      	bne.n	8002ae0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a10:	4b36      	ldr	r3, [pc, #216]	@ (8002aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a35      	ldr	r2, [pc, #212]	@ (8002aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a1c:	f7fe f9e6 	bl	8000dec <HAL_GetTick>
 8002a20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a22:	e009      	b.n	8002a38 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a24:	f7fe f9e2 	bl	8000dec <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d902      	bls.n	8002a38 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	73fb      	strb	r3, [r7, #15]
        break;
 8002a36:	e005      	b.n	8002a44 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a38:	4b2c      	ldr	r3, [pc, #176]	@ (8002aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1ef      	bne.n	8002a24 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d14a      	bne.n	8002ae0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d111      	bne.n	8002a74 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a50:	4b26      	ldr	r3, [pc, #152]	@ (8002aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6892      	ldr	r2, [r2, #8]
 8002a60:	0211      	lsls	r1, r2, #8
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	68d2      	ldr	r2, [r2, #12]
 8002a66:	0912      	lsrs	r2, r2, #4
 8002a68:	0452      	lsls	r2, r2, #17
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	491f      	ldr	r1, [pc, #124]	@ (8002aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	614b      	str	r3, [r1, #20]
 8002a72:	e011      	b.n	8002a98 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a74:	4b1d      	ldr	r3, [pc, #116]	@ (8002aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002a7c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6892      	ldr	r2, [r2, #8]
 8002a84:	0211      	lsls	r1, r2, #8
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6912      	ldr	r2, [r2, #16]
 8002a8a:	0852      	lsrs	r2, r2, #1
 8002a8c:	3a01      	subs	r2, #1
 8002a8e:	0652      	lsls	r2, r2, #25
 8002a90:	430a      	orrs	r2, r1
 8002a92:	4916      	ldr	r1, [pc, #88]	@ (8002aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a98:	4b14      	ldr	r3, [pc, #80]	@ (8002aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a13      	ldr	r2, [pc, #76]	@ (8002aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aa2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa4:	f7fe f9a2 	bl	8000dec <HAL_GetTick>
 8002aa8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002aaa:	e009      	b.n	8002ac0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002aac:	f7fe f99e 	bl	8000dec <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d902      	bls.n	8002ac0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	73fb      	strb	r3, [r7, #15]
          break;
 8002abe:	e005      	b.n	8002acc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8002aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0ef      	beq.n	8002aac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d106      	bne.n	8002ae0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ad2:	4b06      	ldr	r3, [pc, #24]	@ (8002aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad4:	695a      	ldr	r2, [r3, #20]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	4904      	ldr	r1, [pc, #16]	@ (8002aec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000

08002af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e049      	b.n	8002b96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f841 	bl	8002b9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4610      	mov	r0, r2
 8002b30:	f000 f9e0 	bl	8002ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d001      	beq.n	8002bcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e04f      	b.n	8002c6c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0201 	orr.w	r2, r2, #1
 8002be2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a23      	ldr	r2, [pc, #140]	@ (8002c78 <HAL_TIM_Base_Start_IT+0xc4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d01d      	beq.n	8002c2a <HAL_TIM_Base_Start_IT+0x76>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf6:	d018      	beq.n	8002c2a <HAL_TIM_Base_Start_IT+0x76>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a1f      	ldr	r2, [pc, #124]	@ (8002c7c <HAL_TIM_Base_Start_IT+0xc8>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d013      	beq.n	8002c2a <HAL_TIM_Base_Start_IT+0x76>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a1e      	ldr	r2, [pc, #120]	@ (8002c80 <HAL_TIM_Base_Start_IT+0xcc>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d00e      	beq.n	8002c2a <HAL_TIM_Base_Start_IT+0x76>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1c      	ldr	r2, [pc, #112]	@ (8002c84 <HAL_TIM_Base_Start_IT+0xd0>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d009      	beq.n	8002c2a <HAL_TIM_Base_Start_IT+0x76>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a1b      	ldr	r2, [pc, #108]	@ (8002c88 <HAL_TIM_Base_Start_IT+0xd4>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d004      	beq.n	8002c2a <HAL_TIM_Base_Start_IT+0x76>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a19      	ldr	r2, [pc, #100]	@ (8002c8c <HAL_TIM_Base_Start_IT+0xd8>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d115      	bne.n	8002c56 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	4b17      	ldr	r3, [pc, #92]	@ (8002c90 <HAL_TIM_Base_Start_IT+0xdc>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2b06      	cmp	r3, #6
 8002c3a:	d015      	beq.n	8002c68 <HAL_TIM_Base_Start_IT+0xb4>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c42:	d011      	beq.n	8002c68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0201 	orr.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c54:	e008      	b.n	8002c68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 0201 	orr.w	r2, r2, #1
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	e000      	b.n	8002c6a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	40012c00 	.word	0x40012c00
 8002c7c:	40000400 	.word	0x40000400
 8002c80:	40000800 	.word	0x40000800
 8002c84:	40000c00 	.word	0x40000c00
 8002c88:	40013400 	.word	0x40013400
 8002c8c:	40014000 	.word	0x40014000
 8002c90:	00010007 	.word	0x00010007

08002c94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d020      	beq.n	8002cf8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d01b      	beq.n	8002cf8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f06f 0202 	mvn.w	r2, #2
 8002cc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f8e9 	bl	8002eb6 <HAL_TIM_IC_CaptureCallback>
 8002ce4:	e005      	b.n	8002cf2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f8db 	bl	8002ea2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f8ec 	bl	8002eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d020      	beq.n	8002d44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d01b      	beq.n	8002d44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f06f 0204 	mvn.w	r2, #4
 8002d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2202      	movs	r2, #2
 8002d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f8c3 	bl	8002eb6 <HAL_TIM_IC_CaptureCallback>
 8002d30:	e005      	b.n	8002d3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f8b5 	bl	8002ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f8c6 	bl	8002eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d020      	beq.n	8002d90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d01b      	beq.n	8002d90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f06f 0208 	mvn.w	r2, #8
 8002d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2204      	movs	r2, #4
 8002d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f89d 	bl	8002eb6 <HAL_TIM_IC_CaptureCallback>
 8002d7c:	e005      	b.n	8002d8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f88f 	bl	8002ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f8a0 	bl	8002eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d020      	beq.n	8002ddc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d01b      	beq.n	8002ddc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f06f 0210 	mvn.w	r2, #16
 8002dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2208      	movs	r2, #8
 8002db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f877 	bl	8002eb6 <HAL_TIM_IC_CaptureCallback>
 8002dc8:	e005      	b.n	8002dd6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f869 	bl	8002ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f87a 	bl	8002eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00c      	beq.n	8002e00 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d007      	beq.n	8002e00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0201 	mvn.w	r2, #1
 8002df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fd fd70 	bl	80008e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d104      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00c      	beq.n	8002e2e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d007      	beq.n	8002e2e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002e26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f913 	bl	8003054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00c      	beq.n	8002e52 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d007      	beq.n	8002e52 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f90b 	bl	8003068 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00c      	beq.n	8002e76 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d007      	beq.n	8002e76 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f834 	bl	8002ede <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f003 0320 	and.w	r3, r3, #32
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00c      	beq.n	8002e9a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d007      	beq.n	8002e9a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f06f 0220 	mvn.w	r2, #32
 8002e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f8d3 	bl	8003040 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e9a:	bf00      	nop
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
	...

08002ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a46      	ldr	r2, [pc, #280]	@ (8003020 <TIM_Base_SetConfig+0x12c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d013      	beq.n	8002f34 <TIM_Base_SetConfig+0x40>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f12:	d00f      	beq.n	8002f34 <TIM_Base_SetConfig+0x40>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a43      	ldr	r2, [pc, #268]	@ (8003024 <TIM_Base_SetConfig+0x130>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d00b      	beq.n	8002f34 <TIM_Base_SetConfig+0x40>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a42      	ldr	r2, [pc, #264]	@ (8003028 <TIM_Base_SetConfig+0x134>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d007      	beq.n	8002f34 <TIM_Base_SetConfig+0x40>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a41      	ldr	r2, [pc, #260]	@ (800302c <TIM_Base_SetConfig+0x138>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d003      	beq.n	8002f34 <TIM_Base_SetConfig+0x40>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a40      	ldr	r2, [pc, #256]	@ (8003030 <TIM_Base_SetConfig+0x13c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d108      	bne.n	8002f46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a35      	ldr	r2, [pc, #212]	@ (8003020 <TIM_Base_SetConfig+0x12c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d01f      	beq.n	8002f8e <TIM_Base_SetConfig+0x9a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f54:	d01b      	beq.n	8002f8e <TIM_Base_SetConfig+0x9a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a32      	ldr	r2, [pc, #200]	@ (8003024 <TIM_Base_SetConfig+0x130>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d017      	beq.n	8002f8e <TIM_Base_SetConfig+0x9a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a31      	ldr	r2, [pc, #196]	@ (8003028 <TIM_Base_SetConfig+0x134>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d013      	beq.n	8002f8e <TIM_Base_SetConfig+0x9a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a30      	ldr	r2, [pc, #192]	@ (800302c <TIM_Base_SetConfig+0x138>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00f      	beq.n	8002f8e <TIM_Base_SetConfig+0x9a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a2f      	ldr	r2, [pc, #188]	@ (8003030 <TIM_Base_SetConfig+0x13c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00b      	beq.n	8002f8e <TIM_Base_SetConfig+0x9a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a2e      	ldr	r2, [pc, #184]	@ (8003034 <TIM_Base_SetConfig+0x140>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d007      	beq.n	8002f8e <TIM_Base_SetConfig+0x9a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a2d      	ldr	r2, [pc, #180]	@ (8003038 <TIM_Base_SetConfig+0x144>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d003      	beq.n	8002f8e <TIM_Base_SetConfig+0x9a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a2c      	ldr	r2, [pc, #176]	@ (800303c <TIM_Base_SetConfig+0x148>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d108      	bne.n	8002fa0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a16      	ldr	r2, [pc, #88]	@ (8003020 <TIM_Base_SetConfig+0x12c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d00f      	beq.n	8002fec <TIM_Base_SetConfig+0xf8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a18      	ldr	r2, [pc, #96]	@ (8003030 <TIM_Base_SetConfig+0x13c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d00b      	beq.n	8002fec <TIM_Base_SetConfig+0xf8>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a17      	ldr	r2, [pc, #92]	@ (8003034 <TIM_Base_SetConfig+0x140>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d007      	beq.n	8002fec <TIM_Base_SetConfig+0xf8>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a16      	ldr	r2, [pc, #88]	@ (8003038 <TIM_Base_SetConfig+0x144>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d003      	beq.n	8002fec <TIM_Base_SetConfig+0xf8>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a15      	ldr	r2, [pc, #84]	@ (800303c <TIM_Base_SetConfig+0x148>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d103      	bne.n	8002ff4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b01      	cmp	r3, #1
 8003004:	d105      	bne.n	8003012 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f023 0201 	bic.w	r2, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	611a      	str	r2, [r3, #16]
  }
}
 8003012:	bf00      	nop
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40012c00 	.word	0x40012c00
 8003024:	40000400 	.word	0x40000400
 8003028:	40000800 	.word	0x40000800
 800302c:	40000c00 	.word	0x40000c00
 8003030:	40013400 	.word	0x40013400
 8003034:	40014000 	.word	0x40014000
 8003038:	40014400 	.word	0x40014400
 800303c:	40014800 	.word	0x40014800

08003040 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e040      	b.n	8003110 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fd fde2 	bl	8000c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2224      	movs	r2, #36	@ 0x24
 80030a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0201 	bic.w	r2, r2, #1
 80030b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 fedc 	bl	8003e80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fc21 	bl	8003910 <UART_SetConfig>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e01b      	b.n	8003110 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 ff5b 	bl	8003fc4 <UART_CheckIdleState>
 800310e:	4603      	mov	r3, r0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08a      	sub	sp, #40	@ 0x28
 800311c:	af02      	add	r7, sp, #8
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	4613      	mov	r3, r2
 8003126:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800312c:	2b20      	cmp	r3, #32
 800312e:	d177      	bne.n	8003220 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <HAL_UART_Transmit+0x24>
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e070      	b.n	8003222 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2221      	movs	r2, #33	@ 0x21
 800314c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800314e:	f7fd fe4d 	bl	8000dec <HAL_GetTick>
 8003152:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	88fa      	ldrh	r2, [r7, #6]
 8003158:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	88fa      	ldrh	r2, [r7, #6]
 8003160:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800316c:	d108      	bne.n	8003180 <HAL_UART_Transmit+0x68>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d104      	bne.n	8003180 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	61bb      	str	r3, [r7, #24]
 800317e:	e003      	b.n	8003188 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003184:	2300      	movs	r3, #0
 8003186:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003188:	e02f      	b.n	80031ea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2200      	movs	r2, #0
 8003192:	2180      	movs	r1, #128	@ 0x80
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 ffbd 	bl	8004114 <UART_WaitOnFlagUntilTimeout>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d004      	beq.n	80031aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e03b      	b.n	8003222 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10b      	bne.n	80031c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	881a      	ldrh	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031bc:	b292      	uxth	r2, r2
 80031be:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	3302      	adds	r3, #2
 80031c4:	61bb      	str	r3, [r7, #24]
 80031c6:	e007      	b.n	80031d8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	781a      	ldrb	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	3301      	adds	r3, #1
 80031d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1c9      	bne.n	800318a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2200      	movs	r2, #0
 80031fe:	2140      	movs	r1, #64	@ 0x40
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 ff87 	bl	8004114 <UART_WaitOnFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d004      	beq.n	8003216 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2220      	movs	r2, #32
 8003210:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e005      	b.n	8003222 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2220      	movs	r2, #32
 800321a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	e000      	b.n	8003222 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003220:	2302      	movs	r3, #2
  }
}
 8003222:	4618      	mov	r0, r3
 8003224:	3720      	adds	r7, #32
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08a      	sub	sp, #40	@ 0x28
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	4613      	mov	r3, r2
 8003238:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003240:	2b20      	cmp	r3, #32
 8003242:	d137      	bne.n	80032b4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <HAL_UART_Receive_IT+0x24>
 800324a:	88fb      	ldrh	r3, [r7, #6]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e030      	b.n	80032b6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a18      	ldr	r2, [pc, #96]	@ (80032c0 <HAL_UART_Receive_IT+0x94>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d01f      	beq.n	80032a4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d018      	beq.n	80032a4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	e853 3f00 	ldrex	r3, [r3]
 800327e:	613b      	str	r3, [r7, #16]
   return(result);
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003286:	627b      	str	r3, [r7, #36]	@ 0x24
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	461a      	mov	r2, r3
 800328e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003290:	623b      	str	r3, [r7, #32]
 8003292:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003294:	69f9      	ldr	r1, [r7, #28]
 8003296:	6a3a      	ldr	r2, [r7, #32]
 8003298:	e841 2300 	strex	r3, r2, [r1]
 800329c:	61bb      	str	r3, [r7, #24]
   return(result);
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1e6      	bne.n	8003272 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80032a4:	88fb      	ldrh	r3, [r7, #6]
 80032a6:	461a      	mov	r2, r3
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 ffa0 	bl	80041f0 <UART_Start_Receive_IT>
 80032b0:	4603      	mov	r3, r0
 80032b2:	e000      	b.n	80032b6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032b4:	2302      	movs	r3, #2
  }
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3728      	adds	r7, #40	@ 0x28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40008000 	.word	0x40008000

080032c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b0ba      	sub	sp, #232	@ 0xe8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80032ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80032ee:	f640 030f 	movw	r3, #2063	@ 0x80f
 80032f2:	4013      	ands	r3, r2
 80032f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80032f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d115      	bne.n	800332c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00f      	beq.n	800332c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800330c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b00      	cmp	r3, #0
 8003316:	d009      	beq.n	800332c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 82ca 	beq.w	80038b6 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	4798      	blx	r3
      }
      return;
 800332a:	e2c4      	b.n	80038b6 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800332c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 8117 	beq.w	8003564 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d106      	bne.n	8003350 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003342:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003346:	4b85      	ldr	r3, [pc, #532]	@ (800355c <HAL_UART_IRQHandler+0x298>)
 8003348:	4013      	ands	r3, r2
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 810a 	beq.w	8003564 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	d011      	beq.n	8003380 <HAL_UART_IRQHandler+0xbc>
 800335c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00b      	beq.n	8003380 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2201      	movs	r2, #1
 800336e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003376:	f043 0201 	orr.w	r2, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d011      	beq.n	80033b0 <HAL_UART_IRQHandler+0xec>
 800338c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00b      	beq.n	80033b0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2202      	movs	r2, #2
 800339e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033a6:	f043 0204 	orr.w	r2, r3, #4
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d011      	beq.n	80033e0 <HAL_UART_IRQHandler+0x11c>
 80033bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00b      	beq.n	80033e0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2204      	movs	r2, #4
 80033ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033d6:	f043 0202 	orr.w	r2, r3, #2
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80033e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033e4:	f003 0308 	and.w	r3, r3, #8
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d017      	beq.n	800341c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033f0:	f003 0320 	and.w	r3, r3, #32
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d105      	bne.n	8003404 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80033f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00b      	beq.n	800341c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2208      	movs	r2, #8
 800340a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003412:	f043 0208 	orr.w	r2, r3, #8
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800341c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003420:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003424:	2b00      	cmp	r3, #0
 8003426:	d012      	beq.n	800344e <HAL_UART_IRQHandler+0x18a>
 8003428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800342c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00c      	beq.n	800344e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800343c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003444:	f043 0220 	orr.w	r2, r3, #32
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 8230 	beq.w	80038ba <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800345a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800345e:	f003 0320 	and.w	r3, r3, #32
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00d      	beq.n	8003482 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b00      	cmp	r3, #0
 8003470:	d007      	beq.n	8003482 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003488:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003496:	2b40      	cmp	r3, #64	@ 0x40
 8003498:	d005      	beq.n	80034a6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800349a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800349e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d04f      	beq.n	8003546 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 ff68 	bl	800437c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b6:	2b40      	cmp	r3, #64	@ 0x40
 80034b8:	d141      	bne.n	800353e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	3308      	adds	r3, #8
 80034c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034c8:	e853 3f00 	ldrex	r3, [r3]
 80034cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80034d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3308      	adds	r3, #8
 80034e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80034e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80034ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80034f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80034f6:	e841 2300 	strex	r3, r2, [r1]
 80034fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80034fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1d9      	bne.n	80034ba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800350a:	2b00      	cmp	r3, #0
 800350c:	d013      	beq.n	8003536 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003512:	4a13      	ldr	r2, [pc, #76]	@ (8003560 <HAL_UART_IRQHandler+0x29c>)
 8003514:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800351a:	4618      	mov	r0, r3
 800351c:	f7fd fd92 	bl	8001044 <HAL_DMA_Abort_IT>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d017      	beq.n	8003556 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800352a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003530:	4610      	mov	r0, r2
 8003532:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003534:	e00f      	b.n	8003556 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f9d4 	bl	80038e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800353c:	e00b      	b.n	8003556 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f9d0 	bl	80038e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003544:	e007      	b.n	8003556 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f9cc 	bl	80038e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003554:	e1b1      	b.n	80038ba <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003556:	bf00      	nop
    return;
 8003558:	e1af      	b.n	80038ba <HAL_UART_IRQHandler+0x5f6>
 800355a:	bf00      	nop
 800355c:	04000120 	.word	0x04000120
 8003560:	08004445 	.word	0x08004445

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003568:	2b01      	cmp	r3, #1
 800356a:	f040 816a 	bne.w	8003842 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800356e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003572:	f003 0310 	and.w	r3, r3, #16
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 8163 	beq.w	8003842 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800357c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003580:	f003 0310 	and.w	r3, r3, #16
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 815c 	beq.w	8003842 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2210      	movs	r2, #16
 8003590:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800359c:	2b40      	cmp	r3, #64	@ 0x40
 800359e:	f040 80d4 	bne.w	800374a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 80ad 	beq.w	8003712 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80035be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035c2:	429a      	cmp	r2, r3
 80035c4:	f080 80a5 	bcs.w	8003712 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f040 8086 	bne.w	80036f0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035f0:	e853 3f00 	ldrex	r3, [r3]
 80035f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80035f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80035fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003600:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	461a      	mov	r2, r3
 800360a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800360e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003612:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003616:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800361a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800361e:	e841 2300 	strex	r3, r2, [r1]
 8003622:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003626:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1da      	bne.n	80035e4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	3308      	adds	r3, #8
 8003634:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003636:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003638:	e853 3f00 	ldrex	r3, [r3]
 800363c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800363e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003640:	f023 0301 	bic.w	r3, r3, #1
 8003644:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	3308      	adds	r3, #8
 800364e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003652:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003656:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003658:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800365a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800365e:	e841 2300 	strex	r3, r2, [r1]
 8003662:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003664:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1e1      	bne.n	800362e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3308      	adds	r3, #8
 8003670:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003672:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003674:	e853 3f00 	ldrex	r3, [r3]
 8003678:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800367a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800367c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003680:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3308      	adds	r3, #8
 800368a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800368e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003690:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003692:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003694:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003696:	e841 2300 	strex	r3, r2, [r1]
 800369a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800369c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1e3      	bne.n	800366a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036b8:	e853 3f00 	ldrex	r3, [r3]
 80036bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80036be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036c0:	f023 0310 	bic.w	r3, r3, #16
 80036c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	461a      	mov	r2, r3
 80036ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036da:	e841 2300 	strex	r3, r2, [r1]
 80036de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80036e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1e4      	bne.n	80036b0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fd fc6c 	bl	8000fc8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003702:	b29b      	uxth	r3, r3
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	b29b      	uxth	r3, r3
 8003708:	4619      	mov	r1, r3
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f8f4 	bl	80038f8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003710:	e0d5      	b.n	80038be <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003718:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800371c:	429a      	cmp	r2, r3
 800371e:	f040 80ce 	bne.w	80038be <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b20      	cmp	r3, #32
 8003730:	f040 80c5 	bne.w	80038be <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003740:	4619      	mov	r1, r3
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f8d8 	bl	80038f8 <HAL_UARTEx_RxEventCallback>
      return;
 8003748:	e0b9      	b.n	80038be <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003756:	b29b      	uxth	r3, r3
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 80ab 	beq.w	80038c2 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800376c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 80a6 	beq.w	80038c2 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003786:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800378a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003798:	647b      	str	r3, [r7, #68]	@ 0x44
 800379a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800379e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037a0:	e841 2300 	strex	r3, r2, [r1]
 80037a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1e4      	bne.n	8003776 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3308      	adds	r3, #8
 80037b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b6:	e853 3f00 	ldrex	r3, [r3]
 80037ba:	623b      	str	r3, [r7, #32]
   return(result);
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	f023 0301 	bic.w	r3, r3, #1
 80037c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	3308      	adds	r3, #8
 80037cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80037d0:	633a      	str	r2, [r7, #48]	@ 0x30
 80037d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037d8:	e841 2300 	strex	r3, r2, [r1]
 80037dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1e3      	bne.n	80037ac <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	e853 3f00 	ldrex	r3, [r3]
 8003804:	60fb      	str	r3, [r7, #12]
   return(result);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f023 0310 	bic.w	r3, r3, #16
 800380c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	461a      	mov	r2, r3
 8003816:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800381a:	61fb      	str	r3, [r7, #28]
 800381c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381e:	69b9      	ldr	r1, [r7, #24]
 8003820:	69fa      	ldr	r2, [r7, #28]
 8003822:	e841 2300 	strex	r3, r2, [r1]
 8003826:	617b      	str	r3, [r7, #20]
   return(result);
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1e4      	bne.n	80037f8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2202      	movs	r2, #2
 8003832:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003834:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003838:	4619      	mov	r1, r3
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f85c 	bl	80038f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003840:	e03f      	b.n	80038c2 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003846:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00e      	beq.n	800386c <HAL_UART_IRQHandler+0x5a8>
 800384e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d008      	beq.n	800386c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003862:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 ffe9 	bl	800483c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800386a:	e02d      	b.n	80038c8 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800386c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00e      	beq.n	8003896 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800387c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003880:	2b00      	cmp	r3, #0
 8003882:	d008      	beq.n	8003896 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01c      	beq.n	80038c6 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	4798      	blx	r3
    }
    return;
 8003894:	e017      	b.n	80038c6 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800389a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d012      	beq.n	80038c8 <HAL_UART_IRQHandler+0x604>
 80038a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00c      	beq.n	80038c8 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fdde 	bl	8004470 <UART_EndTransmit_IT>
    return;
 80038b4:	e008      	b.n	80038c8 <HAL_UART_IRQHandler+0x604>
      return;
 80038b6:	bf00      	nop
 80038b8:	e006      	b.n	80038c8 <HAL_UART_IRQHandler+0x604>
    return;
 80038ba:	bf00      	nop
 80038bc:	e004      	b.n	80038c8 <HAL_UART_IRQHandler+0x604>
      return;
 80038be:	bf00      	nop
 80038c0:	e002      	b.n	80038c8 <HAL_UART_IRQHandler+0x604>
      return;
 80038c2:	bf00      	nop
 80038c4:	e000      	b.n	80038c8 <HAL_UART_IRQHandler+0x604>
    return;
 80038c6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80038c8:	37e8      	adds	r7, #232	@ 0xe8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop

080038d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	460b      	mov	r3, r1
 8003902:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003914:	b08a      	sub	sp, #40	@ 0x28
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	431a      	orrs	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	431a      	orrs	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	4313      	orrs	r3, r2
 8003936:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	4ba4      	ldr	r3, [pc, #656]	@ (8003bd0 <UART_SetConfig+0x2c0>)
 8003940:	4013      	ands	r3, r2
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	6812      	ldr	r2, [r2, #0]
 8003946:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003948:	430b      	orrs	r3, r1
 800394a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a99      	ldr	r2, [pc, #612]	@ (8003bd4 <UART_SetConfig+0x2c4>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d004      	beq.n	800397c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003978:	4313      	orrs	r3, r2
 800397a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800398c:	430a      	orrs	r2, r1
 800398e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a90      	ldr	r2, [pc, #576]	@ (8003bd8 <UART_SetConfig+0x2c8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d126      	bne.n	80039e8 <UART_SetConfig+0xd8>
 800399a:	4b90      	ldr	r3, [pc, #576]	@ (8003bdc <UART_SetConfig+0x2cc>)
 800399c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d81b      	bhi.n	80039e0 <UART_SetConfig+0xd0>
 80039a8:	a201      	add	r2, pc, #4	@ (adr r2, 80039b0 <UART_SetConfig+0xa0>)
 80039aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ae:	bf00      	nop
 80039b0:	080039c1 	.word	0x080039c1
 80039b4:	080039d1 	.word	0x080039d1
 80039b8:	080039c9 	.word	0x080039c9
 80039bc:	080039d9 	.word	0x080039d9
 80039c0:	2301      	movs	r3, #1
 80039c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039c6:	e116      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 80039c8:	2302      	movs	r3, #2
 80039ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039ce:	e112      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 80039d0:	2304      	movs	r3, #4
 80039d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039d6:	e10e      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 80039d8:	2308      	movs	r3, #8
 80039da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039de:	e10a      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 80039e0:	2310      	movs	r3, #16
 80039e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039e6:	e106      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a7c      	ldr	r2, [pc, #496]	@ (8003be0 <UART_SetConfig+0x2d0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d138      	bne.n	8003a64 <UART_SetConfig+0x154>
 80039f2:	4b7a      	ldr	r3, [pc, #488]	@ (8003bdc <UART_SetConfig+0x2cc>)
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f8:	f003 030c 	and.w	r3, r3, #12
 80039fc:	2b0c      	cmp	r3, #12
 80039fe:	d82d      	bhi.n	8003a5c <UART_SetConfig+0x14c>
 8003a00:	a201      	add	r2, pc, #4	@ (adr r2, 8003a08 <UART_SetConfig+0xf8>)
 8003a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a06:	bf00      	nop
 8003a08:	08003a3d 	.word	0x08003a3d
 8003a0c:	08003a5d 	.word	0x08003a5d
 8003a10:	08003a5d 	.word	0x08003a5d
 8003a14:	08003a5d 	.word	0x08003a5d
 8003a18:	08003a4d 	.word	0x08003a4d
 8003a1c:	08003a5d 	.word	0x08003a5d
 8003a20:	08003a5d 	.word	0x08003a5d
 8003a24:	08003a5d 	.word	0x08003a5d
 8003a28:	08003a45 	.word	0x08003a45
 8003a2c:	08003a5d 	.word	0x08003a5d
 8003a30:	08003a5d 	.word	0x08003a5d
 8003a34:	08003a5d 	.word	0x08003a5d
 8003a38:	08003a55 	.word	0x08003a55
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a42:	e0d8      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003a44:	2302      	movs	r3, #2
 8003a46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a4a:	e0d4      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003a4c:	2304      	movs	r3, #4
 8003a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a52:	e0d0      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003a54:	2308      	movs	r3, #8
 8003a56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a5a:	e0cc      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003a5c:	2310      	movs	r3, #16
 8003a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a62:	e0c8      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a5e      	ldr	r2, [pc, #376]	@ (8003be4 <UART_SetConfig+0x2d4>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d125      	bne.n	8003aba <UART_SetConfig+0x1aa>
 8003a6e:	4b5b      	ldr	r3, [pc, #364]	@ (8003bdc <UART_SetConfig+0x2cc>)
 8003a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a74:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003a78:	2b30      	cmp	r3, #48	@ 0x30
 8003a7a:	d016      	beq.n	8003aaa <UART_SetConfig+0x19a>
 8003a7c:	2b30      	cmp	r3, #48	@ 0x30
 8003a7e:	d818      	bhi.n	8003ab2 <UART_SetConfig+0x1a2>
 8003a80:	2b20      	cmp	r3, #32
 8003a82:	d00a      	beq.n	8003a9a <UART_SetConfig+0x18a>
 8003a84:	2b20      	cmp	r3, #32
 8003a86:	d814      	bhi.n	8003ab2 <UART_SetConfig+0x1a2>
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <UART_SetConfig+0x182>
 8003a8c:	2b10      	cmp	r3, #16
 8003a8e:	d008      	beq.n	8003aa2 <UART_SetConfig+0x192>
 8003a90:	e00f      	b.n	8003ab2 <UART_SetConfig+0x1a2>
 8003a92:	2300      	movs	r3, #0
 8003a94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a98:	e0ad      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aa0:	e0a9      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003aa2:	2304      	movs	r3, #4
 8003aa4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aa8:	e0a5      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003aaa:	2308      	movs	r3, #8
 8003aac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ab0:	e0a1      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003ab2:	2310      	movs	r3, #16
 8003ab4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ab8:	e09d      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a4a      	ldr	r2, [pc, #296]	@ (8003be8 <UART_SetConfig+0x2d8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d125      	bne.n	8003b10 <UART_SetConfig+0x200>
 8003ac4:	4b45      	ldr	r3, [pc, #276]	@ (8003bdc <UART_SetConfig+0x2cc>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ace:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ad0:	d016      	beq.n	8003b00 <UART_SetConfig+0x1f0>
 8003ad2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ad4:	d818      	bhi.n	8003b08 <UART_SetConfig+0x1f8>
 8003ad6:	2b80      	cmp	r3, #128	@ 0x80
 8003ad8:	d00a      	beq.n	8003af0 <UART_SetConfig+0x1e0>
 8003ada:	2b80      	cmp	r3, #128	@ 0x80
 8003adc:	d814      	bhi.n	8003b08 <UART_SetConfig+0x1f8>
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <UART_SetConfig+0x1d8>
 8003ae2:	2b40      	cmp	r3, #64	@ 0x40
 8003ae4:	d008      	beq.n	8003af8 <UART_SetConfig+0x1e8>
 8003ae6:	e00f      	b.n	8003b08 <UART_SetConfig+0x1f8>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aee:	e082      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003af0:	2302      	movs	r3, #2
 8003af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003af6:	e07e      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003af8:	2304      	movs	r3, #4
 8003afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003afe:	e07a      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003b00:	2308      	movs	r3, #8
 8003b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b06:	e076      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003b08:	2310      	movs	r3, #16
 8003b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b0e:	e072      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a35      	ldr	r2, [pc, #212]	@ (8003bec <UART_SetConfig+0x2dc>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d12a      	bne.n	8003b70 <UART_SetConfig+0x260>
 8003b1a:	4b30      	ldr	r3, [pc, #192]	@ (8003bdc <UART_SetConfig+0x2cc>)
 8003b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b28:	d01a      	beq.n	8003b60 <UART_SetConfig+0x250>
 8003b2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b2e:	d81b      	bhi.n	8003b68 <UART_SetConfig+0x258>
 8003b30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b34:	d00c      	beq.n	8003b50 <UART_SetConfig+0x240>
 8003b36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b3a:	d815      	bhi.n	8003b68 <UART_SetConfig+0x258>
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <UART_SetConfig+0x238>
 8003b40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b44:	d008      	beq.n	8003b58 <UART_SetConfig+0x248>
 8003b46:	e00f      	b.n	8003b68 <UART_SetConfig+0x258>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b4e:	e052      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003b50:	2302      	movs	r3, #2
 8003b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b56:	e04e      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003b58:	2304      	movs	r3, #4
 8003b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b5e:	e04a      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003b60:	2308      	movs	r3, #8
 8003b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b66:	e046      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003b68:	2310      	movs	r3, #16
 8003b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b6e:	e042      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a17      	ldr	r2, [pc, #92]	@ (8003bd4 <UART_SetConfig+0x2c4>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d13a      	bne.n	8003bf0 <UART_SetConfig+0x2e0>
 8003b7a:	4b18      	ldr	r3, [pc, #96]	@ (8003bdc <UART_SetConfig+0x2cc>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b88:	d01a      	beq.n	8003bc0 <UART_SetConfig+0x2b0>
 8003b8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b8e:	d81b      	bhi.n	8003bc8 <UART_SetConfig+0x2b8>
 8003b90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b94:	d00c      	beq.n	8003bb0 <UART_SetConfig+0x2a0>
 8003b96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b9a:	d815      	bhi.n	8003bc8 <UART_SetConfig+0x2b8>
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <UART_SetConfig+0x298>
 8003ba0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ba4:	d008      	beq.n	8003bb8 <UART_SetConfig+0x2a8>
 8003ba6:	e00f      	b.n	8003bc8 <UART_SetConfig+0x2b8>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bae:	e022      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bb6:	e01e      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003bb8:	2304      	movs	r3, #4
 8003bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bbe:	e01a      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003bc0:	2308      	movs	r3, #8
 8003bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bc6:	e016      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003bc8:	2310      	movs	r3, #16
 8003bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bce:	e012      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003bd0:	efff69f3 	.word	0xefff69f3
 8003bd4:	40008000 	.word	0x40008000
 8003bd8:	40013800 	.word	0x40013800
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	40004400 	.word	0x40004400
 8003be4:	40004800 	.word	0x40004800
 8003be8:	40004c00 	.word	0x40004c00
 8003bec:	40005000 	.word	0x40005000
 8003bf0:	2310      	movs	r3, #16
 8003bf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a9f      	ldr	r2, [pc, #636]	@ (8003e78 <UART_SetConfig+0x568>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d17a      	bne.n	8003cf6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d824      	bhi.n	8003c52 <UART_SetConfig+0x342>
 8003c08:	a201      	add	r2, pc, #4	@ (adr r2, 8003c10 <UART_SetConfig+0x300>)
 8003c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0e:	bf00      	nop
 8003c10:	08003c35 	.word	0x08003c35
 8003c14:	08003c53 	.word	0x08003c53
 8003c18:	08003c3d 	.word	0x08003c3d
 8003c1c:	08003c53 	.word	0x08003c53
 8003c20:	08003c43 	.word	0x08003c43
 8003c24:	08003c53 	.word	0x08003c53
 8003c28:	08003c53 	.word	0x08003c53
 8003c2c:	08003c53 	.word	0x08003c53
 8003c30:	08003c4b 	.word	0x08003c4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c34:	f7fe f9e2 	bl	8001ffc <HAL_RCC_GetPCLK1Freq>
 8003c38:	61f8      	str	r0, [r7, #28]
        break;
 8003c3a:	e010      	b.n	8003c5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c3c:	4b8f      	ldr	r3, [pc, #572]	@ (8003e7c <UART_SetConfig+0x56c>)
 8003c3e:	61fb      	str	r3, [r7, #28]
        break;
 8003c40:	e00d      	b.n	8003c5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c42:	f7fe f943 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8003c46:	61f8      	str	r0, [r7, #28]
        break;
 8003c48:	e009      	b.n	8003c5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c4e:	61fb      	str	r3, [r7, #28]
        break;
 8003c50:	e005      	b.n	8003c5e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003c5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80fb 	beq.w	8003e5c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	4413      	add	r3, r2
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d305      	bcc.n	8003c82 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c7c:	69fa      	ldr	r2, [r7, #28]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d903      	bls.n	8003c8a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003c88:	e0e8      	b.n	8003e5c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	461c      	mov	r4, r3
 8003c90:	4615      	mov	r5, r2
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	022b      	lsls	r3, r5, #8
 8003c9c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ca0:	0222      	lsls	r2, r4, #8
 8003ca2:	68f9      	ldr	r1, [r7, #12]
 8003ca4:	6849      	ldr	r1, [r1, #4]
 8003ca6:	0849      	lsrs	r1, r1, #1
 8003ca8:	2000      	movs	r0, #0
 8003caa:	4688      	mov	r8, r1
 8003cac:	4681      	mov	r9, r0
 8003cae:	eb12 0a08 	adds.w	sl, r2, r8
 8003cb2:	eb43 0b09 	adc.w	fp, r3, r9
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	603b      	str	r3, [r7, #0]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cc4:	4650      	mov	r0, sl
 8003cc6:	4659      	mov	r1, fp
 8003cc8:	f7fc fad2 	bl	8000270 <__aeabi_uldivmod>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cda:	d308      	bcc.n	8003cee <UART_SetConfig+0x3de>
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ce2:	d204      	bcs.n	8003cee <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	60da      	str	r2, [r3, #12]
 8003cec:	e0b6      	b.n	8003e5c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003cf4:	e0b2      	b.n	8003e5c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cfe:	d15e      	bne.n	8003dbe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003d00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d828      	bhi.n	8003d5a <UART_SetConfig+0x44a>
 8003d08:	a201      	add	r2, pc, #4	@ (adr r2, 8003d10 <UART_SetConfig+0x400>)
 8003d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0e:	bf00      	nop
 8003d10:	08003d35 	.word	0x08003d35
 8003d14:	08003d3d 	.word	0x08003d3d
 8003d18:	08003d45 	.word	0x08003d45
 8003d1c:	08003d5b 	.word	0x08003d5b
 8003d20:	08003d4b 	.word	0x08003d4b
 8003d24:	08003d5b 	.word	0x08003d5b
 8003d28:	08003d5b 	.word	0x08003d5b
 8003d2c:	08003d5b 	.word	0x08003d5b
 8003d30:	08003d53 	.word	0x08003d53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d34:	f7fe f962 	bl	8001ffc <HAL_RCC_GetPCLK1Freq>
 8003d38:	61f8      	str	r0, [r7, #28]
        break;
 8003d3a:	e014      	b.n	8003d66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d3c:	f7fe f974 	bl	8002028 <HAL_RCC_GetPCLK2Freq>
 8003d40:	61f8      	str	r0, [r7, #28]
        break;
 8003d42:	e010      	b.n	8003d66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d44:	4b4d      	ldr	r3, [pc, #308]	@ (8003e7c <UART_SetConfig+0x56c>)
 8003d46:	61fb      	str	r3, [r7, #28]
        break;
 8003d48:	e00d      	b.n	8003d66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d4a:	f7fe f8bf 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8003d4e:	61f8      	str	r0, [r7, #28]
        break;
 8003d50:	e009      	b.n	8003d66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d56:	61fb      	str	r3, [r7, #28]
        break;
 8003d58:	e005      	b.n	8003d66 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d077      	beq.n	8003e5c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	005a      	lsls	r2, r3, #1
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	085b      	lsrs	r3, r3, #1
 8003d76:	441a      	add	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d80:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	2b0f      	cmp	r3, #15
 8003d86:	d916      	bls.n	8003db6 <UART_SetConfig+0x4a6>
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d8e:	d212      	bcs.n	8003db6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	f023 030f 	bic.w	r3, r3, #15
 8003d98:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	085b      	lsrs	r3, r3, #1
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	8afb      	ldrh	r3, [r7, #22]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	8afa      	ldrh	r2, [r7, #22]
 8003db2:	60da      	str	r2, [r3, #12]
 8003db4:	e052      	b.n	8003e5c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003dbc:	e04e      	b.n	8003e5c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003dbe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003dc2:	2b08      	cmp	r3, #8
 8003dc4:	d827      	bhi.n	8003e16 <UART_SetConfig+0x506>
 8003dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8003dcc <UART_SetConfig+0x4bc>)
 8003dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dcc:	08003df1 	.word	0x08003df1
 8003dd0:	08003df9 	.word	0x08003df9
 8003dd4:	08003e01 	.word	0x08003e01
 8003dd8:	08003e17 	.word	0x08003e17
 8003ddc:	08003e07 	.word	0x08003e07
 8003de0:	08003e17 	.word	0x08003e17
 8003de4:	08003e17 	.word	0x08003e17
 8003de8:	08003e17 	.word	0x08003e17
 8003dec:	08003e0f 	.word	0x08003e0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003df0:	f7fe f904 	bl	8001ffc <HAL_RCC_GetPCLK1Freq>
 8003df4:	61f8      	str	r0, [r7, #28]
        break;
 8003df6:	e014      	b.n	8003e22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003df8:	f7fe f916 	bl	8002028 <HAL_RCC_GetPCLK2Freq>
 8003dfc:	61f8      	str	r0, [r7, #28]
        break;
 8003dfe:	e010      	b.n	8003e22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e00:	4b1e      	ldr	r3, [pc, #120]	@ (8003e7c <UART_SetConfig+0x56c>)
 8003e02:	61fb      	str	r3, [r7, #28]
        break;
 8003e04:	e00d      	b.n	8003e22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e06:	f7fe f861 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8003e0a:	61f8      	str	r0, [r7, #28]
        break;
 8003e0c:	e009      	b.n	8003e22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e12:	61fb      	str	r3, [r7, #28]
        break;
 8003e14:	e005      	b.n	8003e22 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e20:	bf00      	nop
    }

    if (pclk != 0U)
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d019      	beq.n	8003e5c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	085a      	lsrs	r2, r3, #1
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	441a      	add	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	2b0f      	cmp	r3, #15
 8003e40:	d909      	bls.n	8003e56 <UART_SetConfig+0x546>
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e48:	d205      	bcs.n	8003e56 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60da      	str	r2, [r3, #12]
 8003e54:	e002      	b.n	8003e5c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e68:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3728      	adds	r7, #40	@ 0x28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e76:	bf00      	nop
 8003e78:	40008000 	.word	0x40008000
 8003e7c:	00f42400 	.word	0x00f42400

08003e80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00a      	beq.n	8003eaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f36:	f003 0320 	and.w	r3, r3, #32
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01a      	beq.n	8003f96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f7e:	d10a      	bne.n	8003f96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	605a      	str	r2, [r3, #4]
  }
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b098      	sub	sp, #96	@ 0x60
 8003fc8:	af02      	add	r7, sp, #8
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fd4:	f7fc ff0a 	bl	8000dec <HAL_GetTick>
 8003fd8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0308 	and.w	r3, r3, #8
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d12e      	bne.n	8004046 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fe8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f88c 	bl	8004114 <UART_WaitOnFlagUntilTimeout>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d021      	beq.n	8004046 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004012:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004016:	653b      	str	r3, [r7, #80]	@ 0x50
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	461a      	mov	r2, r3
 800401e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004020:	647b      	str	r3, [r7, #68]	@ 0x44
 8004022:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004024:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004026:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004028:	e841 2300 	strex	r3, r2, [r1]
 800402c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800402e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e6      	bne.n	8004002 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e062      	b.n	800410c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b04      	cmp	r3, #4
 8004052:	d149      	bne.n	80040e8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004054:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800405c:	2200      	movs	r2, #0
 800405e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f856 	bl	8004114 <UART_WaitOnFlagUntilTimeout>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d03c      	beq.n	80040e8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004076:	e853 3f00 	ldrex	r3, [r3]
 800407a:	623b      	str	r3, [r7, #32]
   return(result);
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004082:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	461a      	mov	r2, r3
 800408a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800408c:	633b      	str	r3, [r7, #48]	@ 0x30
 800408e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004092:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004094:	e841 2300 	strex	r3, r2, [r1]
 8004098:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800409a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e6      	bne.n	800406e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3308      	adds	r3, #8
 80040a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0301 	bic.w	r3, r3, #1
 80040b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3308      	adds	r3, #8
 80040be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040c0:	61fa      	str	r2, [r7, #28]
 80040c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	69b9      	ldr	r1, [r7, #24]
 80040c6:	69fa      	ldr	r2, [r7, #28]
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	617b      	str	r3, [r7, #20]
   return(result);
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e5      	bne.n	80040a0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e011      	b.n	800410c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3758      	adds	r7, #88	@ 0x58
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	4613      	mov	r3, r2
 8004122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004124:	e04f      	b.n	80041c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412c:	d04b      	beq.n	80041c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800412e:	f7fc fe5d 	bl	8000dec <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	429a      	cmp	r2, r3
 800413c:	d302      	bcc.n	8004144 <UART_WaitOnFlagUntilTimeout+0x30>
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e04e      	b.n	80041e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0304 	and.w	r3, r3, #4
 8004152:	2b00      	cmp	r3, #0
 8004154:	d037      	beq.n	80041c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2b80      	cmp	r3, #128	@ 0x80
 800415a:	d034      	beq.n	80041c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2b40      	cmp	r3, #64	@ 0x40
 8004160:	d031      	beq.n	80041c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	f003 0308 	and.w	r3, r3, #8
 800416c:	2b08      	cmp	r3, #8
 800416e:	d110      	bne.n	8004192 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2208      	movs	r2, #8
 8004176:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f8ff 	bl	800437c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2208      	movs	r2, #8
 8004182:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e029      	b.n	80041e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800419c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041a0:	d111      	bne.n	80041c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 f8e5 	bl	800437c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e00f      	b.n	80041e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69da      	ldr	r2, [r3, #28]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4013      	ands	r3, r2
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	bf0c      	ite	eq
 80041d6:	2301      	moveq	r3, #1
 80041d8:	2300      	movne	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d0a0      	beq.n	8004126 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b097      	sub	sp, #92	@ 0x5c
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	4613      	mov	r3, r2
 80041fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	88fa      	ldrh	r2, [r7, #6]
 8004208:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	88fa      	ldrh	r2, [r7, #6]
 8004210:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004222:	d10e      	bne.n	8004242 <UART_Start_Receive_IT+0x52>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d105      	bne.n	8004238 <UART_Start_Receive_IT+0x48>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004232:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004236:	e02d      	b.n	8004294 <UART_Start_Receive_IT+0xa4>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	22ff      	movs	r2, #255	@ 0xff
 800423c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004240:	e028      	b.n	8004294 <UART_Start_Receive_IT+0xa4>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10d      	bne.n	8004266 <UART_Start_Receive_IT+0x76>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d104      	bne.n	800425c <UART_Start_Receive_IT+0x6c>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	22ff      	movs	r2, #255	@ 0xff
 8004256:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800425a:	e01b      	b.n	8004294 <UART_Start_Receive_IT+0xa4>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	227f      	movs	r2, #127	@ 0x7f
 8004260:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004264:	e016      	b.n	8004294 <UART_Start_Receive_IT+0xa4>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800426e:	d10d      	bne.n	800428c <UART_Start_Receive_IT+0x9c>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d104      	bne.n	8004282 <UART_Start_Receive_IT+0x92>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	227f      	movs	r2, #127	@ 0x7f
 800427c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004280:	e008      	b.n	8004294 <UART_Start_Receive_IT+0xa4>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	223f      	movs	r2, #63	@ 0x3f
 8004286:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800428a:	e003      	b.n	8004294 <UART_Start_Receive_IT+0xa4>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2222      	movs	r2, #34	@ 0x22
 80042a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3308      	adds	r3, #8
 80042aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042ae:	e853 3f00 	ldrex	r3, [r3]
 80042b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b6:	f043 0301 	orr.w	r3, r3, #1
 80042ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3308      	adds	r3, #8
 80042c2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80042c4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80042c6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80042ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042cc:	e841 2300 	strex	r3, r2, [r1]
 80042d0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80042d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1e5      	bne.n	80042a4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042e0:	d107      	bne.n	80042f2 <UART_Start_Receive_IT+0x102>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d103      	bne.n	80042f2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4a21      	ldr	r2, [pc, #132]	@ (8004374 <UART_Start_Receive_IT+0x184>)
 80042ee:	669a      	str	r2, [r3, #104]	@ 0x68
 80042f0:	e002      	b.n	80042f8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	4a20      	ldr	r2, [pc, #128]	@ (8004378 <UART_Start_Receive_IT+0x188>)
 80042f6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d019      	beq.n	8004334 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004308:	e853 3f00 	ldrex	r3, [r3]
 800430c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800430e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004310:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004314:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	461a      	mov	r2, r3
 800431c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800431e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004320:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004322:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004324:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004326:	e841 2300 	strex	r3, r2, [r1]
 800432a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800432c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1e6      	bne.n	8004300 <UART_Start_Receive_IT+0x110>
 8004332:	e018      	b.n	8004366 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	e853 3f00 	ldrex	r3, [r3]
 8004340:	613b      	str	r3, [r7, #16]
   return(result);
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f043 0320 	orr.w	r3, r3, #32
 8004348:	653b      	str	r3, [r7, #80]	@ 0x50
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004352:	623b      	str	r3, [r7, #32]
 8004354:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004356:	69f9      	ldr	r1, [r7, #28]
 8004358:	6a3a      	ldr	r2, [r7, #32]
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1e6      	bne.n	8004334 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	375c      	adds	r7, #92	@ 0x5c
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	08004681 	.word	0x08004681
 8004378:	080044c5 	.word	0x080044c5

0800437c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800437c:	b480      	push	{r7}
 800437e:	b095      	sub	sp, #84	@ 0x54
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800438c:	e853 3f00 	ldrex	r3, [r3]
 8004390:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004394:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004398:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80043a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043aa:	e841 2300 	strex	r3, r2, [r1]
 80043ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1e6      	bne.n	8004384 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	3308      	adds	r3, #8
 80043bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	e853 3f00 	ldrex	r3, [r3]
 80043c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	f023 0301 	bic.w	r3, r3, #1
 80043cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3308      	adds	r3, #8
 80043d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043de:	e841 2300 	strex	r3, r2, [r1]
 80043e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1e5      	bne.n	80043b6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d118      	bne.n	8004424 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	e853 3f00 	ldrex	r3, [r3]
 80043fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	f023 0310 	bic.w	r3, r3, #16
 8004406:	647b      	str	r3, [r7, #68]	@ 0x44
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	461a      	mov	r2, r3
 800440e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004410:	61bb      	str	r3, [r7, #24]
 8004412:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004414:	6979      	ldr	r1, [r7, #20]
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	e841 2300 	strex	r3, r2, [r1]
 800441c:	613b      	str	r3, [r7, #16]
   return(result);
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1e6      	bne.n	80043f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2220      	movs	r2, #32
 8004428:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004438:	bf00      	nop
 800443a:	3754      	adds	r7, #84	@ 0x54
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004450:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f7ff fa3e 	bl	80038e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004468:	bf00      	nop
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	e853 3f00 	ldrex	r3, [r3]
 8004484:	60bb      	str	r3, [r7, #8]
   return(result);
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800448c:	61fb      	str	r3, [r7, #28]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	61bb      	str	r3, [r7, #24]
 8004498:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449a:	6979      	ldr	r1, [r7, #20]
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	e841 2300 	strex	r3, r2, [r1]
 80044a2:	613b      	str	r3, [r7, #16]
   return(result);
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1e6      	bne.n	8004478 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2220      	movs	r2, #32
 80044ae:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff fa0a 	bl	80038d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044bc:	bf00      	nop
 80044be:	3720      	adds	r7, #32
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b09c      	sub	sp, #112	@ 0x70
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80044d2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044dc:	2b22      	cmp	r3, #34	@ 0x22
 80044de:	f040 80be 	bne.w	800465e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80044e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80044ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80044f0:	b2d9      	uxtb	r1, r3
 80044f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044fc:	400a      	ands	r2, r1
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004524:	b29b      	uxth	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	f040 80a3 	bne.w	8004672 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004534:	e853 3f00 	ldrex	r3, [r3]
 8004538:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800453a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800453c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004540:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800454a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800454c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004550:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004552:	e841 2300 	strex	r3, r2, [r1]
 8004556:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004558:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1e6      	bne.n	800452c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3308      	adds	r3, #8
 8004564:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004568:	e853 3f00 	ldrex	r3, [r3]
 800456c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800456e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004570:	f023 0301 	bic.w	r3, r3, #1
 8004574:	667b      	str	r3, [r7, #100]	@ 0x64
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3308      	adds	r3, #8
 800457c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800457e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004580:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004582:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004584:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004586:	e841 2300 	strex	r3, r2, [r1]
 800458a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800458c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1e5      	bne.n	800455e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2220      	movs	r2, #32
 8004596:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a34      	ldr	r2, [pc, #208]	@ (800467c <UART_RxISR_8BIT+0x1b8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d01f      	beq.n	80045f0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d018      	beq.n	80045f0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c6:	e853 3f00 	ldrex	r3, [r3]
 80045ca:	623b      	str	r3, [r7, #32]
   return(result);
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80045d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	461a      	mov	r2, r3
 80045da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80045de:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045e4:	e841 2300 	strex	r3, r2, [r1]
 80045e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1e6      	bne.n	80045be <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d12e      	bne.n	8004656 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	60fb      	str	r3, [r7, #12]
   return(result);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0310 	bic.w	r3, r3, #16
 8004612:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	461a      	mov	r2, r3
 800461a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800461c:	61fb      	str	r3, [r7, #28]
 800461e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004620:	69b9      	ldr	r1, [r7, #24]
 8004622:	69fa      	ldr	r2, [r7, #28]
 8004624:	e841 2300 	strex	r3, r2, [r1]
 8004628:	617b      	str	r3, [r7, #20]
   return(result);
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e6      	bne.n	80045fe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	f003 0310 	and.w	r3, r3, #16
 800463a:	2b10      	cmp	r3, #16
 800463c:	d103      	bne.n	8004646 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2210      	movs	r2, #16
 8004644:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800464c:	4619      	mov	r1, r3
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7ff f952 	bl	80038f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004654:	e00d      	b.n	8004672 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fc f838 	bl	80006cc <HAL_UART_RxCpltCallback>
}
 800465c:	e009      	b.n	8004672 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	8b1b      	ldrh	r3, [r3, #24]
 8004664:	b29a      	uxth	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f042 0208 	orr.w	r2, r2, #8
 800466e:	b292      	uxth	r2, r2
 8004670:	831a      	strh	r2, [r3, #24]
}
 8004672:	bf00      	nop
 8004674:	3770      	adds	r7, #112	@ 0x70
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	40008000 	.word	0x40008000

08004680 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b09c      	sub	sp, #112	@ 0x70
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800468e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004698:	2b22      	cmp	r3, #34	@ 0x22
 800469a:	f040 80be 	bne.w	800481a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80046a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ac:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80046ae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80046b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80046b6:	4013      	ands	r3, r2
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046bc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c2:	1c9a      	adds	r2, r3, #2
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f040 80a3 	bne.w	800482e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046f0:	e853 3f00 	ldrex	r3, [r3]
 80046f4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80046f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	461a      	mov	r2, r3
 8004704:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004706:	657b      	str	r3, [r7, #84]	@ 0x54
 8004708:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800470c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800470e:	e841 2300 	strex	r3, r2, [r1]
 8004712:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004714:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1e6      	bne.n	80046e8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3308      	adds	r3, #8
 8004720:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004724:	e853 3f00 	ldrex	r3, [r3]
 8004728:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800472a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800472c:	f023 0301 	bic.w	r3, r3, #1
 8004730:	663b      	str	r3, [r7, #96]	@ 0x60
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	3308      	adds	r3, #8
 8004738:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800473a:	643a      	str	r2, [r7, #64]	@ 0x40
 800473c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004740:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004742:	e841 2300 	strex	r3, r2, [r1]
 8004746:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1e5      	bne.n	800471a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2220      	movs	r2, #32
 8004752:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a34      	ldr	r2, [pc, #208]	@ (8004838 <UART_RxISR_16BIT+0x1b8>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d01f      	beq.n	80047ac <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d018      	beq.n	80047ac <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	e853 3f00 	ldrex	r3, [r3]
 8004786:	61fb      	str	r3, [r7, #28]
   return(result);
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800478e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	461a      	mov	r2, r3
 8004796:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004798:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800479a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800479e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047a0:	e841 2300 	strex	r3, r2, [r1]
 80047a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1e6      	bne.n	800477a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d12e      	bne.n	8004812 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	e853 3f00 	ldrex	r3, [r3]
 80047c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f023 0310 	bic.w	r3, r3, #16
 80047ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	461a      	mov	r2, r3
 80047d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047d8:	61bb      	str	r3, [r7, #24]
 80047da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047dc:	6979      	ldr	r1, [r7, #20]
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	e841 2300 	strex	r3, r2, [r1]
 80047e4:	613b      	str	r3, [r7, #16]
   return(result);
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1e6      	bne.n	80047ba <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	f003 0310 	and.w	r3, r3, #16
 80047f6:	2b10      	cmp	r3, #16
 80047f8:	d103      	bne.n	8004802 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2210      	movs	r2, #16
 8004800:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004808:	4619      	mov	r1, r3
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7ff f874 	bl	80038f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004810:	e00d      	b.n	800482e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7fb ff5a 	bl	80006cc <HAL_UART_RxCpltCallback>
}
 8004818:	e009      	b.n	800482e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	8b1b      	ldrh	r3, [r3, #24]
 8004820:	b29a      	uxth	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0208 	orr.w	r2, r2, #8
 800482a:	b292      	uxth	r2, r2
 800482c:	831a      	strh	r2, [r3, #24]
}
 800482e:	bf00      	nop
 8004830:	3770      	adds	r7, #112	@ 0x70
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40008000 	.word	0x40008000

0800483c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	4603      	mov	r3, r0
 8004858:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800485a:	2300      	movs	r3, #0
 800485c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800485e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004862:	2b84      	cmp	r3, #132	@ 0x84
 8004864:	d005      	beq.n	8004872 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004866:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4413      	add	r3, r2
 800486e:	3303      	adds	r3, #3
 8004870:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004872:	68fb      	ldr	r3, [r7, #12]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004884:	f000 fde2 	bl	800544c <vTaskStartScheduler>
  
  return osOK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	bd80      	pop	{r7, pc}

0800488e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800488e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004890:	b089      	sub	sp, #36	@ 0x24
 8004892:	af04      	add	r7, sp, #16
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d020      	beq.n	80048e2 <osThreadCreate+0x54>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d01c      	beq.n	80048e2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685c      	ldr	r4, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691e      	ldr	r6, [r3, #16]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff ffc8 	bl	8004850 <makeFreeRtosPriority>
 80048c0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048ca:	9202      	str	r2, [sp, #8]
 80048cc:	9301      	str	r3, [sp, #4]
 80048ce:	9100      	str	r1, [sp, #0]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	4632      	mov	r2, r6
 80048d4:	4629      	mov	r1, r5
 80048d6:	4620      	mov	r0, r4
 80048d8:	f000 fbd2 	bl	8005080 <xTaskCreateStatic>
 80048dc:	4603      	mov	r3, r0
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	e01c      	b.n	800491c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685c      	ldr	r4, [r3, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048ee:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff ffaa 	bl	8004850 <makeFreeRtosPriority>
 80048fc:	4602      	mov	r2, r0
 80048fe:	f107 030c 	add.w	r3, r7, #12
 8004902:	9301      	str	r3, [sp, #4]
 8004904:	9200      	str	r2, [sp, #0]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	4632      	mov	r2, r6
 800490a:	4629      	mov	r1, r5
 800490c:	4620      	mov	r0, r4
 800490e:	f000 fc17 	bl	8005140 <xTaskCreate>
 8004912:	4603      	mov	r3, r0
 8004914:	2b01      	cmp	r3, #1
 8004916:	d001      	beq.n	800491c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004918:	2300      	movs	r3, #0
 800491a:	e000      	b.n	800491e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800491c:	68fb      	ldr	r3, [r7, #12]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004926 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <osDelay+0x16>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	e000      	b.n	800493e <osDelay+0x18>
 800493c:	2301      	movs	r3, #1
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fd4e 	bl	80053e0 <vTaskDelay>
  
  return osOK;
 8004944:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f103 0208 	add.w	r2, r3, #8
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f04f 32ff 	mov.w	r2, #4294967295
 8004966:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f103 0208 	add.w	r2, r3, #8
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f103 0208 	add.w	r2, r3, #8
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	1c5a      	adds	r2, r3, #1
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	601a      	str	r2, [r3, #0]
}
 80049e4:	bf00      	nop
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a06:	d103      	bne.n	8004a10 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	e00c      	b.n	8004a2a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3308      	adds	r3, #8
 8004a14:	60fb      	str	r3, [r7, #12]
 8004a16:	e002      	b.n	8004a1e <vListInsert+0x2e>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d2f6      	bcs.n	8004a18 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	601a      	str	r2, [r3, #0]
}
 8004a56:	bf00      	nop
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a62:	b480      	push	{r7}
 8004a64:	b085      	sub	sp, #20
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6892      	ldr	r2, [r2, #8]
 8004a78:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6852      	ldr	r2, [r2, #4]
 8004a82:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d103      	bne.n	8004a96 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689a      	ldr	r2, [r3, #8]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	1e5a      	subs	r2, r3, #1
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
	...

08004ab8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10b      	bne.n	8004ae4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad0:	f383 8811 	msr	BASEPRI, r3
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004ade:	bf00      	nop
 8004ae0:	bf00      	nop
 8004ae2:	e7fd      	b.n	8004ae0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004ae4:	f001 fba0 	bl	8006228 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af0:	68f9      	ldr	r1, [r7, #12]
 8004af2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004af4:	fb01 f303 	mul.w	r3, r1, r3
 8004af8:	441a      	add	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b14:	3b01      	subs	r3, #1
 8004b16:	68f9      	ldr	r1, [r7, #12]
 8004b18:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004b1a:	fb01 f303 	mul.w	r3, r1, r3
 8004b1e:	441a      	add	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	22ff      	movs	r2, #255	@ 0xff
 8004b28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	22ff      	movs	r2, #255	@ 0xff
 8004b30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d114      	bne.n	8004b64 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d01a      	beq.n	8004b78 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	3310      	adds	r3, #16
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 feda 	bl	8005900 <xTaskRemoveFromEventList>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d012      	beq.n	8004b78 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b52:	4b0d      	ldr	r3, [pc, #52]	@ (8004b88 <xQueueGenericReset+0xd0>)
 8004b54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	f3bf 8f6f 	isb	sy
 8004b62:	e009      	b.n	8004b78 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	3310      	adds	r3, #16
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7ff fef0 	bl	800494e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3324      	adds	r3, #36	@ 0x24
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7ff feeb 	bl	800494e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b78:	f001 fb88 	bl	800628c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b7c:	2301      	movs	r3, #1
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	e000ed04 	.word	0xe000ed04

08004b8c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b08a      	sub	sp, #40	@ 0x28
 8004b90:	af02      	add	r7, sp, #8
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	4613      	mov	r3, r2
 8004b98:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10b      	bne.n	8004bb8 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba4:	f383 8811 	msr	BASEPRI, r3
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	613b      	str	r3, [r7, #16]
}
 8004bb2:	bf00      	nop
 8004bb4:	bf00      	nop
 8004bb6:	e7fd      	b.n	8004bb4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	fb02 f303 	mul.w	r3, r2, r3
 8004bc0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	3348      	adds	r3, #72	@ 0x48
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f001 fc50 	bl	800646c <pvPortMalloc>
 8004bcc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d011      	beq.n	8004bf8 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	3348      	adds	r3, #72	@ 0x48
 8004bdc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004be6:	79fa      	ldrb	r2, [r7, #7]
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	4613      	mov	r3, r2
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	68b9      	ldr	r1, [r7, #8]
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 f805 	bl	8004c02 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004bf8:	69bb      	ldr	r3, [r7, #24]
	}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3720      	adds	r7, #32
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b084      	sub	sp, #16
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	60f8      	str	r0, [r7, #12]
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	607a      	str	r2, [r7, #4]
 8004c0e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d103      	bne.n	8004c1e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	e002      	b.n	8004c24 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c30:	2101      	movs	r1, #1
 8004c32:	69b8      	ldr	r0, [r7, #24]
 8004c34:	f7ff ff40 	bl	8004ab8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c38:	bf00      	nop
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b08e      	sub	sp, #56	@ 0x38
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10b      	bne.n	8004c6c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8004c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	623b      	str	r3, [r7, #32]
}
 8004c66:	bf00      	nop
 8004c68:	bf00      	nop
 8004c6a:	e7fd      	b.n	8004c68 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00b      	beq.n	8004c8c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8004c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	61fb      	str	r3, [r7, #28]
}
 8004c86:	bf00      	nop
 8004c88:	bf00      	nop
 8004c8a:	e7fd      	b.n	8004c88 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d103      	bne.n	8004c9c <xQueueGiveFromISR+0x5c>
 8004c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <xQueueGiveFromISR+0x60>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e000      	b.n	8004ca2 <xQueueGiveFromISR+0x62>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10b      	bne.n	8004cbe <xQueueGiveFromISR+0x7e>
	__asm volatile
 8004ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	61bb      	str	r3, [r7, #24]
}
 8004cb8:	bf00      	nop
 8004cba:	bf00      	nop
 8004cbc:	e7fd      	b.n	8004cba <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004cbe:	f001 fb93 	bl	80063e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004cc2:	f3ef 8211 	mrs	r2, BASEPRI
 8004cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cca:	f383 8811 	msr	BASEPRI, r3
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	617a      	str	r2, [r7, #20]
 8004cd8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004cda:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d22b      	bcs.n	8004d46 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d00:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d08:	d112      	bne.n	8004d30 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d016      	beq.n	8004d40 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d14:	3324      	adds	r3, #36	@ 0x24
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fdf2 	bl	8005900 <xTaskRemoveFromEventList>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00e      	beq.n	8004d40 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00b      	beq.n	8004d40 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	e007      	b.n	8004d40 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d34:	3301      	adds	r3, #1
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	b25a      	sxtb	r2, r3
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004d40:	2301      	movs	r3, #1
 8004d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d44:	e001      	b.n	8004d4a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d46:	2300      	movs	r3, #0
 8004d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d4c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d54:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3738      	adds	r7, #56	@ 0x38
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08e      	sub	sp, #56	@ 0x38
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004d72:	2300      	movs	r3, #0
 8004d74:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10b      	bne.n	8004d94 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d80:	f383 8811 	msr	BASEPRI, r3
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	623b      	str	r3, [r7, #32]
}
 8004d8e:	bf00      	nop
 8004d90:	bf00      	nop
 8004d92:	e7fd      	b.n	8004d90 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00b      	beq.n	8004db4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da0:	f383 8811 	msr	BASEPRI, r3
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	61fb      	str	r3, [r7, #28]
}
 8004dae:	bf00      	nop
 8004db0:	bf00      	nop
 8004db2:	e7fd      	b.n	8004db0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004db4:	f000 ff6a 	bl	8005c8c <xTaskGetSchedulerState>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d102      	bne.n	8004dc4 <xQueueSemaphoreTake+0x64>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <xQueueSemaphoreTake+0x68>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e000      	b.n	8004dca <xQueueSemaphoreTake+0x6a>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10b      	bne.n	8004de6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	61bb      	str	r3, [r7, #24]
}
 8004de0:	bf00      	nop
 8004de2:	bf00      	nop
 8004de4:	e7fd      	b.n	8004de2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004de6:	f001 fa1f 	bl	8006228 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dee:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d024      	beq.n	8004e40 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df8:	1e5a      	subs	r2, r3, #1
 8004dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dfc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d104      	bne.n	8004e10 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004e06:	f001 f865 	bl	8005ed4 <pvTaskIncrementMutexHeldCount>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e0e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00f      	beq.n	8004e38 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e1a:	3310      	adds	r3, #16
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 fd6f 	bl	8005900 <xTaskRemoveFromEventList>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d007      	beq.n	8004e38 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e28:	4b54      	ldr	r3, [pc, #336]	@ (8004f7c <xQueueSemaphoreTake+0x21c>)
 8004e2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e38:	f001 fa28 	bl	800628c <vPortExitCritical>
				return pdPASS;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e098      	b.n	8004f72 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d112      	bne.n	8004e6c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00b      	beq.n	8004e64 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	617b      	str	r3, [r7, #20]
}
 8004e5e:	bf00      	nop
 8004e60:	bf00      	nop
 8004e62:	e7fd      	b.n	8004e60 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004e64:	f001 fa12 	bl	800628c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	e082      	b.n	8004f72 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d106      	bne.n	8004e80 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e72:	f107 030c 	add.w	r3, r7, #12
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 fda6 	bl	80059c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e80:	f001 fa04 	bl	800628c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e84:	f000 fb4c 	bl	8005520 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e88:	f001 f9ce 	bl	8006228 <vPortEnterCritical>
 8004e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e8e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e92:	b25b      	sxtb	r3, r3
 8004e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e98:	d103      	bne.n	8004ea2 <xQueueSemaphoreTake+0x142>
 8004e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ea8:	b25b      	sxtb	r3, r3
 8004eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eae:	d103      	bne.n	8004eb8 <xQueueSemaphoreTake+0x158>
 8004eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004eb8:	f001 f9e8 	bl	800628c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ebc:	463a      	mov	r2, r7
 8004ebe:	f107 030c 	add.w	r3, r7, #12
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fd95 	bl	80059f4 <xTaskCheckForTimeOut>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d132      	bne.n	8004f36 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ed0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ed2:	f000 f8bf 	bl	8005054 <prvIsQueueEmpty>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d026      	beq.n	8004f2a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d109      	bne.n	8004ef8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004ee4:	f001 f9a0 	bl	8006228 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 feeb 	bl	8005cc8 <xTaskPriorityInherit>
 8004ef2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004ef4:	f001 f9ca 	bl	800628c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004efa:	3324      	adds	r3, #36	@ 0x24
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	4611      	mov	r1, r2
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 fcd7 	bl	80058b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004f08:	f000 f852 	bl	8004fb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f0c:	f000 fb16 	bl	800553c <xTaskResumeAll>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f47f af67 	bne.w	8004de6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004f18:	4b18      	ldr	r3, [pc, #96]	@ (8004f7c <xQueueSemaphoreTake+0x21c>)
 8004f1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f1e:	601a      	str	r2, [r3, #0]
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	f3bf 8f6f 	isb	sy
 8004f28:	e75d      	b.n	8004de6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004f2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004f2c:	f000 f840 	bl	8004fb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f30:	f000 fb04 	bl	800553c <xTaskResumeAll>
 8004f34:	e757      	b.n	8004de6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004f36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004f38:	f000 f83a 	bl	8004fb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f3c:	f000 fafe 	bl	800553c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004f42:	f000 f887 	bl	8005054 <prvIsQueueEmpty>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f43f af4c 	beq.w	8004de6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00d      	beq.n	8004f70 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004f54:	f001 f968 	bl	8006228 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004f58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004f5a:	f000 f811 	bl	8004f80 <prvGetDisinheritPriorityAfterTimeout>
 8004f5e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 ff24 	bl	8005db4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004f6c:	f001 f98e 	bl	800628c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3738      	adds	r7, #56	@ 0x38
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	e000ed04 	.word	0xe000ed04

08004f80 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d006      	beq.n	8004f9e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f1c3 0307 	rsb	r3, r3, #7
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	e001      	b.n	8004fa2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
	}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004fb8:	f001 f936 	bl	8006228 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fc4:	e011      	b.n	8004fea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d012      	beq.n	8004ff4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3324      	adds	r3, #36	@ 0x24
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 fc94 	bl	8005900 <xTaskRemoveFromEventList>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004fde:	f000 fd6d 	bl	8005abc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	dce9      	bgt.n	8004fc6 <prvUnlockQueue+0x16>
 8004ff2:	e000      	b.n	8004ff6 <prvUnlockQueue+0x46>
					break;
 8004ff4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	22ff      	movs	r2, #255	@ 0xff
 8004ffa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004ffe:	f001 f945 	bl	800628c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005002:	f001 f911 	bl	8006228 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800500c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800500e:	e011      	b.n	8005034 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d012      	beq.n	800503e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3310      	adds	r3, #16
 800501c:	4618      	mov	r0, r3
 800501e:	f000 fc6f 	bl	8005900 <xTaskRemoveFromEventList>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005028:	f000 fd48 	bl	8005abc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800502c:	7bbb      	ldrb	r3, [r7, #14]
 800502e:	3b01      	subs	r3, #1
 8005030:	b2db      	uxtb	r3, r3
 8005032:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005034:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005038:	2b00      	cmp	r3, #0
 800503a:	dce9      	bgt.n	8005010 <prvUnlockQueue+0x60>
 800503c:	e000      	b.n	8005040 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800503e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	22ff      	movs	r2, #255	@ 0xff
 8005044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005048:	f001 f920 	bl	800628c <vPortExitCritical>
}
 800504c:	bf00      	nop
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800505c:	f001 f8e4 	bl	8006228 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005064:	2b00      	cmp	r3, #0
 8005066:	d102      	bne.n	800506e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005068:	2301      	movs	r3, #1
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	e001      	b.n	8005072 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005072:	f001 f90b 	bl	800628c <vPortExitCritical>

	return xReturn;
 8005076:	68fb      	ldr	r3, [r7, #12]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08e      	sub	sp, #56	@ 0x38
 8005084:	af04      	add	r7, sp, #16
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
 800508c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800508e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10b      	bne.n	80050ac <xTaskCreateStatic+0x2c>
	__asm volatile
 8005094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	623b      	str	r3, [r7, #32]
}
 80050a6:	bf00      	nop
 80050a8:	bf00      	nop
 80050aa:	e7fd      	b.n	80050a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80050ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10b      	bne.n	80050ca <xTaskCreateStatic+0x4a>
	__asm volatile
 80050b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	61fb      	str	r3, [r7, #28]
}
 80050c4:	bf00      	nop
 80050c6:	bf00      	nop
 80050c8:	e7fd      	b.n	80050c6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050ca:	23a0      	movs	r3, #160	@ 0xa0
 80050cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	2ba0      	cmp	r3, #160	@ 0xa0
 80050d2:	d00b      	beq.n	80050ec <xTaskCreateStatic+0x6c>
	__asm volatile
 80050d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d8:	f383 8811 	msr	BASEPRI, r3
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	61bb      	str	r3, [r7, #24]
}
 80050e6:	bf00      	nop
 80050e8:	bf00      	nop
 80050ea:	e7fd      	b.n	80050e8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d01e      	beq.n	8005132 <xTaskCreateStatic+0xb2>
 80050f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d01b      	beq.n	8005132 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005100:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005102:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005106:	2202      	movs	r2, #2
 8005108:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800510c:	2300      	movs	r3, #0
 800510e:	9303      	str	r3, [sp, #12]
 8005110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005112:	9302      	str	r3, [sp, #8]
 8005114:	f107 0314 	add.w	r3, r7, #20
 8005118:	9301      	str	r3, [sp, #4]
 800511a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 f851 	bl	80051cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800512a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800512c:	f000 f8ee 	bl	800530c <prvAddNewTaskToReadyList>
 8005130:	e001      	b.n	8005136 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005132:	2300      	movs	r3, #0
 8005134:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005136:	697b      	ldr	r3, [r7, #20]
	}
 8005138:	4618      	mov	r0, r3
 800513a:	3728      	adds	r7, #40	@ 0x28
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005140:	b580      	push	{r7, lr}
 8005142:	b08c      	sub	sp, #48	@ 0x30
 8005144:	af04      	add	r7, sp, #16
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	603b      	str	r3, [r7, #0]
 800514c:	4613      	mov	r3, r2
 800514e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005150:	88fb      	ldrh	r3, [r7, #6]
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4618      	mov	r0, r3
 8005156:	f001 f989 	bl	800646c <pvPortMalloc>
 800515a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00e      	beq.n	8005180 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005162:	20a0      	movs	r0, #160	@ 0xa0
 8005164:	f001 f982 	bl	800646c <pvPortMalloc>
 8005168:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	631a      	str	r2, [r3, #48]	@ 0x30
 8005176:	e005      	b.n	8005184 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005178:	6978      	ldr	r0, [r7, #20]
 800517a:	f001 fa45 	bl	8006608 <vPortFree>
 800517e:	e001      	b.n	8005184 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005180:	2300      	movs	r3, #0
 8005182:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d017      	beq.n	80051ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005192:	88fa      	ldrh	r2, [r7, #6]
 8005194:	2300      	movs	r3, #0
 8005196:	9303      	str	r3, [sp, #12]
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	9302      	str	r3, [sp, #8]
 800519c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800519e:	9301      	str	r3, [sp, #4]
 80051a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	68b9      	ldr	r1, [r7, #8]
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f80f 	bl	80051cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051ae:	69f8      	ldr	r0, [r7, #28]
 80051b0:	f000 f8ac 	bl	800530c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051b4:	2301      	movs	r3, #1
 80051b6:	61bb      	str	r3, [r7, #24]
 80051b8:	e002      	b.n	80051c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051ba:	f04f 33ff 	mov.w	r3, #4294967295
 80051be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051c0:	69bb      	ldr	r3, [r7, #24]
	}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3720      	adds	r7, #32
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
	...

080051cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b088      	sub	sp, #32
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
 80051d8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80051e4:	3b01      	subs	r3, #1
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	f023 0307 	bic.w	r3, r3, #7
 80051f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00b      	beq.n	8005216 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	617b      	str	r3, [r7, #20]
}
 8005210:	bf00      	nop
 8005212:	bf00      	nop
 8005214:	e7fd      	b.n	8005212 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d01f      	beq.n	800525c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800521c:	2300      	movs	r3, #0
 800521e:	61fb      	str	r3, [r7, #28]
 8005220:	e012      	b.n	8005248 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	4413      	add	r3, r2
 8005228:	7819      	ldrb	r1, [r3, #0]
 800522a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	4413      	add	r3, r2
 8005230:	3334      	adds	r3, #52	@ 0x34
 8005232:	460a      	mov	r2, r1
 8005234:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	4413      	add	r3, r2
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d006      	beq.n	8005250 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	3301      	adds	r3, #1
 8005246:	61fb      	str	r3, [r7, #28]
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	2b0f      	cmp	r3, #15
 800524c:	d9e9      	bls.n	8005222 <prvInitialiseNewTask+0x56>
 800524e:	e000      	b.n	8005252 <prvInitialiseNewTask+0x86>
			{
				break;
 8005250:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800525a:	e003      	b.n	8005264 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800525c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005266:	2b06      	cmp	r3, #6
 8005268:	d901      	bls.n	800526e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800526a:	2306      	movs	r3, #6
 800526c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800526e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005270:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005272:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005276:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005278:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800527a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527c:	2200      	movs	r2, #0
 800527e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005282:	3304      	adds	r3, #4
 8005284:	4618      	mov	r0, r3
 8005286:	f7ff fb82 	bl	800498e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800528a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528c:	3318      	adds	r3, #24
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff fb7d 	bl	800498e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005296:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005298:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800529a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529c:	f1c3 0207 	rsb	r2, r3, #7
 80052a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052a8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ac:	2200      	movs	r2, #0
 80052ae:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80052ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052bc:	334c      	adds	r3, #76	@ 0x4c
 80052be:	224c      	movs	r2, #76	@ 0x4c
 80052c0:	2100      	movs	r1, #0
 80052c2:	4618      	mov	r0, r3
 80052c4:	f001 ff60 	bl	8007188 <memset>
 80052c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ca:	4a0d      	ldr	r2, [pc, #52]	@ (8005300 <prvInitialiseNewTask+0x134>)
 80052cc:	651a      	str	r2, [r3, #80]	@ 0x50
 80052ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d0:	4a0c      	ldr	r2, [pc, #48]	@ (8005304 <prvInitialiseNewTask+0x138>)
 80052d2:	655a      	str	r2, [r3, #84]	@ 0x54
 80052d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d6:	4a0c      	ldr	r2, [pc, #48]	@ (8005308 <prvInitialiseNewTask+0x13c>)
 80052d8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	68f9      	ldr	r1, [r7, #12]
 80052de:	69b8      	ldr	r0, [r7, #24]
 80052e0:	f000 fe72 	bl	8005fc8 <pxPortInitialiseStack>
 80052e4:	4602      	mov	r2, r0
 80052e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80052ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d002      	beq.n	80052f6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052f6:	bf00      	nop
 80052f8:	3720      	adds	r7, #32
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	20001478 	.word	0x20001478
 8005304:	200014e0 	.word	0x200014e0
 8005308:	20001548 	.word	0x20001548

0800530c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005314:	f000 ff88 	bl	8006228 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005318:	4b2a      	ldr	r3, [pc, #168]	@ (80053c4 <prvAddNewTaskToReadyList+0xb8>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3301      	adds	r3, #1
 800531e:	4a29      	ldr	r2, [pc, #164]	@ (80053c4 <prvAddNewTaskToReadyList+0xb8>)
 8005320:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005322:	4b29      	ldr	r3, [pc, #164]	@ (80053c8 <prvAddNewTaskToReadyList+0xbc>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d109      	bne.n	800533e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800532a:	4a27      	ldr	r2, [pc, #156]	@ (80053c8 <prvAddNewTaskToReadyList+0xbc>)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005330:	4b24      	ldr	r3, [pc, #144]	@ (80053c4 <prvAddNewTaskToReadyList+0xb8>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d110      	bne.n	800535a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005338:	f000 fbe4 	bl	8005b04 <prvInitialiseTaskLists>
 800533c:	e00d      	b.n	800535a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800533e:	4b23      	ldr	r3, [pc, #140]	@ (80053cc <prvAddNewTaskToReadyList+0xc0>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d109      	bne.n	800535a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005346:	4b20      	ldr	r3, [pc, #128]	@ (80053c8 <prvAddNewTaskToReadyList+0xbc>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005350:	429a      	cmp	r2, r3
 8005352:	d802      	bhi.n	800535a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005354:	4a1c      	ldr	r2, [pc, #112]	@ (80053c8 <prvAddNewTaskToReadyList+0xbc>)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800535a:	4b1d      	ldr	r3, [pc, #116]	@ (80053d0 <prvAddNewTaskToReadyList+0xc4>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	3301      	adds	r3, #1
 8005360:	4a1b      	ldr	r2, [pc, #108]	@ (80053d0 <prvAddNewTaskToReadyList+0xc4>)
 8005362:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005368:	2201      	movs	r2, #1
 800536a:	409a      	lsls	r2, r3
 800536c:	4b19      	ldr	r3, [pc, #100]	@ (80053d4 <prvAddNewTaskToReadyList+0xc8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4313      	orrs	r3, r2
 8005372:	4a18      	ldr	r2, [pc, #96]	@ (80053d4 <prvAddNewTaskToReadyList+0xc8>)
 8005374:	6013      	str	r3, [r2, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800537a:	4613      	mov	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4a15      	ldr	r2, [pc, #84]	@ (80053d8 <prvAddNewTaskToReadyList+0xcc>)
 8005384:	441a      	add	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	3304      	adds	r3, #4
 800538a:	4619      	mov	r1, r3
 800538c:	4610      	mov	r0, r2
 800538e:	f7ff fb0b 	bl	80049a8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005392:	f000 ff7b 	bl	800628c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005396:	4b0d      	ldr	r3, [pc, #52]	@ (80053cc <prvAddNewTaskToReadyList+0xc0>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00e      	beq.n	80053bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800539e:	4b0a      	ldr	r3, [pc, #40]	@ (80053c8 <prvAddNewTaskToReadyList+0xbc>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d207      	bcs.n	80053bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053ac:	4b0b      	ldr	r3, [pc, #44]	@ (80053dc <prvAddNewTaskToReadyList+0xd0>)
 80053ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053bc:	bf00      	nop
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	20000514 	.word	0x20000514
 80053c8:	20000414 	.word	0x20000414
 80053cc:	20000520 	.word	0x20000520
 80053d0:	20000530 	.word	0x20000530
 80053d4:	2000051c 	.word	0x2000051c
 80053d8:	20000418 	.word	0x20000418
 80053dc:	e000ed04 	.word	0xe000ed04

080053e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053e8:	2300      	movs	r3, #0
 80053ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d018      	beq.n	8005424 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80053f2:	4b14      	ldr	r3, [pc, #80]	@ (8005444 <vTaskDelay+0x64>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00b      	beq.n	8005412 <vTaskDelay+0x32>
	__asm volatile
 80053fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053fe:	f383 8811 	msr	BASEPRI, r3
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	60bb      	str	r3, [r7, #8]
}
 800540c:	bf00      	nop
 800540e:	bf00      	nop
 8005410:	e7fd      	b.n	800540e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005412:	f000 f885 	bl	8005520 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005416:	2100      	movs	r1, #0
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 fd6f 	bl	8005efc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800541e:	f000 f88d 	bl	800553c <xTaskResumeAll>
 8005422:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d107      	bne.n	800543a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800542a:	4b07      	ldr	r3, [pc, #28]	@ (8005448 <vTaskDelay+0x68>)
 800542c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800543a:	bf00      	nop
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	2000053c 	.word	0x2000053c
 8005448:	e000ed04 	.word	0xe000ed04

0800544c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b08a      	sub	sp, #40	@ 0x28
 8005450:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005452:	2300      	movs	r3, #0
 8005454:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005456:	2300      	movs	r3, #0
 8005458:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800545a:	463a      	mov	r2, r7
 800545c:	1d39      	adds	r1, r7, #4
 800545e:	f107 0308 	add.w	r3, r7, #8
 8005462:	4618      	mov	r0, r3
 8005464:	f7fb f87c 	bl	8000560 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005468:	6839      	ldr	r1, [r7, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	9202      	str	r2, [sp, #8]
 8005470:	9301      	str	r3, [sp, #4]
 8005472:	2300      	movs	r3, #0
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	2300      	movs	r3, #0
 8005478:	460a      	mov	r2, r1
 800547a:	4921      	ldr	r1, [pc, #132]	@ (8005500 <vTaskStartScheduler+0xb4>)
 800547c:	4821      	ldr	r0, [pc, #132]	@ (8005504 <vTaskStartScheduler+0xb8>)
 800547e:	f7ff fdff 	bl	8005080 <xTaskCreateStatic>
 8005482:	4603      	mov	r3, r0
 8005484:	4a20      	ldr	r2, [pc, #128]	@ (8005508 <vTaskStartScheduler+0xbc>)
 8005486:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005488:	4b1f      	ldr	r3, [pc, #124]	@ (8005508 <vTaskStartScheduler+0xbc>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005490:	2301      	movs	r3, #1
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	e001      	b.n	800549a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005496:	2300      	movs	r3, #0
 8005498:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d11b      	bne.n	80054d8 <vTaskStartScheduler+0x8c>
	__asm volatile
 80054a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	613b      	str	r3, [r7, #16]
}
 80054b2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80054b4:	4b15      	ldr	r3, [pc, #84]	@ (800550c <vTaskStartScheduler+0xc0>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	334c      	adds	r3, #76	@ 0x4c
 80054ba:	4a15      	ldr	r2, [pc, #84]	@ (8005510 <vTaskStartScheduler+0xc4>)
 80054bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054be:	4b15      	ldr	r3, [pc, #84]	@ (8005514 <vTaskStartScheduler+0xc8>)
 80054c0:	f04f 32ff 	mov.w	r2, #4294967295
 80054c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054c6:	4b14      	ldr	r3, [pc, #80]	@ (8005518 <vTaskStartScheduler+0xcc>)
 80054c8:	2201      	movs	r2, #1
 80054ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80054cc:	4b13      	ldr	r3, [pc, #76]	@ (800551c <vTaskStartScheduler+0xd0>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054d2:	f000 fe05 	bl	80060e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054d6:	e00f      	b.n	80054f8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054de:	d10b      	bne.n	80054f8 <vTaskStartScheduler+0xac>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	60fb      	str	r3, [r7, #12]
}
 80054f2:	bf00      	nop
 80054f4:	bf00      	nop
 80054f6:	e7fd      	b.n	80054f4 <vTaskStartScheduler+0xa8>
}
 80054f8:	bf00      	nop
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	080081a8 	.word	0x080081a8
 8005504:	08005ad5 	.word	0x08005ad5
 8005508:	20000538 	.word	0x20000538
 800550c:	20000414 	.word	0x20000414
 8005510:	20000024 	.word	0x20000024
 8005514:	20000534 	.word	0x20000534
 8005518:	20000520 	.word	0x20000520
 800551c:	20000518 	.word	0x20000518

08005520 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005524:	4b04      	ldr	r3, [pc, #16]	@ (8005538 <vTaskSuspendAll+0x18>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3301      	adds	r3, #1
 800552a:	4a03      	ldr	r2, [pc, #12]	@ (8005538 <vTaskSuspendAll+0x18>)
 800552c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800552e:	bf00      	nop
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	2000053c 	.word	0x2000053c

0800553c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005542:	2300      	movs	r3, #0
 8005544:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005546:	2300      	movs	r3, #0
 8005548:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800554a:	4b42      	ldr	r3, [pc, #264]	@ (8005654 <xTaskResumeAll+0x118>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10b      	bne.n	800556a <xTaskResumeAll+0x2e>
	__asm volatile
 8005552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	603b      	str	r3, [r7, #0]
}
 8005564:	bf00      	nop
 8005566:	bf00      	nop
 8005568:	e7fd      	b.n	8005566 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800556a:	f000 fe5d 	bl	8006228 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800556e:	4b39      	ldr	r3, [pc, #228]	@ (8005654 <xTaskResumeAll+0x118>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3b01      	subs	r3, #1
 8005574:	4a37      	ldr	r2, [pc, #220]	@ (8005654 <xTaskResumeAll+0x118>)
 8005576:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005578:	4b36      	ldr	r3, [pc, #216]	@ (8005654 <xTaskResumeAll+0x118>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d161      	bne.n	8005644 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005580:	4b35      	ldr	r3, [pc, #212]	@ (8005658 <xTaskResumeAll+0x11c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d05d      	beq.n	8005644 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005588:	e02e      	b.n	80055e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800558a:	4b34      	ldr	r3, [pc, #208]	@ (800565c <xTaskResumeAll+0x120>)
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3318      	adds	r3, #24
 8005596:	4618      	mov	r0, r3
 8005598:	f7ff fa63 	bl	8004a62 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	3304      	adds	r3, #4
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7ff fa5e 	bl	8004a62 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055aa:	2201      	movs	r2, #1
 80055ac:	409a      	lsls	r2, r3
 80055ae:	4b2c      	ldr	r3, [pc, #176]	@ (8005660 <xTaskResumeAll+0x124>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	4a2a      	ldr	r2, [pc, #168]	@ (8005660 <xTaskResumeAll+0x124>)
 80055b6:	6013      	str	r3, [r2, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055bc:	4613      	mov	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4a27      	ldr	r2, [pc, #156]	@ (8005664 <xTaskResumeAll+0x128>)
 80055c6:	441a      	add	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	3304      	adds	r3, #4
 80055cc:	4619      	mov	r1, r3
 80055ce:	4610      	mov	r0, r2
 80055d0:	f7ff f9ea 	bl	80049a8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055d8:	4b23      	ldr	r3, [pc, #140]	@ (8005668 <xTaskResumeAll+0x12c>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055de:	429a      	cmp	r2, r3
 80055e0:	d302      	bcc.n	80055e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80055e2:	4b22      	ldr	r3, [pc, #136]	@ (800566c <xTaskResumeAll+0x130>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055e8:	4b1c      	ldr	r3, [pc, #112]	@ (800565c <xTaskResumeAll+0x120>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1cc      	bne.n	800558a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055f6:	f000 fb29 	bl	8005c4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80055fa:	4b1d      	ldr	r3, [pc, #116]	@ (8005670 <xTaskResumeAll+0x134>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d010      	beq.n	8005628 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005606:	f000 f837 	bl	8005678 <xTaskIncrementTick>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005610:	4b16      	ldr	r3, [pc, #88]	@ (800566c <xTaskResumeAll+0x130>)
 8005612:	2201      	movs	r2, #1
 8005614:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	3b01      	subs	r3, #1
 800561a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1f1      	bne.n	8005606 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005622:	4b13      	ldr	r3, [pc, #76]	@ (8005670 <xTaskResumeAll+0x134>)
 8005624:	2200      	movs	r2, #0
 8005626:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005628:	4b10      	ldr	r3, [pc, #64]	@ (800566c <xTaskResumeAll+0x130>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d009      	beq.n	8005644 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005630:	2301      	movs	r3, #1
 8005632:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005634:	4b0f      	ldr	r3, [pc, #60]	@ (8005674 <xTaskResumeAll+0x138>)
 8005636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005644:	f000 fe22 	bl	800628c <vPortExitCritical>

	return xAlreadyYielded;
 8005648:	68bb      	ldr	r3, [r7, #8]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	2000053c 	.word	0x2000053c
 8005658:	20000514 	.word	0x20000514
 800565c:	200004d4 	.word	0x200004d4
 8005660:	2000051c 	.word	0x2000051c
 8005664:	20000418 	.word	0x20000418
 8005668:	20000414 	.word	0x20000414
 800566c:	20000528 	.word	0x20000528
 8005670:	20000524 	.word	0x20000524
 8005674:	e000ed04 	.word	0xe000ed04

08005678 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800567e:	2300      	movs	r3, #0
 8005680:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005682:	4b4f      	ldr	r3, [pc, #316]	@ (80057c0 <xTaskIncrementTick+0x148>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	f040 808f 	bne.w	80057aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800568c:	4b4d      	ldr	r3, [pc, #308]	@ (80057c4 <xTaskIncrementTick+0x14c>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	3301      	adds	r3, #1
 8005692:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005694:	4a4b      	ldr	r2, [pc, #300]	@ (80057c4 <xTaskIncrementTick+0x14c>)
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d121      	bne.n	80056e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80056a0:	4b49      	ldr	r3, [pc, #292]	@ (80057c8 <xTaskIncrementTick+0x150>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00b      	beq.n	80056c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	603b      	str	r3, [r7, #0]
}
 80056bc:	bf00      	nop
 80056be:	bf00      	nop
 80056c0:	e7fd      	b.n	80056be <xTaskIncrementTick+0x46>
 80056c2:	4b41      	ldr	r3, [pc, #260]	@ (80057c8 <xTaskIncrementTick+0x150>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	4b40      	ldr	r3, [pc, #256]	@ (80057cc <xTaskIncrementTick+0x154>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a3e      	ldr	r2, [pc, #248]	@ (80057c8 <xTaskIncrementTick+0x150>)
 80056ce:	6013      	str	r3, [r2, #0]
 80056d0:	4a3e      	ldr	r2, [pc, #248]	@ (80057cc <xTaskIncrementTick+0x154>)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	4b3e      	ldr	r3, [pc, #248]	@ (80057d0 <xTaskIncrementTick+0x158>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3301      	adds	r3, #1
 80056dc:	4a3c      	ldr	r2, [pc, #240]	@ (80057d0 <xTaskIncrementTick+0x158>)
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	f000 fab4 	bl	8005c4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056e4:	4b3b      	ldr	r3, [pc, #236]	@ (80057d4 <xTaskIncrementTick+0x15c>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d348      	bcc.n	8005780 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056ee:	4b36      	ldr	r3, [pc, #216]	@ (80057c8 <xTaskIncrementTick+0x150>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d104      	bne.n	8005702 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056f8:	4b36      	ldr	r3, [pc, #216]	@ (80057d4 <xTaskIncrementTick+0x15c>)
 80056fa:	f04f 32ff 	mov.w	r2, #4294967295
 80056fe:	601a      	str	r2, [r3, #0]
					break;
 8005700:	e03e      	b.n	8005780 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005702:	4b31      	ldr	r3, [pc, #196]	@ (80057c8 <xTaskIncrementTick+0x150>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	429a      	cmp	r2, r3
 8005718:	d203      	bcs.n	8005722 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800571a:	4a2e      	ldr	r2, [pc, #184]	@ (80057d4 <xTaskIncrementTick+0x15c>)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005720:	e02e      	b.n	8005780 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	3304      	adds	r3, #4
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff f99b 	bl	8004a62 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005730:	2b00      	cmp	r3, #0
 8005732:	d004      	beq.n	800573e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	3318      	adds	r3, #24
 8005738:	4618      	mov	r0, r3
 800573a:	f7ff f992 	bl	8004a62 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005742:	2201      	movs	r2, #1
 8005744:	409a      	lsls	r2, r3
 8005746:	4b24      	ldr	r3, [pc, #144]	@ (80057d8 <xTaskIncrementTick+0x160>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4313      	orrs	r3, r2
 800574c:	4a22      	ldr	r2, [pc, #136]	@ (80057d8 <xTaskIncrementTick+0x160>)
 800574e:	6013      	str	r3, [r2, #0]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005754:	4613      	mov	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4a1f      	ldr	r2, [pc, #124]	@ (80057dc <xTaskIncrementTick+0x164>)
 800575e:	441a      	add	r2, r3
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	3304      	adds	r3, #4
 8005764:	4619      	mov	r1, r3
 8005766:	4610      	mov	r0, r2
 8005768:	f7ff f91e 	bl	80049a8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005770:	4b1b      	ldr	r3, [pc, #108]	@ (80057e0 <xTaskIncrementTick+0x168>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005776:	429a      	cmp	r2, r3
 8005778:	d3b9      	bcc.n	80056ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800577a:	2301      	movs	r3, #1
 800577c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800577e:	e7b6      	b.n	80056ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005780:	4b17      	ldr	r3, [pc, #92]	@ (80057e0 <xTaskIncrementTick+0x168>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005786:	4915      	ldr	r1, [pc, #84]	@ (80057dc <xTaskIncrementTick+0x164>)
 8005788:	4613      	mov	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	440b      	add	r3, r1
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d901      	bls.n	800579c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005798:	2301      	movs	r3, #1
 800579a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800579c:	4b11      	ldr	r3, [pc, #68]	@ (80057e4 <xTaskIncrementTick+0x16c>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d007      	beq.n	80057b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80057a4:	2301      	movs	r3, #1
 80057a6:	617b      	str	r3, [r7, #20]
 80057a8:	e004      	b.n	80057b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80057aa:	4b0f      	ldr	r3, [pc, #60]	@ (80057e8 <xTaskIncrementTick+0x170>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3301      	adds	r3, #1
 80057b0:	4a0d      	ldr	r2, [pc, #52]	@ (80057e8 <xTaskIncrementTick+0x170>)
 80057b2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80057b4:	697b      	ldr	r3, [r7, #20]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3718      	adds	r7, #24
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	2000053c 	.word	0x2000053c
 80057c4:	20000518 	.word	0x20000518
 80057c8:	200004cc 	.word	0x200004cc
 80057cc:	200004d0 	.word	0x200004d0
 80057d0:	2000052c 	.word	0x2000052c
 80057d4:	20000534 	.word	0x20000534
 80057d8:	2000051c 	.word	0x2000051c
 80057dc:	20000418 	.word	0x20000418
 80057e0:	20000414 	.word	0x20000414
 80057e4:	20000528 	.word	0x20000528
 80057e8:	20000524 	.word	0x20000524

080057ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057f2:	4b2a      	ldr	r3, [pc, #168]	@ (800589c <vTaskSwitchContext+0xb0>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057fa:	4b29      	ldr	r3, [pc, #164]	@ (80058a0 <vTaskSwitchContext+0xb4>)
 80057fc:	2201      	movs	r2, #1
 80057fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005800:	e045      	b.n	800588e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005802:	4b27      	ldr	r3, [pc, #156]	@ (80058a0 <vTaskSwitchContext+0xb4>)
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005808:	4b26      	ldr	r3, [pc, #152]	@ (80058a4 <vTaskSwitchContext+0xb8>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	fab3 f383 	clz	r3, r3
 8005814:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005816:	7afb      	ldrb	r3, [r7, #11]
 8005818:	f1c3 031f 	rsb	r3, r3, #31
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	4922      	ldr	r1, [pc, #136]	@ (80058a8 <vTaskSwitchContext+0xbc>)
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	4613      	mov	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	440b      	add	r3, r1
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10b      	bne.n	800584a <vTaskSwitchContext+0x5e>
	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	607b      	str	r3, [r7, #4]
}
 8005844:	bf00      	nop
 8005846:	bf00      	nop
 8005848:	e7fd      	b.n	8005846 <vTaskSwitchContext+0x5a>
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	4613      	mov	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4a14      	ldr	r2, [pc, #80]	@ (80058a8 <vTaskSwitchContext+0xbc>)
 8005856:	4413      	add	r3, r2
 8005858:	613b      	str	r3, [r7, #16]
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	605a      	str	r2, [r3, #4]
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	3308      	adds	r3, #8
 800586c:	429a      	cmp	r2, r3
 800586e:	d104      	bne.n	800587a <vTaskSwitchContext+0x8e>
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	605a      	str	r2, [r3, #4]
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	4a0a      	ldr	r2, [pc, #40]	@ (80058ac <vTaskSwitchContext+0xc0>)
 8005882:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005884:	4b09      	ldr	r3, [pc, #36]	@ (80058ac <vTaskSwitchContext+0xc0>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	334c      	adds	r3, #76	@ 0x4c
 800588a:	4a09      	ldr	r2, [pc, #36]	@ (80058b0 <vTaskSwitchContext+0xc4>)
 800588c:	6013      	str	r3, [r2, #0]
}
 800588e:	bf00      	nop
 8005890:	371c      	adds	r7, #28
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	2000053c 	.word	0x2000053c
 80058a0:	20000528 	.word	0x20000528
 80058a4:	2000051c 	.word	0x2000051c
 80058a8:	20000418 	.word	0x20000418
 80058ac:	20000414 	.word	0x20000414
 80058b0:	20000024 	.word	0x20000024

080058b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10b      	bne.n	80058dc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	60fb      	str	r3, [r7, #12]
}
 80058d6:	bf00      	nop
 80058d8:	bf00      	nop
 80058da:	e7fd      	b.n	80058d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058dc:	4b07      	ldr	r3, [pc, #28]	@ (80058fc <vTaskPlaceOnEventList+0x48>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3318      	adds	r3, #24
 80058e2:	4619      	mov	r1, r3
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f7ff f883 	bl	80049f0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058ea:	2101      	movs	r1, #1
 80058ec:	6838      	ldr	r0, [r7, #0]
 80058ee:	f000 fb05 	bl	8005efc <prvAddCurrentTaskToDelayedList>
}
 80058f2:	bf00      	nop
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	20000414 	.word	0x20000414

08005900 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10b      	bne.n	800592e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	60fb      	str	r3, [r7, #12]
}
 8005928:	bf00      	nop
 800592a:	bf00      	nop
 800592c:	e7fd      	b.n	800592a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	3318      	adds	r3, #24
 8005932:	4618      	mov	r0, r3
 8005934:	f7ff f895 	bl	8004a62 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005938:	4b1d      	ldr	r3, [pc, #116]	@ (80059b0 <xTaskRemoveFromEventList+0xb0>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d11c      	bne.n	800597a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	3304      	adds	r3, #4
 8005944:	4618      	mov	r0, r3
 8005946:	f7ff f88c 	bl	8004a62 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594e:	2201      	movs	r2, #1
 8005950:	409a      	lsls	r2, r3
 8005952:	4b18      	ldr	r3, [pc, #96]	@ (80059b4 <xTaskRemoveFromEventList+0xb4>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4313      	orrs	r3, r2
 8005958:	4a16      	ldr	r2, [pc, #88]	@ (80059b4 <xTaskRemoveFromEventList+0xb4>)
 800595a:	6013      	str	r3, [r2, #0]
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005960:	4613      	mov	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4a13      	ldr	r2, [pc, #76]	@ (80059b8 <xTaskRemoveFromEventList+0xb8>)
 800596a:	441a      	add	r2, r3
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	3304      	adds	r3, #4
 8005970:	4619      	mov	r1, r3
 8005972:	4610      	mov	r0, r2
 8005974:	f7ff f818 	bl	80049a8 <vListInsertEnd>
 8005978:	e005      	b.n	8005986 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	3318      	adds	r3, #24
 800597e:	4619      	mov	r1, r3
 8005980:	480e      	ldr	r0, [pc, #56]	@ (80059bc <xTaskRemoveFromEventList+0xbc>)
 8005982:	f7ff f811 	bl	80049a8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800598a:	4b0d      	ldr	r3, [pc, #52]	@ (80059c0 <xTaskRemoveFromEventList+0xc0>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005990:	429a      	cmp	r2, r3
 8005992:	d905      	bls.n	80059a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005994:	2301      	movs	r3, #1
 8005996:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005998:	4b0a      	ldr	r3, [pc, #40]	@ (80059c4 <xTaskRemoveFromEventList+0xc4>)
 800599a:	2201      	movs	r2, #1
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	e001      	b.n	80059a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80059a0:	2300      	movs	r3, #0
 80059a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80059a4:	697b      	ldr	r3, [r7, #20]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	2000053c 	.word	0x2000053c
 80059b4:	2000051c 	.word	0x2000051c
 80059b8:	20000418 	.word	0x20000418
 80059bc:	200004d4 	.word	0x200004d4
 80059c0:	20000414 	.word	0x20000414
 80059c4:	20000528 	.word	0x20000528

080059c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059d0:	4b06      	ldr	r3, [pc, #24]	@ (80059ec <vTaskInternalSetTimeOutState+0x24>)
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059d8:	4b05      	ldr	r3, [pc, #20]	@ (80059f0 <vTaskInternalSetTimeOutState+0x28>)
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	605a      	str	r2, [r3, #4]
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	2000052c 	.word	0x2000052c
 80059f0:	20000518 	.word	0x20000518

080059f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b088      	sub	sp, #32
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10b      	bne.n	8005a1c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	613b      	str	r3, [r7, #16]
}
 8005a16:	bf00      	nop
 8005a18:	bf00      	nop
 8005a1a:	e7fd      	b.n	8005a18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10b      	bne.n	8005a3a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	60fb      	str	r3, [r7, #12]
}
 8005a34:	bf00      	nop
 8005a36:	bf00      	nop
 8005a38:	e7fd      	b.n	8005a36 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005a3a:	f000 fbf5 	bl	8006228 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ab4 <xTaskCheckForTimeOut+0xc0>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a56:	d102      	bne.n	8005a5e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	61fb      	str	r3, [r7, #28]
 8005a5c:	e023      	b.n	8005aa6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	4b15      	ldr	r3, [pc, #84]	@ (8005ab8 <xTaskCheckForTimeOut+0xc4>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d007      	beq.n	8005a7a <xTaskCheckForTimeOut+0x86>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d302      	bcc.n	8005a7a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a74:	2301      	movs	r3, #1
 8005a76:	61fb      	str	r3, [r7, #28]
 8005a78:	e015      	b.n	8005aa6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d20b      	bcs.n	8005a9c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	1ad2      	subs	r2, r2, r3
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7ff ff99 	bl	80059c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a96:	2300      	movs	r3, #0
 8005a98:	61fb      	str	r3, [r7, #28]
 8005a9a:	e004      	b.n	8005aa6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005aa6:	f000 fbf1 	bl	800628c <vPortExitCritical>

	return xReturn;
 8005aaa:	69fb      	ldr	r3, [r7, #28]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3720      	adds	r7, #32
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	20000518 	.word	0x20000518
 8005ab8:	2000052c 	.word	0x2000052c

08005abc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ac0:	4b03      	ldr	r3, [pc, #12]	@ (8005ad0 <vTaskMissedYield+0x14>)
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]
}
 8005ac6:	bf00      	nop
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	20000528 	.word	0x20000528

08005ad4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005adc:	f000 f852 	bl	8005b84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ae0:	4b06      	ldr	r3, [pc, #24]	@ (8005afc <prvIdleTask+0x28>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d9f9      	bls.n	8005adc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ae8:	4b05      	ldr	r3, [pc, #20]	@ (8005b00 <prvIdleTask+0x2c>)
 8005aea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005af8:	e7f0      	b.n	8005adc <prvIdleTask+0x8>
 8005afa:	bf00      	nop
 8005afc:	20000418 	.word	0x20000418
 8005b00:	e000ed04 	.word	0xe000ed04

08005b04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	607b      	str	r3, [r7, #4]
 8005b0e:	e00c      	b.n	8005b2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	4613      	mov	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4a12      	ldr	r2, [pc, #72]	@ (8005b64 <prvInitialiseTaskLists+0x60>)
 8005b1c:	4413      	add	r3, r2
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fe ff15 	bl	800494e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	3301      	adds	r3, #1
 8005b28:	607b      	str	r3, [r7, #4]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b06      	cmp	r3, #6
 8005b2e:	d9ef      	bls.n	8005b10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b30:	480d      	ldr	r0, [pc, #52]	@ (8005b68 <prvInitialiseTaskLists+0x64>)
 8005b32:	f7fe ff0c 	bl	800494e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b36:	480d      	ldr	r0, [pc, #52]	@ (8005b6c <prvInitialiseTaskLists+0x68>)
 8005b38:	f7fe ff09 	bl	800494e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b3c:	480c      	ldr	r0, [pc, #48]	@ (8005b70 <prvInitialiseTaskLists+0x6c>)
 8005b3e:	f7fe ff06 	bl	800494e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b42:	480c      	ldr	r0, [pc, #48]	@ (8005b74 <prvInitialiseTaskLists+0x70>)
 8005b44:	f7fe ff03 	bl	800494e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b48:	480b      	ldr	r0, [pc, #44]	@ (8005b78 <prvInitialiseTaskLists+0x74>)
 8005b4a:	f7fe ff00 	bl	800494e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b7c <prvInitialiseTaskLists+0x78>)
 8005b50:	4a05      	ldr	r2, [pc, #20]	@ (8005b68 <prvInitialiseTaskLists+0x64>)
 8005b52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b54:	4b0a      	ldr	r3, [pc, #40]	@ (8005b80 <prvInitialiseTaskLists+0x7c>)
 8005b56:	4a05      	ldr	r2, [pc, #20]	@ (8005b6c <prvInitialiseTaskLists+0x68>)
 8005b58:	601a      	str	r2, [r3, #0]
}
 8005b5a:	bf00      	nop
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	20000418 	.word	0x20000418
 8005b68:	200004a4 	.word	0x200004a4
 8005b6c:	200004b8 	.word	0x200004b8
 8005b70:	200004d4 	.word	0x200004d4
 8005b74:	200004e8 	.word	0x200004e8
 8005b78:	20000500 	.word	0x20000500
 8005b7c:	200004cc 	.word	0x200004cc
 8005b80:	200004d0 	.word	0x200004d0

08005b84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b8a:	e019      	b.n	8005bc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b8c:	f000 fb4c 	bl	8006228 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b90:	4b10      	ldr	r3, [pc, #64]	@ (8005bd4 <prvCheckTasksWaitingTermination+0x50>)
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3304      	adds	r3, #4
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7fe ff60 	bl	8004a62 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd8 <prvCheckTasksWaitingTermination+0x54>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	4a0b      	ldr	r2, [pc, #44]	@ (8005bd8 <prvCheckTasksWaitingTermination+0x54>)
 8005baa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005bac:	4b0b      	ldr	r3, [pc, #44]	@ (8005bdc <prvCheckTasksWaitingTermination+0x58>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8005bdc <prvCheckTasksWaitingTermination+0x58>)
 8005bb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bb6:	f000 fb69 	bl	800628c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f810 	bl	8005be0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bc0:	4b06      	ldr	r3, [pc, #24]	@ (8005bdc <prvCheckTasksWaitingTermination+0x58>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1e1      	bne.n	8005b8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005bc8:	bf00      	nop
 8005bca:	bf00      	nop
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	200004e8 	.word	0x200004e8
 8005bd8:	20000514 	.word	0x20000514
 8005bdc:	200004fc 	.word	0x200004fc

08005be0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	334c      	adds	r3, #76	@ 0x4c
 8005bec:	4618      	mov	r0, r3
 8005bee:	f001 fae3 	bl	80071b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d108      	bne.n	8005c0e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 fd01 	bl	8006608 <vPortFree>
				vPortFree( pxTCB );
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 fcfe 	bl	8006608 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c0c:	e019      	b.n	8005c42 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d103      	bne.n	8005c20 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 fcf5 	bl	8006608 <vPortFree>
	}
 8005c1e:	e010      	b.n	8005c42 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d00b      	beq.n	8005c42 <prvDeleteTCB+0x62>
	__asm volatile
 8005c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	60fb      	str	r3, [r7, #12]
}
 8005c3c:	bf00      	nop
 8005c3e:	bf00      	nop
 8005c40:	e7fd      	b.n	8005c3e <prvDeleteTCB+0x5e>
	}
 8005c42:	bf00      	nop
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
	...

08005c4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c52:	4b0c      	ldr	r3, [pc, #48]	@ (8005c84 <prvResetNextTaskUnblockTime+0x38>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d104      	bne.n	8005c66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c88 <prvResetNextTaskUnblockTime+0x3c>)
 8005c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c64:	e008      	b.n	8005c78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c66:	4b07      	ldr	r3, [pc, #28]	@ (8005c84 <prvResetNextTaskUnblockTime+0x38>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	4a04      	ldr	r2, [pc, #16]	@ (8005c88 <prvResetNextTaskUnblockTime+0x3c>)
 8005c76:	6013      	str	r3, [r2, #0]
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	200004cc 	.word	0x200004cc
 8005c88:	20000534 	.word	0x20000534

08005c8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c92:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc0 <xTaskGetSchedulerState+0x34>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d102      	bne.n	8005ca0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	607b      	str	r3, [r7, #4]
 8005c9e:	e008      	b.n	8005cb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ca0:	4b08      	ldr	r3, [pc, #32]	@ (8005cc4 <xTaskGetSchedulerState+0x38>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d102      	bne.n	8005cae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ca8:	2302      	movs	r3, #2
 8005caa:	607b      	str	r3, [r7, #4]
 8005cac:	e001      	b.n	8005cb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005cb2:	687b      	ldr	r3, [r7, #4]
	}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	20000520 	.word	0x20000520
 8005cc4:	2000053c 	.word	0x2000053c

08005cc8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d05e      	beq.n	8005d9c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ce2:	4b31      	ldr	r3, [pc, #196]	@ (8005da8 <xTaskPriorityInherit+0xe0>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d24e      	bcs.n	8005d8a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	db06      	blt.n	8005d02 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cf4:	4b2c      	ldr	r3, [pc, #176]	@ (8005da8 <xTaskPriorityInherit+0xe0>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cfa:	f1c3 0207 	rsb	r2, r3, #7
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	6959      	ldr	r1, [r3, #20]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4a26      	ldr	r2, [pc, #152]	@ (8005dac <xTaskPriorityInherit+0xe4>)
 8005d14:	4413      	add	r3, r2
 8005d16:	4299      	cmp	r1, r3
 8005d18:	d12f      	bne.n	8005d7a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fe fe9f 	bl	8004a62 <uxListRemove>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10a      	bne.n	8005d40 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d2e:	2201      	movs	r2, #1
 8005d30:	fa02 f303 	lsl.w	r3, r2, r3
 8005d34:	43da      	mvns	r2, r3
 8005d36:	4b1e      	ldr	r3, [pc, #120]	@ (8005db0 <xTaskPriorityInherit+0xe8>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8005db0 <xTaskPriorityInherit+0xe8>)
 8005d3e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d40:	4b19      	ldr	r3, [pc, #100]	@ (8005da8 <xTaskPriorityInherit+0xe0>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4e:	2201      	movs	r2, #1
 8005d50:	409a      	lsls	r2, r3
 8005d52:	4b17      	ldr	r3, [pc, #92]	@ (8005db0 <xTaskPriorityInherit+0xe8>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	4a15      	ldr	r2, [pc, #84]	@ (8005db0 <xTaskPriorityInherit+0xe8>)
 8005d5a:	6013      	str	r3, [r2, #0]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d60:	4613      	mov	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4a10      	ldr	r2, [pc, #64]	@ (8005dac <xTaskPriorityInherit+0xe4>)
 8005d6a:	441a      	add	r2, r3
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	4619      	mov	r1, r3
 8005d72:	4610      	mov	r0, r2
 8005d74:	f7fe fe18 	bl	80049a8 <vListInsertEnd>
 8005d78:	e004      	b.n	8005d84 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8005da8 <xTaskPriorityInherit+0xe0>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005d84:	2301      	movs	r3, #1
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	e008      	b.n	8005d9c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d8e:	4b06      	ldr	r3, [pc, #24]	@ (8005da8 <xTaskPriorityInherit+0xe0>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d201      	bcs.n	8005d9c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
	}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20000414 	.word	0x20000414
 8005dac:	20000418 	.word	0x20000418
 8005db0:	2000051c 	.word	0x2000051c

08005db4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b088      	sub	sp, #32
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d079      	beq.n	8005ec0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10b      	bne.n	8005dec <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	60fb      	str	r3, [r7, #12]
}
 8005de6:	bf00      	nop
 8005de8:	bf00      	nop
 8005dea:	e7fd      	b.n	8005de8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d902      	bls.n	8005dfc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	61fb      	str	r3, [r7, #28]
 8005dfa:	e002      	b.n	8005e02 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e00:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e06:	69fa      	ldr	r2, [r7, #28]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d059      	beq.n	8005ec0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d154      	bne.n	8005ec0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005e16:	4b2c      	ldr	r3, [pc, #176]	@ (8005ec8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d10b      	bne.n	8005e38 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	60bb      	str	r3, [r7, #8]
}
 8005e32:	bf00      	nop
 8005e34:	bf00      	nop
 8005e36:	e7fd      	b.n	8005e34 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e3c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	69fa      	ldr	r2, [r7, #28]
 8005e42:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	db04      	blt.n	8005e56 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	f1c3 0207 	rsb	r2, r3, #7
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	6959      	ldr	r1, [r3, #20]
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4a19      	ldr	r2, [pc, #100]	@ (8005ecc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005e66:	4413      	add	r3, r2
 8005e68:	4299      	cmp	r1, r3
 8005e6a:	d129      	bne.n	8005ec0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	3304      	adds	r3, #4
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fe fdf6 	bl	8004a62 <uxListRemove>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10a      	bne.n	8005e92 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e80:	2201      	movs	r2, #1
 8005e82:	fa02 f303 	lsl.w	r3, r2, r3
 8005e86:	43da      	mvns	r2, r3
 8005e88:	4b11      	ldr	r3, [pc, #68]	@ (8005ed0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	4a10      	ldr	r2, [pc, #64]	@ (8005ed0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005e90:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e96:	2201      	movs	r2, #1
 8005e98:	409a      	lsls	r2, r3
 8005e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	4a0b      	ldr	r2, [pc, #44]	@ (8005ed0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005ea2:	6013      	str	r3, [r2, #0]
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4413      	add	r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4a06      	ldr	r2, [pc, #24]	@ (8005ecc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005eb2:	441a      	add	r2, r3
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	3304      	adds	r3, #4
 8005eb8:	4619      	mov	r1, r3
 8005eba:	4610      	mov	r0, r2
 8005ebc:	f7fe fd74 	bl	80049a8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ec0:	bf00      	nop
 8005ec2:	3720      	adds	r7, #32
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	20000414 	.word	0x20000414
 8005ecc:	20000418 	.word	0x20000418
 8005ed0:	2000051c 	.word	0x2000051c

08005ed4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005ed4:	b480      	push	{r7}
 8005ed6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005ed8:	4b07      	ldr	r3, [pc, #28]	@ (8005ef8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d004      	beq.n	8005eea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005ee0:	4b05      	ldr	r3, [pc, #20]	@ (8005ef8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ee6:	3201      	adds	r2, #1
 8005ee8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8005eea:	4b03      	ldr	r3, [pc, #12]	@ (8005ef8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005eec:	681b      	ldr	r3, [r3, #0]
	}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr
 8005ef8:	20000414 	.word	0x20000414

08005efc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f06:	4b29      	ldr	r3, [pc, #164]	@ (8005fac <prvAddCurrentTaskToDelayedList+0xb0>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f0c:	4b28      	ldr	r3, [pc, #160]	@ (8005fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	3304      	adds	r3, #4
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7fe fda5 	bl	8004a62 <uxListRemove>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10b      	bne.n	8005f36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005f1e:	4b24      	ldr	r3, [pc, #144]	@ (8005fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f24:	2201      	movs	r2, #1
 8005f26:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2a:	43da      	mvns	r2, r3
 8005f2c:	4b21      	ldr	r3, [pc, #132]	@ (8005fb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4013      	ands	r3, r2
 8005f32:	4a20      	ldr	r2, [pc, #128]	@ (8005fb4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005f34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3c:	d10a      	bne.n	8005f54 <prvAddCurrentTaskToDelayedList+0x58>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d007      	beq.n	8005f54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f44:	4b1a      	ldr	r3, [pc, #104]	@ (8005fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3304      	adds	r3, #4
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	481a      	ldr	r0, [pc, #104]	@ (8005fb8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005f4e:	f7fe fd2b 	bl	80049a8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f52:	e026      	b.n	8005fa2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4413      	add	r3, r2
 8005f5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f5c:	4b14      	ldr	r3, [pc, #80]	@ (8005fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d209      	bcs.n	8005f80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f6c:	4b13      	ldr	r3, [pc, #76]	@ (8005fbc <prvAddCurrentTaskToDelayedList+0xc0>)
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	4b0f      	ldr	r3, [pc, #60]	@ (8005fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3304      	adds	r3, #4
 8005f76:	4619      	mov	r1, r3
 8005f78:	4610      	mov	r0, r2
 8005f7a:	f7fe fd39 	bl	80049f0 <vListInsert>
}
 8005f7e:	e010      	b.n	8005fa2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f80:	4b0f      	ldr	r3, [pc, #60]	@ (8005fc0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	4b0a      	ldr	r3, [pc, #40]	@ (8005fb0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	3304      	adds	r3, #4
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	f7fe fd2f 	bl	80049f0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f92:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d202      	bcs.n	8005fa2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005f9c:	4a09      	ldr	r2, [pc, #36]	@ (8005fc4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	6013      	str	r3, [r2, #0]
}
 8005fa2:	bf00      	nop
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	20000518 	.word	0x20000518
 8005fb0:	20000414 	.word	0x20000414
 8005fb4:	2000051c 	.word	0x2000051c
 8005fb8:	20000500 	.word	0x20000500
 8005fbc:	200004d0 	.word	0x200004d0
 8005fc0:	200004cc 	.word	0x200004cc
 8005fc4:	20000534 	.word	0x20000534

08005fc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	3b04      	subs	r3, #4
 8005fd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005fe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3b04      	subs	r3, #4
 8005fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f023 0201 	bic.w	r2, r3, #1
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3b04      	subs	r3, #4
 8005ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ff8:	4a0c      	ldr	r2, [pc, #48]	@ (800602c <pxPortInitialiseStack+0x64>)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	3b14      	subs	r3, #20
 8006002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	3b04      	subs	r3, #4
 800600e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f06f 0202 	mvn.w	r2, #2
 8006016:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	3b20      	subs	r3, #32
 800601c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800601e:	68fb      	ldr	r3, [r7, #12]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	08006031 	.word	0x08006031

08006030 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006036:	2300      	movs	r3, #0
 8006038:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800603a:	4b13      	ldr	r3, [pc, #76]	@ (8006088 <prvTaskExitError+0x58>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006042:	d00b      	beq.n	800605c <prvTaskExitError+0x2c>
	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	60fb      	str	r3, [r7, #12]
}
 8006056:	bf00      	nop
 8006058:	bf00      	nop
 800605a:	e7fd      	b.n	8006058 <prvTaskExitError+0x28>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	60bb      	str	r3, [r7, #8]
}
 800606e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006070:	bf00      	nop
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0fc      	beq.n	8006072 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006078:	bf00      	nop
 800607a:	bf00      	nop
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	2000000c 	.word	0x2000000c
 800608c:	00000000 	.word	0x00000000

08006090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006090:	4b07      	ldr	r3, [pc, #28]	@ (80060b0 <pxCurrentTCBConst2>)
 8006092:	6819      	ldr	r1, [r3, #0]
 8006094:	6808      	ldr	r0, [r1, #0]
 8006096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609a:	f380 8809 	msr	PSP, r0
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f04f 0000 	mov.w	r0, #0
 80060a6:	f380 8811 	msr	BASEPRI, r0
 80060aa:	4770      	bx	lr
 80060ac:	f3af 8000 	nop.w

080060b0 <pxCurrentTCBConst2>:
 80060b0:	20000414 	.word	0x20000414
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80060b4:	bf00      	nop
 80060b6:	bf00      	nop

080060b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80060b8:	4808      	ldr	r0, [pc, #32]	@ (80060dc <prvPortStartFirstTask+0x24>)
 80060ba:	6800      	ldr	r0, [r0, #0]
 80060bc:	6800      	ldr	r0, [r0, #0]
 80060be:	f380 8808 	msr	MSP, r0
 80060c2:	f04f 0000 	mov.w	r0, #0
 80060c6:	f380 8814 	msr	CONTROL, r0
 80060ca:	b662      	cpsie	i
 80060cc:	b661      	cpsie	f
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	df00      	svc	0
 80060d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80060da:	bf00      	nop
 80060dc:	e000ed08 	.word	0xe000ed08

080060e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060e6:	4b47      	ldr	r3, [pc, #284]	@ (8006204 <xPortStartScheduler+0x124>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a47      	ldr	r2, [pc, #284]	@ (8006208 <xPortStartScheduler+0x128>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d10b      	bne.n	8006108 <xPortStartScheduler+0x28>
	__asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	613b      	str	r3, [r7, #16]
}
 8006102:	bf00      	nop
 8006104:	bf00      	nop
 8006106:	e7fd      	b.n	8006104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006108:	4b3e      	ldr	r3, [pc, #248]	@ (8006204 <xPortStartScheduler+0x124>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a3f      	ldr	r2, [pc, #252]	@ (800620c <xPortStartScheduler+0x12c>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d10b      	bne.n	800612a <xPortStartScheduler+0x4a>
	__asm volatile
 8006112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	60fb      	str	r3, [r7, #12]
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop
 8006128:	e7fd      	b.n	8006126 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800612a:	4b39      	ldr	r3, [pc, #228]	@ (8006210 <xPortStartScheduler+0x130>)
 800612c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	b2db      	uxtb	r3, r3
 8006134:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	22ff      	movs	r2, #255	@ 0xff
 800613a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	b2db      	uxtb	r3, r3
 8006142:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006144:	78fb      	ldrb	r3, [r7, #3]
 8006146:	b2db      	uxtb	r3, r3
 8006148:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800614c:	b2da      	uxtb	r2, r3
 800614e:	4b31      	ldr	r3, [pc, #196]	@ (8006214 <xPortStartScheduler+0x134>)
 8006150:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006152:	4b31      	ldr	r3, [pc, #196]	@ (8006218 <xPortStartScheduler+0x138>)
 8006154:	2207      	movs	r2, #7
 8006156:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006158:	e009      	b.n	800616e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800615a:	4b2f      	ldr	r3, [pc, #188]	@ (8006218 <xPortStartScheduler+0x138>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	3b01      	subs	r3, #1
 8006160:	4a2d      	ldr	r2, [pc, #180]	@ (8006218 <xPortStartScheduler+0x138>)
 8006162:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006164:	78fb      	ldrb	r3, [r7, #3]
 8006166:	b2db      	uxtb	r3, r3
 8006168:	005b      	lsls	r3, r3, #1
 800616a:	b2db      	uxtb	r3, r3
 800616c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800616e:	78fb      	ldrb	r3, [r7, #3]
 8006170:	b2db      	uxtb	r3, r3
 8006172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006176:	2b80      	cmp	r3, #128	@ 0x80
 8006178:	d0ef      	beq.n	800615a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800617a:	4b27      	ldr	r3, [pc, #156]	@ (8006218 <xPortStartScheduler+0x138>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f1c3 0307 	rsb	r3, r3, #7
 8006182:	2b04      	cmp	r3, #4
 8006184:	d00b      	beq.n	800619e <xPortStartScheduler+0xbe>
	__asm volatile
 8006186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800618a:	f383 8811 	msr	BASEPRI, r3
 800618e:	f3bf 8f6f 	isb	sy
 8006192:	f3bf 8f4f 	dsb	sy
 8006196:	60bb      	str	r3, [r7, #8]
}
 8006198:	bf00      	nop
 800619a:	bf00      	nop
 800619c:	e7fd      	b.n	800619a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800619e:	4b1e      	ldr	r3, [pc, #120]	@ (8006218 <xPortStartScheduler+0x138>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	021b      	lsls	r3, r3, #8
 80061a4:	4a1c      	ldr	r2, [pc, #112]	@ (8006218 <xPortStartScheduler+0x138>)
 80061a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80061a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006218 <xPortStartScheduler+0x138>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80061b0:	4a19      	ldr	r2, [pc, #100]	@ (8006218 <xPortStartScheduler+0x138>)
 80061b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80061bc:	4b17      	ldr	r3, [pc, #92]	@ (800621c <xPortStartScheduler+0x13c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a16      	ldr	r2, [pc, #88]	@ (800621c <xPortStartScheduler+0x13c>)
 80061c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80061c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80061c8:	4b14      	ldr	r3, [pc, #80]	@ (800621c <xPortStartScheduler+0x13c>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a13      	ldr	r2, [pc, #76]	@ (800621c <xPortStartScheduler+0x13c>)
 80061ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80061d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80061d4:	f000 f8da 	bl	800638c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061d8:	4b11      	ldr	r3, [pc, #68]	@ (8006220 <xPortStartScheduler+0x140>)
 80061da:	2200      	movs	r2, #0
 80061dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80061de:	f000 f8f9 	bl	80063d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061e2:	4b10      	ldr	r3, [pc, #64]	@ (8006224 <xPortStartScheduler+0x144>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a0f      	ldr	r2, [pc, #60]	@ (8006224 <xPortStartScheduler+0x144>)
 80061e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80061ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061ee:	f7ff ff63 	bl	80060b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061f2:	f7ff fafb 	bl	80057ec <vTaskSwitchContext>
	prvTaskExitError();
 80061f6:	f7ff ff1b 	bl	8006030 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3718      	adds	r7, #24
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	e000ed00 	.word	0xe000ed00
 8006208:	410fc271 	.word	0x410fc271
 800620c:	410fc270 	.word	0x410fc270
 8006210:	e000e400 	.word	0xe000e400
 8006214:	20000540 	.word	0x20000540
 8006218:	20000544 	.word	0x20000544
 800621c:	e000ed20 	.word	0xe000ed20
 8006220:	2000000c 	.word	0x2000000c
 8006224:	e000ef34 	.word	0xe000ef34

08006228 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	607b      	str	r3, [r7, #4]
}
 8006240:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006242:	4b10      	ldr	r3, [pc, #64]	@ (8006284 <vPortEnterCritical+0x5c>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3301      	adds	r3, #1
 8006248:	4a0e      	ldr	r2, [pc, #56]	@ (8006284 <vPortEnterCritical+0x5c>)
 800624a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800624c:	4b0d      	ldr	r3, [pc, #52]	@ (8006284 <vPortEnterCritical+0x5c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d110      	bne.n	8006276 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006254:	4b0c      	ldr	r3, [pc, #48]	@ (8006288 <vPortEnterCritical+0x60>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00b      	beq.n	8006276 <vPortEnterCritical+0x4e>
	__asm volatile
 800625e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	603b      	str	r3, [r7, #0]
}
 8006270:	bf00      	nop
 8006272:	bf00      	nop
 8006274:	e7fd      	b.n	8006272 <vPortEnterCritical+0x4a>
	}
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	2000000c 	.word	0x2000000c
 8006288:	e000ed04 	.word	0xe000ed04

0800628c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006292:	4b12      	ldr	r3, [pc, #72]	@ (80062dc <vPortExitCritical+0x50>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10b      	bne.n	80062b2 <vPortExitCritical+0x26>
	__asm volatile
 800629a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800629e:	f383 8811 	msr	BASEPRI, r3
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	607b      	str	r3, [r7, #4]
}
 80062ac:	bf00      	nop
 80062ae:	bf00      	nop
 80062b0:	e7fd      	b.n	80062ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80062b2:	4b0a      	ldr	r3, [pc, #40]	@ (80062dc <vPortExitCritical+0x50>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3b01      	subs	r3, #1
 80062b8:	4a08      	ldr	r2, [pc, #32]	@ (80062dc <vPortExitCritical+0x50>)
 80062ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80062bc:	4b07      	ldr	r3, [pc, #28]	@ (80062dc <vPortExitCritical+0x50>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d105      	bne.n	80062d0 <vPortExitCritical+0x44>
 80062c4:	2300      	movs	r3, #0
 80062c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	f383 8811 	msr	BASEPRI, r3
}
 80062ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	2000000c 	.word	0x2000000c

080062e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062e0:	f3ef 8009 	mrs	r0, PSP
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	4b15      	ldr	r3, [pc, #84]	@ (8006340 <pxCurrentTCBConst>)
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	f01e 0f10 	tst.w	lr, #16
 80062f0:	bf08      	it	eq
 80062f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062fa:	6010      	str	r0, [r2, #0]
 80062fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006300:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006304:	f380 8811 	msr	BASEPRI, r0
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f7ff fa6c 	bl	80057ec <vTaskSwitchContext>
 8006314:	f04f 0000 	mov.w	r0, #0
 8006318:	f380 8811 	msr	BASEPRI, r0
 800631c:	bc09      	pop	{r0, r3}
 800631e:	6819      	ldr	r1, [r3, #0]
 8006320:	6808      	ldr	r0, [r1, #0]
 8006322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006326:	f01e 0f10 	tst.w	lr, #16
 800632a:	bf08      	it	eq
 800632c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006330:	f380 8809 	msr	PSP, r0
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	f3af 8000 	nop.w

08006340 <pxCurrentTCBConst>:
 8006340:	20000414 	.word	0x20000414
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006344:	bf00      	nop
 8006346:	bf00      	nop

08006348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	607b      	str	r3, [r7, #4]
}
 8006360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006362:	f7ff f989 	bl	8005678 <xTaskIncrementTick>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d003      	beq.n	8006374 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800636c:	4b06      	ldr	r3, [pc, #24]	@ (8006388 <SysTick_Handler+0x40>)
 800636e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	2300      	movs	r3, #0
 8006376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	f383 8811 	msr	BASEPRI, r3
}
 800637e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006380:	bf00      	nop
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	e000ed04 	.word	0xe000ed04

0800638c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006390:	4b0b      	ldr	r3, [pc, #44]	@ (80063c0 <vPortSetupTimerInterrupt+0x34>)
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006396:	4b0b      	ldr	r3, [pc, #44]	@ (80063c4 <vPortSetupTimerInterrupt+0x38>)
 8006398:	2200      	movs	r2, #0
 800639a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800639c:	4b0a      	ldr	r3, [pc, #40]	@ (80063c8 <vPortSetupTimerInterrupt+0x3c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a0a      	ldr	r2, [pc, #40]	@ (80063cc <vPortSetupTimerInterrupt+0x40>)
 80063a2:	fba2 2303 	umull	r2, r3, r2, r3
 80063a6:	099b      	lsrs	r3, r3, #6
 80063a8:	4a09      	ldr	r2, [pc, #36]	@ (80063d0 <vPortSetupTimerInterrupt+0x44>)
 80063aa:	3b01      	subs	r3, #1
 80063ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80063ae:	4b04      	ldr	r3, [pc, #16]	@ (80063c0 <vPortSetupTimerInterrupt+0x34>)
 80063b0:	2207      	movs	r2, #7
 80063b2:	601a      	str	r2, [r3, #0]
}
 80063b4:	bf00      	nop
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	e000e010 	.word	0xe000e010
 80063c4:	e000e018 	.word	0xe000e018
 80063c8:	20000000 	.word	0x20000000
 80063cc:	10624dd3 	.word	0x10624dd3
 80063d0:	e000e014 	.word	0xe000e014

080063d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80063d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80063e4 <vPortEnableVFP+0x10>
 80063d8:	6801      	ldr	r1, [r0, #0]
 80063da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80063de:	6001      	str	r1, [r0, #0]
 80063e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80063e2:	bf00      	nop
 80063e4:	e000ed88 	.word	0xe000ed88

080063e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80063ee:	f3ef 8305 	mrs	r3, IPSR
 80063f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b0f      	cmp	r3, #15
 80063f8:	d915      	bls.n	8006426 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80063fa:	4a18      	ldr	r2, [pc, #96]	@ (800645c <vPortValidateInterruptPriority+0x74>)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4413      	add	r3, r2
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006404:	4b16      	ldr	r3, [pc, #88]	@ (8006460 <vPortValidateInterruptPriority+0x78>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	7afa      	ldrb	r2, [r7, #11]
 800640a:	429a      	cmp	r2, r3
 800640c:	d20b      	bcs.n	8006426 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	607b      	str	r3, [r7, #4]
}
 8006420:	bf00      	nop
 8006422:	bf00      	nop
 8006424:	e7fd      	b.n	8006422 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006426:	4b0f      	ldr	r3, [pc, #60]	@ (8006464 <vPortValidateInterruptPriority+0x7c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800642e:	4b0e      	ldr	r3, [pc, #56]	@ (8006468 <vPortValidateInterruptPriority+0x80>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	429a      	cmp	r2, r3
 8006434:	d90b      	bls.n	800644e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	603b      	str	r3, [r7, #0]
}
 8006448:	bf00      	nop
 800644a:	bf00      	nop
 800644c:	e7fd      	b.n	800644a <vPortValidateInterruptPriority+0x62>
	}
 800644e:	bf00      	nop
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	e000e3f0 	.word	0xe000e3f0
 8006460:	20000540 	.word	0x20000540
 8006464:	e000ed0c 	.word	0xe000ed0c
 8006468:	20000544 	.word	0x20000544

0800646c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08a      	sub	sp, #40	@ 0x28
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006474:	2300      	movs	r3, #0
 8006476:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006478:	f7ff f852 	bl	8005520 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800647c:	4b5c      	ldr	r3, [pc, #368]	@ (80065f0 <pvPortMalloc+0x184>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006484:	f000 f924 	bl	80066d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006488:	4b5a      	ldr	r3, [pc, #360]	@ (80065f4 <pvPortMalloc+0x188>)
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4013      	ands	r3, r2
 8006490:	2b00      	cmp	r3, #0
 8006492:	f040 8095 	bne.w	80065c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d01e      	beq.n	80064da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800649c:	2208      	movs	r2, #8
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4413      	add	r3, r2
 80064a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f003 0307 	and.w	r3, r3, #7
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d015      	beq.n	80064da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f023 0307 	bic.w	r3, r3, #7
 80064b4:	3308      	adds	r3, #8
 80064b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f003 0307 	and.w	r3, r3, #7
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00b      	beq.n	80064da <pvPortMalloc+0x6e>
	__asm volatile
 80064c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c6:	f383 8811 	msr	BASEPRI, r3
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	617b      	str	r3, [r7, #20]
}
 80064d4:	bf00      	nop
 80064d6:	bf00      	nop
 80064d8:	e7fd      	b.n	80064d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d06f      	beq.n	80065c0 <pvPortMalloc+0x154>
 80064e0:	4b45      	ldr	r3, [pc, #276]	@ (80065f8 <pvPortMalloc+0x18c>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d86a      	bhi.n	80065c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064ea:	4b44      	ldr	r3, [pc, #272]	@ (80065fc <pvPortMalloc+0x190>)
 80064ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064ee:	4b43      	ldr	r3, [pc, #268]	@ (80065fc <pvPortMalloc+0x190>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064f4:	e004      	b.n	8006500 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80064f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	429a      	cmp	r2, r3
 8006508:	d903      	bls.n	8006512 <pvPortMalloc+0xa6>
 800650a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1f1      	bne.n	80064f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006512:	4b37      	ldr	r3, [pc, #220]	@ (80065f0 <pvPortMalloc+0x184>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006518:	429a      	cmp	r2, r3
 800651a:	d051      	beq.n	80065c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800651c:	6a3b      	ldr	r3, [r7, #32]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2208      	movs	r2, #8
 8006522:	4413      	add	r3, r2
 8006524:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800652e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	1ad2      	subs	r2, r2, r3
 8006536:	2308      	movs	r3, #8
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	429a      	cmp	r2, r3
 800653c:	d920      	bls.n	8006580 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800653e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4413      	add	r3, r2
 8006544:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	f003 0307 	and.w	r3, r3, #7
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00b      	beq.n	8006568 <pvPortMalloc+0xfc>
	__asm volatile
 8006550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	613b      	str	r3, [r7, #16]
}
 8006562:	bf00      	nop
 8006564:	bf00      	nop
 8006566:	e7fd      	b.n	8006564 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	1ad2      	subs	r2, r2, r3
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800657a:	69b8      	ldr	r0, [r7, #24]
 800657c:	f000 f90a 	bl	8006794 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006580:	4b1d      	ldr	r3, [pc, #116]	@ (80065f8 <pvPortMalloc+0x18c>)
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	4a1b      	ldr	r2, [pc, #108]	@ (80065f8 <pvPortMalloc+0x18c>)
 800658c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800658e:	4b1a      	ldr	r3, [pc, #104]	@ (80065f8 <pvPortMalloc+0x18c>)
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	4b1b      	ldr	r3, [pc, #108]	@ (8006600 <pvPortMalloc+0x194>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d203      	bcs.n	80065a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800659a:	4b17      	ldr	r3, [pc, #92]	@ (80065f8 <pvPortMalloc+0x18c>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a18      	ldr	r2, [pc, #96]	@ (8006600 <pvPortMalloc+0x194>)
 80065a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80065a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	4b13      	ldr	r3, [pc, #76]	@ (80065f4 <pvPortMalloc+0x188>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	431a      	orrs	r2, r3
 80065ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80065b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80065b6:	4b13      	ldr	r3, [pc, #76]	@ (8006604 <pvPortMalloc+0x198>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3301      	adds	r3, #1
 80065bc:	4a11      	ldr	r2, [pc, #68]	@ (8006604 <pvPortMalloc+0x198>)
 80065be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80065c0:	f7fe ffbc 	bl	800553c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	f003 0307 	and.w	r3, r3, #7
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00b      	beq.n	80065e6 <pvPortMalloc+0x17a>
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	60fb      	str	r3, [r7, #12]
}
 80065e0:	bf00      	nop
 80065e2:	bf00      	nop
 80065e4:	e7fd      	b.n	80065e2 <pvPortMalloc+0x176>
	return pvReturn;
 80065e6:	69fb      	ldr	r3, [r7, #28]
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3728      	adds	r7, #40	@ 0x28
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	20001108 	.word	0x20001108
 80065f4:	2000111c 	.word	0x2000111c
 80065f8:	2000110c 	.word	0x2000110c
 80065fc:	20001100 	.word	0x20001100
 8006600:	20001110 	.word	0x20001110
 8006604:	20001114 	.word	0x20001114

08006608 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d04f      	beq.n	80066ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800661a:	2308      	movs	r3, #8
 800661c:	425b      	negs	r3, r3
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	4413      	add	r3, r2
 8006622:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	4b25      	ldr	r3, [pc, #148]	@ (80066c4 <vPortFree+0xbc>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4013      	ands	r3, r2
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10b      	bne.n	800664e <vPortFree+0x46>
	__asm volatile
 8006636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663a:	f383 8811 	msr	BASEPRI, r3
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f3bf 8f4f 	dsb	sy
 8006646:	60fb      	str	r3, [r7, #12]
}
 8006648:	bf00      	nop
 800664a:	bf00      	nop
 800664c:	e7fd      	b.n	800664a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00b      	beq.n	800666e <vPortFree+0x66>
	__asm volatile
 8006656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	60bb      	str	r3, [r7, #8]
}
 8006668:	bf00      	nop
 800666a:	bf00      	nop
 800666c:	e7fd      	b.n	800666a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	4b14      	ldr	r3, [pc, #80]	@ (80066c4 <vPortFree+0xbc>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4013      	ands	r3, r2
 8006678:	2b00      	cmp	r3, #0
 800667a:	d01e      	beq.n	80066ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d11a      	bne.n	80066ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	4b0e      	ldr	r3, [pc, #56]	@ (80066c4 <vPortFree+0xbc>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	43db      	mvns	r3, r3
 800668e:	401a      	ands	r2, r3
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006694:	f7fe ff44 	bl	8005520 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	4b0a      	ldr	r3, [pc, #40]	@ (80066c8 <vPortFree+0xc0>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4413      	add	r3, r2
 80066a2:	4a09      	ldr	r2, [pc, #36]	@ (80066c8 <vPortFree+0xc0>)
 80066a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066a6:	6938      	ldr	r0, [r7, #16]
 80066a8:	f000 f874 	bl	8006794 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80066ac:	4b07      	ldr	r3, [pc, #28]	@ (80066cc <vPortFree+0xc4>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	3301      	adds	r3, #1
 80066b2:	4a06      	ldr	r2, [pc, #24]	@ (80066cc <vPortFree+0xc4>)
 80066b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80066b6:	f7fe ff41 	bl	800553c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80066ba:	bf00      	nop
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	2000111c 	.word	0x2000111c
 80066c8:	2000110c 	.word	0x2000110c
 80066cc:	20001118 	.word	0x20001118

080066d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80066d6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80066da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80066dc:	4b27      	ldr	r3, [pc, #156]	@ (800677c <prvHeapInit+0xac>)
 80066de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00c      	beq.n	8006704 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	3307      	adds	r3, #7
 80066ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f023 0307 	bic.w	r3, r3, #7
 80066f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	4a1f      	ldr	r2, [pc, #124]	@ (800677c <prvHeapInit+0xac>)
 8006700:	4413      	add	r3, r2
 8006702:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006708:	4a1d      	ldr	r2, [pc, #116]	@ (8006780 <prvHeapInit+0xb0>)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800670e:	4b1c      	ldr	r3, [pc, #112]	@ (8006780 <prvHeapInit+0xb0>)
 8006710:	2200      	movs	r2, #0
 8006712:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	4413      	add	r3, r2
 800671a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800671c:	2208      	movs	r2, #8
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	1a9b      	subs	r3, r3, r2
 8006722:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f023 0307 	bic.w	r3, r3, #7
 800672a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4a15      	ldr	r2, [pc, #84]	@ (8006784 <prvHeapInit+0xb4>)
 8006730:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006732:	4b14      	ldr	r3, [pc, #80]	@ (8006784 <prvHeapInit+0xb4>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2200      	movs	r2, #0
 8006738:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800673a:	4b12      	ldr	r3, [pc, #72]	@ (8006784 <prvHeapInit+0xb4>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2200      	movs	r2, #0
 8006740:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	1ad2      	subs	r2, r2, r3
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006750:	4b0c      	ldr	r3, [pc, #48]	@ (8006784 <prvHeapInit+0xb4>)
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	4a0a      	ldr	r2, [pc, #40]	@ (8006788 <prvHeapInit+0xb8>)
 800675e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	4a09      	ldr	r2, [pc, #36]	@ (800678c <prvHeapInit+0xbc>)
 8006766:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006768:	4b09      	ldr	r3, [pc, #36]	@ (8006790 <prvHeapInit+0xc0>)
 800676a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800676e:	601a      	str	r2, [r3, #0]
}
 8006770:	bf00      	nop
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	20000548 	.word	0x20000548
 8006780:	20001100 	.word	0x20001100
 8006784:	20001108 	.word	0x20001108
 8006788:	20001110 	.word	0x20001110
 800678c:	2000110c 	.word	0x2000110c
 8006790:	2000111c 	.word	0x2000111c

08006794 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800679c:	4b28      	ldr	r3, [pc, #160]	@ (8006840 <prvInsertBlockIntoFreeList+0xac>)
 800679e:	60fb      	str	r3, [r7, #12]
 80067a0:	e002      	b.n	80067a8 <prvInsertBlockIntoFreeList+0x14>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	60fb      	str	r3, [r7, #12]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d8f7      	bhi.n	80067a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	4413      	add	r3, r2
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d108      	bne.n	80067d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	441a      	add	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	441a      	add	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d118      	bne.n	800681c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	4b15      	ldr	r3, [pc, #84]	@ (8006844 <prvInsertBlockIntoFreeList+0xb0>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d00d      	beq.n	8006812 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	441a      	add	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	601a      	str	r2, [r3, #0]
 8006810:	e008      	b.n	8006824 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006812:	4b0c      	ldr	r3, [pc, #48]	@ (8006844 <prvInsertBlockIntoFreeList+0xb0>)
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	601a      	str	r2, [r3, #0]
 800681a:	e003      	b.n	8006824 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	429a      	cmp	r2, r3
 800682a:	d002      	beq.n	8006832 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006832:	bf00      	nop
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	20001100 	.word	0x20001100
 8006844:	20001108 	.word	0x20001108

08006848 <shell_uart_receive_irq_cb>:
static char print_buffer[BUFFER_SIZE];

static SemaphoreHandle_t sem_uart_read = NULL;

void shell_uart_receive_irq_cb(void)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 800684e:	2300      	movs	r3, #0
 8006850:	607b      	str	r3, [r7, #4]

	xSemaphoreGiveFromISR(sem_uart_read, &pxHigherPriorityTaskWoken);
 8006852:	4b0b      	ldr	r3, [pc, #44]	@ (8006880 <shell_uart_receive_irq_cb+0x38>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	1d3a      	adds	r2, r7, #4
 8006858:	4611      	mov	r1, r2
 800685a:	4618      	mov	r0, r3
 800685c:	f7fe f9f0 	bl	8004c40 <xQueueGiveFromISR>

	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d007      	beq.n	8006876 <shell_uart_receive_irq_cb+0x2e>
 8006866:	4b07      	ldr	r3, [pc, #28]	@ (8006884 <shell_uart_receive_irq_cb+0x3c>)
 8006868:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800686c:	601a      	str	r2, [r3, #0]
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	f3bf 8f6f 	isb	sy
}
 8006876:	bf00      	nop
 8006878:	3708      	adds	r7, #8
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	2000144c 	.word	0x2000144c
 8006884:	e000ed04 	.word	0xe000ed04

08006888 <uart_read>:

static char uart_read() {
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
	char c;

	HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)(&c), 1);
 800688e:	1dfb      	adds	r3, r7, #7
 8006890:	2201      	movs	r2, #1
 8006892:	4619      	mov	r1, r3
 8006894:	4807      	ldr	r0, [pc, #28]	@ (80068b4 <uart_read+0x2c>)
 8006896:	f7fc fcc9 	bl	800322c <HAL_UART_Receive_IT>
	// il faut mettre la tâche shell dans l'état bloqué, jusqu'à l'interruption de réception de caractère
	// prendre un sémaphore vide par exemple
	xSemaphoreTake(sem_uart_read, portMAX_DELAY);
 800689a:	4b07      	ldr	r3, [pc, #28]	@ (80068b8 <uart_read+0x30>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f04f 31ff 	mov.w	r1, #4294967295
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7fe fa5c 	bl	8004d60 <xQueueSemaphoreTake>

	return c;
 80068a8:	79fb      	ldrb	r3, [r7, #7]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	20000388 	.word	0x20000388
 80068b8:	2000144c 	.word	0x2000144c

080068bc <uart_write>:

static int uart_write(char * s, uint16_t size) {
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	460b      	mov	r3, r1
 80068c6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 80068c8:	887a      	ldrh	r2, [r7, #2]
 80068ca:	f04f 33ff 	mov.w	r3, #4294967295
 80068ce:	6879      	ldr	r1, [r7, #4]
 80068d0:	4803      	ldr	r0, [pc, #12]	@ (80068e0 <uart_write+0x24>)
 80068d2:	f7fc fc21 	bl	8003118 <HAL_UART_Transmit>
	return size;
 80068d6:	887b      	ldrh	r3, [r7, #2]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	20000388 	.word	0x20000388

080068e4 <sh_help>:

static int sh_help(int argc, char ** argv) {
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b086      	sub	sp, #24
 80068e8:	af02      	add	r7, sp, #8
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 80068ee:	2300      	movs	r3, #0
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	e022      	b.n	800693a <sh_help+0x56>
		int size;
		size = snprintf (print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 80068f4:	4916      	ldr	r1, [pc, #88]	@ (8006950 <sh_help+0x6c>)
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	4613      	mov	r3, r2
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	4413      	add	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	440b      	add	r3, r1
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	4618      	mov	r0, r3
 8006906:	4912      	ldr	r1, [pc, #72]	@ (8006950 <sh_help+0x6c>)
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	4613      	mov	r3, r2
 800690c:	005b      	lsls	r3, r3, #1
 800690e:	4413      	add	r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	440b      	add	r3, r1
 8006914:	3308      	adds	r3, #8
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	4603      	mov	r3, r0
 800691c:	4a0d      	ldr	r2, [pc, #52]	@ (8006954 <sh_help+0x70>)
 800691e:	2128      	movs	r1, #40	@ 0x28
 8006920:	480d      	ldr	r0, [pc, #52]	@ (8006958 <sh_help+0x74>)
 8006922:	f000 fb25 	bl	8006f70 <sniprintf>
 8006926:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	b29b      	uxth	r3, r3
 800692c:	4619      	mov	r1, r3
 800692e:	480a      	ldr	r0, [pc, #40]	@ (8006958 <sh_help+0x74>)
 8006930:	f7ff ffc4 	bl	80068bc <uart_write>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	3301      	adds	r3, #1
 8006938:	60fb      	str	r3, [r7, #12]
 800693a:	4b08      	ldr	r3, [pc, #32]	@ (800695c <sh_help+0x78>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	429a      	cmp	r2, r3
 8006942:	dbd7      	blt.n	80068f4 <sh_help+0x10>
	}

	return 0;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	20001124 	.word	0x20001124
 8006954:	080081b0 	.word	0x080081b0
 8006958:	20001424 	.word	0x20001424
 800695c:	20001120 	.word	0x20001120

08006960 <shell_init>:

void shell_init() {
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
	int size = 0;
 8006966:	2300      	movs	r3, #0
 8006968:	607b      	str	r3, [r7, #4]

	size = snprintf (print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 800696a:	4a13      	ldr	r2, [pc, #76]	@ (80069b8 <shell_init+0x58>)
 800696c:	2128      	movs	r1, #40	@ 0x28
 800696e:	4813      	ldr	r0, [pc, #76]	@ (80069bc <shell_init+0x5c>)
 8006970:	f000 fafe 	bl	8006f70 <sniprintf>
 8006974:	6078      	str	r0, [r7, #4]
	uart_write(print_buffer, size);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	b29b      	uxth	r3, r3
 800697a:	4619      	mov	r1, r3
 800697c:	480f      	ldr	r0, [pc, #60]	@ (80069bc <shell_init+0x5c>)
 800697e:	f7ff ff9d 	bl	80068bc <uart_write>

	sem_uart_read = xSemaphoreCreateBinary();
 8006982:	2203      	movs	r2, #3
 8006984:	2100      	movs	r1, #0
 8006986:	2001      	movs	r0, #1
 8006988:	f7fe f900 	bl	8004b8c <xQueueGenericCreate>
 800698c:	4603      	mov	r3, r0
 800698e:	4a0c      	ldr	r2, [pc, #48]	@ (80069c0 <shell_init+0x60>)
 8006990:	6013      	str	r3, [r2, #0]
	if (sem_uart_read == NULL)
 8006992:	4b0b      	ldr	r3, [pc, #44]	@ (80069c0 <shell_init+0x60>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d104      	bne.n	80069a4 <shell_init+0x44>
	{
		printf("Error semaphore shell\r\n");
 800699a:	480a      	ldr	r0, [pc, #40]	@ (80069c4 <shell_init+0x64>)
 800699c:	f000 fae0 	bl	8006f60 <puts>
		while(1);
 80069a0:	bf00      	nop
 80069a2:	e7fd      	b.n	80069a0 <shell_init+0x40>
	}

	shell_add('h', sh_help, "Help");
 80069a4:	4a08      	ldr	r2, [pc, #32]	@ (80069c8 <shell_init+0x68>)
 80069a6:	4909      	ldr	r1, [pc, #36]	@ (80069cc <shell_init+0x6c>)
 80069a8:	2068      	movs	r0, #104	@ 0x68
 80069aa:	f000 f811 	bl	80069d0 <shell_add>
}
 80069ae:	bf00      	nop
 80069b0:	3708      	adds	r7, #8
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	080081bc 	.word	0x080081bc
 80069bc:	20001424 	.word	0x20001424
 80069c0:	2000144c 	.word	0x2000144c
 80069c4:	080081e4 	.word	0x080081e4
 80069c8:	080081fc 	.word	0x080081fc
 80069cc:	080068e5 	.word	0x080068e5

080069d0 <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	4603      	mov	r3, r0
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
 80069dc:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 80069de:	4b19      	ldr	r3, [pc, #100]	@ (8006a44 <shell_add+0x74>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80069e4:	dc26      	bgt.n	8006a34 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 80069e6:	4b17      	ldr	r3, [pc, #92]	@ (8006a44 <shell_add+0x74>)
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	4917      	ldr	r1, [pc, #92]	@ (8006a48 <shell_add+0x78>)
 80069ec:	4613      	mov	r3, r2
 80069ee:	005b      	lsls	r3, r3, #1
 80069f0:	4413      	add	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	440b      	add	r3, r1
 80069f6:	7bfa      	ldrb	r2, [r7, #15]
 80069f8:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 80069fa:	4b12      	ldr	r3, [pc, #72]	@ (8006a44 <shell_add+0x74>)
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	4912      	ldr	r1, [pc, #72]	@ (8006a48 <shell_add+0x78>)
 8006a00:	4613      	mov	r3, r2
 8006a02:	005b      	lsls	r3, r3, #1
 8006a04:	4413      	add	r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	440b      	add	r3, r1
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 8006a10:	4b0c      	ldr	r3, [pc, #48]	@ (8006a44 <shell_add+0x74>)
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	490c      	ldr	r1, [pc, #48]	@ (8006a48 <shell_add+0x78>)
 8006a16:	4613      	mov	r3, r2
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	4413      	add	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	440b      	add	r3, r1
 8006a20:	3308      	adds	r3, #8
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 8006a26:	4b07      	ldr	r3, [pc, #28]	@ (8006a44 <shell_add+0x74>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	4a05      	ldr	r2, [pc, #20]	@ (8006a44 <shell_add+0x74>)
 8006a2e:	6013      	str	r3, [r2, #0]
		return 0;
 8006a30:	2300      	movs	r3, #0
 8006a32:	e001      	b.n	8006a38 <shell_add+0x68>
	}

	return -1;
 8006a34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3714      	adds	r7, #20
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	20001120 	.word	0x20001120
 8006a48:	20001124 	.word	0x20001124

08006a4c <shell_exec>:

static int shell_exec(char * buf) {
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b090      	sub	sp, #64	@ 0x40
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
	int i;

	char c = buf[0];
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a60:	e040      	b.n	8006ae4 <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 8006a62:	492d      	ldr	r1, [pc, #180]	@ (8006b18 <shell_exec+0xcc>)
 8006a64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006a66:	4613      	mov	r3, r2
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	4413      	add	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	440b      	add	r3, r1
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d131      	bne.n	8006ade <shell_exec+0x92>
			argc = 1;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a86:	e013      	b.n	8006ab0 <shell_exec+0x64>
				if(*p == ' ') {
 8006a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	2b20      	cmp	r3, #32
 8006a8e:	d10c      	bne.n	8006aaa <shell_exec+0x5e>
					*p = '\0';
 8006a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a92:	2200      	movs	r2, #0
 8006a94:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 8006a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a98:	1c5a      	adds	r2, r3, #1
 8006a9a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006a9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a9e:	3201      	adds	r2, #1
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	3340      	adds	r3, #64	@ 0x40
 8006aa4:	443b      	add	r3, r7
 8006aa6:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8006aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aac:	3301      	adds	r3, #1
 8006aae:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <shell_exec+0x72>
 8006ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aba:	2b07      	cmp	r3, #7
 8006abc:	dde4      	ble.n	8006a88 <shell_exec+0x3c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 8006abe:	4916      	ldr	r1, [pc, #88]	@ (8006b18 <shell_exec+0xcc>)
 8006ac0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	005b      	lsls	r3, r3, #1
 8006ac6:	4413      	add	r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	440b      	add	r3, r1
 8006acc:	3304      	adds	r3, #4
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f107 020c 	add.w	r2, r7, #12
 8006ad4:	4611      	mov	r1, r2
 8006ad6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006ad8:	4798      	blx	r3
 8006ada:	4603      	mov	r3, r0
 8006adc:	e017      	b.n	8006b0e <shell_exec+0xc2>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8006ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8006b1c <shell_exec+0xd0>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006aea:	429a      	cmp	r2, r3
 8006aec:	dbb9      	blt.n	8006a62 <shell_exec+0x16>
		}
	}

	int size;
	size = snprintf (print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8006aee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006af2:	4a0b      	ldr	r2, [pc, #44]	@ (8006b20 <shell_exec+0xd4>)
 8006af4:	2128      	movs	r1, #40	@ 0x28
 8006af6:	480b      	ldr	r0, [pc, #44]	@ (8006b24 <shell_exec+0xd8>)
 8006af8:	f000 fa3a 	bl	8006f70 <sniprintf>
 8006afc:	62f8      	str	r0, [r7, #44]	@ 0x2c
	uart_write(print_buffer, size);
 8006afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	4619      	mov	r1, r3
 8006b04:	4807      	ldr	r0, [pc, #28]	@ (8006b24 <shell_exec+0xd8>)
 8006b06:	f7ff fed9 	bl	80068bc <uart_write>
	return -1;
 8006b0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3740      	adds	r7, #64	@ 0x40
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	20001124 	.word	0x20001124
 8006b1c:	20001120 	.word	0x20001120
 8006b20:	08008204 	.word	0x08008204
 8006b24:	20001424 	.word	0x20001424

08006b28 <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
	int reading = 0;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 8006b32:	2300      	movs	r3, #0
 8006b34:	60bb      	str	r3, [r7, #8]

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(prompt, 2);
 8006b36:	2102      	movs	r1, #2
 8006b38:	482a      	ldr	r0, [pc, #168]	@ (8006be4 <shell_run+0xbc>)
 8006b3a:	f7ff febf 	bl	80068bc <uart_write>
		reading = 1;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	60fb      	str	r3, [r7, #12]

		while(reading) {
 8006b42:	e047      	b.n	8006bd4 <shell_run+0xac>
			char c = uart_read();
 8006b44:	f7ff fea0 	bl	8006888 <uart_read>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	70fb      	strb	r3, [r7, #3]
			int size;

			switch (c) {
 8006b4c:	78fb      	ldrb	r3, [r7, #3]
 8006b4e:	2b08      	cmp	r3, #8
 8006b50:	d025      	beq.n	8006b9e <shell_run+0x76>
 8006b52:	2b0d      	cmp	r3, #13
 8006b54:	d12e      	bne.n	8006bb4 <shell_run+0x8c>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (print_buffer, BUFFER_SIZE, "\r\n");
 8006b56:	4a24      	ldr	r2, [pc, #144]	@ (8006be8 <shell_run+0xc0>)
 8006b58:	2128      	movs	r1, #40	@ 0x28
 8006b5a:	4824      	ldr	r0, [pc, #144]	@ (8006bec <shell_run+0xc4>)
 8006b5c:	f000 fa08 	bl	8006f70 <sniprintf>
 8006b60:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	4619      	mov	r1, r3
 8006b68:	4820      	ldr	r0, [pc, #128]	@ (8006bec <shell_run+0xc4>)
 8006b6a:	f7ff fea7 	bl	80068bc <uart_write>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	1c5a      	adds	r2, r3, #1
 8006b72:	60ba      	str	r2, [r7, #8]
 8006b74:	4a1e      	ldr	r2, [pc, #120]	@ (8006bf0 <shell_run+0xc8>)
 8006b76:	2100      	movs	r1, #0
 8006b78:	54d1      	strb	r1, [r2, r3]
				size = snprintf (print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 8006b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8006bf0 <shell_run+0xc8>)
 8006b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8006bf4 <shell_run+0xcc>)
 8006b7e:	2128      	movs	r1, #40	@ 0x28
 8006b80:	481a      	ldr	r0, [pc, #104]	@ (8006bec <shell_run+0xc4>)
 8006b82:	f000 f9f5 	bl	8006f70 <sniprintf>
 8006b86:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	4817      	ldr	r0, [pc, #92]	@ (8006bec <shell_run+0xc4>)
 8006b90:	f7ff fe94 	bl	80068bc <uart_write>
				reading = 0;        //exit read loop
 8006b94:	2300      	movs	r3, #0
 8006b96:	60fb      	str	r3, [r7, #12]
				pos = 0;            //reset buffer
 8006b98:	2300      	movs	r3, #0
 8006b9a:	60bb      	str	r3, [r7, #8]
				break;
 8006b9c:	e01a      	b.n	8006bd4 <shell_run+0xac>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	dd16      	ble.n	8006bd2 <shell_run+0xaa>
					pos--;          //remove it in buffer
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	60bb      	str	r3, [r7, #8]

					uart_write(backspace, 3);	// delete the char on the terminal
 8006baa:	2103      	movs	r1, #3
 8006bac:	4812      	ldr	r0, [pc, #72]	@ (8006bf8 <shell_run+0xd0>)
 8006bae:	f7ff fe85 	bl	80068bc <uart_write>
				}
				break;
 8006bb2:	e00e      	b.n	8006bd2 <shell_run+0xaa>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	2b27      	cmp	r3, #39	@ 0x27
 8006bb8:	dc0c      	bgt.n	8006bd4 <shell_run+0xac>
					uart_write(&c, 1);
 8006bba:	1cfb      	adds	r3, r7, #3
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7ff fe7c 	bl	80068bc <uart_write>
					cmd_buffer[pos++] = c; //store
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	1c5a      	adds	r2, r3, #1
 8006bc8:	60ba      	str	r2, [r7, #8]
 8006bca:	78f9      	ldrb	r1, [r7, #3]
 8006bcc:	4a08      	ldr	r2, [pc, #32]	@ (8006bf0 <shell_run+0xc8>)
 8006bce:	54d1      	strb	r1, [r2, r3]
 8006bd0:	e000      	b.n	8006bd4 <shell_run+0xac>
				break;
 8006bd2:	bf00      	nop
		while(reading) {
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1b4      	bne.n	8006b44 <shell_run+0x1c>
				}
			}
		}
		shell_exec(cmd_buffer);
 8006bda:	4805      	ldr	r0, [pc, #20]	@ (8006bf0 <shell_run+0xc8>)
 8006bdc:	f7ff ff36 	bl	8006a4c <shell_exec>
		uart_write(prompt, 2);
 8006be0:	e7a9      	b.n	8006b36 <shell_run+0xe>
 8006be2:	bf00      	nop
 8006be4:	20000014 	.word	0x20000014
 8006be8:	0800821c 	.word	0x0800821c
 8006bec:	20001424 	.word	0x20001424
 8006bf0:	20001450 	.word	0x20001450
 8006bf4:	08008220 	.word	0x08008220
 8006bf8:	20000010 	.word	0x20000010

08006bfc <atoi>:
 8006bfc:	220a      	movs	r2, #10
 8006bfe:	2100      	movs	r1, #0
 8006c00:	f000 b87a 	b.w	8006cf8 <strtol>

08006c04 <_strtol_l.constprop.0>:
 8006c04:	2b24      	cmp	r3, #36	@ 0x24
 8006c06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c0a:	4686      	mov	lr, r0
 8006c0c:	4690      	mov	r8, r2
 8006c0e:	d801      	bhi.n	8006c14 <_strtol_l.constprop.0+0x10>
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d106      	bne.n	8006c22 <_strtol_l.constprop.0+0x1e>
 8006c14:	f000 fb5c 	bl	80072d0 <__errno>
 8006c18:	2316      	movs	r3, #22
 8006c1a:	6003      	str	r3, [r0, #0]
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c22:	4834      	ldr	r0, [pc, #208]	@ (8006cf4 <_strtol_l.constprop.0+0xf0>)
 8006c24:	460d      	mov	r5, r1
 8006c26:	462a      	mov	r2, r5
 8006c28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c2c:	5d06      	ldrb	r6, [r0, r4]
 8006c2e:	f016 0608 	ands.w	r6, r6, #8
 8006c32:	d1f8      	bne.n	8006c26 <_strtol_l.constprop.0+0x22>
 8006c34:	2c2d      	cmp	r4, #45	@ 0x2d
 8006c36:	d12d      	bne.n	8006c94 <_strtol_l.constprop.0+0x90>
 8006c38:	782c      	ldrb	r4, [r5, #0]
 8006c3a:	2601      	movs	r6, #1
 8006c3c:	1c95      	adds	r5, r2, #2
 8006c3e:	f033 0210 	bics.w	r2, r3, #16
 8006c42:	d109      	bne.n	8006c58 <_strtol_l.constprop.0+0x54>
 8006c44:	2c30      	cmp	r4, #48	@ 0x30
 8006c46:	d12a      	bne.n	8006c9e <_strtol_l.constprop.0+0x9a>
 8006c48:	782a      	ldrb	r2, [r5, #0]
 8006c4a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006c4e:	2a58      	cmp	r2, #88	@ 0x58
 8006c50:	d125      	bne.n	8006c9e <_strtol_l.constprop.0+0x9a>
 8006c52:	786c      	ldrb	r4, [r5, #1]
 8006c54:	2310      	movs	r3, #16
 8006c56:	3502      	adds	r5, #2
 8006c58:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006c5c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006c60:	2200      	movs	r2, #0
 8006c62:	fbbc f9f3 	udiv	r9, ip, r3
 8006c66:	4610      	mov	r0, r2
 8006c68:	fb03 ca19 	mls	sl, r3, r9, ip
 8006c6c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006c70:	2f09      	cmp	r7, #9
 8006c72:	d81b      	bhi.n	8006cac <_strtol_l.constprop.0+0xa8>
 8006c74:	463c      	mov	r4, r7
 8006c76:	42a3      	cmp	r3, r4
 8006c78:	dd27      	ble.n	8006cca <_strtol_l.constprop.0+0xc6>
 8006c7a:	1c57      	adds	r7, r2, #1
 8006c7c:	d007      	beq.n	8006c8e <_strtol_l.constprop.0+0x8a>
 8006c7e:	4581      	cmp	r9, r0
 8006c80:	d320      	bcc.n	8006cc4 <_strtol_l.constprop.0+0xc0>
 8006c82:	d101      	bne.n	8006c88 <_strtol_l.constprop.0+0x84>
 8006c84:	45a2      	cmp	sl, r4
 8006c86:	db1d      	blt.n	8006cc4 <_strtol_l.constprop.0+0xc0>
 8006c88:	fb00 4003 	mla	r0, r0, r3, r4
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c92:	e7eb      	b.n	8006c6c <_strtol_l.constprop.0+0x68>
 8006c94:	2c2b      	cmp	r4, #43	@ 0x2b
 8006c96:	bf04      	itt	eq
 8006c98:	782c      	ldrbeq	r4, [r5, #0]
 8006c9a:	1c95      	addeq	r5, r2, #2
 8006c9c:	e7cf      	b.n	8006c3e <_strtol_l.constprop.0+0x3a>
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1da      	bne.n	8006c58 <_strtol_l.constprop.0+0x54>
 8006ca2:	2c30      	cmp	r4, #48	@ 0x30
 8006ca4:	bf0c      	ite	eq
 8006ca6:	2308      	moveq	r3, #8
 8006ca8:	230a      	movne	r3, #10
 8006caa:	e7d5      	b.n	8006c58 <_strtol_l.constprop.0+0x54>
 8006cac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006cb0:	2f19      	cmp	r7, #25
 8006cb2:	d801      	bhi.n	8006cb8 <_strtol_l.constprop.0+0xb4>
 8006cb4:	3c37      	subs	r4, #55	@ 0x37
 8006cb6:	e7de      	b.n	8006c76 <_strtol_l.constprop.0+0x72>
 8006cb8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006cbc:	2f19      	cmp	r7, #25
 8006cbe:	d804      	bhi.n	8006cca <_strtol_l.constprop.0+0xc6>
 8006cc0:	3c57      	subs	r4, #87	@ 0x57
 8006cc2:	e7d8      	b.n	8006c76 <_strtol_l.constprop.0+0x72>
 8006cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc8:	e7e1      	b.n	8006c8e <_strtol_l.constprop.0+0x8a>
 8006cca:	1c53      	adds	r3, r2, #1
 8006ccc:	d108      	bne.n	8006ce0 <_strtol_l.constprop.0+0xdc>
 8006cce:	2322      	movs	r3, #34	@ 0x22
 8006cd0:	f8ce 3000 	str.w	r3, [lr]
 8006cd4:	4660      	mov	r0, ip
 8006cd6:	f1b8 0f00 	cmp.w	r8, #0
 8006cda:	d0a0      	beq.n	8006c1e <_strtol_l.constprop.0+0x1a>
 8006cdc:	1e69      	subs	r1, r5, #1
 8006cde:	e006      	b.n	8006cee <_strtol_l.constprop.0+0xea>
 8006ce0:	b106      	cbz	r6, 8006ce4 <_strtol_l.constprop.0+0xe0>
 8006ce2:	4240      	negs	r0, r0
 8006ce4:	f1b8 0f00 	cmp.w	r8, #0
 8006ce8:	d099      	beq.n	8006c1e <_strtol_l.constprop.0+0x1a>
 8006cea:	2a00      	cmp	r2, #0
 8006cec:	d1f6      	bne.n	8006cdc <_strtol_l.constprop.0+0xd8>
 8006cee:	f8c8 1000 	str.w	r1, [r8]
 8006cf2:	e794      	b.n	8006c1e <_strtol_l.constprop.0+0x1a>
 8006cf4:	08008271 	.word	0x08008271

08006cf8 <strtol>:
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	460a      	mov	r2, r1
 8006cfc:	4601      	mov	r1, r0
 8006cfe:	4802      	ldr	r0, [pc, #8]	@ (8006d08 <strtol+0x10>)
 8006d00:	6800      	ldr	r0, [r0, #0]
 8006d02:	f7ff bf7f 	b.w	8006c04 <_strtol_l.constprop.0>
 8006d06:	bf00      	nop
 8006d08:	20000024 	.word	0x20000024

08006d0c <std>:
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	b510      	push	{r4, lr}
 8006d10:	4604      	mov	r4, r0
 8006d12:	e9c0 3300 	strd	r3, r3, [r0]
 8006d16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d1a:	6083      	str	r3, [r0, #8]
 8006d1c:	8181      	strh	r1, [r0, #12]
 8006d1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d20:	81c2      	strh	r2, [r0, #14]
 8006d22:	6183      	str	r3, [r0, #24]
 8006d24:	4619      	mov	r1, r3
 8006d26:	2208      	movs	r2, #8
 8006d28:	305c      	adds	r0, #92	@ 0x5c
 8006d2a:	f000 fa2d 	bl	8007188 <memset>
 8006d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d64 <std+0x58>)
 8006d30:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d32:	4b0d      	ldr	r3, [pc, #52]	@ (8006d68 <std+0x5c>)
 8006d34:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d36:	4b0d      	ldr	r3, [pc, #52]	@ (8006d6c <std+0x60>)
 8006d38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d70 <std+0x64>)
 8006d3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d74 <std+0x68>)
 8006d40:	6224      	str	r4, [r4, #32]
 8006d42:	429c      	cmp	r4, r3
 8006d44:	d006      	beq.n	8006d54 <std+0x48>
 8006d46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d4a:	4294      	cmp	r4, r2
 8006d4c:	d002      	beq.n	8006d54 <std+0x48>
 8006d4e:	33d0      	adds	r3, #208	@ 0xd0
 8006d50:	429c      	cmp	r4, r3
 8006d52:	d105      	bne.n	8006d60 <std+0x54>
 8006d54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d5c:	f000 bae2 	b.w	8007324 <__retarget_lock_init_recursive>
 8006d60:	bd10      	pop	{r4, pc}
 8006d62:	bf00      	nop
 8006d64:	08006fd9 	.word	0x08006fd9
 8006d68:	08006ffb 	.word	0x08006ffb
 8006d6c:	08007033 	.word	0x08007033
 8006d70:	08007057 	.word	0x08007057
 8006d74:	20001478 	.word	0x20001478

08006d78 <stdio_exit_handler>:
 8006d78:	4a02      	ldr	r2, [pc, #8]	@ (8006d84 <stdio_exit_handler+0xc>)
 8006d7a:	4903      	ldr	r1, [pc, #12]	@ (8006d88 <stdio_exit_handler+0x10>)
 8006d7c:	4803      	ldr	r0, [pc, #12]	@ (8006d8c <stdio_exit_handler+0x14>)
 8006d7e:	f000 b869 	b.w	8006e54 <_fwalk_sglue>
 8006d82:	bf00      	nop
 8006d84:	20000018 	.word	0x20000018
 8006d88:	08007e91 	.word	0x08007e91
 8006d8c:	20000028 	.word	0x20000028

08006d90 <cleanup_stdio>:
 8006d90:	6841      	ldr	r1, [r0, #4]
 8006d92:	4b0c      	ldr	r3, [pc, #48]	@ (8006dc4 <cleanup_stdio+0x34>)
 8006d94:	4299      	cmp	r1, r3
 8006d96:	b510      	push	{r4, lr}
 8006d98:	4604      	mov	r4, r0
 8006d9a:	d001      	beq.n	8006da0 <cleanup_stdio+0x10>
 8006d9c:	f001 f878 	bl	8007e90 <_fflush_r>
 8006da0:	68a1      	ldr	r1, [r4, #8]
 8006da2:	4b09      	ldr	r3, [pc, #36]	@ (8006dc8 <cleanup_stdio+0x38>)
 8006da4:	4299      	cmp	r1, r3
 8006da6:	d002      	beq.n	8006dae <cleanup_stdio+0x1e>
 8006da8:	4620      	mov	r0, r4
 8006daa:	f001 f871 	bl	8007e90 <_fflush_r>
 8006dae:	68e1      	ldr	r1, [r4, #12]
 8006db0:	4b06      	ldr	r3, [pc, #24]	@ (8006dcc <cleanup_stdio+0x3c>)
 8006db2:	4299      	cmp	r1, r3
 8006db4:	d004      	beq.n	8006dc0 <cleanup_stdio+0x30>
 8006db6:	4620      	mov	r0, r4
 8006db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dbc:	f001 b868 	b.w	8007e90 <_fflush_r>
 8006dc0:	bd10      	pop	{r4, pc}
 8006dc2:	bf00      	nop
 8006dc4:	20001478 	.word	0x20001478
 8006dc8:	200014e0 	.word	0x200014e0
 8006dcc:	20001548 	.word	0x20001548

08006dd0 <global_stdio_init.part.0>:
 8006dd0:	b510      	push	{r4, lr}
 8006dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8006e00 <global_stdio_init.part.0+0x30>)
 8006dd4:	4c0b      	ldr	r4, [pc, #44]	@ (8006e04 <global_stdio_init.part.0+0x34>)
 8006dd6:	4a0c      	ldr	r2, [pc, #48]	@ (8006e08 <global_stdio_init.part.0+0x38>)
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	4620      	mov	r0, r4
 8006ddc:	2200      	movs	r2, #0
 8006dde:	2104      	movs	r1, #4
 8006de0:	f7ff ff94 	bl	8006d0c <std>
 8006de4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006de8:	2201      	movs	r2, #1
 8006dea:	2109      	movs	r1, #9
 8006dec:	f7ff ff8e 	bl	8006d0c <std>
 8006df0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006df4:	2202      	movs	r2, #2
 8006df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dfa:	2112      	movs	r1, #18
 8006dfc:	f7ff bf86 	b.w	8006d0c <std>
 8006e00:	200015b0 	.word	0x200015b0
 8006e04:	20001478 	.word	0x20001478
 8006e08:	08006d79 	.word	0x08006d79

08006e0c <__sfp_lock_acquire>:
 8006e0c:	4801      	ldr	r0, [pc, #4]	@ (8006e14 <__sfp_lock_acquire+0x8>)
 8006e0e:	f000 ba8a 	b.w	8007326 <__retarget_lock_acquire_recursive>
 8006e12:	bf00      	nop
 8006e14:	200015b9 	.word	0x200015b9

08006e18 <__sfp_lock_release>:
 8006e18:	4801      	ldr	r0, [pc, #4]	@ (8006e20 <__sfp_lock_release+0x8>)
 8006e1a:	f000 ba85 	b.w	8007328 <__retarget_lock_release_recursive>
 8006e1e:	bf00      	nop
 8006e20:	200015b9 	.word	0x200015b9

08006e24 <__sinit>:
 8006e24:	b510      	push	{r4, lr}
 8006e26:	4604      	mov	r4, r0
 8006e28:	f7ff fff0 	bl	8006e0c <__sfp_lock_acquire>
 8006e2c:	6a23      	ldr	r3, [r4, #32]
 8006e2e:	b11b      	cbz	r3, 8006e38 <__sinit+0x14>
 8006e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e34:	f7ff bff0 	b.w	8006e18 <__sfp_lock_release>
 8006e38:	4b04      	ldr	r3, [pc, #16]	@ (8006e4c <__sinit+0x28>)
 8006e3a:	6223      	str	r3, [r4, #32]
 8006e3c:	4b04      	ldr	r3, [pc, #16]	@ (8006e50 <__sinit+0x2c>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1f5      	bne.n	8006e30 <__sinit+0xc>
 8006e44:	f7ff ffc4 	bl	8006dd0 <global_stdio_init.part.0>
 8006e48:	e7f2      	b.n	8006e30 <__sinit+0xc>
 8006e4a:	bf00      	nop
 8006e4c:	08006d91 	.word	0x08006d91
 8006e50:	200015b0 	.word	0x200015b0

08006e54 <_fwalk_sglue>:
 8006e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e58:	4607      	mov	r7, r0
 8006e5a:	4688      	mov	r8, r1
 8006e5c:	4614      	mov	r4, r2
 8006e5e:	2600      	movs	r6, #0
 8006e60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e64:	f1b9 0901 	subs.w	r9, r9, #1
 8006e68:	d505      	bpl.n	8006e76 <_fwalk_sglue+0x22>
 8006e6a:	6824      	ldr	r4, [r4, #0]
 8006e6c:	2c00      	cmp	r4, #0
 8006e6e:	d1f7      	bne.n	8006e60 <_fwalk_sglue+0xc>
 8006e70:	4630      	mov	r0, r6
 8006e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e76:	89ab      	ldrh	r3, [r5, #12]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d907      	bls.n	8006e8c <_fwalk_sglue+0x38>
 8006e7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e80:	3301      	adds	r3, #1
 8006e82:	d003      	beq.n	8006e8c <_fwalk_sglue+0x38>
 8006e84:	4629      	mov	r1, r5
 8006e86:	4638      	mov	r0, r7
 8006e88:	47c0      	blx	r8
 8006e8a:	4306      	orrs	r6, r0
 8006e8c:	3568      	adds	r5, #104	@ 0x68
 8006e8e:	e7e9      	b.n	8006e64 <_fwalk_sglue+0x10>

08006e90 <iprintf>:
 8006e90:	b40f      	push	{r0, r1, r2, r3}
 8006e92:	b507      	push	{r0, r1, r2, lr}
 8006e94:	4906      	ldr	r1, [pc, #24]	@ (8006eb0 <iprintf+0x20>)
 8006e96:	ab04      	add	r3, sp, #16
 8006e98:	6808      	ldr	r0, [r1, #0]
 8006e9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e9e:	6881      	ldr	r1, [r0, #8]
 8006ea0:	9301      	str	r3, [sp, #4]
 8006ea2:	f000 fccb 	bl	800783c <_vfiprintf_r>
 8006ea6:	b003      	add	sp, #12
 8006ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006eac:	b004      	add	sp, #16
 8006eae:	4770      	bx	lr
 8006eb0:	20000024 	.word	0x20000024

08006eb4 <_puts_r>:
 8006eb4:	6a03      	ldr	r3, [r0, #32]
 8006eb6:	b570      	push	{r4, r5, r6, lr}
 8006eb8:	6884      	ldr	r4, [r0, #8]
 8006eba:	4605      	mov	r5, r0
 8006ebc:	460e      	mov	r6, r1
 8006ebe:	b90b      	cbnz	r3, 8006ec4 <_puts_r+0x10>
 8006ec0:	f7ff ffb0 	bl	8006e24 <__sinit>
 8006ec4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ec6:	07db      	lsls	r3, r3, #31
 8006ec8:	d405      	bmi.n	8006ed6 <_puts_r+0x22>
 8006eca:	89a3      	ldrh	r3, [r4, #12]
 8006ecc:	0598      	lsls	r0, r3, #22
 8006ece:	d402      	bmi.n	8006ed6 <_puts_r+0x22>
 8006ed0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ed2:	f000 fa28 	bl	8007326 <__retarget_lock_acquire_recursive>
 8006ed6:	89a3      	ldrh	r3, [r4, #12]
 8006ed8:	0719      	lsls	r1, r3, #28
 8006eda:	d502      	bpl.n	8006ee2 <_puts_r+0x2e>
 8006edc:	6923      	ldr	r3, [r4, #16]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d135      	bne.n	8006f4e <_puts_r+0x9a>
 8006ee2:	4621      	mov	r1, r4
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	f000 f8f9 	bl	80070dc <__swsetup_r>
 8006eea:	b380      	cbz	r0, 8006f4e <_puts_r+0x9a>
 8006eec:	f04f 35ff 	mov.w	r5, #4294967295
 8006ef0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ef2:	07da      	lsls	r2, r3, #31
 8006ef4:	d405      	bmi.n	8006f02 <_puts_r+0x4e>
 8006ef6:	89a3      	ldrh	r3, [r4, #12]
 8006ef8:	059b      	lsls	r3, r3, #22
 8006efa:	d402      	bmi.n	8006f02 <_puts_r+0x4e>
 8006efc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006efe:	f000 fa13 	bl	8007328 <__retarget_lock_release_recursive>
 8006f02:	4628      	mov	r0, r5
 8006f04:	bd70      	pop	{r4, r5, r6, pc}
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	da04      	bge.n	8006f14 <_puts_r+0x60>
 8006f0a:	69a2      	ldr	r2, [r4, #24]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	dc17      	bgt.n	8006f40 <_puts_r+0x8c>
 8006f10:	290a      	cmp	r1, #10
 8006f12:	d015      	beq.n	8006f40 <_puts_r+0x8c>
 8006f14:	6823      	ldr	r3, [r4, #0]
 8006f16:	1c5a      	adds	r2, r3, #1
 8006f18:	6022      	str	r2, [r4, #0]
 8006f1a:	7019      	strb	r1, [r3, #0]
 8006f1c:	68a3      	ldr	r3, [r4, #8]
 8006f1e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f22:	3b01      	subs	r3, #1
 8006f24:	60a3      	str	r3, [r4, #8]
 8006f26:	2900      	cmp	r1, #0
 8006f28:	d1ed      	bne.n	8006f06 <_puts_r+0x52>
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	da11      	bge.n	8006f52 <_puts_r+0x9e>
 8006f2e:	4622      	mov	r2, r4
 8006f30:	210a      	movs	r1, #10
 8006f32:	4628      	mov	r0, r5
 8006f34:	f000 f893 	bl	800705e <__swbuf_r>
 8006f38:	3001      	adds	r0, #1
 8006f3a:	d0d7      	beq.n	8006eec <_puts_r+0x38>
 8006f3c:	250a      	movs	r5, #10
 8006f3e:	e7d7      	b.n	8006ef0 <_puts_r+0x3c>
 8006f40:	4622      	mov	r2, r4
 8006f42:	4628      	mov	r0, r5
 8006f44:	f000 f88b 	bl	800705e <__swbuf_r>
 8006f48:	3001      	adds	r0, #1
 8006f4a:	d1e7      	bne.n	8006f1c <_puts_r+0x68>
 8006f4c:	e7ce      	b.n	8006eec <_puts_r+0x38>
 8006f4e:	3e01      	subs	r6, #1
 8006f50:	e7e4      	b.n	8006f1c <_puts_r+0x68>
 8006f52:	6823      	ldr	r3, [r4, #0]
 8006f54:	1c5a      	adds	r2, r3, #1
 8006f56:	6022      	str	r2, [r4, #0]
 8006f58:	220a      	movs	r2, #10
 8006f5a:	701a      	strb	r2, [r3, #0]
 8006f5c:	e7ee      	b.n	8006f3c <_puts_r+0x88>
	...

08006f60 <puts>:
 8006f60:	4b02      	ldr	r3, [pc, #8]	@ (8006f6c <puts+0xc>)
 8006f62:	4601      	mov	r1, r0
 8006f64:	6818      	ldr	r0, [r3, #0]
 8006f66:	f7ff bfa5 	b.w	8006eb4 <_puts_r>
 8006f6a:	bf00      	nop
 8006f6c:	20000024 	.word	0x20000024

08006f70 <sniprintf>:
 8006f70:	b40c      	push	{r2, r3}
 8006f72:	b530      	push	{r4, r5, lr}
 8006f74:	4b17      	ldr	r3, [pc, #92]	@ (8006fd4 <sniprintf+0x64>)
 8006f76:	1e0c      	subs	r4, r1, #0
 8006f78:	681d      	ldr	r5, [r3, #0]
 8006f7a:	b09d      	sub	sp, #116	@ 0x74
 8006f7c:	da08      	bge.n	8006f90 <sniprintf+0x20>
 8006f7e:	238b      	movs	r3, #139	@ 0x8b
 8006f80:	602b      	str	r3, [r5, #0]
 8006f82:	f04f 30ff 	mov.w	r0, #4294967295
 8006f86:	b01d      	add	sp, #116	@ 0x74
 8006f88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f8c:	b002      	add	sp, #8
 8006f8e:	4770      	bx	lr
 8006f90:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006f94:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006f98:	bf14      	ite	ne
 8006f9a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006f9e:	4623      	moveq	r3, r4
 8006fa0:	9304      	str	r3, [sp, #16]
 8006fa2:	9307      	str	r3, [sp, #28]
 8006fa4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006fa8:	9002      	str	r0, [sp, #8]
 8006faa:	9006      	str	r0, [sp, #24]
 8006fac:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006fb0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006fb2:	ab21      	add	r3, sp, #132	@ 0x84
 8006fb4:	a902      	add	r1, sp, #8
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	9301      	str	r3, [sp, #4]
 8006fba:	f000 fb19 	bl	80075f0 <_svfiprintf_r>
 8006fbe:	1c43      	adds	r3, r0, #1
 8006fc0:	bfbc      	itt	lt
 8006fc2:	238b      	movlt	r3, #139	@ 0x8b
 8006fc4:	602b      	strlt	r3, [r5, #0]
 8006fc6:	2c00      	cmp	r4, #0
 8006fc8:	d0dd      	beq.n	8006f86 <sniprintf+0x16>
 8006fca:	9b02      	ldr	r3, [sp, #8]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	701a      	strb	r2, [r3, #0]
 8006fd0:	e7d9      	b.n	8006f86 <sniprintf+0x16>
 8006fd2:	bf00      	nop
 8006fd4:	20000024 	.word	0x20000024

08006fd8 <__sread>:
 8006fd8:	b510      	push	{r4, lr}
 8006fda:	460c      	mov	r4, r1
 8006fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe0:	f000 f952 	bl	8007288 <_read_r>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	bfab      	itete	ge
 8006fe8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006fea:	89a3      	ldrhlt	r3, [r4, #12]
 8006fec:	181b      	addge	r3, r3, r0
 8006fee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006ff2:	bfac      	ite	ge
 8006ff4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006ff6:	81a3      	strhlt	r3, [r4, #12]
 8006ff8:	bd10      	pop	{r4, pc}

08006ffa <__swrite>:
 8006ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ffe:	461f      	mov	r7, r3
 8007000:	898b      	ldrh	r3, [r1, #12]
 8007002:	05db      	lsls	r3, r3, #23
 8007004:	4605      	mov	r5, r0
 8007006:	460c      	mov	r4, r1
 8007008:	4616      	mov	r6, r2
 800700a:	d505      	bpl.n	8007018 <__swrite+0x1e>
 800700c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007010:	2302      	movs	r3, #2
 8007012:	2200      	movs	r2, #0
 8007014:	f000 f926 	bl	8007264 <_lseek_r>
 8007018:	89a3      	ldrh	r3, [r4, #12]
 800701a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800701e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007022:	81a3      	strh	r3, [r4, #12]
 8007024:	4632      	mov	r2, r6
 8007026:	463b      	mov	r3, r7
 8007028:	4628      	mov	r0, r5
 800702a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800702e:	f000 b93d 	b.w	80072ac <_write_r>

08007032 <__sseek>:
 8007032:	b510      	push	{r4, lr}
 8007034:	460c      	mov	r4, r1
 8007036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800703a:	f000 f913 	bl	8007264 <_lseek_r>
 800703e:	1c43      	adds	r3, r0, #1
 8007040:	89a3      	ldrh	r3, [r4, #12]
 8007042:	bf15      	itete	ne
 8007044:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007046:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800704a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800704e:	81a3      	strheq	r3, [r4, #12]
 8007050:	bf18      	it	ne
 8007052:	81a3      	strhne	r3, [r4, #12]
 8007054:	bd10      	pop	{r4, pc}

08007056 <__sclose>:
 8007056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800705a:	f000 b89d 	b.w	8007198 <_close_r>

0800705e <__swbuf_r>:
 800705e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007060:	460e      	mov	r6, r1
 8007062:	4614      	mov	r4, r2
 8007064:	4605      	mov	r5, r0
 8007066:	b118      	cbz	r0, 8007070 <__swbuf_r+0x12>
 8007068:	6a03      	ldr	r3, [r0, #32]
 800706a:	b90b      	cbnz	r3, 8007070 <__swbuf_r+0x12>
 800706c:	f7ff feda 	bl	8006e24 <__sinit>
 8007070:	69a3      	ldr	r3, [r4, #24]
 8007072:	60a3      	str	r3, [r4, #8]
 8007074:	89a3      	ldrh	r3, [r4, #12]
 8007076:	071a      	lsls	r2, r3, #28
 8007078:	d501      	bpl.n	800707e <__swbuf_r+0x20>
 800707a:	6923      	ldr	r3, [r4, #16]
 800707c:	b943      	cbnz	r3, 8007090 <__swbuf_r+0x32>
 800707e:	4621      	mov	r1, r4
 8007080:	4628      	mov	r0, r5
 8007082:	f000 f82b 	bl	80070dc <__swsetup_r>
 8007086:	b118      	cbz	r0, 8007090 <__swbuf_r+0x32>
 8007088:	f04f 37ff 	mov.w	r7, #4294967295
 800708c:	4638      	mov	r0, r7
 800708e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	6922      	ldr	r2, [r4, #16]
 8007094:	1a98      	subs	r0, r3, r2
 8007096:	6963      	ldr	r3, [r4, #20]
 8007098:	b2f6      	uxtb	r6, r6
 800709a:	4283      	cmp	r3, r0
 800709c:	4637      	mov	r7, r6
 800709e:	dc05      	bgt.n	80070ac <__swbuf_r+0x4e>
 80070a0:	4621      	mov	r1, r4
 80070a2:	4628      	mov	r0, r5
 80070a4:	f000 fef4 	bl	8007e90 <_fflush_r>
 80070a8:	2800      	cmp	r0, #0
 80070aa:	d1ed      	bne.n	8007088 <__swbuf_r+0x2a>
 80070ac:	68a3      	ldr	r3, [r4, #8]
 80070ae:	3b01      	subs	r3, #1
 80070b0:	60a3      	str	r3, [r4, #8]
 80070b2:	6823      	ldr	r3, [r4, #0]
 80070b4:	1c5a      	adds	r2, r3, #1
 80070b6:	6022      	str	r2, [r4, #0]
 80070b8:	701e      	strb	r6, [r3, #0]
 80070ba:	6962      	ldr	r2, [r4, #20]
 80070bc:	1c43      	adds	r3, r0, #1
 80070be:	429a      	cmp	r2, r3
 80070c0:	d004      	beq.n	80070cc <__swbuf_r+0x6e>
 80070c2:	89a3      	ldrh	r3, [r4, #12]
 80070c4:	07db      	lsls	r3, r3, #31
 80070c6:	d5e1      	bpl.n	800708c <__swbuf_r+0x2e>
 80070c8:	2e0a      	cmp	r6, #10
 80070ca:	d1df      	bne.n	800708c <__swbuf_r+0x2e>
 80070cc:	4621      	mov	r1, r4
 80070ce:	4628      	mov	r0, r5
 80070d0:	f000 fede 	bl	8007e90 <_fflush_r>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d0d9      	beq.n	800708c <__swbuf_r+0x2e>
 80070d8:	e7d6      	b.n	8007088 <__swbuf_r+0x2a>
	...

080070dc <__swsetup_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	4b29      	ldr	r3, [pc, #164]	@ (8007184 <__swsetup_r+0xa8>)
 80070e0:	4605      	mov	r5, r0
 80070e2:	6818      	ldr	r0, [r3, #0]
 80070e4:	460c      	mov	r4, r1
 80070e6:	b118      	cbz	r0, 80070f0 <__swsetup_r+0x14>
 80070e8:	6a03      	ldr	r3, [r0, #32]
 80070ea:	b90b      	cbnz	r3, 80070f0 <__swsetup_r+0x14>
 80070ec:	f7ff fe9a 	bl	8006e24 <__sinit>
 80070f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070f4:	0719      	lsls	r1, r3, #28
 80070f6:	d422      	bmi.n	800713e <__swsetup_r+0x62>
 80070f8:	06da      	lsls	r2, r3, #27
 80070fa:	d407      	bmi.n	800710c <__swsetup_r+0x30>
 80070fc:	2209      	movs	r2, #9
 80070fe:	602a      	str	r2, [r5, #0]
 8007100:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007104:	81a3      	strh	r3, [r4, #12]
 8007106:	f04f 30ff 	mov.w	r0, #4294967295
 800710a:	e033      	b.n	8007174 <__swsetup_r+0x98>
 800710c:	0758      	lsls	r0, r3, #29
 800710e:	d512      	bpl.n	8007136 <__swsetup_r+0x5a>
 8007110:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007112:	b141      	cbz	r1, 8007126 <__swsetup_r+0x4a>
 8007114:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007118:	4299      	cmp	r1, r3
 800711a:	d002      	beq.n	8007122 <__swsetup_r+0x46>
 800711c:	4628      	mov	r0, r5
 800711e:	f000 f913 	bl	8007348 <_free_r>
 8007122:	2300      	movs	r3, #0
 8007124:	6363      	str	r3, [r4, #52]	@ 0x34
 8007126:	89a3      	ldrh	r3, [r4, #12]
 8007128:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800712c:	81a3      	strh	r3, [r4, #12]
 800712e:	2300      	movs	r3, #0
 8007130:	6063      	str	r3, [r4, #4]
 8007132:	6923      	ldr	r3, [r4, #16]
 8007134:	6023      	str	r3, [r4, #0]
 8007136:	89a3      	ldrh	r3, [r4, #12]
 8007138:	f043 0308 	orr.w	r3, r3, #8
 800713c:	81a3      	strh	r3, [r4, #12]
 800713e:	6923      	ldr	r3, [r4, #16]
 8007140:	b94b      	cbnz	r3, 8007156 <__swsetup_r+0x7a>
 8007142:	89a3      	ldrh	r3, [r4, #12]
 8007144:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007148:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800714c:	d003      	beq.n	8007156 <__swsetup_r+0x7a>
 800714e:	4621      	mov	r1, r4
 8007150:	4628      	mov	r0, r5
 8007152:	f000 feeb 	bl	8007f2c <__smakebuf_r>
 8007156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800715a:	f013 0201 	ands.w	r2, r3, #1
 800715e:	d00a      	beq.n	8007176 <__swsetup_r+0x9a>
 8007160:	2200      	movs	r2, #0
 8007162:	60a2      	str	r2, [r4, #8]
 8007164:	6962      	ldr	r2, [r4, #20]
 8007166:	4252      	negs	r2, r2
 8007168:	61a2      	str	r2, [r4, #24]
 800716a:	6922      	ldr	r2, [r4, #16]
 800716c:	b942      	cbnz	r2, 8007180 <__swsetup_r+0xa4>
 800716e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007172:	d1c5      	bne.n	8007100 <__swsetup_r+0x24>
 8007174:	bd38      	pop	{r3, r4, r5, pc}
 8007176:	0799      	lsls	r1, r3, #30
 8007178:	bf58      	it	pl
 800717a:	6962      	ldrpl	r2, [r4, #20]
 800717c:	60a2      	str	r2, [r4, #8]
 800717e:	e7f4      	b.n	800716a <__swsetup_r+0x8e>
 8007180:	2000      	movs	r0, #0
 8007182:	e7f7      	b.n	8007174 <__swsetup_r+0x98>
 8007184:	20000024 	.word	0x20000024

08007188 <memset>:
 8007188:	4402      	add	r2, r0
 800718a:	4603      	mov	r3, r0
 800718c:	4293      	cmp	r3, r2
 800718e:	d100      	bne.n	8007192 <memset+0xa>
 8007190:	4770      	bx	lr
 8007192:	f803 1b01 	strb.w	r1, [r3], #1
 8007196:	e7f9      	b.n	800718c <memset+0x4>

08007198 <_close_r>:
 8007198:	b538      	push	{r3, r4, r5, lr}
 800719a:	4d06      	ldr	r5, [pc, #24]	@ (80071b4 <_close_r+0x1c>)
 800719c:	2300      	movs	r3, #0
 800719e:	4604      	mov	r4, r0
 80071a0:	4608      	mov	r0, r1
 80071a2:	602b      	str	r3, [r5, #0]
 80071a4:	f7f9 fcb3 	bl	8000b0e <_close>
 80071a8:	1c43      	adds	r3, r0, #1
 80071aa:	d102      	bne.n	80071b2 <_close_r+0x1a>
 80071ac:	682b      	ldr	r3, [r5, #0]
 80071ae:	b103      	cbz	r3, 80071b2 <_close_r+0x1a>
 80071b0:	6023      	str	r3, [r4, #0]
 80071b2:	bd38      	pop	{r3, r4, r5, pc}
 80071b4:	200015b4 	.word	0x200015b4

080071b8 <_reclaim_reent>:
 80071b8:	4b29      	ldr	r3, [pc, #164]	@ (8007260 <_reclaim_reent+0xa8>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4283      	cmp	r3, r0
 80071be:	b570      	push	{r4, r5, r6, lr}
 80071c0:	4604      	mov	r4, r0
 80071c2:	d04b      	beq.n	800725c <_reclaim_reent+0xa4>
 80071c4:	69c3      	ldr	r3, [r0, #28]
 80071c6:	b1ab      	cbz	r3, 80071f4 <_reclaim_reent+0x3c>
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	b16b      	cbz	r3, 80071e8 <_reclaim_reent+0x30>
 80071cc:	2500      	movs	r5, #0
 80071ce:	69e3      	ldr	r3, [r4, #28]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	5959      	ldr	r1, [r3, r5]
 80071d4:	2900      	cmp	r1, #0
 80071d6:	d13b      	bne.n	8007250 <_reclaim_reent+0x98>
 80071d8:	3504      	adds	r5, #4
 80071da:	2d80      	cmp	r5, #128	@ 0x80
 80071dc:	d1f7      	bne.n	80071ce <_reclaim_reent+0x16>
 80071de:	69e3      	ldr	r3, [r4, #28]
 80071e0:	4620      	mov	r0, r4
 80071e2:	68d9      	ldr	r1, [r3, #12]
 80071e4:	f000 f8b0 	bl	8007348 <_free_r>
 80071e8:	69e3      	ldr	r3, [r4, #28]
 80071ea:	6819      	ldr	r1, [r3, #0]
 80071ec:	b111      	cbz	r1, 80071f4 <_reclaim_reent+0x3c>
 80071ee:	4620      	mov	r0, r4
 80071f0:	f000 f8aa 	bl	8007348 <_free_r>
 80071f4:	6961      	ldr	r1, [r4, #20]
 80071f6:	b111      	cbz	r1, 80071fe <_reclaim_reent+0x46>
 80071f8:	4620      	mov	r0, r4
 80071fa:	f000 f8a5 	bl	8007348 <_free_r>
 80071fe:	69e1      	ldr	r1, [r4, #28]
 8007200:	b111      	cbz	r1, 8007208 <_reclaim_reent+0x50>
 8007202:	4620      	mov	r0, r4
 8007204:	f000 f8a0 	bl	8007348 <_free_r>
 8007208:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800720a:	b111      	cbz	r1, 8007212 <_reclaim_reent+0x5a>
 800720c:	4620      	mov	r0, r4
 800720e:	f000 f89b 	bl	8007348 <_free_r>
 8007212:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007214:	b111      	cbz	r1, 800721c <_reclaim_reent+0x64>
 8007216:	4620      	mov	r0, r4
 8007218:	f000 f896 	bl	8007348 <_free_r>
 800721c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800721e:	b111      	cbz	r1, 8007226 <_reclaim_reent+0x6e>
 8007220:	4620      	mov	r0, r4
 8007222:	f000 f891 	bl	8007348 <_free_r>
 8007226:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007228:	b111      	cbz	r1, 8007230 <_reclaim_reent+0x78>
 800722a:	4620      	mov	r0, r4
 800722c:	f000 f88c 	bl	8007348 <_free_r>
 8007230:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007232:	b111      	cbz	r1, 800723a <_reclaim_reent+0x82>
 8007234:	4620      	mov	r0, r4
 8007236:	f000 f887 	bl	8007348 <_free_r>
 800723a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800723c:	b111      	cbz	r1, 8007244 <_reclaim_reent+0x8c>
 800723e:	4620      	mov	r0, r4
 8007240:	f000 f882 	bl	8007348 <_free_r>
 8007244:	6a23      	ldr	r3, [r4, #32]
 8007246:	b14b      	cbz	r3, 800725c <_reclaim_reent+0xa4>
 8007248:	4620      	mov	r0, r4
 800724a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800724e:	4718      	bx	r3
 8007250:	680e      	ldr	r6, [r1, #0]
 8007252:	4620      	mov	r0, r4
 8007254:	f000 f878 	bl	8007348 <_free_r>
 8007258:	4631      	mov	r1, r6
 800725a:	e7bb      	b.n	80071d4 <_reclaim_reent+0x1c>
 800725c:	bd70      	pop	{r4, r5, r6, pc}
 800725e:	bf00      	nop
 8007260:	20000024 	.word	0x20000024

08007264 <_lseek_r>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	4d07      	ldr	r5, [pc, #28]	@ (8007284 <_lseek_r+0x20>)
 8007268:	4604      	mov	r4, r0
 800726a:	4608      	mov	r0, r1
 800726c:	4611      	mov	r1, r2
 800726e:	2200      	movs	r2, #0
 8007270:	602a      	str	r2, [r5, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	f7f9 fc72 	bl	8000b5c <_lseek>
 8007278:	1c43      	adds	r3, r0, #1
 800727a:	d102      	bne.n	8007282 <_lseek_r+0x1e>
 800727c:	682b      	ldr	r3, [r5, #0]
 800727e:	b103      	cbz	r3, 8007282 <_lseek_r+0x1e>
 8007280:	6023      	str	r3, [r4, #0]
 8007282:	bd38      	pop	{r3, r4, r5, pc}
 8007284:	200015b4 	.word	0x200015b4

08007288 <_read_r>:
 8007288:	b538      	push	{r3, r4, r5, lr}
 800728a:	4d07      	ldr	r5, [pc, #28]	@ (80072a8 <_read_r+0x20>)
 800728c:	4604      	mov	r4, r0
 800728e:	4608      	mov	r0, r1
 8007290:	4611      	mov	r1, r2
 8007292:	2200      	movs	r2, #0
 8007294:	602a      	str	r2, [r5, #0]
 8007296:	461a      	mov	r2, r3
 8007298:	f7f9 fc00 	bl	8000a9c <_read>
 800729c:	1c43      	adds	r3, r0, #1
 800729e:	d102      	bne.n	80072a6 <_read_r+0x1e>
 80072a0:	682b      	ldr	r3, [r5, #0]
 80072a2:	b103      	cbz	r3, 80072a6 <_read_r+0x1e>
 80072a4:	6023      	str	r3, [r4, #0]
 80072a6:	bd38      	pop	{r3, r4, r5, pc}
 80072a8:	200015b4 	.word	0x200015b4

080072ac <_write_r>:
 80072ac:	b538      	push	{r3, r4, r5, lr}
 80072ae:	4d07      	ldr	r5, [pc, #28]	@ (80072cc <_write_r+0x20>)
 80072b0:	4604      	mov	r4, r0
 80072b2:	4608      	mov	r0, r1
 80072b4:	4611      	mov	r1, r2
 80072b6:	2200      	movs	r2, #0
 80072b8:	602a      	str	r2, [r5, #0]
 80072ba:	461a      	mov	r2, r3
 80072bc:	f7f9 fc0b 	bl	8000ad6 <_write>
 80072c0:	1c43      	adds	r3, r0, #1
 80072c2:	d102      	bne.n	80072ca <_write_r+0x1e>
 80072c4:	682b      	ldr	r3, [r5, #0]
 80072c6:	b103      	cbz	r3, 80072ca <_write_r+0x1e>
 80072c8:	6023      	str	r3, [r4, #0]
 80072ca:	bd38      	pop	{r3, r4, r5, pc}
 80072cc:	200015b4 	.word	0x200015b4

080072d0 <__errno>:
 80072d0:	4b01      	ldr	r3, [pc, #4]	@ (80072d8 <__errno+0x8>)
 80072d2:	6818      	ldr	r0, [r3, #0]
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	20000024 	.word	0x20000024

080072dc <__libc_init_array>:
 80072dc:	b570      	push	{r4, r5, r6, lr}
 80072de:	4d0d      	ldr	r5, [pc, #52]	@ (8007314 <__libc_init_array+0x38>)
 80072e0:	4c0d      	ldr	r4, [pc, #52]	@ (8007318 <__libc_init_array+0x3c>)
 80072e2:	1b64      	subs	r4, r4, r5
 80072e4:	10a4      	asrs	r4, r4, #2
 80072e6:	2600      	movs	r6, #0
 80072e8:	42a6      	cmp	r6, r4
 80072ea:	d109      	bne.n	8007300 <__libc_init_array+0x24>
 80072ec:	4d0b      	ldr	r5, [pc, #44]	@ (800731c <__libc_init_array+0x40>)
 80072ee:	4c0c      	ldr	r4, [pc, #48]	@ (8007320 <__libc_init_array+0x44>)
 80072f0:	f000 feda 	bl	80080a8 <_init>
 80072f4:	1b64      	subs	r4, r4, r5
 80072f6:	10a4      	asrs	r4, r4, #2
 80072f8:	2600      	movs	r6, #0
 80072fa:	42a6      	cmp	r6, r4
 80072fc:	d105      	bne.n	800730a <__libc_init_array+0x2e>
 80072fe:	bd70      	pop	{r4, r5, r6, pc}
 8007300:	f855 3b04 	ldr.w	r3, [r5], #4
 8007304:	4798      	blx	r3
 8007306:	3601      	adds	r6, #1
 8007308:	e7ee      	b.n	80072e8 <__libc_init_array+0xc>
 800730a:	f855 3b04 	ldr.w	r3, [r5], #4
 800730e:	4798      	blx	r3
 8007310:	3601      	adds	r6, #1
 8007312:	e7f2      	b.n	80072fa <__libc_init_array+0x1e>
 8007314:	080083ac 	.word	0x080083ac
 8007318:	080083ac 	.word	0x080083ac
 800731c:	080083ac 	.word	0x080083ac
 8007320:	080083b0 	.word	0x080083b0

08007324 <__retarget_lock_init_recursive>:
 8007324:	4770      	bx	lr

08007326 <__retarget_lock_acquire_recursive>:
 8007326:	4770      	bx	lr

08007328 <__retarget_lock_release_recursive>:
 8007328:	4770      	bx	lr

0800732a <memcpy>:
 800732a:	440a      	add	r2, r1
 800732c:	4291      	cmp	r1, r2
 800732e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007332:	d100      	bne.n	8007336 <memcpy+0xc>
 8007334:	4770      	bx	lr
 8007336:	b510      	push	{r4, lr}
 8007338:	f811 4b01 	ldrb.w	r4, [r1], #1
 800733c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007340:	4291      	cmp	r1, r2
 8007342:	d1f9      	bne.n	8007338 <memcpy+0xe>
 8007344:	bd10      	pop	{r4, pc}
	...

08007348 <_free_r>:
 8007348:	b538      	push	{r3, r4, r5, lr}
 800734a:	4605      	mov	r5, r0
 800734c:	2900      	cmp	r1, #0
 800734e:	d041      	beq.n	80073d4 <_free_r+0x8c>
 8007350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007354:	1f0c      	subs	r4, r1, #4
 8007356:	2b00      	cmp	r3, #0
 8007358:	bfb8      	it	lt
 800735a:	18e4      	addlt	r4, r4, r3
 800735c:	f000 f8e0 	bl	8007520 <__malloc_lock>
 8007360:	4a1d      	ldr	r2, [pc, #116]	@ (80073d8 <_free_r+0x90>)
 8007362:	6813      	ldr	r3, [r2, #0]
 8007364:	b933      	cbnz	r3, 8007374 <_free_r+0x2c>
 8007366:	6063      	str	r3, [r4, #4]
 8007368:	6014      	str	r4, [r2, #0]
 800736a:	4628      	mov	r0, r5
 800736c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007370:	f000 b8dc 	b.w	800752c <__malloc_unlock>
 8007374:	42a3      	cmp	r3, r4
 8007376:	d908      	bls.n	800738a <_free_r+0x42>
 8007378:	6820      	ldr	r0, [r4, #0]
 800737a:	1821      	adds	r1, r4, r0
 800737c:	428b      	cmp	r3, r1
 800737e:	bf01      	itttt	eq
 8007380:	6819      	ldreq	r1, [r3, #0]
 8007382:	685b      	ldreq	r3, [r3, #4]
 8007384:	1809      	addeq	r1, r1, r0
 8007386:	6021      	streq	r1, [r4, #0]
 8007388:	e7ed      	b.n	8007366 <_free_r+0x1e>
 800738a:	461a      	mov	r2, r3
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	b10b      	cbz	r3, 8007394 <_free_r+0x4c>
 8007390:	42a3      	cmp	r3, r4
 8007392:	d9fa      	bls.n	800738a <_free_r+0x42>
 8007394:	6811      	ldr	r1, [r2, #0]
 8007396:	1850      	adds	r0, r2, r1
 8007398:	42a0      	cmp	r0, r4
 800739a:	d10b      	bne.n	80073b4 <_free_r+0x6c>
 800739c:	6820      	ldr	r0, [r4, #0]
 800739e:	4401      	add	r1, r0
 80073a0:	1850      	adds	r0, r2, r1
 80073a2:	4283      	cmp	r3, r0
 80073a4:	6011      	str	r1, [r2, #0]
 80073a6:	d1e0      	bne.n	800736a <_free_r+0x22>
 80073a8:	6818      	ldr	r0, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	6053      	str	r3, [r2, #4]
 80073ae:	4408      	add	r0, r1
 80073b0:	6010      	str	r0, [r2, #0]
 80073b2:	e7da      	b.n	800736a <_free_r+0x22>
 80073b4:	d902      	bls.n	80073bc <_free_r+0x74>
 80073b6:	230c      	movs	r3, #12
 80073b8:	602b      	str	r3, [r5, #0]
 80073ba:	e7d6      	b.n	800736a <_free_r+0x22>
 80073bc:	6820      	ldr	r0, [r4, #0]
 80073be:	1821      	adds	r1, r4, r0
 80073c0:	428b      	cmp	r3, r1
 80073c2:	bf04      	itt	eq
 80073c4:	6819      	ldreq	r1, [r3, #0]
 80073c6:	685b      	ldreq	r3, [r3, #4]
 80073c8:	6063      	str	r3, [r4, #4]
 80073ca:	bf04      	itt	eq
 80073cc:	1809      	addeq	r1, r1, r0
 80073ce:	6021      	streq	r1, [r4, #0]
 80073d0:	6054      	str	r4, [r2, #4]
 80073d2:	e7ca      	b.n	800736a <_free_r+0x22>
 80073d4:	bd38      	pop	{r3, r4, r5, pc}
 80073d6:	bf00      	nop
 80073d8:	200015c0 	.word	0x200015c0

080073dc <sbrk_aligned>:
 80073dc:	b570      	push	{r4, r5, r6, lr}
 80073de:	4e0f      	ldr	r6, [pc, #60]	@ (800741c <sbrk_aligned+0x40>)
 80073e0:	460c      	mov	r4, r1
 80073e2:	6831      	ldr	r1, [r6, #0]
 80073e4:	4605      	mov	r5, r0
 80073e6:	b911      	cbnz	r1, 80073ee <sbrk_aligned+0x12>
 80073e8:	f000 fe18 	bl	800801c <_sbrk_r>
 80073ec:	6030      	str	r0, [r6, #0]
 80073ee:	4621      	mov	r1, r4
 80073f0:	4628      	mov	r0, r5
 80073f2:	f000 fe13 	bl	800801c <_sbrk_r>
 80073f6:	1c43      	adds	r3, r0, #1
 80073f8:	d103      	bne.n	8007402 <sbrk_aligned+0x26>
 80073fa:	f04f 34ff 	mov.w	r4, #4294967295
 80073fe:	4620      	mov	r0, r4
 8007400:	bd70      	pop	{r4, r5, r6, pc}
 8007402:	1cc4      	adds	r4, r0, #3
 8007404:	f024 0403 	bic.w	r4, r4, #3
 8007408:	42a0      	cmp	r0, r4
 800740a:	d0f8      	beq.n	80073fe <sbrk_aligned+0x22>
 800740c:	1a21      	subs	r1, r4, r0
 800740e:	4628      	mov	r0, r5
 8007410:	f000 fe04 	bl	800801c <_sbrk_r>
 8007414:	3001      	adds	r0, #1
 8007416:	d1f2      	bne.n	80073fe <sbrk_aligned+0x22>
 8007418:	e7ef      	b.n	80073fa <sbrk_aligned+0x1e>
 800741a:	bf00      	nop
 800741c:	200015bc 	.word	0x200015bc

08007420 <_malloc_r>:
 8007420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007424:	1ccd      	adds	r5, r1, #3
 8007426:	f025 0503 	bic.w	r5, r5, #3
 800742a:	3508      	adds	r5, #8
 800742c:	2d0c      	cmp	r5, #12
 800742e:	bf38      	it	cc
 8007430:	250c      	movcc	r5, #12
 8007432:	2d00      	cmp	r5, #0
 8007434:	4606      	mov	r6, r0
 8007436:	db01      	blt.n	800743c <_malloc_r+0x1c>
 8007438:	42a9      	cmp	r1, r5
 800743a:	d904      	bls.n	8007446 <_malloc_r+0x26>
 800743c:	230c      	movs	r3, #12
 800743e:	6033      	str	r3, [r6, #0]
 8007440:	2000      	movs	r0, #0
 8007442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007446:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800751c <_malloc_r+0xfc>
 800744a:	f000 f869 	bl	8007520 <__malloc_lock>
 800744e:	f8d8 3000 	ldr.w	r3, [r8]
 8007452:	461c      	mov	r4, r3
 8007454:	bb44      	cbnz	r4, 80074a8 <_malloc_r+0x88>
 8007456:	4629      	mov	r1, r5
 8007458:	4630      	mov	r0, r6
 800745a:	f7ff ffbf 	bl	80073dc <sbrk_aligned>
 800745e:	1c43      	adds	r3, r0, #1
 8007460:	4604      	mov	r4, r0
 8007462:	d158      	bne.n	8007516 <_malloc_r+0xf6>
 8007464:	f8d8 4000 	ldr.w	r4, [r8]
 8007468:	4627      	mov	r7, r4
 800746a:	2f00      	cmp	r7, #0
 800746c:	d143      	bne.n	80074f6 <_malloc_r+0xd6>
 800746e:	2c00      	cmp	r4, #0
 8007470:	d04b      	beq.n	800750a <_malloc_r+0xea>
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	4639      	mov	r1, r7
 8007476:	4630      	mov	r0, r6
 8007478:	eb04 0903 	add.w	r9, r4, r3
 800747c:	f000 fdce 	bl	800801c <_sbrk_r>
 8007480:	4581      	cmp	r9, r0
 8007482:	d142      	bne.n	800750a <_malloc_r+0xea>
 8007484:	6821      	ldr	r1, [r4, #0]
 8007486:	1a6d      	subs	r5, r5, r1
 8007488:	4629      	mov	r1, r5
 800748a:	4630      	mov	r0, r6
 800748c:	f7ff ffa6 	bl	80073dc <sbrk_aligned>
 8007490:	3001      	adds	r0, #1
 8007492:	d03a      	beq.n	800750a <_malloc_r+0xea>
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	442b      	add	r3, r5
 8007498:	6023      	str	r3, [r4, #0]
 800749a:	f8d8 3000 	ldr.w	r3, [r8]
 800749e:	685a      	ldr	r2, [r3, #4]
 80074a0:	bb62      	cbnz	r2, 80074fc <_malloc_r+0xdc>
 80074a2:	f8c8 7000 	str.w	r7, [r8]
 80074a6:	e00f      	b.n	80074c8 <_malloc_r+0xa8>
 80074a8:	6822      	ldr	r2, [r4, #0]
 80074aa:	1b52      	subs	r2, r2, r5
 80074ac:	d420      	bmi.n	80074f0 <_malloc_r+0xd0>
 80074ae:	2a0b      	cmp	r2, #11
 80074b0:	d917      	bls.n	80074e2 <_malloc_r+0xc2>
 80074b2:	1961      	adds	r1, r4, r5
 80074b4:	42a3      	cmp	r3, r4
 80074b6:	6025      	str	r5, [r4, #0]
 80074b8:	bf18      	it	ne
 80074ba:	6059      	strne	r1, [r3, #4]
 80074bc:	6863      	ldr	r3, [r4, #4]
 80074be:	bf08      	it	eq
 80074c0:	f8c8 1000 	streq.w	r1, [r8]
 80074c4:	5162      	str	r2, [r4, r5]
 80074c6:	604b      	str	r3, [r1, #4]
 80074c8:	4630      	mov	r0, r6
 80074ca:	f000 f82f 	bl	800752c <__malloc_unlock>
 80074ce:	f104 000b 	add.w	r0, r4, #11
 80074d2:	1d23      	adds	r3, r4, #4
 80074d4:	f020 0007 	bic.w	r0, r0, #7
 80074d8:	1ac2      	subs	r2, r0, r3
 80074da:	bf1c      	itt	ne
 80074dc:	1a1b      	subne	r3, r3, r0
 80074de:	50a3      	strne	r3, [r4, r2]
 80074e0:	e7af      	b.n	8007442 <_malloc_r+0x22>
 80074e2:	6862      	ldr	r2, [r4, #4]
 80074e4:	42a3      	cmp	r3, r4
 80074e6:	bf0c      	ite	eq
 80074e8:	f8c8 2000 	streq.w	r2, [r8]
 80074ec:	605a      	strne	r2, [r3, #4]
 80074ee:	e7eb      	b.n	80074c8 <_malloc_r+0xa8>
 80074f0:	4623      	mov	r3, r4
 80074f2:	6864      	ldr	r4, [r4, #4]
 80074f4:	e7ae      	b.n	8007454 <_malloc_r+0x34>
 80074f6:	463c      	mov	r4, r7
 80074f8:	687f      	ldr	r7, [r7, #4]
 80074fa:	e7b6      	b.n	800746a <_malloc_r+0x4a>
 80074fc:	461a      	mov	r2, r3
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	42a3      	cmp	r3, r4
 8007502:	d1fb      	bne.n	80074fc <_malloc_r+0xdc>
 8007504:	2300      	movs	r3, #0
 8007506:	6053      	str	r3, [r2, #4]
 8007508:	e7de      	b.n	80074c8 <_malloc_r+0xa8>
 800750a:	230c      	movs	r3, #12
 800750c:	6033      	str	r3, [r6, #0]
 800750e:	4630      	mov	r0, r6
 8007510:	f000 f80c 	bl	800752c <__malloc_unlock>
 8007514:	e794      	b.n	8007440 <_malloc_r+0x20>
 8007516:	6005      	str	r5, [r0, #0]
 8007518:	e7d6      	b.n	80074c8 <_malloc_r+0xa8>
 800751a:	bf00      	nop
 800751c:	200015c0 	.word	0x200015c0

08007520 <__malloc_lock>:
 8007520:	4801      	ldr	r0, [pc, #4]	@ (8007528 <__malloc_lock+0x8>)
 8007522:	f7ff bf00 	b.w	8007326 <__retarget_lock_acquire_recursive>
 8007526:	bf00      	nop
 8007528:	200015b8 	.word	0x200015b8

0800752c <__malloc_unlock>:
 800752c:	4801      	ldr	r0, [pc, #4]	@ (8007534 <__malloc_unlock+0x8>)
 800752e:	f7ff befb 	b.w	8007328 <__retarget_lock_release_recursive>
 8007532:	bf00      	nop
 8007534:	200015b8 	.word	0x200015b8

08007538 <__ssputs_r>:
 8007538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800753c:	688e      	ldr	r6, [r1, #8]
 800753e:	461f      	mov	r7, r3
 8007540:	42be      	cmp	r6, r7
 8007542:	680b      	ldr	r3, [r1, #0]
 8007544:	4682      	mov	sl, r0
 8007546:	460c      	mov	r4, r1
 8007548:	4690      	mov	r8, r2
 800754a:	d82d      	bhi.n	80075a8 <__ssputs_r+0x70>
 800754c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007550:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007554:	d026      	beq.n	80075a4 <__ssputs_r+0x6c>
 8007556:	6965      	ldr	r5, [r4, #20]
 8007558:	6909      	ldr	r1, [r1, #16]
 800755a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800755e:	eba3 0901 	sub.w	r9, r3, r1
 8007562:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007566:	1c7b      	adds	r3, r7, #1
 8007568:	444b      	add	r3, r9
 800756a:	106d      	asrs	r5, r5, #1
 800756c:	429d      	cmp	r5, r3
 800756e:	bf38      	it	cc
 8007570:	461d      	movcc	r5, r3
 8007572:	0553      	lsls	r3, r2, #21
 8007574:	d527      	bpl.n	80075c6 <__ssputs_r+0x8e>
 8007576:	4629      	mov	r1, r5
 8007578:	f7ff ff52 	bl	8007420 <_malloc_r>
 800757c:	4606      	mov	r6, r0
 800757e:	b360      	cbz	r0, 80075da <__ssputs_r+0xa2>
 8007580:	6921      	ldr	r1, [r4, #16]
 8007582:	464a      	mov	r2, r9
 8007584:	f7ff fed1 	bl	800732a <memcpy>
 8007588:	89a3      	ldrh	r3, [r4, #12]
 800758a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800758e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007592:	81a3      	strh	r3, [r4, #12]
 8007594:	6126      	str	r6, [r4, #16]
 8007596:	6165      	str	r5, [r4, #20]
 8007598:	444e      	add	r6, r9
 800759a:	eba5 0509 	sub.w	r5, r5, r9
 800759e:	6026      	str	r6, [r4, #0]
 80075a0:	60a5      	str	r5, [r4, #8]
 80075a2:	463e      	mov	r6, r7
 80075a4:	42be      	cmp	r6, r7
 80075a6:	d900      	bls.n	80075aa <__ssputs_r+0x72>
 80075a8:	463e      	mov	r6, r7
 80075aa:	6820      	ldr	r0, [r4, #0]
 80075ac:	4632      	mov	r2, r6
 80075ae:	4641      	mov	r1, r8
 80075b0:	f000 fcf8 	bl	8007fa4 <memmove>
 80075b4:	68a3      	ldr	r3, [r4, #8]
 80075b6:	1b9b      	subs	r3, r3, r6
 80075b8:	60a3      	str	r3, [r4, #8]
 80075ba:	6823      	ldr	r3, [r4, #0]
 80075bc:	4433      	add	r3, r6
 80075be:	6023      	str	r3, [r4, #0]
 80075c0:	2000      	movs	r0, #0
 80075c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075c6:	462a      	mov	r2, r5
 80075c8:	f000 fd38 	bl	800803c <_realloc_r>
 80075cc:	4606      	mov	r6, r0
 80075ce:	2800      	cmp	r0, #0
 80075d0:	d1e0      	bne.n	8007594 <__ssputs_r+0x5c>
 80075d2:	6921      	ldr	r1, [r4, #16]
 80075d4:	4650      	mov	r0, sl
 80075d6:	f7ff feb7 	bl	8007348 <_free_r>
 80075da:	230c      	movs	r3, #12
 80075dc:	f8ca 3000 	str.w	r3, [sl]
 80075e0:	89a3      	ldrh	r3, [r4, #12]
 80075e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075e6:	81a3      	strh	r3, [r4, #12]
 80075e8:	f04f 30ff 	mov.w	r0, #4294967295
 80075ec:	e7e9      	b.n	80075c2 <__ssputs_r+0x8a>
	...

080075f0 <_svfiprintf_r>:
 80075f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f4:	4698      	mov	r8, r3
 80075f6:	898b      	ldrh	r3, [r1, #12]
 80075f8:	061b      	lsls	r3, r3, #24
 80075fa:	b09d      	sub	sp, #116	@ 0x74
 80075fc:	4607      	mov	r7, r0
 80075fe:	460d      	mov	r5, r1
 8007600:	4614      	mov	r4, r2
 8007602:	d510      	bpl.n	8007626 <_svfiprintf_r+0x36>
 8007604:	690b      	ldr	r3, [r1, #16]
 8007606:	b973      	cbnz	r3, 8007626 <_svfiprintf_r+0x36>
 8007608:	2140      	movs	r1, #64	@ 0x40
 800760a:	f7ff ff09 	bl	8007420 <_malloc_r>
 800760e:	6028      	str	r0, [r5, #0]
 8007610:	6128      	str	r0, [r5, #16]
 8007612:	b930      	cbnz	r0, 8007622 <_svfiprintf_r+0x32>
 8007614:	230c      	movs	r3, #12
 8007616:	603b      	str	r3, [r7, #0]
 8007618:	f04f 30ff 	mov.w	r0, #4294967295
 800761c:	b01d      	add	sp, #116	@ 0x74
 800761e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007622:	2340      	movs	r3, #64	@ 0x40
 8007624:	616b      	str	r3, [r5, #20]
 8007626:	2300      	movs	r3, #0
 8007628:	9309      	str	r3, [sp, #36]	@ 0x24
 800762a:	2320      	movs	r3, #32
 800762c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007630:	f8cd 800c 	str.w	r8, [sp, #12]
 8007634:	2330      	movs	r3, #48	@ 0x30
 8007636:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80077d4 <_svfiprintf_r+0x1e4>
 800763a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800763e:	f04f 0901 	mov.w	r9, #1
 8007642:	4623      	mov	r3, r4
 8007644:	469a      	mov	sl, r3
 8007646:	f813 2b01 	ldrb.w	r2, [r3], #1
 800764a:	b10a      	cbz	r2, 8007650 <_svfiprintf_r+0x60>
 800764c:	2a25      	cmp	r2, #37	@ 0x25
 800764e:	d1f9      	bne.n	8007644 <_svfiprintf_r+0x54>
 8007650:	ebba 0b04 	subs.w	fp, sl, r4
 8007654:	d00b      	beq.n	800766e <_svfiprintf_r+0x7e>
 8007656:	465b      	mov	r3, fp
 8007658:	4622      	mov	r2, r4
 800765a:	4629      	mov	r1, r5
 800765c:	4638      	mov	r0, r7
 800765e:	f7ff ff6b 	bl	8007538 <__ssputs_r>
 8007662:	3001      	adds	r0, #1
 8007664:	f000 80a7 	beq.w	80077b6 <_svfiprintf_r+0x1c6>
 8007668:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800766a:	445a      	add	r2, fp
 800766c:	9209      	str	r2, [sp, #36]	@ 0x24
 800766e:	f89a 3000 	ldrb.w	r3, [sl]
 8007672:	2b00      	cmp	r3, #0
 8007674:	f000 809f 	beq.w	80077b6 <_svfiprintf_r+0x1c6>
 8007678:	2300      	movs	r3, #0
 800767a:	f04f 32ff 	mov.w	r2, #4294967295
 800767e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007682:	f10a 0a01 	add.w	sl, sl, #1
 8007686:	9304      	str	r3, [sp, #16]
 8007688:	9307      	str	r3, [sp, #28]
 800768a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800768e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007690:	4654      	mov	r4, sl
 8007692:	2205      	movs	r2, #5
 8007694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007698:	484e      	ldr	r0, [pc, #312]	@ (80077d4 <_svfiprintf_r+0x1e4>)
 800769a:	f7f8 fd99 	bl	80001d0 <memchr>
 800769e:	9a04      	ldr	r2, [sp, #16]
 80076a0:	b9d8      	cbnz	r0, 80076da <_svfiprintf_r+0xea>
 80076a2:	06d0      	lsls	r0, r2, #27
 80076a4:	bf44      	itt	mi
 80076a6:	2320      	movmi	r3, #32
 80076a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076ac:	0711      	lsls	r1, r2, #28
 80076ae:	bf44      	itt	mi
 80076b0:	232b      	movmi	r3, #43	@ 0x2b
 80076b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076b6:	f89a 3000 	ldrb.w	r3, [sl]
 80076ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80076bc:	d015      	beq.n	80076ea <_svfiprintf_r+0xfa>
 80076be:	9a07      	ldr	r2, [sp, #28]
 80076c0:	4654      	mov	r4, sl
 80076c2:	2000      	movs	r0, #0
 80076c4:	f04f 0c0a 	mov.w	ip, #10
 80076c8:	4621      	mov	r1, r4
 80076ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076ce:	3b30      	subs	r3, #48	@ 0x30
 80076d0:	2b09      	cmp	r3, #9
 80076d2:	d94b      	bls.n	800776c <_svfiprintf_r+0x17c>
 80076d4:	b1b0      	cbz	r0, 8007704 <_svfiprintf_r+0x114>
 80076d6:	9207      	str	r2, [sp, #28]
 80076d8:	e014      	b.n	8007704 <_svfiprintf_r+0x114>
 80076da:	eba0 0308 	sub.w	r3, r0, r8
 80076de:	fa09 f303 	lsl.w	r3, r9, r3
 80076e2:	4313      	orrs	r3, r2
 80076e4:	9304      	str	r3, [sp, #16]
 80076e6:	46a2      	mov	sl, r4
 80076e8:	e7d2      	b.n	8007690 <_svfiprintf_r+0xa0>
 80076ea:	9b03      	ldr	r3, [sp, #12]
 80076ec:	1d19      	adds	r1, r3, #4
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	9103      	str	r1, [sp, #12]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	bfbb      	ittet	lt
 80076f6:	425b      	neglt	r3, r3
 80076f8:	f042 0202 	orrlt.w	r2, r2, #2
 80076fc:	9307      	strge	r3, [sp, #28]
 80076fe:	9307      	strlt	r3, [sp, #28]
 8007700:	bfb8      	it	lt
 8007702:	9204      	strlt	r2, [sp, #16]
 8007704:	7823      	ldrb	r3, [r4, #0]
 8007706:	2b2e      	cmp	r3, #46	@ 0x2e
 8007708:	d10a      	bne.n	8007720 <_svfiprintf_r+0x130>
 800770a:	7863      	ldrb	r3, [r4, #1]
 800770c:	2b2a      	cmp	r3, #42	@ 0x2a
 800770e:	d132      	bne.n	8007776 <_svfiprintf_r+0x186>
 8007710:	9b03      	ldr	r3, [sp, #12]
 8007712:	1d1a      	adds	r2, r3, #4
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	9203      	str	r2, [sp, #12]
 8007718:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800771c:	3402      	adds	r4, #2
 800771e:	9305      	str	r3, [sp, #20]
 8007720:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80077e4 <_svfiprintf_r+0x1f4>
 8007724:	7821      	ldrb	r1, [r4, #0]
 8007726:	2203      	movs	r2, #3
 8007728:	4650      	mov	r0, sl
 800772a:	f7f8 fd51 	bl	80001d0 <memchr>
 800772e:	b138      	cbz	r0, 8007740 <_svfiprintf_r+0x150>
 8007730:	9b04      	ldr	r3, [sp, #16]
 8007732:	eba0 000a 	sub.w	r0, r0, sl
 8007736:	2240      	movs	r2, #64	@ 0x40
 8007738:	4082      	lsls	r2, r0
 800773a:	4313      	orrs	r3, r2
 800773c:	3401      	adds	r4, #1
 800773e:	9304      	str	r3, [sp, #16]
 8007740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007744:	4824      	ldr	r0, [pc, #144]	@ (80077d8 <_svfiprintf_r+0x1e8>)
 8007746:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800774a:	2206      	movs	r2, #6
 800774c:	f7f8 fd40 	bl	80001d0 <memchr>
 8007750:	2800      	cmp	r0, #0
 8007752:	d036      	beq.n	80077c2 <_svfiprintf_r+0x1d2>
 8007754:	4b21      	ldr	r3, [pc, #132]	@ (80077dc <_svfiprintf_r+0x1ec>)
 8007756:	bb1b      	cbnz	r3, 80077a0 <_svfiprintf_r+0x1b0>
 8007758:	9b03      	ldr	r3, [sp, #12]
 800775a:	3307      	adds	r3, #7
 800775c:	f023 0307 	bic.w	r3, r3, #7
 8007760:	3308      	adds	r3, #8
 8007762:	9303      	str	r3, [sp, #12]
 8007764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007766:	4433      	add	r3, r6
 8007768:	9309      	str	r3, [sp, #36]	@ 0x24
 800776a:	e76a      	b.n	8007642 <_svfiprintf_r+0x52>
 800776c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007770:	460c      	mov	r4, r1
 8007772:	2001      	movs	r0, #1
 8007774:	e7a8      	b.n	80076c8 <_svfiprintf_r+0xd8>
 8007776:	2300      	movs	r3, #0
 8007778:	3401      	adds	r4, #1
 800777a:	9305      	str	r3, [sp, #20]
 800777c:	4619      	mov	r1, r3
 800777e:	f04f 0c0a 	mov.w	ip, #10
 8007782:	4620      	mov	r0, r4
 8007784:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007788:	3a30      	subs	r2, #48	@ 0x30
 800778a:	2a09      	cmp	r2, #9
 800778c:	d903      	bls.n	8007796 <_svfiprintf_r+0x1a6>
 800778e:	2b00      	cmp	r3, #0
 8007790:	d0c6      	beq.n	8007720 <_svfiprintf_r+0x130>
 8007792:	9105      	str	r1, [sp, #20]
 8007794:	e7c4      	b.n	8007720 <_svfiprintf_r+0x130>
 8007796:	fb0c 2101 	mla	r1, ip, r1, r2
 800779a:	4604      	mov	r4, r0
 800779c:	2301      	movs	r3, #1
 800779e:	e7f0      	b.n	8007782 <_svfiprintf_r+0x192>
 80077a0:	ab03      	add	r3, sp, #12
 80077a2:	9300      	str	r3, [sp, #0]
 80077a4:	462a      	mov	r2, r5
 80077a6:	4b0e      	ldr	r3, [pc, #56]	@ (80077e0 <_svfiprintf_r+0x1f0>)
 80077a8:	a904      	add	r1, sp, #16
 80077aa:	4638      	mov	r0, r7
 80077ac:	f3af 8000 	nop.w
 80077b0:	1c42      	adds	r2, r0, #1
 80077b2:	4606      	mov	r6, r0
 80077b4:	d1d6      	bne.n	8007764 <_svfiprintf_r+0x174>
 80077b6:	89ab      	ldrh	r3, [r5, #12]
 80077b8:	065b      	lsls	r3, r3, #25
 80077ba:	f53f af2d 	bmi.w	8007618 <_svfiprintf_r+0x28>
 80077be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80077c0:	e72c      	b.n	800761c <_svfiprintf_r+0x2c>
 80077c2:	ab03      	add	r3, sp, #12
 80077c4:	9300      	str	r3, [sp, #0]
 80077c6:	462a      	mov	r2, r5
 80077c8:	4b05      	ldr	r3, [pc, #20]	@ (80077e0 <_svfiprintf_r+0x1f0>)
 80077ca:	a904      	add	r1, sp, #16
 80077cc:	4638      	mov	r0, r7
 80077ce:	f000 f9bb 	bl	8007b48 <_printf_i>
 80077d2:	e7ed      	b.n	80077b0 <_svfiprintf_r+0x1c0>
 80077d4:	08008371 	.word	0x08008371
 80077d8:	0800837b 	.word	0x0800837b
 80077dc:	00000000 	.word	0x00000000
 80077e0:	08007539 	.word	0x08007539
 80077e4:	08008377 	.word	0x08008377

080077e8 <__sfputc_r>:
 80077e8:	6893      	ldr	r3, [r2, #8]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	b410      	push	{r4}
 80077f0:	6093      	str	r3, [r2, #8]
 80077f2:	da08      	bge.n	8007806 <__sfputc_r+0x1e>
 80077f4:	6994      	ldr	r4, [r2, #24]
 80077f6:	42a3      	cmp	r3, r4
 80077f8:	db01      	blt.n	80077fe <__sfputc_r+0x16>
 80077fa:	290a      	cmp	r1, #10
 80077fc:	d103      	bne.n	8007806 <__sfputc_r+0x1e>
 80077fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007802:	f7ff bc2c 	b.w	800705e <__swbuf_r>
 8007806:	6813      	ldr	r3, [r2, #0]
 8007808:	1c58      	adds	r0, r3, #1
 800780a:	6010      	str	r0, [r2, #0]
 800780c:	7019      	strb	r1, [r3, #0]
 800780e:	4608      	mov	r0, r1
 8007810:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007814:	4770      	bx	lr

08007816 <__sfputs_r>:
 8007816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007818:	4606      	mov	r6, r0
 800781a:	460f      	mov	r7, r1
 800781c:	4614      	mov	r4, r2
 800781e:	18d5      	adds	r5, r2, r3
 8007820:	42ac      	cmp	r4, r5
 8007822:	d101      	bne.n	8007828 <__sfputs_r+0x12>
 8007824:	2000      	movs	r0, #0
 8007826:	e007      	b.n	8007838 <__sfputs_r+0x22>
 8007828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800782c:	463a      	mov	r2, r7
 800782e:	4630      	mov	r0, r6
 8007830:	f7ff ffda 	bl	80077e8 <__sfputc_r>
 8007834:	1c43      	adds	r3, r0, #1
 8007836:	d1f3      	bne.n	8007820 <__sfputs_r+0xa>
 8007838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800783c <_vfiprintf_r>:
 800783c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007840:	460d      	mov	r5, r1
 8007842:	b09d      	sub	sp, #116	@ 0x74
 8007844:	4614      	mov	r4, r2
 8007846:	4698      	mov	r8, r3
 8007848:	4606      	mov	r6, r0
 800784a:	b118      	cbz	r0, 8007854 <_vfiprintf_r+0x18>
 800784c:	6a03      	ldr	r3, [r0, #32]
 800784e:	b90b      	cbnz	r3, 8007854 <_vfiprintf_r+0x18>
 8007850:	f7ff fae8 	bl	8006e24 <__sinit>
 8007854:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007856:	07d9      	lsls	r1, r3, #31
 8007858:	d405      	bmi.n	8007866 <_vfiprintf_r+0x2a>
 800785a:	89ab      	ldrh	r3, [r5, #12]
 800785c:	059a      	lsls	r2, r3, #22
 800785e:	d402      	bmi.n	8007866 <_vfiprintf_r+0x2a>
 8007860:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007862:	f7ff fd60 	bl	8007326 <__retarget_lock_acquire_recursive>
 8007866:	89ab      	ldrh	r3, [r5, #12]
 8007868:	071b      	lsls	r3, r3, #28
 800786a:	d501      	bpl.n	8007870 <_vfiprintf_r+0x34>
 800786c:	692b      	ldr	r3, [r5, #16]
 800786e:	b99b      	cbnz	r3, 8007898 <_vfiprintf_r+0x5c>
 8007870:	4629      	mov	r1, r5
 8007872:	4630      	mov	r0, r6
 8007874:	f7ff fc32 	bl	80070dc <__swsetup_r>
 8007878:	b170      	cbz	r0, 8007898 <_vfiprintf_r+0x5c>
 800787a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800787c:	07dc      	lsls	r4, r3, #31
 800787e:	d504      	bpl.n	800788a <_vfiprintf_r+0x4e>
 8007880:	f04f 30ff 	mov.w	r0, #4294967295
 8007884:	b01d      	add	sp, #116	@ 0x74
 8007886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800788a:	89ab      	ldrh	r3, [r5, #12]
 800788c:	0598      	lsls	r0, r3, #22
 800788e:	d4f7      	bmi.n	8007880 <_vfiprintf_r+0x44>
 8007890:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007892:	f7ff fd49 	bl	8007328 <__retarget_lock_release_recursive>
 8007896:	e7f3      	b.n	8007880 <_vfiprintf_r+0x44>
 8007898:	2300      	movs	r3, #0
 800789a:	9309      	str	r3, [sp, #36]	@ 0x24
 800789c:	2320      	movs	r3, #32
 800789e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80078a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80078a6:	2330      	movs	r3, #48	@ 0x30
 80078a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007a58 <_vfiprintf_r+0x21c>
 80078ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80078b0:	f04f 0901 	mov.w	r9, #1
 80078b4:	4623      	mov	r3, r4
 80078b6:	469a      	mov	sl, r3
 80078b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078bc:	b10a      	cbz	r2, 80078c2 <_vfiprintf_r+0x86>
 80078be:	2a25      	cmp	r2, #37	@ 0x25
 80078c0:	d1f9      	bne.n	80078b6 <_vfiprintf_r+0x7a>
 80078c2:	ebba 0b04 	subs.w	fp, sl, r4
 80078c6:	d00b      	beq.n	80078e0 <_vfiprintf_r+0xa4>
 80078c8:	465b      	mov	r3, fp
 80078ca:	4622      	mov	r2, r4
 80078cc:	4629      	mov	r1, r5
 80078ce:	4630      	mov	r0, r6
 80078d0:	f7ff ffa1 	bl	8007816 <__sfputs_r>
 80078d4:	3001      	adds	r0, #1
 80078d6:	f000 80a7 	beq.w	8007a28 <_vfiprintf_r+0x1ec>
 80078da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078dc:	445a      	add	r2, fp
 80078de:	9209      	str	r2, [sp, #36]	@ 0x24
 80078e0:	f89a 3000 	ldrb.w	r3, [sl]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 809f 	beq.w	8007a28 <_vfiprintf_r+0x1ec>
 80078ea:	2300      	movs	r3, #0
 80078ec:	f04f 32ff 	mov.w	r2, #4294967295
 80078f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078f4:	f10a 0a01 	add.w	sl, sl, #1
 80078f8:	9304      	str	r3, [sp, #16]
 80078fa:	9307      	str	r3, [sp, #28]
 80078fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007900:	931a      	str	r3, [sp, #104]	@ 0x68
 8007902:	4654      	mov	r4, sl
 8007904:	2205      	movs	r2, #5
 8007906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800790a:	4853      	ldr	r0, [pc, #332]	@ (8007a58 <_vfiprintf_r+0x21c>)
 800790c:	f7f8 fc60 	bl	80001d0 <memchr>
 8007910:	9a04      	ldr	r2, [sp, #16]
 8007912:	b9d8      	cbnz	r0, 800794c <_vfiprintf_r+0x110>
 8007914:	06d1      	lsls	r1, r2, #27
 8007916:	bf44      	itt	mi
 8007918:	2320      	movmi	r3, #32
 800791a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800791e:	0713      	lsls	r3, r2, #28
 8007920:	bf44      	itt	mi
 8007922:	232b      	movmi	r3, #43	@ 0x2b
 8007924:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007928:	f89a 3000 	ldrb.w	r3, [sl]
 800792c:	2b2a      	cmp	r3, #42	@ 0x2a
 800792e:	d015      	beq.n	800795c <_vfiprintf_r+0x120>
 8007930:	9a07      	ldr	r2, [sp, #28]
 8007932:	4654      	mov	r4, sl
 8007934:	2000      	movs	r0, #0
 8007936:	f04f 0c0a 	mov.w	ip, #10
 800793a:	4621      	mov	r1, r4
 800793c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007940:	3b30      	subs	r3, #48	@ 0x30
 8007942:	2b09      	cmp	r3, #9
 8007944:	d94b      	bls.n	80079de <_vfiprintf_r+0x1a2>
 8007946:	b1b0      	cbz	r0, 8007976 <_vfiprintf_r+0x13a>
 8007948:	9207      	str	r2, [sp, #28]
 800794a:	e014      	b.n	8007976 <_vfiprintf_r+0x13a>
 800794c:	eba0 0308 	sub.w	r3, r0, r8
 8007950:	fa09 f303 	lsl.w	r3, r9, r3
 8007954:	4313      	orrs	r3, r2
 8007956:	9304      	str	r3, [sp, #16]
 8007958:	46a2      	mov	sl, r4
 800795a:	e7d2      	b.n	8007902 <_vfiprintf_r+0xc6>
 800795c:	9b03      	ldr	r3, [sp, #12]
 800795e:	1d19      	adds	r1, r3, #4
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	9103      	str	r1, [sp, #12]
 8007964:	2b00      	cmp	r3, #0
 8007966:	bfbb      	ittet	lt
 8007968:	425b      	neglt	r3, r3
 800796a:	f042 0202 	orrlt.w	r2, r2, #2
 800796e:	9307      	strge	r3, [sp, #28]
 8007970:	9307      	strlt	r3, [sp, #28]
 8007972:	bfb8      	it	lt
 8007974:	9204      	strlt	r2, [sp, #16]
 8007976:	7823      	ldrb	r3, [r4, #0]
 8007978:	2b2e      	cmp	r3, #46	@ 0x2e
 800797a:	d10a      	bne.n	8007992 <_vfiprintf_r+0x156>
 800797c:	7863      	ldrb	r3, [r4, #1]
 800797e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007980:	d132      	bne.n	80079e8 <_vfiprintf_r+0x1ac>
 8007982:	9b03      	ldr	r3, [sp, #12]
 8007984:	1d1a      	adds	r2, r3, #4
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	9203      	str	r2, [sp, #12]
 800798a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800798e:	3402      	adds	r4, #2
 8007990:	9305      	str	r3, [sp, #20]
 8007992:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007a68 <_vfiprintf_r+0x22c>
 8007996:	7821      	ldrb	r1, [r4, #0]
 8007998:	2203      	movs	r2, #3
 800799a:	4650      	mov	r0, sl
 800799c:	f7f8 fc18 	bl	80001d0 <memchr>
 80079a0:	b138      	cbz	r0, 80079b2 <_vfiprintf_r+0x176>
 80079a2:	9b04      	ldr	r3, [sp, #16]
 80079a4:	eba0 000a 	sub.w	r0, r0, sl
 80079a8:	2240      	movs	r2, #64	@ 0x40
 80079aa:	4082      	lsls	r2, r0
 80079ac:	4313      	orrs	r3, r2
 80079ae:	3401      	adds	r4, #1
 80079b0:	9304      	str	r3, [sp, #16]
 80079b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079b6:	4829      	ldr	r0, [pc, #164]	@ (8007a5c <_vfiprintf_r+0x220>)
 80079b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80079bc:	2206      	movs	r2, #6
 80079be:	f7f8 fc07 	bl	80001d0 <memchr>
 80079c2:	2800      	cmp	r0, #0
 80079c4:	d03f      	beq.n	8007a46 <_vfiprintf_r+0x20a>
 80079c6:	4b26      	ldr	r3, [pc, #152]	@ (8007a60 <_vfiprintf_r+0x224>)
 80079c8:	bb1b      	cbnz	r3, 8007a12 <_vfiprintf_r+0x1d6>
 80079ca:	9b03      	ldr	r3, [sp, #12]
 80079cc:	3307      	adds	r3, #7
 80079ce:	f023 0307 	bic.w	r3, r3, #7
 80079d2:	3308      	adds	r3, #8
 80079d4:	9303      	str	r3, [sp, #12]
 80079d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079d8:	443b      	add	r3, r7
 80079da:	9309      	str	r3, [sp, #36]	@ 0x24
 80079dc:	e76a      	b.n	80078b4 <_vfiprintf_r+0x78>
 80079de:	fb0c 3202 	mla	r2, ip, r2, r3
 80079e2:	460c      	mov	r4, r1
 80079e4:	2001      	movs	r0, #1
 80079e6:	e7a8      	b.n	800793a <_vfiprintf_r+0xfe>
 80079e8:	2300      	movs	r3, #0
 80079ea:	3401      	adds	r4, #1
 80079ec:	9305      	str	r3, [sp, #20]
 80079ee:	4619      	mov	r1, r3
 80079f0:	f04f 0c0a 	mov.w	ip, #10
 80079f4:	4620      	mov	r0, r4
 80079f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079fa:	3a30      	subs	r2, #48	@ 0x30
 80079fc:	2a09      	cmp	r2, #9
 80079fe:	d903      	bls.n	8007a08 <_vfiprintf_r+0x1cc>
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d0c6      	beq.n	8007992 <_vfiprintf_r+0x156>
 8007a04:	9105      	str	r1, [sp, #20]
 8007a06:	e7c4      	b.n	8007992 <_vfiprintf_r+0x156>
 8007a08:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a0c:	4604      	mov	r4, r0
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e7f0      	b.n	80079f4 <_vfiprintf_r+0x1b8>
 8007a12:	ab03      	add	r3, sp, #12
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	462a      	mov	r2, r5
 8007a18:	4b12      	ldr	r3, [pc, #72]	@ (8007a64 <_vfiprintf_r+0x228>)
 8007a1a:	a904      	add	r1, sp, #16
 8007a1c:	4630      	mov	r0, r6
 8007a1e:	f3af 8000 	nop.w
 8007a22:	4607      	mov	r7, r0
 8007a24:	1c78      	adds	r0, r7, #1
 8007a26:	d1d6      	bne.n	80079d6 <_vfiprintf_r+0x19a>
 8007a28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a2a:	07d9      	lsls	r1, r3, #31
 8007a2c:	d405      	bmi.n	8007a3a <_vfiprintf_r+0x1fe>
 8007a2e:	89ab      	ldrh	r3, [r5, #12]
 8007a30:	059a      	lsls	r2, r3, #22
 8007a32:	d402      	bmi.n	8007a3a <_vfiprintf_r+0x1fe>
 8007a34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a36:	f7ff fc77 	bl	8007328 <__retarget_lock_release_recursive>
 8007a3a:	89ab      	ldrh	r3, [r5, #12]
 8007a3c:	065b      	lsls	r3, r3, #25
 8007a3e:	f53f af1f 	bmi.w	8007880 <_vfiprintf_r+0x44>
 8007a42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a44:	e71e      	b.n	8007884 <_vfiprintf_r+0x48>
 8007a46:	ab03      	add	r3, sp, #12
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	462a      	mov	r2, r5
 8007a4c:	4b05      	ldr	r3, [pc, #20]	@ (8007a64 <_vfiprintf_r+0x228>)
 8007a4e:	a904      	add	r1, sp, #16
 8007a50:	4630      	mov	r0, r6
 8007a52:	f000 f879 	bl	8007b48 <_printf_i>
 8007a56:	e7e4      	b.n	8007a22 <_vfiprintf_r+0x1e6>
 8007a58:	08008371 	.word	0x08008371
 8007a5c:	0800837b 	.word	0x0800837b
 8007a60:	00000000 	.word	0x00000000
 8007a64:	08007817 	.word	0x08007817
 8007a68:	08008377 	.word	0x08008377

08007a6c <_printf_common>:
 8007a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a70:	4616      	mov	r6, r2
 8007a72:	4698      	mov	r8, r3
 8007a74:	688a      	ldr	r2, [r1, #8]
 8007a76:	690b      	ldr	r3, [r1, #16]
 8007a78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	bfb8      	it	lt
 8007a80:	4613      	movlt	r3, r2
 8007a82:	6033      	str	r3, [r6, #0]
 8007a84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a88:	4607      	mov	r7, r0
 8007a8a:	460c      	mov	r4, r1
 8007a8c:	b10a      	cbz	r2, 8007a92 <_printf_common+0x26>
 8007a8e:	3301      	adds	r3, #1
 8007a90:	6033      	str	r3, [r6, #0]
 8007a92:	6823      	ldr	r3, [r4, #0]
 8007a94:	0699      	lsls	r1, r3, #26
 8007a96:	bf42      	ittt	mi
 8007a98:	6833      	ldrmi	r3, [r6, #0]
 8007a9a:	3302      	addmi	r3, #2
 8007a9c:	6033      	strmi	r3, [r6, #0]
 8007a9e:	6825      	ldr	r5, [r4, #0]
 8007aa0:	f015 0506 	ands.w	r5, r5, #6
 8007aa4:	d106      	bne.n	8007ab4 <_printf_common+0x48>
 8007aa6:	f104 0a19 	add.w	sl, r4, #25
 8007aaa:	68e3      	ldr	r3, [r4, #12]
 8007aac:	6832      	ldr	r2, [r6, #0]
 8007aae:	1a9b      	subs	r3, r3, r2
 8007ab0:	42ab      	cmp	r3, r5
 8007ab2:	dc26      	bgt.n	8007b02 <_printf_common+0x96>
 8007ab4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ab8:	6822      	ldr	r2, [r4, #0]
 8007aba:	3b00      	subs	r3, #0
 8007abc:	bf18      	it	ne
 8007abe:	2301      	movne	r3, #1
 8007ac0:	0692      	lsls	r2, r2, #26
 8007ac2:	d42b      	bmi.n	8007b1c <_printf_common+0xb0>
 8007ac4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ac8:	4641      	mov	r1, r8
 8007aca:	4638      	mov	r0, r7
 8007acc:	47c8      	blx	r9
 8007ace:	3001      	adds	r0, #1
 8007ad0:	d01e      	beq.n	8007b10 <_printf_common+0xa4>
 8007ad2:	6823      	ldr	r3, [r4, #0]
 8007ad4:	6922      	ldr	r2, [r4, #16]
 8007ad6:	f003 0306 	and.w	r3, r3, #6
 8007ada:	2b04      	cmp	r3, #4
 8007adc:	bf02      	ittt	eq
 8007ade:	68e5      	ldreq	r5, [r4, #12]
 8007ae0:	6833      	ldreq	r3, [r6, #0]
 8007ae2:	1aed      	subeq	r5, r5, r3
 8007ae4:	68a3      	ldr	r3, [r4, #8]
 8007ae6:	bf0c      	ite	eq
 8007ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007aec:	2500      	movne	r5, #0
 8007aee:	4293      	cmp	r3, r2
 8007af0:	bfc4      	itt	gt
 8007af2:	1a9b      	subgt	r3, r3, r2
 8007af4:	18ed      	addgt	r5, r5, r3
 8007af6:	2600      	movs	r6, #0
 8007af8:	341a      	adds	r4, #26
 8007afa:	42b5      	cmp	r5, r6
 8007afc:	d11a      	bne.n	8007b34 <_printf_common+0xc8>
 8007afe:	2000      	movs	r0, #0
 8007b00:	e008      	b.n	8007b14 <_printf_common+0xa8>
 8007b02:	2301      	movs	r3, #1
 8007b04:	4652      	mov	r2, sl
 8007b06:	4641      	mov	r1, r8
 8007b08:	4638      	mov	r0, r7
 8007b0a:	47c8      	blx	r9
 8007b0c:	3001      	adds	r0, #1
 8007b0e:	d103      	bne.n	8007b18 <_printf_common+0xac>
 8007b10:	f04f 30ff 	mov.w	r0, #4294967295
 8007b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b18:	3501      	adds	r5, #1
 8007b1a:	e7c6      	b.n	8007aaa <_printf_common+0x3e>
 8007b1c:	18e1      	adds	r1, r4, r3
 8007b1e:	1c5a      	adds	r2, r3, #1
 8007b20:	2030      	movs	r0, #48	@ 0x30
 8007b22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b26:	4422      	add	r2, r4
 8007b28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b30:	3302      	adds	r3, #2
 8007b32:	e7c7      	b.n	8007ac4 <_printf_common+0x58>
 8007b34:	2301      	movs	r3, #1
 8007b36:	4622      	mov	r2, r4
 8007b38:	4641      	mov	r1, r8
 8007b3a:	4638      	mov	r0, r7
 8007b3c:	47c8      	blx	r9
 8007b3e:	3001      	adds	r0, #1
 8007b40:	d0e6      	beq.n	8007b10 <_printf_common+0xa4>
 8007b42:	3601      	adds	r6, #1
 8007b44:	e7d9      	b.n	8007afa <_printf_common+0x8e>
	...

08007b48 <_printf_i>:
 8007b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b4c:	7e0f      	ldrb	r7, [r1, #24]
 8007b4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b50:	2f78      	cmp	r7, #120	@ 0x78
 8007b52:	4691      	mov	r9, r2
 8007b54:	4680      	mov	r8, r0
 8007b56:	460c      	mov	r4, r1
 8007b58:	469a      	mov	sl, r3
 8007b5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b5e:	d807      	bhi.n	8007b70 <_printf_i+0x28>
 8007b60:	2f62      	cmp	r7, #98	@ 0x62
 8007b62:	d80a      	bhi.n	8007b7a <_printf_i+0x32>
 8007b64:	2f00      	cmp	r7, #0
 8007b66:	f000 80d2 	beq.w	8007d0e <_printf_i+0x1c6>
 8007b6a:	2f58      	cmp	r7, #88	@ 0x58
 8007b6c:	f000 80b9 	beq.w	8007ce2 <_printf_i+0x19a>
 8007b70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b78:	e03a      	b.n	8007bf0 <_printf_i+0xa8>
 8007b7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b7e:	2b15      	cmp	r3, #21
 8007b80:	d8f6      	bhi.n	8007b70 <_printf_i+0x28>
 8007b82:	a101      	add	r1, pc, #4	@ (adr r1, 8007b88 <_printf_i+0x40>)
 8007b84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b88:	08007be1 	.word	0x08007be1
 8007b8c:	08007bf5 	.word	0x08007bf5
 8007b90:	08007b71 	.word	0x08007b71
 8007b94:	08007b71 	.word	0x08007b71
 8007b98:	08007b71 	.word	0x08007b71
 8007b9c:	08007b71 	.word	0x08007b71
 8007ba0:	08007bf5 	.word	0x08007bf5
 8007ba4:	08007b71 	.word	0x08007b71
 8007ba8:	08007b71 	.word	0x08007b71
 8007bac:	08007b71 	.word	0x08007b71
 8007bb0:	08007b71 	.word	0x08007b71
 8007bb4:	08007cf5 	.word	0x08007cf5
 8007bb8:	08007c1f 	.word	0x08007c1f
 8007bbc:	08007caf 	.word	0x08007caf
 8007bc0:	08007b71 	.word	0x08007b71
 8007bc4:	08007b71 	.word	0x08007b71
 8007bc8:	08007d17 	.word	0x08007d17
 8007bcc:	08007b71 	.word	0x08007b71
 8007bd0:	08007c1f 	.word	0x08007c1f
 8007bd4:	08007b71 	.word	0x08007b71
 8007bd8:	08007b71 	.word	0x08007b71
 8007bdc:	08007cb7 	.word	0x08007cb7
 8007be0:	6833      	ldr	r3, [r6, #0]
 8007be2:	1d1a      	adds	r2, r3, #4
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	6032      	str	r2, [r6, #0]
 8007be8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e09d      	b.n	8007d30 <_printf_i+0x1e8>
 8007bf4:	6833      	ldr	r3, [r6, #0]
 8007bf6:	6820      	ldr	r0, [r4, #0]
 8007bf8:	1d19      	adds	r1, r3, #4
 8007bfa:	6031      	str	r1, [r6, #0]
 8007bfc:	0606      	lsls	r6, r0, #24
 8007bfe:	d501      	bpl.n	8007c04 <_printf_i+0xbc>
 8007c00:	681d      	ldr	r5, [r3, #0]
 8007c02:	e003      	b.n	8007c0c <_printf_i+0xc4>
 8007c04:	0645      	lsls	r5, r0, #25
 8007c06:	d5fb      	bpl.n	8007c00 <_printf_i+0xb8>
 8007c08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007c0c:	2d00      	cmp	r5, #0
 8007c0e:	da03      	bge.n	8007c18 <_printf_i+0xd0>
 8007c10:	232d      	movs	r3, #45	@ 0x2d
 8007c12:	426d      	negs	r5, r5
 8007c14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c18:	4859      	ldr	r0, [pc, #356]	@ (8007d80 <_printf_i+0x238>)
 8007c1a:	230a      	movs	r3, #10
 8007c1c:	e011      	b.n	8007c42 <_printf_i+0xfa>
 8007c1e:	6821      	ldr	r1, [r4, #0]
 8007c20:	6833      	ldr	r3, [r6, #0]
 8007c22:	0608      	lsls	r0, r1, #24
 8007c24:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c28:	d402      	bmi.n	8007c30 <_printf_i+0xe8>
 8007c2a:	0649      	lsls	r1, r1, #25
 8007c2c:	bf48      	it	mi
 8007c2e:	b2ad      	uxthmi	r5, r5
 8007c30:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c32:	4853      	ldr	r0, [pc, #332]	@ (8007d80 <_printf_i+0x238>)
 8007c34:	6033      	str	r3, [r6, #0]
 8007c36:	bf14      	ite	ne
 8007c38:	230a      	movne	r3, #10
 8007c3a:	2308      	moveq	r3, #8
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c42:	6866      	ldr	r6, [r4, #4]
 8007c44:	60a6      	str	r6, [r4, #8]
 8007c46:	2e00      	cmp	r6, #0
 8007c48:	bfa2      	ittt	ge
 8007c4a:	6821      	ldrge	r1, [r4, #0]
 8007c4c:	f021 0104 	bicge.w	r1, r1, #4
 8007c50:	6021      	strge	r1, [r4, #0]
 8007c52:	b90d      	cbnz	r5, 8007c58 <_printf_i+0x110>
 8007c54:	2e00      	cmp	r6, #0
 8007c56:	d04b      	beq.n	8007cf0 <_printf_i+0x1a8>
 8007c58:	4616      	mov	r6, r2
 8007c5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c5e:	fb03 5711 	mls	r7, r3, r1, r5
 8007c62:	5dc7      	ldrb	r7, [r0, r7]
 8007c64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c68:	462f      	mov	r7, r5
 8007c6a:	42bb      	cmp	r3, r7
 8007c6c:	460d      	mov	r5, r1
 8007c6e:	d9f4      	bls.n	8007c5a <_printf_i+0x112>
 8007c70:	2b08      	cmp	r3, #8
 8007c72:	d10b      	bne.n	8007c8c <_printf_i+0x144>
 8007c74:	6823      	ldr	r3, [r4, #0]
 8007c76:	07df      	lsls	r7, r3, #31
 8007c78:	d508      	bpl.n	8007c8c <_printf_i+0x144>
 8007c7a:	6923      	ldr	r3, [r4, #16]
 8007c7c:	6861      	ldr	r1, [r4, #4]
 8007c7e:	4299      	cmp	r1, r3
 8007c80:	bfde      	ittt	le
 8007c82:	2330      	movle	r3, #48	@ 0x30
 8007c84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c8c:	1b92      	subs	r2, r2, r6
 8007c8e:	6122      	str	r2, [r4, #16]
 8007c90:	f8cd a000 	str.w	sl, [sp]
 8007c94:	464b      	mov	r3, r9
 8007c96:	aa03      	add	r2, sp, #12
 8007c98:	4621      	mov	r1, r4
 8007c9a:	4640      	mov	r0, r8
 8007c9c:	f7ff fee6 	bl	8007a6c <_printf_common>
 8007ca0:	3001      	adds	r0, #1
 8007ca2:	d14a      	bne.n	8007d3a <_printf_i+0x1f2>
 8007ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca8:	b004      	add	sp, #16
 8007caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	f043 0320 	orr.w	r3, r3, #32
 8007cb4:	6023      	str	r3, [r4, #0]
 8007cb6:	4833      	ldr	r0, [pc, #204]	@ (8007d84 <_printf_i+0x23c>)
 8007cb8:	2778      	movs	r7, #120	@ 0x78
 8007cba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	6831      	ldr	r1, [r6, #0]
 8007cc2:	061f      	lsls	r7, r3, #24
 8007cc4:	f851 5b04 	ldr.w	r5, [r1], #4
 8007cc8:	d402      	bmi.n	8007cd0 <_printf_i+0x188>
 8007cca:	065f      	lsls	r7, r3, #25
 8007ccc:	bf48      	it	mi
 8007cce:	b2ad      	uxthmi	r5, r5
 8007cd0:	6031      	str	r1, [r6, #0]
 8007cd2:	07d9      	lsls	r1, r3, #31
 8007cd4:	bf44      	itt	mi
 8007cd6:	f043 0320 	orrmi.w	r3, r3, #32
 8007cda:	6023      	strmi	r3, [r4, #0]
 8007cdc:	b11d      	cbz	r5, 8007ce6 <_printf_i+0x19e>
 8007cde:	2310      	movs	r3, #16
 8007ce0:	e7ac      	b.n	8007c3c <_printf_i+0xf4>
 8007ce2:	4827      	ldr	r0, [pc, #156]	@ (8007d80 <_printf_i+0x238>)
 8007ce4:	e7e9      	b.n	8007cba <_printf_i+0x172>
 8007ce6:	6823      	ldr	r3, [r4, #0]
 8007ce8:	f023 0320 	bic.w	r3, r3, #32
 8007cec:	6023      	str	r3, [r4, #0]
 8007cee:	e7f6      	b.n	8007cde <_printf_i+0x196>
 8007cf0:	4616      	mov	r6, r2
 8007cf2:	e7bd      	b.n	8007c70 <_printf_i+0x128>
 8007cf4:	6833      	ldr	r3, [r6, #0]
 8007cf6:	6825      	ldr	r5, [r4, #0]
 8007cf8:	6961      	ldr	r1, [r4, #20]
 8007cfa:	1d18      	adds	r0, r3, #4
 8007cfc:	6030      	str	r0, [r6, #0]
 8007cfe:	062e      	lsls	r6, r5, #24
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	d501      	bpl.n	8007d08 <_printf_i+0x1c0>
 8007d04:	6019      	str	r1, [r3, #0]
 8007d06:	e002      	b.n	8007d0e <_printf_i+0x1c6>
 8007d08:	0668      	lsls	r0, r5, #25
 8007d0a:	d5fb      	bpl.n	8007d04 <_printf_i+0x1bc>
 8007d0c:	8019      	strh	r1, [r3, #0]
 8007d0e:	2300      	movs	r3, #0
 8007d10:	6123      	str	r3, [r4, #16]
 8007d12:	4616      	mov	r6, r2
 8007d14:	e7bc      	b.n	8007c90 <_printf_i+0x148>
 8007d16:	6833      	ldr	r3, [r6, #0]
 8007d18:	1d1a      	adds	r2, r3, #4
 8007d1a:	6032      	str	r2, [r6, #0]
 8007d1c:	681e      	ldr	r6, [r3, #0]
 8007d1e:	6862      	ldr	r2, [r4, #4]
 8007d20:	2100      	movs	r1, #0
 8007d22:	4630      	mov	r0, r6
 8007d24:	f7f8 fa54 	bl	80001d0 <memchr>
 8007d28:	b108      	cbz	r0, 8007d2e <_printf_i+0x1e6>
 8007d2a:	1b80      	subs	r0, r0, r6
 8007d2c:	6060      	str	r0, [r4, #4]
 8007d2e:	6863      	ldr	r3, [r4, #4]
 8007d30:	6123      	str	r3, [r4, #16]
 8007d32:	2300      	movs	r3, #0
 8007d34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d38:	e7aa      	b.n	8007c90 <_printf_i+0x148>
 8007d3a:	6923      	ldr	r3, [r4, #16]
 8007d3c:	4632      	mov	r2, r6
 8007d3e:	4649      	mov	r1, r9
 8007d40:	4640      	mov	r0, r8
 8007d42:	47d0      	blx	sl
 8007d44:	3001      	adds	r0, #1
 8007d46:	d0ad      	beq.n	8007ca4 <_printf_i+0x15c>
 8007d48:	6823      	ldr	r3, [r4, #0]
 8007d4a:	079b      	lsls	r3, r3, #30
 8007d4c:	d413      	bmi.n	8007d76 <_printf_i+0x22e>
 8007d4e:	68e0      	ldr	r0, [r4, #12]
 8007d50:	9b03      	ldr	r3, [sp, #12]
 8007d52:	4298      	cmp	r0, r3
 8007d54:	bfb8      	it	lt
 8007d56:	4618      	movlt	r0, r3
 8007d58:	e7a6      	b.n	8007ca8 <_printf_i+0x160>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	4632      	mov	r2, r6
 8007d5e:	4649      	mov	r1, r9
 8007d60:	4640      	mov	r0, r8
 8007d62:	47d0      	blx	sl
 8007d64:	3001      	adds	r0, #1
 8007d66:	d09d      	beq.n	8007ca4 <_printf_i+0x15c>
 8007d68:	3501      	adds	r5, #1
 8007d6a:	68e3      	ldr	r3, [r4, #12]
 8007d6c:	9903      	ldr	r1, [sp, #12]
 8007d6e:	1a5b      	subs	r3, r3, r1
 8007d70:	42ab      	cmp	r3, r5
 8007d72:	dcf2      	bgt.n	8007d5a <_printf_i+0x212>
 8007d74:	e7eb      	b.n	8007d4e <_printf_i+0x206>
 8007d76:	2500      	movs	r5, #0
 8007d78:	f104 0619 	add.w	r6, r4, #25
 8007d7c:	e7f5      	b.n	8007d6a <_printf_i+0x222>
 8007d7e:	bf00      	nop
 8007d80:	08008382 	.word	0x08008382
 8007d84:	08008393 	.word	0x08008393

08007d88 <__sflush_r>:
 8007d88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d90:	0716      	lsls	r6, r2, #28
 8007d92:	4605      	mov	r5, r0
 8007d94:	460c      	mov	r4, r1
 8007d96:	d454      	bmi.n	8007e42 <__sflush_r+0xba>
 8007d98:	684b      	ldr	r3, [r1, #4]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	dc02      	bgt.n	8007da4 <__sflush_r+0x1c>
 8007d9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	dd48      	ble.n	8007e36 <__sflush_r+0xae>
 8007da4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007da6:	2e00      	cmp	r6, #0
 8007da8:	d045      	beq.n	8007e36 <__sflush_r+0xae>
 8007daa:	2300      	movs	r3, #0
 8007dac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007db0:	682f      	ldr	r7, [r5, #0]
 8007db2:	6a21      	ldr	r1, [r4, #32]
 8007db4:	602b      	str	r3, [r5, #0]
 8007db6:	d030      	beq.n	8007e1a <__sflush_r+0x92>
 8007db8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007dba:	89a3      	ldrh	r3, [r4, #12]
 8007dbc:	0759      	lsls	r1, r3, #29
 8007dbe:	d505      	bpl.n	8007dcc <__sflush_r+0x44>
 8007dc0:	6863      	ldr	r3, [r4, #4]
 8007dc2:	1ad2      	subs	r2, r2, r3
 8007dc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007dc6:	b10b      	cbz	r3, 8007dcc <__sflush_r+0x44>
 8007dc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007dca:	1ad2      	subs	r2, r2, r3
 8007dcc:	2300      	movs	r3, #0
 8007dce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007dd0:	6a21      	ldr	r1, [r4, #32]
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	47b0      	blx	r6
 8007dd6:	1c43      	adds	r3, r0, #1
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	d106      	bne.n	8007dea <__sflush_r+0x62>
 8007ddc:	6829      	ldr	r1, [r5, #0]
 8007dde:	291d      	cmp	r1, #29
 8007de0:	d82b      	bhi.n	8007e3a <__sflush_r+0xb2>
 8007de2:	4a2a      	ldr	r2, [pc, #168]	@ (8007e8c <__sflush_r+0x104>)
 8007de4:	410a      	asrs	r2, r1
 8007de6:	07d6      	lsls	r6, r2, #31
 8007de8:	d427      	bmi.n	8007e3a <__sflush_r+0xb2>
 8007dea:	2200      	movs	r2, #0
 8007dec:	6062      	str	r2, [r4, #4]
 8007dee:	04d9      	lsls	r1, r3, #19
 8007df0:	6922      	ldr	r2, [r4, #16]
 8007df2:	6022      	str	r2, [r4, #0]
 8007df4:	d504      	bpl.n	8007e00 <__sflush_r+0x78>
 8007df6:	1c42      	adds	r2, r0, #1
 8007df8:	d101      	bne.n	8007dfe <__sflush_r+0x76>
 8007dfa:	682b      	ldr	r3, [r5, #0]
 8007dfc:	b903      	cbnz	r3, 8007e00 <__sflush_r+0x78>
 8007dfe:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e02:	602f      	str	r7, [r5, #0]
 8007e04:	b1b9      	cbz	r1, 8007e36 <__sflush_r+0xae>
 8007e06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e0a:	4299      	cmp	r1, r3
 8007e0c:	d002      	beq.n	8007e14 <__sflush_r+0x8c>
 8007e0e:	4628      	mov	r0, r5
 8007e10:	f7ff fa9a 	bl	8007348 <_free_r>
 8007e14:	2300      	movs	r3, #0
 8007e16:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e18:	e00d      	b.n	8007e36 <__sflush_r+0xae>
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	47b0      	blx	r6
 8007e20:	4602      	mov	r2, r0
 8007e22:	1c50      	adds	r0, r2, #1
 8007e24:	d1c9      	bne.n	8007dba <__sflush_r+0x32>
 8007e26:	682b      	ldr	r3, [r5, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d0c6      	beq.n	8007dba <__sflush_r+0x32>
 8007e2c:	2b1d      	cmp	r3, #29
 8007e2e:	d001      	beq.n	8007e34 <__sflush_r+0xac>
 8007e30:	2b16      	cmp	r3, #22
 8007e32:	d11e      	bne.n	8007e72 <__sflush_r+0xea>
 8007e34:	602f      	str	r7, [r5, #0]
 8007e36:	2000      	movs	r0, #0
 8007e38:	e022      	b.n	8007e80 <__sflush_r+0xf8>
 8007e3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e3e:	b21b      	sxth	r3, r3
 8007e40:	e01b      	b.n	8007e7a <__sflush_r+0xf2>
 8007e42:	690f      	ldr	r7, [r1, #16]
 8007e44:	2f00      	cmp	r7, #0
 8007e46:	d0f6      	beq.n	8007e36 <__sflush_r+0xae>
 8007e48:	0793      	lsls	r3, r2, #30
 8007e4a:	680e      	ldr	r6, [r1, #0]
 8007e4c:	bf08      	it	eq
 8007e4e:	694b      	ldreq	r3, [r1, #20]
 8007e50:	600f      	str	r7, [r1, #0]
 8007e52:	bf18      	it	ne
 8007e54:	2300      	movne	r3, #0
 8007e56:	eba6 0807 	sub.w	r8, r6, r7
 8007e5a:	608b      	str	r3, [r1, #8]
 8007e5c:	f1b8 0f00 	cmp.w	r8, #0
 8007e60:	dde9      	ble.n	8007e36 <__sflush_r+0xae>
 8007e62:	6a21      	ldr	r1, [r4, #32]
 8007e64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007e66:	4643      	mov	r3, r8
 8007e68:	463a      	mov	r2, r7
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	47b0      	blx	r6
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	dc08      	bgt.n	8007e84 <__sflush_r+0xfc>
 8007e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e7a:	81a3      	strh	r3, [r4, #12]
 8007e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e84:	4407      	add	r7, r0
 8007e86:	eba8 0800 	sub.w	r8, r8, r0
 8007e8a:	e7e7      	b.n	8007e5c <__sflush_r+0xd4>
 8007e8c:	dfbffffe 	.word	0xdfbffffe

08007e90 <_fflush_r>:
 8007e90:	b538      	push	{r3, r4, r5, lr}
 8007e92:	690b      	ldr	r3, [r1, #16]
 8007e94:	4605      	mov	r5, r0
 8007e96:	460c      	mov	r4, r1
 8007e98:	b913      	cbnz	r3, 8007ea0 <_fflush_r+0x10>
 8007e9a:	2500      	movs	r5, #0
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ea0:	b118      	cbz	r0, 8007eaa <_fflush_r+0x1a>
 8007ea2:	6a03      	ldr	r3, [r0, #32]
 8007ea4:	b90b      	cbnz	r3, 8007eaa <_fflush_r+0x1a>
 8007ea6:	f7fe ffbd 	bl	8006e24 <__sinit>
 8007eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d0f3      	beq.n	8007e9a <_fflush_r+0xa>
 8007eb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007eb4:	07d0      	lsls	r0, r2, #31
 8007eb6:	d404      	bmi.n	8007ec2 <_fflush_r+0x32>
 8007eb8:	0599      	lsls	r1, r3, #22
 8007eba:	d402      	bmi.n	8007ec2 <_fflush_r+0x32>
 8007ebc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ebe:	f7ff fa32 	bl	8007326 <__retarget_lock_acquire_recursive>
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	4621      	mov	r1, r4
 8007ec6:	f7ff ff5f 	bl	8007d88 <__sflush_r>
 8007eca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ecc:	07da      	lsls	r2, r3, #31
 8007ece:	4605      	mov	r5, r0
 8007ed0:	d4e4      	bmi.n	8007e9c <_fflush_r+0xc>
 8007ed2:	89a3      	ldrh	r3, [r4, #12]
 8007ed4:	059b      	lsls	r3, r3, #22
 8007ed6:	d4e1      	bmi.n	8007e9c <_fflush_r+0xc>
 8007ed8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007eda:	f7ff fa25 	bl	8007328 <__retarget_lock_release_recursive>
 8007ede:	e7dd      	b.n	8007e9c <_fflush_r+0xc>

08007ee0 <__swhatbuf_r>:
 8007ee0:	b570      	push	{r4, r5, r6, lr}
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ee8:	2900      	cmp	r1, #0
 8007eea:	b096      	sub	sp, #88	@ 0x58
 8007eec:	4615      	mov	r5, r2
 8007eee:	461e      	mov	r6, r3
 8007ef0:	da0d      	bge.n	8007f0e <__swhatbuf_r+0x2e>
 8007ef2:	89a3      	ldrh	r3, [r4, #12]
 8007ef4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007ef8:	f04f 0100 	mov.w	r1, #0
 8007efc:	bf14      	ite	ne
 8007efe:	2340      	movne	r3, #64	@ 0x40
 8007f00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007f04:	2000      	movs	r0, #0
 8007f06:	6031      	str	r1, [r6, #0]
 8007f08:	602b      	str	r3, [r5, #0]
 8007f0a:	b016      	add	sp, #88	@ 0x58
 8007f0c:	bd70      	pop	{r4, r5, r6, pc}
 8007f0e:	466a      	mov	r2, sp
 8007f10:	f000 f862 	bl	8007fd8 <_fstat_r>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	dbec      	blt.n	8007ef2 <__swhatbuf_r+0x12>
 8007f18:	9901      	ldr	r1, [sp, #4]
 8007f1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007f1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007f22:	4259      	negs	r1, r3
 8007f24:	4159      	adcs	r1, r3
 8007f26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f2a:	e7eb      	b.n	8007f04 <__swhatbuf_r+0x24>

08007f2c <__smakebuf_r>:
 8007f2c:	898b      	ldrh	r3, [r1, #12]
 8007f2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f30:	079d      	lsls	r5, r3, #30
 8007f32:	4606      	mov	r6, r0
 8007f34:	460c      	mov	r4, r1
 8007f36:	d507      	bpl.n	8007f48 <__smakebuf_r+0x1c>
 8007f38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	6123      	str	r3, [r4, #16]
 8007f40:	2301      	movs	r3, #1
 8007f42:	6163      	str	r3, [r4, #20]
 8007f44:	b003      	add	sp, #12
 8007f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f48:	ab01      	add	r3, sp, #4
 8007f4a:	466a      	mov	r2, sp
 8007f4c:	f7ff ffc8 	bl	8007ee0 <__swhatbuf_r>
 8007f50:	9f00      	ldr	r7, [sp, #0]
 8007f52:	4605      	mov	r5, r0
 8007f54:	4639      	mov	r1, r7
 8007f56:	4630      	mov	r0, r6
 8007f58:	f7ff fa62 	bl	8007420 <_malloc_r>
 8007f5c:	b948      	cbnz	r0, 8007f72 <__smakebuf_r+0x46>
 8007f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f62:	059a      	lsls	r2, r3, #22
 8007f64:	d4ee      	bmi.n	8007f44 <__smakebuf_r+0x18>
 8007f66:	f023 0303 	bic.w	r3, r3, #3
 8007f6a:	f043 0302 	orr.w	r3, r3, #2
 8007f6e:	81a3      	strh	r3, [r4, #12]
 8007f70:	e7e2      	b.n	8007f38 <__smakebuf_r+0xc>
 8007f72:	89a3      	ldrh	r3, [r4, #12]
 8007f74:	6020      	str	r0, [r4, #0]
 8007f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f7a:	81a3      	strh	r3, [r4, #12]
 8007f7c:	9b01      	ldr	r3, [sp, #4]
 8007f7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007f82:	b15b      	cbz	r3, 8007f9c <__smakebuf_r+0x70>
 8007f84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f88:	4630      	mov	r0, r6
 8007f8a:	f000 f837 	bl	8007ffc <_isatty_r>
 8007f8e:	b128      	cbz	r0, 8007f9c <__smakebuf_r+0x70>
 8007f90:	89a3      	ldrh	r3, [r4, #12]
 8007f92:	f023 0303 	bic.w	r3, r3, #3
 8007f96:	f043 0301 	orr.w	r3, r3, #1
 8007f9a:	81a3      	strh	r3, [r4, #12]
 8007f9c:	89a3      	ldrh	r3, [r4, #12]
 8007f9e:	431d      	orrs	r5, r3
 8007fa0:	81a5      	strh	r5, [r4, #12]
 8007fa2:	e7cf      	b.n	8007f44 <__smakebuf_r+0x18>

08007fa4 <memmove>:
 8007fa4:	4288      	cmp	r0, r1
 8007fa6:	b510      	push	{r4, lr}
 8007fa8:	eb01 0402 	add.w	r4, r1, r2
 8007fac:	d902      	bls.n	8007fb4 <memmove+0x10>
 8007fae:	4284      	cmp	r4, r0
 8007fb0:	4623      	mov	r3, r4
 8007fb2:	d807      	bhi.n	8007fc4 <memmove+0x20>
 8007fb4:	1e43      	subs	r3, r0, #1
 8007fb6:	42a1      	cmp	r1, r4
 8007fb8:	d008      	beq.n	8007fcc <memmove+0x28>
 8007fba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007fc2:	e7f8      	b.n	8007fb6 <memmove+0x12>
 8007fc4:	4402      	add	r2, r0
 8007fc6:	4601      	mov	r1, r0
 8007fc8:	428a      	cmp	r2, r1
 8007fca:	d100      	bne.n	8007fce <memmove+0x2a>
 8007fcc:	bd10      	pop	{r4, pc}
 8007fce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007fd6:	e7f7      	b.n	8007fc8 <memmove+0x24>

08007fd8 <_fstat_r>:
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	4d07      	ldr	r5, [pc, #28]	@ (8007ff8 <_fstat_r+0x20>)
 8007fdc:	2300      	movs	r3, #0
 8007fde:	4604      	mov	r4, r0
 8007fe0:	4608      	mov	r0, r1
 8007fe2:	4611      	mov	r1, r2
 8007fe4:	602b      	str	r3, [r5, #0]
 8007fe6:	f7f8 fd9e 	bl	8000b26 <_fstat>
 8007fea:	1c43      	adds	r3, r0, #1
 8007fec:	d102      	bne.n	8007ff4 <_fstat_r+0x1c>
 8007fee:	682b      	ldr	r3, [r5, #0]
 8007ff0:	b103      	cbz	r3, 8007ff4 <_fstat_r+0x1c>
 8007ff2:	6023      	str	r3, [r4, #0]
 8007ff4:	bd38      	pop	{r3, r4, r5, pc}
 8007ff6:	bf00      	nop
 8007ff8:	200015b4 	.word	0x200015b4

08007ffc <_isatty_r>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	4d06      	ldr	r5, [pc, #24]	@ (8008018 <_isatty_r+0x1c>)
 8008000:	2300      	movs	r3, #0
 8008002:	4604      	mov	r4, r0
 8008004:	4608      	mov	r0, r1
 8008006:	602b      	str	r3, [r5, #0]
 8008008:	f7f8 fd9d 	bl	8000b46 <_isatty>
 800800c:	1c43      	adds	r3, r0, #1
 800800e:	d102      	bne.n	8008016 <_isatty_r+0x1a>
 8008010:	682b      	ldr	r3, [r5, #0]
 8008012:	b103      	cbz	r3, 8008016 <_isatty_r+0x1a>
 8008014:	6023      	str	r3, [r4, #0]
 8008016:	bd38      	pop	{r3, r4, r5, pc}
 8008018:	200015b4 	.word	0x200015b4

0800801c <_sbrk_r>:
 800801c:	b538      	push	{r3, r4, r5, lr}
 800801e:	4d06      	ldr	r5, [pc, #24]	@ (8008038 <_sbrk_r+0x1c>)
 8008020:	2300      	movs	r3, #0
 8008022:	4604      	mov	r4, r0
 8008024:	4608      	mov	r0, r1
 8008026:	602b      	str	r3, [r5, #0]
 8008028:	f7f8 fda6 	bl	8000b78 <_sbrk>
 800802c:	1c43      	adds	r3, r0, #1
 800802e:	d102      	bne.n	8008036 <_sbrk_r+0x1a>
 8008030:	682b      	ldr	r3, [r5, #0]
 8008032:	b103      	cbz	r3, 8008036 <_sbrk_r+0x1a>
 8008034:	6023      	str	r3, [r4, #0]
 8008036:	bd38      	pop	{r3, r4, r5, pc}
 8008038:	200015b4 	.word	0x200015b4

0800803c <_realloc_r>:
 800803c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008040:	4680      	mov	r8, r0
 8008042:	4615      	mov	r5, r2
 8008044:	460c      	mov	r4, r1
 8008046:	b921      	cbnz	r1, 8008052 <_realloc_r+0x16>
 8008048:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800804c:	4611      	mov	r1, r2
 800804e:	f7ff b9e7 	b.w	8007420 <_malloc_r>
 8008052:	b92a      	cbnz	r2, 8008060 <_realloc_r+0x24>
 8008054:	f7ff f978 	bl	8007348 <_free_r>
 8008058:	2400      	movs	r4, #0
 800805a:	4620      	mov	r0, r4
 800805c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008060:	f000 f81a 	bl	8008098 <_malloc_usable_size_r>
 8008064:	4285      	cmp	r5, r0
 8008066:	4606      	mov	r6, r0
 8008068:	d802      	bhi.n	8008070 <_realloc_r+0x34>
 800806a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800806e:	d8f4      	bhi.n	800805a <_realloc_r+0x1e>
 8008070:	4629      	mov	r1, r5
 8008072:	4640      	mov	r0, r8
 8008074:	f7ff f9d4 	bl	8007420 <_malloc_r>
 8008078:	4607      	mov	r7, r0
 800807a:	2800      	cmp	r0, #0
 800807c:	d0ec      	beq.n	8008058 <_realloc_r+0x1c>
 800807e:	42b5      	cmp	r5, r6
 8008080:	462a      	mov	r2, r5
 8008082:	4621      	mov	r1, r4
 8008084:	bf28      	it	cs
 8008086:	4632      	movcs	r2, r6
 8008088:	f7ff f94f 	bl	800732a <memcpy>
 800808c:	4621      	mov	r1, r4
 800808e:	4640      	mov	r0, r8
 8008090:	f7ff f95a 	bl	8007348 <_free_r>
 8008094:	463c      	mov	r4, r7
 8008096:	e7e0      	b.n	800805a <_realloc_r+0x1e>

08008098 <_malloc_usable_size_r>:
 8008098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800809c:	1f18      	subs	r0, r3, #4
 800809e:	2b00      	cmp	r3, #0
 80080a0:	bfbc      	itt	lt
 80080a2:	580b      	ldrlt	r3, [r1, r0]
 80080a4:	18c0      	addlt	r0, r0, r3
 80080a6:	4770      	bx	lr

080080a8 <_init>:
 80080a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080aa:	bf00      	nop
 80080ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ae:	bc08      	pop	{r3}
 80080b0:	469e      	mov	lr, r3
 80080b2:	4770      	bx	lr

080080b4 <_fini>:
 80080b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080b6:	bf00      	nop
 80080b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ba:	bc08      	pop	{r3}
 80080bc:	469e      	mov	lr, r3
 80080be:	4770      	bx	lr
