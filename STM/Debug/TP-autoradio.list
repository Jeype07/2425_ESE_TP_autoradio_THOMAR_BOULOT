
TP-autoradio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  0800a778  0800a778  0000b778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aafc  0800aafc  0000c078  2**0
                  CONTENTS
  4 .ARM          00000008  0800aafc  0800aafc  0000bafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab04  0800ab04  0000c078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab04  0800ab04  0000bb04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ab08  0800ab08  0000bb08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800ab0c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017ec  20000078  0800ab84  0000c078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001864  0800ab84  0000c864  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022ba3  00000000  00000000  0000c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005117  00000000  00000000  0002ec4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d28  00000000  00000000  00033d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000169e  00000000  00000000  00035a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cac4  00000000  00000000  0003712e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026b13  00000000  00000000  00063bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001051c6  00000000  00000000  0008a705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018f8cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008254  00000000  00000000  0018f910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  00197b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a760 	.word	0x0800a760

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800a760 	.word	0x0800a760

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000566:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <MX_DMA_Init+0x48>)
 8000568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800056a:	4a0f      	ldr	r2, [pc, #60]	@ (80005a8 <MX_DMA_Init+0x48>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6493      	str	r3, [r2, #72]	@ 0x48
 8000572:	4b0d      	ldr	r3, [pc, #52]	@ (80005a8 <MX_DMA_Init+0x48>)
 8000574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2105      	movs	r1, #5
 8000582:	2010      	movs	r0, #16
 8000584:	f001 f976 	bl	8001874 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000588:	2010      	movs	r0, #16
 800058a:	f001 f98f 	bl	80018ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2105      	movs	r1, #5
 8000592:	2011      	movs	r0, #17
 8000594:	f001 f96e 	bl	8001874 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000598:	2011      	movs	r0, #17
 800059a:	f001 f987 	bl	80018ac <HAL_NVIC_EnableIRQ>

}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000098 	.word	0x20000098
 80005dc:	20000138 	.word	0x20000138

080005e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <MX_FREERTOS_Init+0x30>)
 80005e8:	1d3c      	adds	r4, r7, #4
 80005ea:	461d      	mov	r5, r3
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f007 f919 	bl	8007834 <osThreadCreate>
 8000602:	4603      	mov	r3, r0
 8000604:	4a03      	ldr	r2, [pc, #12]	@ (8000614 <MX_FREERTOS_Init+0x34>)
 8000606:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000608:	bf00      	nop
 800060a:	3720      	adds	r7, #32
 800060c:	46bd      	mov	sp, r7
 800060e:	bdb0      	pop	{r4, r5, r7, pc}
 8000610:	0800a784 	.word	0x0800a784
 8000614:	20000094 	.word	0x20000094

08000618 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f007 f953 	bl	80078cc <osDelay>
 8000626:	e7fb      	b.n	8000620 <StartDefaultTask+0x8>

08000628 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	@ 0x28
 800062c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063e:	4b35      	ldr	r3, [pc, #212]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	4a34      	ldr	r2, [pc, #208]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000644:	f043 0304 	orr.w	r3, r3, #4
 8000648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064a:	4b32      	ldr	r3, [pc, #200]	@ (8000714 <MX_GPIO_Init+0xec>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	f003 0304 	and.w	r3, r3, #4
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000656:	4b2f      	ldr	r3, [pc, #188]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	4a2e      	ldr	r2, [pc, #184]	@ (8000714 <MX_GPIO_Init+0xec>)
 800065c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000662:	4b2c      	ldr	r3, [pc, #176]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b29      	ldr	r3, [pc, #164]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000672:	4a28      	ldr	r2, [pc, #160]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067a:	4b26      	ldr	r3, [pc, #152]	@ (8000714 <MX_GPIO_Init+0xec>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	4b23      	ldr	r3, [pc, #140]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068a:	4a22      	ldr	r2, [pc, #136]	@ (8000714 <MX_GPIO_Init+0xec>)
 800068c:	f043 0302 	orr.w	r3, r3, #2
 8000690:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000692:	4b20      	ldr	r3, [pc, #128]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000696:	f003 0302 	and.w	r3, r3, #2
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2121      	movs	r1, #33	@ 0x21
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a6:	f001 fc9f 	bl	8001fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2180      	movs	r1, #128	@ 0x80
 80006ae:	481a      	ldr	r0, [pc, #104]	@ (8000718 <MX_GPIO_Init+0xf0>)
 80006b0:	f001 fc9a 	bl	8001fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	4814      	ldr	r0, [pc, #80]	@ (800071c <MX_GPIO_Init+0xf4>)
 80006cc:	f001 fae2 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 80006d0:	2321      	movs	r3, #33	@ 0x21
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4619      	mov	r1, r3
 80006e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ea:	f001 fad3 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006ee:	2380      	movs	r3, #128	@ 0x80
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2300      	movs	r3, #0
 80006fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	4804      	ldr	r0, [pc, #16]	@ (8000718 <MX_GPIO_Init+0xf0>)
 8000706:	f001 fac5 	bl	8001c94 <HAL_GPIO_Init>

}
 800070a:	bf00      	nop
 800070c:	3728      	adds	r7, #40	@ 0x28
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000
 8000718:	48000400 	.word	0x48000400
 800071c:	48000800 	.word	0x48000800

08000720 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000724:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	@ (8000798 <MX_I2C2_Init+0x78>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800072a:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <MX_I2C2_Init+0x74>)
 800072c:	4a1b      	ldr	r2, [pc, #108]	@ (800079c <MX_I2C2_Init+0x7c>)
 800072e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000738:	2201      	movs	r2, #1
 800073a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <MX_I2C2_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <MX_I2C2_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800075a:	480e      	ldr	r0, [pc, #56]	@ (8000794 <MX_I2C2_Init+0x74>)
 800075c:	f001 fc5c 	bl	8002018 <HAL_I2C_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000766:	f000 fb1f 	bl	8000da8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800076a:	2100      	movs	r1, #0
 800076c:	4809      	ldr	r0, [pc, #36]	@ (8000794 <MX_I2C2_Init+0x74>)
 800076e:	f002 f877 	bl	8002860 <HAL_I2CEx_ConfigAnalogFilter>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000778:	f000 fb16 	bl	8000da8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800077c:	2100      	movs	r1, #0
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000780:	f002 f8b9 	bl	80028f6 <HAL_I2CEx_ConfigDigitalFilter>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800078a:	f000 fb0d 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000338 	.word	0x20000338
 8000798:	40005800 	.word	0x40005800
 800079c:	10d19ce4 	.word	0x10d19ce4

080007a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b0ac      	sub	sp, #176	@ 0xb0
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	2288      	movs	r2, #136	@ 0x88
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f009 f83d 	bl	8009840 <memset>
  if(i2cHandle->Instance==I2C2)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a21      	ldr	r2, [pc, #132]	@ (8000850 <HAL_I2C_MspInit+0xb0>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d13b      	bne.n	8000848 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80007d0:	2380      	movs	r3, #128	@ 0x80
 80007d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4618      	mov	r0, r3
 80007de:	f002 ff6d 	bl	80036bc <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80007e8:	f000 fade 	bl	8000da8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ec:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 80007ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f0:	4a18      	ldr	r2, [pc, #96]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 80007f2:	f043 0302 	orr.w	r3, r3, #2
 80007f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f8:	4b16      	ldr	r3, [pc, #88]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 80007fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fc:	f003 0302 	and.w	r3, r3, #2
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000804:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000808:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800080c:	2312      	movs	r3, #18
 800080e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800081e:	2304      	movs	r3, #4
 8000820:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000828:	4619      	mov	r1, r3
 800082a:	480b      	ldr	r0, [pc, #44]	@ (8000858 <HAL_I2C_MspInit+0xb8>)
 800082c:	f001 fa32 	bl	8001c94 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000830:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 8000832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000834:	4a07      	ldr	r2, [pc, #28]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 8000836:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800083a:	6593      	str	r3, [r2, #88]	@ 0x58
 800083c:	4b05      	ldr	r3, [pc, #20]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 800083e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000840:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000848:	bf00      	nop
 800084a:	37b0      	adds	r7, #176	@ 0xb0
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40005800 	.word	0x40005800
 8000854:	40021000 	.word	0x40021000
 8000858:	48000400 	.word	0x48000400

0800085c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000864:	1d39      	adds	r1, r7, #4
 8000866:	f04f 33ff 	mov.w	r3, #4294967295
 800086a:	2201      	movs	r2, #1
 800086c:	4803      	ldr	r0, [pc, #12]	@ (800087c <__io_putchar+0x20>)
 800086e:	f005 fe2d 	bl	80064cc <HAL_UART_Transmit>

	return ch;
 8000872:	687b      	ldr	r3, [r7, #4]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000980 	.word	0x20000980

08000880 <fonction>:
		shell_uart_receive_irq_cb();	// C'est la fonction qui donne le sémaphore!
	}
}

int fonction(h_shell_t * h_shell, int argc, char ** argv)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
	int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Je suis une fonction bidon\r\n");
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8000892:	4a0a      	ldr	r2, [pc, #40]	@ (80008bc <fonction+0x3c>)
 8000894:	213c      	movs	r1, #60	@ 0x3c
 8000896:	4618      	mov	r0, r3
 8000898:	f008 fec6 	bl	8009628 <sniprintf>
 800089c:	6178      	str	r0, [r7, #20]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80008a4:	68fa      	ldr	r2, [r7, #12]
 80008a6:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80008aa:	6979      	ldr	r1, [r7, #20]
 80008ac:	b289      	uxth	r1, r1
 80008ae:	4610      	mov	r0, r2
 80008b0:	4798      	blx	r3

	return 0;
 80008b2:	2300      	movs	r3, #0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3718      	adds	r7, #24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	0800a7a0 	.word	0x0800a7a0

080008c0 <addition>:

int addition(h_shell_t * h_shell, int argc, char ** argv)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	@ 0x28
 80008c4:	af02      	add	r7, sp, #8
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
	if (argc == 3)
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	2b03      	cmp	r3, #3
 80008d0:	d128      	bne.n	8000924 <addition+0x64>
	{
		int a, b;
		a = atoi(argv[1]);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3304      	adds	r3, #4
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f008 fceb 	bl	80092b4 <atoi>
 80008de:	61b8      	str	r0, [r7, #24]
		b = atoi(argv[2]);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3308      	adds	r3, #8
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f008 fce4 	bl	80092b4 <atoi>
 80008ec:	6178      	str	r0, [r7, #20]
		int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%d + %d = %d\r\n", a, b, a+b);
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80008f4:	69ba      	ldr	r2, [r7, #24]
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	4413      	add	r3, r2
 80008fa:	9301      	str	r3, [sp, #4]
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	4a15      	ldr	r2, [pc, #84]	@ (8000958 <addition+0x98>)
 8000904:	213c      	movs	r1, #60	@ 0x3c
 8000906:	f008 fe8f 	bl	8009628 <sniprintf>
 800090a:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000918:	6939      	ldr	r1, [r7, #16]
 800091a:	b289      	uxth	r1, r1
 800091c:	4610      	mov	r0, r2
 800091e:	4798      	blx	r3

		return 0;
 8000920:	2300      	movs	r3, #0
 8000922:	e014      	b.n	800094e <addition+0x8e>
	}
	else
	{
		int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Erreur, pas le bon nombre d'arguments\r\n");
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800092a:	4a0c      	ldr	r2, [pc, #48]	@ (800095c <addition+0x9c>)
 800092c:	213c      	movs	r1, #60	@ 0x3c
 800092e:	4618      	mov	r0, r3
 8000930:	f008 fe7a 	bl	8009628 <sniprintf>
 8000934:	61f8      	str	r0, [r7, #28]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800093c:	68fa      	ldr	r2, [r7, #12]
 800093e:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000942:	69f9      	ldr	r1, [r7, #28]
 8000944:	b289      	uxth	r1, r1
 8000946:	4610      	mov	r0, r2
 8000948:	4798      	blx	r3
		return -1;
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800094e:	4618      	mov	r0, r3
 8000950:	3720      	adds	r7, #32
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	0800a7c0 	.word	0x0800a7c0
 800095c:	0800a7d0 	.word	0x0800a7d0

08000960 <ledToggle>:

int ledToggle(h_shell_t * h_shell, int argc, char ** argv)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]

	if (argc == 3)
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	2b03      	cmp	r3, #3
 8000970:	d14e      	bne.n	8000a10 <ledToggle+0xb0>
	{

		int a = atoi(argv[1]);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3304      	adds	r3, #4
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	f008 fc9b 	bl	80092b4 <atoi>
 800097e:	61b8      	str	r0, [r7, #24]
		int b = atoi(argv[2]);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3308      	adds	r3, #8
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4618      	mov	r0, r3
 8000988:	f008 fc94 	bl	80092b4 <atoi>
 800098c:	6178      	str	r0, [r7, #20]
		if(a>=0 && a<=7){
 800098e:	69bb      	ldr	r3, [r7, #24]
 8000990:	2b00      	cmp	r3, #0
 8000992:	db3b      	blt.n	8000a0c <ledToggle+0xac>
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	2b07      	cmp	r3, #7
 8000998:	dc38      	bgt.n	8000a0c <ledToggle+0xac>
			if(b==0){
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d10d      	bne.n	80009bc <ledToggle+0x5c>

				h_shell->drv.led(h_shell->led_num = a,MCPGPIOA);
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 80009a6:	69ba      	ldr	r2, [r7, #24]
 80009a8:	b2d1      	uxtb	r1, r2
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	f882 137c 	strb.w	r1, [r2, #892]	@ 0x37c
 80009b0:	68fa      	ldr	r2, [r7, #12]
 80009b2:	f892 237c 	ldrb.w	r2, [r2, #892]	@ 0x37c
 80009b6:	2112      	movs	r1, #18
 80009b8:	4610      	mov	r0, r2
 80009ba:	4798      	blx	r3
			}
			if(b==1){
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d10e      	bne.n	80009e0 <ledToggle+0x80>

				h_shell->drv.led(h_shell->led_num = a,MCPGPIOB);
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	b2d1      	uxtb	r1, r2
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	f882 137c 	strb.w	r1, [r2, #892]	@ 0x37c
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	f892 237c 	ldrb.w	r2, [r2, #892]	@ 0x37c
 80009d8:	2113      	movs	r1, #19
 80009da:	4610      	mov	r0, r2
 80009dc:	4798      	blx	r3
 80009de:	e015      	b.n	8000a0c <ledToggle+0xac>
			}
			else{
				int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Erreur, verifier la led ou le gpio\r\n");
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80009e6:	4a17      	ldr	r2, [pc, #92]	@ (8000a44 <ledToggle+0xe4>)
 80009e8:	213c      	movs	r1, #60	@ 0x3c
 80009ea:	4618      	mov	r0, r3
 80009ec:	f008 fe1c 	bl	8009628 <sniprintf>
 80009f0:	6138      	str	r0, [r7, #16]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80009f8:	68fa      	ldr	r2, [r7, #12]
 80009fa:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80009fe:	6939      	ldr	r1, [r7, #16]
 8000a00:	b289      	uxth	r1, r1
 8000a02:	4610      	mov	r0, r2
 8000a04:	4798      	blx	r3
				return -2;
 8000a06:	f06f 0301 	mvn.w	r3, #1
 8000a0a:	e016      	b.n	8000a3a <ledToggle+0xda>
			}
		}

		return 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e014      	b.n	8000a3a <ledToggle+0xda>
	}
	else
	{
		int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Erreur, pas le bon nombre d'arguments\r\n");
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8000a16:	4a0c      	ldr	r2, [pc, #48]	@ (8000a48 <ledToggle+0xe8>)
 8000a18:	213c      	movs	r1, #60	@ 0x3c
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f008 fe04 	bl	8009628 <sniprintf>
 8000a20:	61f8      	str	r0, [r7, #28]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8000a28:	68fa      	ldr	r2, [r7, #12]
 8000a2a:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000a2e:	69f9      	ldr	r1, [r7, #28]
 8000a30:	b289      	uxth	r1, r1
 8000a32:	4610      	mov	r0, r2
 8000a34:	4798      	blx	r3
		return -1;
 8000a36:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3720      	adds	r7, #32
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	0800a7f8 	.word	0x0800a7f8
 8000a48:	0800a7d0 	.word	0x0800a7d0

08000a4c <ledReset>:

int ledReset(h_shell_t * h_shell, int argc, char ** argv){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
	MCP23S17_Write(MCPGPIOA, -1);
 8000a58:	21ff      	movs	r1, #255	@ 0xff
 8000a5a:	2012      	movs	r0, #18
 8000a5c:	f008 fa0c 	bl	8008e78 <MCP23S17_Write>
	MCP23S17_Write(MCPGPIOB, -1);
 8000a60:	21ff      	movs	r1, #255	@ 0xff
 8000a62:	2013      	movs	r0, #19
 8000a64:	f008 fa08 	bl	8008e78 <MCP23S17_Write>
	return 0;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <task_chenillard>:

void task_chenillard(void *params) {
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b084      	sub	sp, #16
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
	h_shell_t *h_shell = (h_shell_t *)params;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	60bb      	str	r3, [r7, #8]
	uint8_t current_led_a = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	73fb      	strb	r3, [r7, #15]
	uint8_t current_led_b = 4;
 8000a82:	2304      	movs	r3, #4
 8000a84:	73bb      	strb	r3, [r7, #14]
	while (1) {

		h_shell->drv.led(h_shell->led_num = current_led_a,MCPGPIOA);
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 8000a8c:	68ba      	ldr	r2, [r7, #8]
 8000a8e:	7bf9      	ldrb	r1, [r7, #15]
 8000a90:	f882 137c 	strb.w	r1, [r2, #892]	@ 0x37c
 8000a94:	68ba      	ldr	r2, [r7, #8]
 8000a96:	f892 237c 	ldrb.w	r2, [r2, #892]	@ 0x37c
 8000a9a:	2112      	movs	r1, #18
 8000a9c:	4610      	mov	r0, r2
 8000a9e:	4798      	blx	r3
		h_shell->drv.led(h_shell->led_num = current_led_b,MCPGPIOB);
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	7bb9      	ldrb	r1, [r7, #14]
 8000aaa:	f882 137c 	strb.w	r1, [r2, #892]	@ 0x37c
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	f892 237c 	ldrb.w	r2, [r2, #892]	@ 0x37c
 8000ab4:	2113      	movs	r1, #19
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4798      	blx	r3
		current_led_a = (current_led_a + 1) % NUM_LEDS; // Passer à la LED suivante
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
 8000abc:	3301      	adds	r3, #1
 8000abe:	425a      	negs	r2, r3
 8000ac0:	f003 0307 	and.w	r3, r3, #7
 8000ac4:	f002 0207 	and.w	r2, r2, #7
 8000ac8:	bf58      	it	pl
 8000aca:	4253      	negpl	r3, r2
 8000acc:	73fb      	strb	r3, [r7, #15]
		current_led_b = (current_led_b + 1) % NUM_LEDS;
 8000ace:	7bbb      	ldrb	r3, [r7, #14]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	425a      	negs	r2, r3
 8000ad4:	f003 0307 	and.w	r3, r3, #7
 8000ad8:	f002 0207 	and.w	r2, r2, #7
 8000adc:	bf58      	it	pl
 8000ade:	4253      	negpl	r3, r2
 8000ae0:	73bb      	strb	r3, [r7, #14]
		osDelay(200); // Délai entre deux LEDs (200 ms)
 8000ae2:	20c8      	movs	r0, #200	@ 0xc8
 8000ae4:	f006 fef2 	bl	80078cc <osDelay>
		h_shell->drv.led(h_shell->led_num = current_led_a,MCPGPIOA);
 8000ae8:	bf00      	nop
 8000aea:	e7cc      	b.n	8000a86 <task_chenillard+0x14>

08000aec <startchenillard>:
	}
}



int startchenillard(h_shell_t * h_shell, int argc, char ** argv){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af02      	add	r7, sp, #8
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]

	chenillard_running = 1; // Activer le chenillard
 8000af8:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <startchenillard+0x58>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	701a      	strb	r2, [r3, #0]
	if (ChenillardTaskHandle == NULL) {
 8000afe:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <startchenillard+0x5c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d10a      	bne.n	8000b1c <startchenillard+0x30>
		// Créer la tâche si elle n'existe pas
		xTaskCreate(task_chenillard, "ChenillardTask", 128,(void *)h_shell, 2, &ChenillardTaskHandle);
 8000b06:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <startchenillard+0x5c>)
 8000b08:	9301      	str	r3, [sp, #4]
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	2280      	movs	r2, #128	@ 0x80
 8000b12:	490e      	ldr	r1, [pc, #56]	@ (8000b4c <startchenillard+0x60>)
 8000b14:	480e      	ldr	r0, [pc, #56]	@ (8000b50 <startchenillard+0x64>)
 8000b16:	f007 f801 	bl	8007b1c <xTaskCreate>
 8000b1a:	e00e      	b.n	8000b3a <startchenillard+0x4e>
	}
	else{
		chenillard_running = 0;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <startchenillard+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
		if (ChenillardTaskHandle != NULL) {
 8000b22:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <startchenillard+0x5c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d007      	beq.n	8000b3a <startchenillard+0x4e>
			vTaskDelete(ChenillardTaskHandle); // Supprimer la tâche
 8000b2a:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <startchenillard+0x5c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f007 f944 	bl	8007dbc <vTaskDelete>
			ChenillardTaskHandle = NULL;
 8000b34:	4b04      	ldr	r3, [pc, #16]	@ (8000b48 <startchenillard+0x5c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
		}
	}


	return 0;
 8000b3a:	2300      	movs	r3, #0
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000394 	.word	0x20000394
 8000b48:	20000390 	.word	0x20000390
 8000b4c:	0800a820 	.word	0x0800a820
 8000b50:	08000a73 	.word	0x08000a73

08000b54 <task_shell>:


void task_shell(void * unused)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	shell_init(&h_shell);
 8000b5c:	4813      	ldr	r0, [pc, #76]	@ (8000bac <task_shell+0x58>)
 8000b5e:	f008 fa61 	bl	8009024 <shell_init>
	shell_add(&h_shell, 'f', fonction, "Une fonction inutile");
 8000b62:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <task_shell+0x5c>)
 8000b64:	4a13      	ldr	r2, [pc, #76]	@ (8000bb4 <task_shell+0x60>)
 8000b66:	2166      	movs	r1, #102	@ 0x66
 8000b68:	4810      	ldr	r0, [pc, #64]	@ (8000bac <task_shell+0x58>)
 8000b6a:	f008 fa9d 	bl	80090a8 <shell_add>
	shell_add(&h_shell, 'a', addition, "Effectue une somme");
 8000b6e:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <task_shell+0x64>)
 8000b70:	4a12      	ldr	r2, [pc, #72]	@ (8000bbc <task_shell+0x68>)
 8000b72:	2161      	movs	r1, #97	@ 0x61
 8000b74:	480d      	ldr	r0, [pc, #52]	@ (8000bac <task_shell+0x58>)
 8000b76:	f008 fa97 	bl	80090a8 <shell_add>
	shell_add(&h_shell, 'b', ledToggle, "Allumer une led");
 8000b7a:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <task_shell+0x6c>)
 8000b7c:	4a11      	ldr	r2, [pc, #68]	@ (8000bc4 <task_shell+0x70>)
 8000b7e:	2162      	movs	r1, #98	@ 0x62
 8000b80:	480a      	ldr	r0, [pc, #40]	@ (8000bac <task_shell+0x58>)
 8000b82:	f008 fa91 	bl	80090a8 <shell_add>
	shell_add(&h_shell, 'c', ledReset, "Eteindre toutes les leds");
 8000b86:	4b10      	ldr	r3, [pc, #64]	@ (8000bc8 <task_shell+0x74>)
 8000b88:	4a10      	ldr	r2, [pc, #64]	@ (8000bcc <task_shell+0x78>)
 8000b8a:	2163      	movs	r1, #99	@ 0x63
 8000b8c:	4807      	ldr	r0, [pc, #28]	@ (8000bac <task_shell+0x58>)
 8000b8e:	f008 fa8b 	bl	80090a8 <shell_add>
	shell_add(&h_shell, 'd',startchenillard, "Lancer chenillard/Arreter chenillard");
 8000b92:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <task_shell+0x7c>)
 8000b94:	4a0f      	ldr	r2, [pc, #60]	@ (8000bd4 <task_shell+0x80>)
 8000b96:	2164      	movs	r1, #100	@ 0x64
 8000b98:	4804      	ldr	r0, [pc, #16]	@ (8000bac <task_shell+0x58>)
 8000b9a:	f008 fa85 	bl	80090a8 <shell_add>

	shell_run(&h_shell);	// boucle infinie
 8000b9e:	4803      	ldr	r0, [pc, #12]	@ (8000bac <task_shell+0x58>)
 8000ba0:	f008 fafe 	bl	80091a0 <shell_run>
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000398 	.word	0x20000398
 8000bb0:	0800a830 	.word	0x0800a830
 8000bb4:	08000881 	.word	0x08000881
 8000bb8:	0800a848 	.word	0x0800a848
 8000bbc:	080008c1 	.word	0x080008c1
 8000bc0:	0800a85c 	.word	0x0800a85c
 8000bc4:	08000961 	.word	0x08000961
 8000bc8:	0800a86c 	.word	0x0800a86c
 8000bcc:	08000a4d 	.word	0x08000a4d
 8000bd0:	0800a888 	.word	0x0800a888
 8000bd4:	08000aed 	.word	0x08000aed

08000bd8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bde:	f000 fd51 	bl	8001684 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000be2:	f000 f853 	bl	8000c8c <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000be6:	f000 f8a2 	bl	8000d2e <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bea:	f7ff fd1d 	bl	8000628 <MX_GPIO_Init>
	MX_DMA_Init();
 8000bee:	f7ff fcb7 	bl	8000560 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000bf2:	f000 fc89 	bl	8001508 <MX_USART2_UART_Init>
	MX_SPI3_Init();
 8000bf6:	f000 fa49 	bl	800108c <MX_SPI3_Init>
	MX_I2C2_Init();
 8000bfa:	f7ff fd91 	bl	8000720 <MX_I2C2_Init>
	MX_SAI2_Init();
 8000bfe:	f000 f8d9 	bl	8000db4 <MX_SAI2_Init>
	/* USER CODE BEGIN 2 */
	MCP23S17_Init();
 8000c02:	f008 f917 	bl	8008e34 <MCP23S17_Init>
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8000c06:	4b18      	ldr	r3, [pc, #96]	@ (8000c68 <main+0x90>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b16      	ldr	r3, [pc, #88]	@ (8000c68 <main+0x90>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000c14:	601a      	str	r2, [r3, #0]
	sglt5000_get_CHIP_ID_val();
 8000c16:	f000 fa11 	bl	800103c <sglt5000_get_CHIP_ID_val>

	h_shell.drv.receive = drv_uart2_receive;
 8000c1a:	4b14      	ldr	r3, [pc, #80]	@ (8000c6c <main+0x94>)
 8000c1c:	4a14      	ldr	r2, [pc, #80]	@ (8000c70 <main+0x98>)
 8000c1e:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
	h_shell.drv.transmit = drv_uart2_transmit;
 8000c22:	4b12      	ldr	r3, [pc, #72]	@ (8000c6c <main+0x94>)
 8000c24:	4a13      	ldr	r2, [pc, #76]	@ (8000c74 <main+0x9c>)
 8000c26:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
	h_shell.drv.led = drv_led;
 8000c2a:	4b10      	ldr	r3, [pc, #64]	@ (8000c6c <main+0x94>)
 8000c2c:	4a12      	ldr	r2, [pc, #72]	@ (8000c78 <main+0xa0>)
 8000c2e:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390

	if (xTaskCreate(task_shell, "Shell", TASK_SHELL_STACK_DEPTH, NULL, TASK_SHELL_PRIORITY, &h_task_shell) != pdPASS)
 8000c32:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <main+0xa4>)
 8000c34:	9301      	str	r3, [sp, #4]
 8000c36:	2301      	movs	r3, #1
 8000c38:	9300      	str	r3, [sp, #0]
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c40:	490f      	ldr	r1, [pc, #60]	@ (8000c80 <main+0xa8>)
 8000c42:	4810      	ldr	r0, [pc, #64]	@ (8000c84 <main+0xac>)
 8000c44:	f006 ff6a 	bl	8007b1c <xTaskCreate>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d004      	beq.n	8000c58 <main+0x80>
	{
		printf("Error creating task shell\r\n");
 8000c4e:	480e      	ldr	r0, [pc, #56]	@ (8000c88 <main+0xb0>)
 8000c50:	f008 fce2 	bl	8009618 <puts>
		Error_Handler();
 8000c54:	f000 f8a8 	bl	8000da8 <Error_Handler>
	}

	vTaskStartScheduler();
 8000c58:	f007 f976 	bl	8007f48 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 8000c5c:	f7ff fcc0 	bl	80005e0 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8000c60:	f006 fde1 	bl	8007826 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <main+0x8c>
 8000c68:	20000730 	.word	0x20000730
 8000c6c:	20000398 	.word	0x20000398
 8000c70:	08008f55 	.word	0x08008f55
 8000c74:	08008f7d 	.word	0x08008f7d
 8000c78:	08008ec9 	.word	0x08008ec9
 8000c7c:	2000038c 	.word	0x2000038c
 8000c80:	0800a8b0 	.word	0x0800a8b0
 8000c84:	08000b55 	.word	0x08000b55
 8000c88:	0800a8b8 	.word	0x0800a8b8

08000c8c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b096      	sub	sp, #88	@ 0x58
 8000c90:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	2244      	movs	r2, #68	@ 0x44
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f008 fdd0 	bl	8009840 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000cb2:	f001 fe7b 	bl	80029ac <HAL_PWREx_ControlVoltageScaling>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000cbc:	f000 f874 	bl	8000da8 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cc8:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cca:	2310      	movs	r3, #16
 8000ccc:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000cda:	230a      	movs	r3, #10
 8000cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cde:	2307      	movs	r3, #7
 8000ce0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f001 feb2 	bl	8002a58 <HAL_RCC_OscConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SystemClock_Config+0x72>
	{
		Error_Handler();
 8000cfa:	f000 f855 	bl	8000da8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cfe:	230f      	movs	r3, #15
 8000d00:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d02:	2303      	movs	r3, #3
 8000d04:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d12:	463b      	mov	r3, r7
 8000d14:	2104      	movs	r1, #4
 8000d16:	4618      	mov	r0, r3
 8000d18:	f002 fa7a 	bl	8003210 <HAL_RCC_ClockConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000d22:	f000 f841 	bl	8000da8 <Error_Handler>
	}
}
 8000d26:	bf00      	nop
 8000d28:	3758      	adds	r7, #88	@ 0x58
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b0a2      	sub	sp, #136	@ 0x88
 8000d32:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d34:	463b      	mov	r3, r7
 8000d36:	2288      	movs	r2, #136	@ 0x88
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f008 fd80 	bl	8009840 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000d40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d44:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	66bb      	str	r3, [r7, #104]	@ 0x68
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 8000d52:	230d      	movs	r3, #13
 8000d54:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8000d56:	2311      	movs	r3, #17
 8000d58:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000d62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d66:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d68:	463b      	mov	r3, r7
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f002 fca6 	bl	80036bc <HAL_RCCEx_PeriphCLKConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <PeriphCommonClock_Config+0x4c>
	{
		Error_Handler();
 8000d76:	f000 f817 	bl	8000da8 <Error_Handler>
	}
}
 8000d7a:	bf00      	nop
 8000d7c:	3788      	adds	r7, #136	@ 0x88
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a04      	ldr	r2, [pc, #16]	@ (8000da4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d101      	bne.n	8000d9a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000d96:	f000 fc95 	bl	80016c4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40012c00 	.word	0x40012c00

08000da8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dac:	b672      	cpsid	i
}
 8000dae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <Error_Handler+0x8>

08000db4 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8000db8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e64 <MX_SAI2_Init+0xb0>)
 8000dba:	4a2b      	ldr	r2, [pc, #172]	@ (8000e68 <MX_SAI2_Init+0xb4>)
 8000dbc:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000dbe:	4b29      	ldr	r3, [pc, #164]	@ (8000e64 <MX_SAI2_Init+0xb0>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000dc4:	4b27      	ldr	r3, [pc, #156]	@ (8000e64 <MX_SAI2_Init+0xb0>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000dca:	4b26      	ldr	r3, [pc, #152]	@ (8000e64 <MX_SAI2_Init+0xb0>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000dd0:	4b24      	ldr	r3, [pc, #144]	@ (8000e64 <MX_SAI2_Init+0xb0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000dd6:	4b23      	ldr	r3, [pc, #140]	@ (8000e64 <MX_SAI2_Init+0xb0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000ddc:	4b21      	ldr	r3, [pc, #132]	@ (8000e64 <MX_SAI2_Init+0xb0>)
 8000dde:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000de2:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000de4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e64 <MX_SAI2_Init+0xb0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000dea:	4b1e      	ldr	r3, [pc, #120]	@ (8000e64 <MX_SAI2_Init+0xb0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000df0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e64 <MX_SAI2_Init+0xb0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000df6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e64 <MX_SAI2_Init+0xb0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	4818      	ldr	r0, [pc, #96]	@ (8000e64 <MX_SAI2_Init+0xb0>)
 8000e04:	f003 ff74 	bl	8004cf0 <HAL_SAI_InitProtocol>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 8000e0e:	f7ff ffcb 	bl	8000da8 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000e12:	4b16      	ldr	r3, [pc, #88]	@ (8000e6c <MX_SAI2_Init+0xb8>)
 8000e14:	4a16      	ldr	r2, [pc, #88]	@ (8000e70 <MX_SAI2_Init+0xbc>)
 8000e16:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000e18:	4b14      	ldr	r3, [pc, #80]	@ (8000e6c <MX_SAI2_Init+0xb8>)
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000e1e:	4b13      	ldr	r3, [pc, #76]	@ (8000e6c <MX_SAI2_Init+0xb8>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e24:	4b11      	ldr	r3, [pc, #68]	@ (8000e6c <MX_SAI2_Init+0xb8>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e2a:	4b10      	ldr	r3, [pc, #64]	@ (8000e6c <MX_SAI2_Init+0xb8>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e30:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <MX_SAI2_Init+0xb8>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e36:	4b0d      	ldr	r3, [pc, #52]	@ (8000e6c <MX_SAI2_Init+0xb8>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e6c <MX_SAI2_Init+0xb8>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e42:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <MX_SAI2_Init+0xb8>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000e48:	2302      	movs	r3, #2
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4807      	ldr	r0, [pc, #28]	@ (8000e6c <MX_SAI2_Init+0xb8>)
 8000e50:	f003 ff4e 	bl	8004cf0 <HAL_SAI_InitProtocol>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8000e5a:	f7ff ffa5 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000730 	.word	0x20000730
 8000e68:	40015804 	.word	0x40015804
 8000e6c:	200007b4 	.word	0x200007b4
 8000e70:	40015824 	.word	0x40015824

08000e74 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	@ 0x28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a64      	ldr	r2, [pc, #400]	@ (8001014 <HAL_SAI_MspInit+0x1a0>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d15e      	bne.n	8000f44 <HAL_SAI_MspInit+0xd0>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8000e86:	4b64      	ldr	r3, [pc, #400]	@ (8001018 <HAL_SAI_MspInit+0x1a4>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d113      	bne.n	8000eb6 <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000e8e:	4b63      	ldr	r3, [pc, #396]	@ (800101c <HAL_SAI_MspInit+0x1a8>)
 8000e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e92:	4a62      	ldr	r2, [pc, #392]	@ (800101c <HAL_SAI_MspInit+0x1a8>)
 8000e94:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e98:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e9a:	4b60      	ldr	r3, [pc, #384]	@ (800101c <HAL_SAI_MspInit+0x1a8>)
 8000e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2105      	movs	r1, #5
 8000eaa:	204b      	movs	r0, #75	@ 0x4b
 8000eac:	f000 fce2 	bl	8001874 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000eb0:	204b      	movs	r0, #75	@ 0x4b
 8000eb2:	f000 fcfb 	bl	80018ac <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8000eb6:	4b58      	ldr	r3, [pc, #352]	@ (8001018 <HAL_SAI_MspInit+0x1a4>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	4a56      	ldr	r2, [pc, #344]	@ (8001018 <HAL_SAI_MspInit+0x1a4>)
 8000ebe:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ec0:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000ed2:	230d      	movs	r3, #13
 8000ed4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	4850      	ldr	r0, [pc, #320]	@ (8001020 <HAL_SAI_MspInit+0x1ac>)
 8000ede:	f000 fed9 	bl	8001c94 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000ee2:	4b50      	ldr	r3, [pc, #320]	@ (8001024 <HAL_SAI_MspInit+0x1b0>)
 8000ee4:	4a50      	ldr	r2, [pc, #320]	@ (8001028 <HAL_SAI_MspInit+0x1b4>)
 8000ee6:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000ee8:	4b4e      	ldr	r3, [pc, #312]	@ (8001024 <HAL_SAI_MspInit+0x1b0>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eee:	4b4d      	ldr	r3, [pc, #308]	@ (8001024 <HAL_SAI_MspInit+0x1b0>)
 8000ef0:	2210      	movs	r2, #16
 8000ef2:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef4:	4b4b      	ldr	r3, [pc, #300]	@ (8001024 <HAL_SAI_MspInit+0x1b0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000efa:	4b4a      	ldr	r3, [pc, #296]	@ (8001024 <HAL_SAI_MspInit+0x1b0>)
 8000efc:	2280      	movs	r2, #128	@ 0x80
 8000efe:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f00:	4b48      	ldr	r3, [pc, #288]	@ (8001024 <HAL_SAI_MspInit+0x1b0>)
 8000f02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f06:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f08:	4b46      	ldr	r3, [pc, #280]	@ (8001024 <HAL_SAI_MspInit+0x1b0>)
 8000f0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f0e:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000f10:	4b44      	ldr	r3, [pc, #272]	@ (8001024 <HAL_SAI_MspInit+0x1b0>)
 8000f12:	2220      	movs	r2, #32
 8000f14:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8000f16:	4b43      	ldr	r3, [pc, #268]	@ (8001024 <HAL_SAI_MspInit+0x1b0>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000f1c:	4841      	ldr	r0, [pc, #260]	@ (8001024 <HAL_SAI_MspInit+0x1b0>)
 8000f1e:	f000 fcd3 	bl	80018c8 <HAL_DMA_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000f28:	f7ff ff3e 	bl	8000da8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a3d      	ldr	r2, [pc, #244]	@ (8001024 <HAL_SAI_MspInit+0x1b0>)
 8000f30:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f32:	4a3c      	ldr	r2, [pc, #240]	@ (8001024 <HAL_SAI_MspInit+0x1b0>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a3a      	ldr	r2, [pc, #232]	@ (8001024 <HAL_SAI_MspInit+0x1b0>)
 8000f3c:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000f3e:	4a39      	ldr	r2, [pc, #228]	@ (8001024 <HAL_SAI_MspInit+0x1b0>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a38      	ldr	r2, [pc, #224]	@ (800102c <HAL_SAI_MspInit+0x1b8>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d15e      	bne.n	800100c <HAL_SAI_MspInit+0x198>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8000f4e:	4b32      	ldr	r3, [pc, #200]	@ (8001018 <HAL_SAI_MspInit+0x1a4>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d113      	bne.n	8000f7e <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000f56:	4b31      	ldr	r3, [pc, #196]	@ (800101c <HAL_SAI_MspInit+0x1a8>)
 8000f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f5a:	4a30      	ldr	r2, [pc, #192]	@ (800101c <HAL_SAI_MspInit+0x1a8>)
 8000f5c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f60:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f62:	4b2e      	ldr	r3, [pc, #184]	@ (800101c <HAL_SAI_MspInit+0x1a8>)
 8000f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2105      	movs	r1, #5
 8000f72:	204b      	movs	r0, #75	@ 0x4b
 8000f74:	f000 fc7e 	bl	8001874 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000f78:	204b      	movs	r0, #75	@ 0x4b
 8000f7a:	f000 fc97 	bl	80018ac <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8000f7e:	4b26      	ldr	r3, [pc, #152]	@ (8001018 <HAL_SAI_MspInit+0x1a4>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	3301      	adds	r3, #1
 8000f84:	4a24      	ldr	r2, [pc, #144]	@ (8001018 <HAL_SAI_MspInit+0x1a4>)
 8000f86:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000f9a:	230d      	movs	r3, #13
 8000f9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4822      	ldr	r0, [pc, #136]	@ (8001030 <HAL_SAI_MspInit+0x1bc>)
 8000fa6:	f000 fe75 	bl	8001c94 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8000faa:	4b22      	ldr	r3, [pc, #136]	@ (8001034 <HAL_SAI_MspInit+0x1c0>)
 8000fac:	4a22      	ldr	r2, [pc, #136]	@ (8001038 <HAL_SAI_MspInit+0x1c4>)
 8000fae:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8000fb0:	4b20      	ldr	r3, [pc, #128]	@ (8001034 <HAL_SAI_MspInit+0x1c0>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8001034 <HAL_SAI_MspInit+0x1c0>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001034 <HAL_SAI_MspInit+0x1c0>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001034 <HAL_SAI_MspInit+0x1c0>)
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001034 <HAL_SAI_MspInit+0x1c0>)
 8000fca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fce:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fd0:	4b18      	ldr	r3, [pc, #96]	@ (8001034 <HAL_SAI_MspInit+0x1c0>)
 8000fd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000fd6:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000fd8:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <HAL_SAI_MspInit+0x1c0>)
 8000fda:	2220      	movs	r2, #32
 8000fdc:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8000fde:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <HAL_SAI_MspInit+0x1c0>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000fe4:	4813      	ldr	r0, [pc, #76]	@ (8001034 <HAL_SAI_MspInit+0x1c0>)
 8000fe6:	f000 fc6f 	bl	80018c8 <HAL_DMA_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8000ff0:	f7ff feda 	bl	8000da8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a0f      	ldr	r2, [pc, #60]	@ (8001034 <HAL_SAI_MspInit+0x1c0>)
 8000ff8:	671a      	str	r2, [r3, #112]	@ 0x70
 8000ffa:	4a0e      	ldr	r2, [pc, #56]	@ (8001034 <HAL_SAI_MspInit+0x1c0>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a0c      	ldr	r2, [pc, #48]	@ (8001034 <HAL_SAI_MspInit+0x1c0>)
 8001004:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001006:	4a0b      	ldr	r2, [pc, #44]	@ (8001034 <HAL_SAI_MspInit+0x1c0>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 800100c:	bf00      	nop
 800100e:	3728      	adds	r7, #40	@ 0x28
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40015804 	.word	0x40015804
 8001018:	200008c8 	.word	0x200008c8
 800101c:	40021000 	.word	0x40021000
 8001020:	48000400 	.word	0x48000400
 8001024:	20000838 	.word	0x20000838
 8001028:	4002006c 	.word	0x4002006c
 800102c:	40015824 	.word	0x40015824
 8001030:	48000800 	.word	0x48000800
 8001034:	20000880 	.word	0x20000880
 8001038:	40020080 	.word	0x40020080

0800103c <sglt5000_get_CHIP_ID_val>:
#include "sgtl5000.h"
#include "stm32l4xx_hal.h"

extern I2C_HandleTypeDef hi2c2;

int sglt5000_get_CHIP_ID_val(void){
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af04      	add	r7, sp, #16
	uint8_t pData[1];
	if (HAL_I2C_Mem_Read(&hi2c2, SGTL5000_ADDR, CHIP_ID,CHIP_ID_REG_SIZE, pData, sizeof(pData), HAL_MAX_DELAY)== HAL_OK){
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	9302      	str	r3, [sp, #8]
 8001048:	2301      	movs	r3, #1
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2310      	movs	r3, #16
 8001052:	2200      	movs	r2, #0
 8001054:	2128      	movs	r1, #40	@ 0x28
 8001056:	480a      	ldr	r0, [pc, #40]	@ (8001080 <sglt5000_get_CHIP_ID_val+0x44>)
 8001058:	f001 f87a 	bl	8002150 <HAL_I2C_Mem_Read>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d106      	bne.n	8001070 <sglt5000_get_CHIP_ID_val+0x34>
		printf("CHIP_ID value : %d\r\n", pData[1]);
 8001062:	797b      	ldrb	r3, [r7, #5]
 8001064:	4619      	mov	r1, r3
 8001066:	4807      	ldr	r0, [pc, #28]	@ (8001084 <sglt5000_get_CHIP_ID_val+0x48>)
 8001068:	f008 fa6e 	bl	8009548 <iprintf>
		return 1;
 800106c:	2301      	movs	r3, #1
 800106e:	e003      	b.n	8001078 <sglt5000_get_CHIP_ID_val+0x3c>
	}
	else{
		printf("Error");
 8001070:	4805      	ldr	r0, [pc, #20]	@ (8001088 <sglt5000_get_CHIP_ID_val+0x4c>)
 8001072:	f008 fa69 	bl	8009548 <iprintf>
		return 0;
 8001076:	2300      	movs	r3, #0
	}
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000338 	.word	0x20000338
 8001084:	0800a8d4 	.word	0x0800a8d4
 8001088:	0800a8ec 	.word	0x0800a8ec

0800108c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001090:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <MX_SPI3_Init+0x74>)
 8001092:	4a1c      	ldr	r2, [pc, #112]	@ (8001104 <MX_SPI3_Init+0x78>)
 8001094:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001096:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <MX_SPI3_Init+0x74>)
 8001098:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800109c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800109e:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <MX_SPI3_Init+0x74>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80010a4:	4b16      	ldr	r3, [pc, #88]	@ (8001100 <MX_SPI3_Init+0x74>)
 80010a6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80010aa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ac:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <MX_SPI3_Init+0x74>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010b2:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <MX_SPI3_Init+0x74>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80010b8:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <MX_SPI3_Init+0x74>)
 80010ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010be:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <MX_SPI3_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <MX_SPI3_Init+0x74>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <MX_SPI3_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <MX_SPI3_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80010d8:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <MX_SPI3_Init+0x74>)
 80010da:	2207      	movs	r2, #7
 80010dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010de:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <MX_SPI3_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010e4:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <MX_SPI3_Init+0x74>)
 80010e6:	2208      	movs	r2, #8
 80010e8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010ea:	4805      	ldr	r0, [pc, #20]	@ (8001100 <MX_SPI3_Init+0x74>)
 80010ec:	f004 fb5d 	bl	80057aa <HAL_SPI_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80010f6:	f7ff fe57 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200008cc 	.word	0x200008cc
 8001104:	40003c00 	.word	0x40003c00

08001108 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	@ 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a25      	ldr	r2, [pc, #148]	@ (80011bc <HAL_SPI_MspInit+0xb4>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d144      	bne.n	80011b4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800112a:	4b25      	ldr	r3, [pc, #148]	@ (80011c0 <HAL_SPI_MspInit+0xb8>)
 800112c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112e:	4a24      	ldr	r2, [pc, #144]	@ (80011c0 <HAL_SPI_MspInit+0xb8>)
 8001130:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001134:	6593      	str	r3, [r2, #88]	@ 0x58
 8001136:	4b22      	ldr	r3, [pc, #136]	@ (80011c0 <HAL_SPI_MspInit+0xb8>)
 8001138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800113a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001142:	4b1f      	ldr	r3, [pc, #124]	@ (80011c0 <HAL_SPI_MspInit+0xb8>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001146:	4a1e      	ldr	r2, [pc, #120]	@ (80011c0 <HAL_SPI_MspInit+0xb8>)
 8001148:	f043 0304 	orr.w	r3, r3, #4
 800114c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114e:	4b1c      	ldr	r3, [pc, #112]	@ (80011c0 <HAL_SPI_MspInit+0xb8>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	4b19      	ldr	r3, [pc, #100]	@ (80011c0 <HAL_SPI_MspInit+0xb8>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115e:	4a18      	ldr	r2, [pc, #96]	@ (80011c0 <HAL_SPI_MspInit+0xb8>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001166:	4b16      	ldr	r3, [pc, #88]	@ (80011c0 <HAL_SPI_MspInit+0xb8>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001172:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001180:	2303      	movs	r3, #3
 8001182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001184:	2306      	movs	r3, #6
 8001186:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	480d      	ldr	r0, [pc, #52]	@ (80011c4 <HAL_SPI_MspInit+0xbc>)
 8001190:	f000 fd80 	bl	8001c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001194:	2320      	movs	r3, #32
 8001196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011a4:	2306      	movs	r3, #6
 80011a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	@ (80011c8 <HAL_SPI_MspInit+0xc0>)
 80011b0:	f000 fd70 	bl	8001c94 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	@ 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40003c00 	.word	0x40003c00
 80011c0:	40021000 	.word	0x40021000
 80011c4:	48000800 	.word	0x48000800
 80011c8:	48000400 	.word	0x48000400

080011cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <HAL_MspInit+0x4c>)
 80011d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011d6:	4a10      	ldr	r2, [pc, #64]	@ (8001218 <HAL_MspInit+0x4c>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <HAL_MspInit+0x4c>)
 80011e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <HAL_MspInit+0x4c>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001218 <HAL_MspInit+0x4c>)
 80011f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011f6:	4b08      	ldr	r3, [pc, #32]	@ (8001218 <HAL_MspInit+0x4c>)
 80011f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	210f      	movs	r1, #15
 8001206:	f06f 0001 	mvn.w	r0, #1
 800120a:	f000 fb33 	bl	8001874 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40021000 	.word	0x40021000

0800121c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08c      	sub	sp, #48	@ 0x30
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001224:	2300      	movs	r3, #0
 8001226:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800122a:	4b2e      	ldr	r3, [pc, #184]	@ (80012e4 <HAL_InitTick+0xc8>)
 800122c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800122e:	4a2d      	ldr	r2, [pc, #180]	@ (80012e4 <HAL_InitTick+0xc8>)
 8001230:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001234:	6613      	str	r3, [r2, #96]	@ 0x60
 8001236:	4b2b      	ldr	r3, [pc, #172]	@ (80012e4 <HAL_InitTick+0xc8>)
 8001238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800123a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001242:	f107 020c 	add.w	r2, r7, #12
 8001246:	f107 0310 	add.w	r3, r7, #16
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f002 f9a3 	bl	8003598 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001252:	f002 f98b 	bl	800356c <HAL_RCC_GetPCLK2Freq>
 8001256:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800125a:	4a23      	ldr	r2, [pc, #140]	@ (80012e8 <HAL_InitTick+0xcc>)
 800125c:	fba2 2303 	umull	r2, r3, r2, r3
 8001260:	0c9b      	lsrs	r3, r3, #18
 8001262:	3b01      	subs	r3, #1
 8001264:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001266:	4b21      	ldr	r3, [pc, #132]	@ (80012ec <HAL_InitTick+0xd0>)
 8001268:	4a21      	ldr	r2, [pc, #132]	@ (80012f0 <HAL_InitTick+0xd4>)
 800126a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800126c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ec <HAL_InitTick+0xd0>)
 800126e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001272:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001274:	4a1d      	ldr	r2, [pc, #116]	@ (80012ec <HAL_InitTick+0xd0>)
 8001276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001278:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800127a:	4b1c      	ldr	r3, [pc, #112]	@ (80012ec <HAL_InitTick+0xd0>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001280:	4b1a      	ldr	r3, [pc, #104]	@ (80012ec <HAL_InitTick+0xd0>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001286:	4b19      	ldr	r3, [pc, #100]	@ (80012ec <HAL_InitTick+0xd0>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800128c:	4817      	ldr	r0, [pc, #92]	@ (80012ec <HAL_InitTick+0xd0>)
 800128e:	f004 fe09 	bl	8005ea4 <HAL_TIM_Base_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001298:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800129c:	2b00      	cmp	r3, #0
 800129e:	d11b      	bne.n	80012d8 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80012a0:	4812      	ldr	r0, [pc, #72]	@ (80012ec <HAL_InitTick+0xd0>)
 80012a2:	f004 fe61 	bl	8005f68 <HAL_TIM_Base_Start_IT>
 80012a6:	4603      	mov	r3, r0
 80012a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80012ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d111      	bne.n	80012d8 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80012b4:	2019      	movs	r0, #25
 80012b6:	f000 faf9 	bl	80018ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	d808      	bhi.n	80012d2 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80012c0:	2200      	movs	r2, #0
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	2019      	movs	r0, #25
 80012c6:	f000 fad5 	bl	8001874 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012ca:	4a0a      	ldr	r2, [pc, #40]	@ (80012f4 <HAL_InitTick+0xd8>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	e002      	b.n	80012d8 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80012d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3730      	adds	r7, #48	@ 0x30
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40021000 	.word	0x40021000
 80012e8:	431bde83 	.word	0x431bde83
 80012ec:	20000930 	.word	0x20000930
 80012f0:	40012c00 	.word	0x40012c00
 80012f4:	20000004 	.word	0x20000004

080012f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <NMI_Handler+0x4>

08001300 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <HardFault_Handler+0x4>

08001308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <MemManage_Handler+0x4>

08001310 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <BusFault_Handler+0x4>

08001318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <UsageFault_Handler+0x4>

08001320 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8001334:	4802      	ldr	r0, [pc, #8]	@ (8001340 <DMA1_Channel6_IRQHandler+0x10>)
 8001336:	f000 fbfe 	bl	8001b36 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000838 	.word	0x20000838

08001344 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8001348:	4802      	ldr	r0, [pc, #8]	@ (8001354 <DMA1_Channel7_IRQHandler+0x10>)
 800134a:	f000 fbf4 	bl	8001b36 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000880 	.word	0x20000880

08001358 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800135c:	4802      	ldr	r0, [pc, #8]	@ (8001368 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800135e:	f004 fe73 	bl	8006048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000930 	.word	0x20000930

0800136c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001370:	4802      	ldr	r0, [pc, #8]	@ (800137c <USART2_IRQHandler+0x10>)
 8001372:	f005 f9fd 	bl	8006770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000980 	.word	0x20000980

08001380 <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 8001384:	4803      	ldr	r0, [pc, #12]	@ (8001394 <SAI2_IRQHandler+0x14>)
 8001386:	f003 febd 	bl	8005104 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 800138a:	4803      	ldr	r0, [pc, #12]	@ (8001398 <SAI2_IRQHandler+0x18>)
 800138c:	f003 feba 	bl	8005104 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000730 	.word	0x20000730
 8001398:	200007b4 	.word	0x200007b4

0800139c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	e00a      	b.n	80013c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013ae:	f3af 8000 	nop.w
 80013b2:	4601      	mov	r1, r0
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	1c5a      	adds	r2, r3, #1
 80013b8:	60ba      	str	r2, [r7, #8]
 80013ba:	b2ca      	uxtb	r2, r1
 80013bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	3301      	adds	r3, #1
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	dbf0      	blt.n	80013ae <_read+0x12>
  }

  return len;
 80013cc:	687b      	ldr	r3, [r7, #4]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	60f8      	str	r0, [r7, #12]
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	e009      	b.n	80013fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	60ba      	str	r2, [r7, #8]
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fa33 	bl	800085c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	3301      	adds	r3, #1
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	429a      	cmp	r2, r3
 8001402:	dbf1      	blt.n	80013e8 <_write+0x12>
  }
  return len;
 8001404:	687b      	ldr	r3, [r7, #4]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <_close>:

int _close(int file)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
}
 800141a:	4618      	mov	r0, r3
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001436:	605a      	str	r2, [r3, #4]
  return 0;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <_isatty>:

int _isatty(int file)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800144e:	2301      	movs	r3, #1
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001480:	4a14      	ldr	r2, [pc, #80]	@ (80014d4 <_sbrk+0x5c>)
 8001482:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <_sbrk+0x60>)
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800148c:	4b13      	ldr	r3, [pc, #76]	@ (80014dc <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d102      	bne.n	800149a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001494:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <_sbrk+0x64>)
 8001496:	4a12      	ldr	r2, [pc, #72]	@ (80014e0 <_sbrk+0x68>)
 8001498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800149a:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <_sbrk+0x64>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d207      	bcs.n	80014b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a8:	f008 fa6e 	bl	8009988 <__errno>
 80014ac:	4603      	mov	r3, r0
 80014ae:	220c      	movs	r2, #12
 80014b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	e009      	b.n	80014cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b8:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <_sbrk+0x64>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014be:	4b07      	ldr	r3, [pc, #28]	@ (80014dc <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	4a05      	ldr	r2, [pc, #20]	@ (80014dc <_sbrk+0x64>)
 80014c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ca:	68fb      	ldr	r3, [r7, #12]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20018000 	.word	0x20018000
 80014d8:	00000400 	.word	0x00000400
 80014dc:	2000097c 	.word	0x2000097c
 80014e0:	20001868 	.word	0x20001868

080014e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <SystemInit+0x20>)
 80014ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ee:	4a05      	ldr	r2, [pc, #20]	@ (8001504 <SystemInit+0x20>)
 80014f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800150c:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <MX_USART2_UART_Init+0x58>)
 800150e:	4a15      	ldr	r2, [pc, #84]	@ (8001564 <MX_USART2_UART_Init+0x5c>)
 8001510:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001512:	4b13      	ldr	r3, [pc, #76]	@ (8001560 <MX_USART2_UART_Init+0x58>)
 8001514:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001518:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800151a:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <MX_USART2_UART_Init+0x58>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001520:	4b0f      	ldr	r3, [pc, #60]	@ (8001560 <MX_USART2_UART_Init+0x58>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001526:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <MX_USART2_UART_Init+0x58>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800152c:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <MX_USART2_UART_Init+0x58>)
 800152e:	220c      	movs	r2, #12
 8001530:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001532:	4b0b      	ldr	r3, [pc, #44]	@ (8001560 <MX_USART2_UART_Init+0x58>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001538:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <MX_USART2_UART_Init+0x58>)
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800153e:	4b08      	ldr	r3, [pc, #32]	@ (8001560 <MX_USART2_UART_Init+0x58>)
 8001540:	2200      	movs	r2, #0
 8001542:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001544:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <MX_USART2_UART_Init+0x58>)
 8001546:	2200      	movs	r2, #0
 8001548:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800154a:	4805      	ldr	r0, [pc, #20]	@ (8001560 <MX_USART2_UART_Init+0x58>)
 800154c:	f004 ff70 	bl	8006430 <HAL_UART_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001556:	f7ff fc27 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000980 	.word	0x20000980
 8001564:	40004400 	.word	0x40004400

08001568 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b0ac      	sub	sp, #176	@ 0xb0
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	2288      	movs	r2, #136	@ 0x88
 8001586:	2100      	movs	r1, #0
 8001588:	4618      	mov	r0, r3
 800158a:	f008 f959 	bl	8009840 <memset>
  if(uartHandle->Instance==USART2)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a25      	ldr	r2, [pc, #148]	@ (8001628 <HAL_UART_MspInit+0xc0>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d143      	bne.n	8001620 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001598:	2302      	movs	r3, #2
 800159a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800159c:	2300      	movs	r3, #0
 800159e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 f889 	bl	80036bc <HAL_RCCEx_PeriphCLKConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015b0:	f7ff fbfa 	bl	8000da8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015b4:	4b1d      	ldr	r3, [pc, #116]	@ (800162c <HAL_UART_MspInit+0xc4>)
 80015b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b8:	4a1c      	ldr	r2, [pc, #112]	@ (800162c <HAL_UART_MspInit+0xc4>)
 80015ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015be:	6593      	str	r3, [r2, #88]	@ 0x58
 80015c0:	4b1a      	ldr	r3, [pc, #104]	@ (800162c <HAL_UART_MspInit+0xc4>)
 80015c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015cc:	4b17      	ldr	r3, [pc, #92]	@ (800162c <HAL_UART_MspInit+0xc4>)
 80015ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d0:	4a16      	ldr	r2, [pc, #88]	@ (800162c <HAL_UART_MspInit+0xc4>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d8:	4b14      	ldr	r3, [pc, #80]	@ (800162c <HAL_UART_MspInit+0xc4>)
 80015da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015e4:	230c      	movs	r3, #12
 80015e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f6:	2303      	movs	r3, #3
 80015f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015fc:	2307      	movs	r3, #7
 80015fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001602:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001606:	4619      	mov	r1, r3
 8001608:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800160c:	f000 fb42 	bl	8001c94 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001610:	2200      	movs	r2, #0
 8001612:	2105      	movs	r1, #5
 8001614:	2026      	movs	r0, #38	@ 0x26
 8001616:	f000 f92d 	bl	8001874 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800161a:	2026      	movs	r0, #38	@ 0x26
 800161c:	f000 f946 	bl	80018ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001620:	bf00      	nop
 8001622:	37b0      	adds	r7, #176	@ 0xb0
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40004400 	.word	0x40004400
 800162c:	40021000 	.word	0x40021000

08001630 <Reset_Handler>:
 8001630:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001668 <LoopForever+0x2>
 8001634:	f7ff ff56 	bl	80014e4 <SystemInit>
 8001638:	480c      	ldr	r0, [pc, #48]	@ (800166c <LoopForever+0x6>)
 800163a:	490d      	ldr	r1, [pc, #52]	@ (8001670 <LoopForever+0xa>)
 800163c:	4a0d      	ldr	r2, [pc, #52]	@ (8001674 <LoopForever+0xe>)
 800163e:	2300      	movs	r3, #0
 8001640:	e002      	b.n	8001648 <LoopCopyDataInit>

08001642 <CopyDataInit>:
 8001642:	58d4      	ldr	r4, [r2, r3]
 8001644:	50c4      	str	r4, [r0, r3]
 8001646:	3304      	adds	r3, #4

08001648 <LoopCopyDataInit>:
 8001648:	18c4      	adds	r4, r0, r3
 800164a:	428c      	cmp	r4, r1
 800164c:	d3f9      	bcc.n	8001642 <CopyDataInit>
 800164e:	4a0a      	ldr	r2, [pc, #40]	@ (8001678 <LoopForever+0x12>)
 8001650:	4c0a      	ldr	r4, [pc, #40]	@ (800167c <LoopForever+0x16>)
 8001652:	2300      	movs	r3, #0
 8001654:	e001      	b.n	800165a <LoopFillZerobss>

08001656 <FillZerobss>:
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	3204      	adds	r2, #4

0800165a <LoopFillZerobss>:
 800165a:	42a2      	cmp	r2, r4
 800165c:	d3fb      	bcc.n	8001656 <FillZerobss>
 800165e:	f008 f999 	bl	8009994 <__libc_init_array>
 8001662:	f7ff fab9 	bl	8000bd8 <main>

08001666 <LoopForever>:
 8001666:	e7fe      	b.n	8001666 <LoopForever>
 8001668:	20018000 	.word	0x20018000
 800166c:	20000000 	.word	0x20000000
 8001670:	20000078 	.word	0x20000078
 8001674:	0800ab0c 	.word	0x0800ab0c
 8001678:	20000078 	.word	0x20000078
 800167c:	20001864 	.word	0x20001864

08001680 <ADC1_2_IRQHandler>:
 8001680:	e7fe      	b.n	8001680 <ADC1_2_IRQHandler>
	...

08001684 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800168e:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <HAL_Init+0x3c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a0b      	ldr	r2, [pc, #44]	@ (80016c0 <HAL_Init+0x3c>)
 8001694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001698:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169a:	2003      	movs	r0, #3
 800169c:	f000 f8df 	bl	800185e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016a0:	200f      	movs	r0, #15
 80016a2:	f7ff fdbb 	bl	800121c <HAL_InitTick>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	71fb      	strb	r3, [r7, #7]
 80016b0:	e001      	b.n	80016b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016b2:	f7ff fd8b 	bl	80011cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016b6:	79fb      	ldrb	r3, [r7, #7]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40022000 	.word	0x40022000

080016c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016c8:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <HAL_IncTick+0x20>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <HAL_IncTick+0x24>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	4a04      	ldr	r2, [pc, #16]	@ (80016e8 <HAL_IncTick+0x24>)
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000008 	.word	0x20000008
 80016e8:	20000a08 	.word	0x20000a08

080016ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return uwTick;
 80016f0:	4b03      	ldr	r3, [pc, #12]	@ (8001700 <HAL_GetTick+0x14>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20000a08 	.word	0x20000a08

08001704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001714:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001720:	4013      	ands	r3, r2
 8001722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800172c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001730:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001736:	4a04      	ldr	r2, [pc, #16]	@ (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	60d3      	str	r3, [r2, #12]
}
 800173c:	bf00      	nop
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001750:	4b04      	ldr	r3, [pc, #16]	@ (8001764 <__NVIC_GetPriorityGrouping+0x18>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	f003 0307 	and.w	r3, r3, #7
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	2b00      	cmp	r3, #0
 8001778:	db0b      	blt.n	8001792 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	f003 021f 	and.w	r2, r3, #31
 8001780:	4907      	ldr	r1, [pc, #28]	@ (80017a0 <__NVIC_EnableIRQ+0x38>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	095b      	lsrs	r3, r3, #5
 8001788:	2001      	movs	r0, #1
 800178a:	fa00 f202 	lsl.w	r2, r0, r2
 800178e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000e100 	.word	0xe000e100

080017a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	6039      	str	r1, [r7, #0]
 80017ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	db0a      	blt.n	80017ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	490c      	ldr	r1, [pc, #48]	@ (80017f0 <__NVIC_SetPriority+0x4c>)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	0112      	lsls	r2, r2, #4
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	440b      	add	r3, r1
 80017c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017cc:	e00a      	b.n	80017e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4908      	ldr	r1, [pc, #32]	@ (80017f4 <__NVIC_SetPriority+0x50>)
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	3b04      	subs	r3, #4
 80017dc:	0112      	lsls	r2, r2, #4
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	440b      	add	r3, r1
 80017e2:	761a      	strb	r2, [r3, #24]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000e100 	.word	0xe000e100
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b089      	sub	sp, #36	@ 0x24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f1c3 0307 	rsb	r3, r3, #7
 8001812:	2b04      	cmp	r3, #4
 8001814:	bf28      	it	cs
 8001816:	2304      	movcs	r3, #4
 8001818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3304      	adds	r3, #4
 800181e:	2b06      	cmp	r3, #6
 8001820:	d902      	bls.n	8001828 <NVIC_EncodePriority+0x30>
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3b03      	subs	r3, #3
 8001826:	e000      	b.n	800182a <NVIC_EncodePriority+0x32>
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	f04f 32ff 	mov.w	r2, #4294967295
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43da      	mvns	r2, r3
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	401a      	ands	r2, r3
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001840:	f04f 31ff 	mov.w	r1, #4294967295
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fa01 f303 	lsl.w	r3, r1, r3
 800184a:	43d9      	mvns	r1, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001850:	4313      	orrs	r3, r2
         );
}
 8001852:	4618      	mov	r0, r3
 8001854:	3724      	adds	r7, #36	@ 0x24
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff ff4c 	bl	8001704 <__NVIC_SetPriorityGrouping>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
 8001880:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001886:	f7ff ff61 	bl	800174c <__NVIC_GetPriorityGrouping>
 800188a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	68b9      	ldr	r1, [r7, #8]
 8001890:	6978      	ldr	r0, [r7, #20]
 8001892:	f7ff ffb1 	bl	80017f8 <NVIC_EncodePriority>
 8001896:	4602      	mov	r2, r0
 8001898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189c:	4611      	mov	r1, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff ff80 	bl	80017a4 <__NVIC_SetPriority>
}
 80018a4:	bf00      	nop
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff ff54 	bl	8001768 <__NVIC_EnableIRQ>
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e098      	b.n	8001a0c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	4b4d      	ldr	r3, [pc, #308]	@ (8001a18 <HAL_DMA_Init+0x150>)
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d80f      	bhi.n	8001906 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	461a      	mov	r2, r3
 80018ec:	4b4b      	ldr	r3, [pc, #300]	@ (8001a1c <HAL_DMA_Init+0x154>)
 80018ee:	4413      	add	r3, r2
 80018f0:	4a4b      	ldr	r2, [pc, #300]	@ (8001a20 <HAL_DMA_Init+0x158>)
 80018f2:	fba2 2303 	umull	r2, r3, r2, r3
 80018f6:	091b      	lsrs	r3, r3, #4
 80018f8:	009a      	lsls	r2, r3, #2
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a48      	ldr	r2, [pc, #288]	@ (8001a24 <HAL_DMA_Init+0x15c>)
 8001902:	641a      	str	r2, [r3, #64]	@ 0x40
 8001904:	e00e      	b.n	8001924 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	4b46      	ldr	r3, [pc, #280]	@ (8001a28 <HAL_DMA_Init+0x160>)
 800190e:	4413      	add	r3, r2
 8001910:	4a43      	ldr	r2, [pc, #268]	@ (8001a20 <HAL_DMA_Init+0x158>)
 8001912:	fba2 2303 	umull	r2, r3, r2, r3
 8001916:	091b      	lsrs	r3, r3, #4
 8001918:	009a      	lsls	r2, r3, #2
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a42      	ldr	r2, [pc, #264]	@ (8001a2c <HAL_DMA_Init+0x164>)
 8001922:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2202      	movs	r2, #2
 8001928:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800193a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800193e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001948:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001954:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001960:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	4313      	orrs	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800197e:	d039      	beq.n	80019f4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001984:	4a27      	ldr	r2, [pc, #156]	@ (8001a24 <HAL_DMA_Init+0x15c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d11a      	bne.n	80019c0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800198a:	4b29      	ldr	r3, [pc, #164]	@ (8001a30 <HAL_DMA_Init+0x168>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001992:	f003 031c 	and.w	r3, r3, #28
 8001996:	210f      	movs	r1, #15
 8001998:	fa01 f303 	lsl.w	r3, r1, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	4924      	ldr	r1, [pc, #144]	@ (8001a30 <HAL_DMA_Init+0x168>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019a4:	4b22      	ldr	r3, [pc, #136]	@ (8001a30 <HAL_DMA_Init+0x168>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6859      	ldr	r1, [r3, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b0:	f003 031c 	and.w	r3, r3, #28
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	491d      	ldr	r1, [pc, #116]	@ (8001a30 <HAL_DMA_Init+0x168>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]
 80019be:	e019      	b.n	80019f4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a34 <HAL_DMA_Init+0x16c>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c8:	f003 031c 	and.w	r3, r3, #28
 80019cc:	210f      	movs	r1, #15
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	4917      	ldr	r1, [pc, #92]	@ (8001a34 <HAL_DMA_Init+0x16c>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019da:	4b16      	ldr	r3, [pc, #88]	@ (8001a34 <HAL_DMA_Init+0x16c>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6859      	ldr	r1, [r3, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e6:	f003 031c 	and.w	r3, r3, #28
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	4911      	ldr	r1, [pc, #68]	@ (8001a34 <HAL_DMA_Init+0x16c>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	40020407 	.word	0x40020407
 8001a1c:	bffdfff8 	.word	0xbffdfff8
 8001a20:	cccccccd 	.word	0xcccccccd
 8001a24:	40020000 	.word	0x40020000
 8001a28:	bffdfbf8 	.word	0xbffdfbf8
 8001a2c:	40020400 	.word	0x40020400
 8001a30:	400200a8 	.word	0x400200a8
 8001a34:	400204a8 	.word	0x400204a8

08001a38 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a40:	2300      	movs	r3, #0
 8001a42:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d008      	beq.n	8001a62 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2204      	movs	r2, #4
 8001a54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e022      	b.n	8001aa8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 020e 	bic.w	r2, r2, #14
 8001a70:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 0201 	bic.w	r2, r2, #1
 8001a80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a86:	f003 021c 	and.w	r2, r3, #28
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	2101      	movs	r1, #1
 8001a90:	fa01 f202 	lsl.w	r2, r1, r2
 8001a94:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d005      	beq.n	8001ad8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2204      	movs	r2, #4
 8001ad0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	73fb      	strb	r3, [r7, #15]
 8001ad6:	e029      	b.n	8001b2c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 020e 	bic.w	r2, r2, #14
 8001ae6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0201 	bic.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afc:	f003 021c 	and.w	r2, r3, #28
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b04:	2101      	movs	r1, #1
 8001b06:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	4798      	blx	r3
    }
  }
  return status;
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b52:	f003 031c 	and.w	r3, r3, #28
 8001b56:	2204      	movs	r2, #4
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d026      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0x7a>
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d021      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0320 	and.w	r3, r3, #32
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d107      	bne.n	8001b8a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0204 	bic.w	r2, r2, #4
 8001b88:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8e:	f003 021c 	and.w	r2, r3, #28
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b96:	2104      	movs	r1, #4
 8001b98:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d071      	beq.n	8001c8a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001bae:	e06c      	b.n	8001c8a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb4:	f003 031c 	and.w	r3, r3, #28
 8001bb8:	2202      	movs	r2, #2
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d02e      	beq.n	8001c22 <HAL_DMA_IRQHandler+0xec>
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d029      	beq.n	8001c22 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0320 	and.w	r3, r3, #32
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d10b      	bne.n	8001bf4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 020a 	bic.w	r2, r2, #10
 8001bea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf8:	f003 021c 	and.w	r2, r3, #28
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c00:	2102      	movs	r1, #2
 8001c02:	fa01 f202 	lsl.w	r2, r1, r2
 8001c06:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d038      	beq.n	8001c8a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001c20:	e033      	b.n	8001c8a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c26:	f003 031c 	and.w	r3, r3, #28
 8001c2a:	2208      	movs	r2, #8
 8001c2c:	409a      	lsls	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4013      	ands	r3, r2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d02a      	beq.n	8001c8c <HAL_DMA_IRQHandler+0x156>
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d025      	beq.n	8001c8c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 020e 	bic.w	r2, r2, #14
 8001c4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c54:	f003 021c 	and.w	r2, r3, #28
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c62:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d004      	beq.n	8001c8c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
}
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca2:	e17f      	b.n	8001fa4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	2101      	movs	r1, #1
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8171 	beq.w	8001f9e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d005      	beq.n	8001cd4 <HAL_GPIO_Init+0x40>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d130      	bne.n	8001d36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	2203      	movs	r2, #3
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	091b      	lsrs	r3, r3, #4
 8001d20:	f003 0201 	and.w	r2, r3, #1
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d118      	bne.n	8001d74 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d48:	2201      	movs	r2, #1
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	08db      	lsrs	r3, r3, #3
 8001d5e:	f003 0201 	and.w	r2, r3, #1
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d017      	beq.n	8001db0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d123      	bne.n	8001e04 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	08da      	lsrs	r2, r3, #3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3208      	adds	r2, #8
 8001dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	220f      	movs	r2, #15
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	08da      	lsrs	r2, r3, #3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3208      	adds	r2, #8
 8001dfe:	6939      	ldr	r1, [r7, #16]
 8001e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	2203      	movs	r2, #3
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0203 	and.w	r2, r3, #3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 80ac 	beq.w	8001f9e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e46:	4b5f      	ldr	r3, [pc, #380]	@ (8001fc4 <HAL_GPIO_Init+0x330>)
 8001e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e4a:	4a5e      	ldr	r2, [pc, #376]	@ (8001fc4 <HAL_GPIO_Init+0x330>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e52:	4b5c      	ldr	r3, [pc, #368]	@ (8001fc4 <HAL_GPIO_Init+0x330>)
 8001e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e5e:	4a5a      	ldr	r2, [pc, #360]	@ (8001fc8 <HAL_GPIO_Init+0x334>)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	089b      	lsrs	r3, r3, #2
 8001e64:	3302      	adds	r3, #2
 8001e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	220f      	movs	r2, #15
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e88:	d025      	beq.n	8001ed6 <HAL_GPIO_Init+0x242>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a4f      	ldr	r2, [pc, #316]	@ (8001fcc <HAL_GPIO_Init+0x338>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d01f      	beq.n	8001ed2 <HAL_GPIO_Init+0x23e>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a4e      	ldr	r2, [pc, #312]	@ (8001fd0 <HAL_GPIO_Init+0x33c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d019      	beq.n	8001ece <HAL_GPIO_Init+0x23a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4d      	ldr	r2, [pc, #308]	@ (8001fd4 <HAL_GPIO_Init+0x340>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <HAL_GPIO_Init+0x236>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a4c      	ldr	r2, [pc, #304]	@ (8001fd8 <HAL_GPIO_Init+0x344>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00d      	beq.n	8001ec6 <HAL_GPIO_Init+0x232>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4b      	ldr	r2, [pc, #300]	@ (8001fdc <HAL_GPIO_Init+0x348>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d007      	beq.n	8001ec2 <HAL_GPIO_Init+0x22e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4a      	ldr	r2, [pc, #296]	@ (8001fe0 <HAL_GPIO_Init+0x34c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d101      	bne.n	8001ebe <HAL_GPIO_Init+0x22a>
 8001eba:	2306      	movs	r3, #6
 8001ebc:	e00c      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ebe:	2307      	movs	r3, #7
 8001ec0:	e00a      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ec2:	2305      	movs	r3, #5
 8001ec4:	e008      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	e006      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e004      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e002      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	f002 0203 	and.w	r2, r2, #3
 8001ede:	0092      	lsls	r2, r2, #2
 8001ee0:	4093      	lsls	r3, r2
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ee8:	4937      	ldr	r1, [pc, #220]	@ (8001fc8 <HAL_GPIO_Init+0x334>)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	089b      	lsrs	r3, r3, #2
 8001eee:	3302      	adds	r3, #2
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ef6:	4b3b      	ldr	r3, [pc, #236]	@ (8001fe4 <HAL_GPIO_Init+0x350>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f1a:	4a32      	ldr	r2, [pc, #200]	@ (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f20:	4b30      	ldr	r3, [pc, #192]	@ (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f44:	4a27      	ldr	r2, [pc, #156]	@ (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f4a:	4b26      	ldr	r3, [pc, #152]	@ (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f74:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f98:	4a12      	ldr	r2, [pc, #72]	@ (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	fa22 f303 	lsr.w	r3, r2, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f47f ae78 	bne.w	8001ca4 <HAL_GPIO_Init+0x10>
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	371c      	adds	r7, #28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40010000 	.word	0x40010000
 8001fcc:	48000400 	.word	0x48000400
 8001fd0:	48000800 	.word	0x48000800
 8001fd4:	48000c00 	.word	0x48000c00
 8001fd8:	48001000 	.word	0x48001000
 8001fdc:	48001400 	.word	0x48001400
 8001fe0:	48001800 	.word	0x48001800
 8001fe4:	40010400 	.word	0x40010400

08001fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	807b      	strh	r3, [r7, #2]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ff8:	787b      	ldrb	r3, [r7, #1]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ffe:	887a      	ldrh	r2, [r7, #2]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002004:	e002      	b.n	800200c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002006:	887a      	ldrh	r2, [r7, #2]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e08d      	b.n	8002146 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d106      	bne.n	8002044 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7fe fbae 	bl	80007a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2224      	movs	r2, #36	@ 0x24
 8002048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0201 	bic.w	r2, r2, #1
 800205a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002068:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002078:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d107      	bne.n	8002092 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	e006      	b.n	80020a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800209e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d108      	bne.n	80020ba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020b6:	605a      	str	r2, [r3, #4]
 80020b8:	e007      	b.n	80020ca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68da      	ldr	r2, [r3, #12]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691a      	ldr	r2, [r3, #16]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69d9      	ldr	r1, [r3, #28]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a1a      	ldr	r2, [r3, #32]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0201 	orr.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2220      	movs	r2, #32
 8002132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af02      	add	r7, sp, #8
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	4608      	mov	r0, r1
 800215a:	4611      	mov	r1, r2
 800215c:	461a      	mov	r2, r3
 800215e:	4603      	mov	r3, r0
 8002160:	817b      	strh	r3, [r7, #10]
 8002162:	460b      	mov	r3, r1
 8002164:	813b      	strh	r3, [r7, #8]
 8002166:	4613      	mov	r3, r2
 8002168:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b20      	cmp	r3, #32
 8002174:	f040 80fd 	bne.w	8002372 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <HAL_I2C_Mem_Read+0x34>
 800217e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002180:	2b00      	cmp	r3, #0
 8002182:	d105      	bne.n	8002190 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800218a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0f1      	b.n	8002374 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_I2C_Mem_Read+0x4e>
 800219a:	2302      	movs	r3, #2
 800219c:	e0ea      	b.n	8002374 <HAL_I2C_Mem_Read+0x224>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021a6:	f7ff faa1 	bl	80016ec <HAL_GetTick>
 80021aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	2319      	movs	r3, #25
 80021b2:	2201      	movs	r2, #1
 80021b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 f95b 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0d5      	b.n	8002374 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2222      	movs	r2, #34	@ 0x22
 80021cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2240      	movs	r2, #64	@ 0x40
 80021d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a3a      	ldr	r2, [r7, #32]
 80021e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80021e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021f0:	88f8      	ldrh	r0, [r7, #6]
 80021f2:	893a      	ldrh	r2, [r7, #8]
 80021f4:	8979      	ldrh	r1, [r7, #10]
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	9301      	str	r3, [sp, #4]
 80021fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	4603      	mov	r3, r0
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 f8bf 	bl	8002384 <I2C_RequestMemoryRead>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0ad      	b.n	8002374 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800221c:	b29b      	uxth	r3, r3
 800221e:	2bff      	cmp	r3, #255	@ 0xff
 8002220:	d90e      	bls.n	8002240 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2201      	movs	r2, #1
 8002226:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800222c:	b2da      	uxtb	r2, r3
 800222e:	8979      	ldrh	r1, [r7, #10]
 8002230:	4b52      	ldr	r3, [pc, #328]	@ (800237c <HAL_I2C_Mem_Read+0x22c>)
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f000 fadf 	bl	80027fc <I2C_TransferConfig>
 800223e:	e00f      	b.n	8002260 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002244:	b29a      	uxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800224e:	b2da      	uxtb	r2, r3
 8002250:	8979      	ldrh	r1, [r7, #10]
 8002252:	4b4a      	ldr	r3, [pc, #296]	@ (800237c <HAL_I2C_Mem_Read+0x22c>)
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f000 face 	bl	80027fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002266:	2200      	movs	r2, #0
 8002268:	2104      	movs	r1, #4
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f902 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e07c      	b.n	8002374 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228c:	1c5a      	adds	r2, r3, #1
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002296:	3b01      	subs	r3, #1
 8002298:	b29a      	uxth	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d034      	beq.n	8002320 <HAL_I2C_Mem_Read+0x1d0>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d130      	bne.n	8002320 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c4:	2200      	movs	r2, #0
 80022c6:	2180      	movs	r1, #128	@ 0x80
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 f8d3 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e04d      	b.n	8002374 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022dc:	b29b      	uxth	r3, r3
 80022de:	2bff      	cmp	r3, #255	@ 0xff
 80022e0:	d90e      	bls.n	8002300 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2201      	movs	r2, #1
 80022e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	8979      	ldrh	r1, [r7, #10]
 80022f0:	2300      	movs	r3, #0
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f000 fa7f 	bl	80027fc <I2C_TransferConfig>
 80022fe:	e00f      	b.n	8002320 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800230e:	b2da      	uxtb	r2, r3
 8002310:	8979      	ldrh	r1, [r7, #10]
 8002312:	2300      	movs	r3, #0
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 fa6e 	bl	80027fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002324:	b29b      	uxth	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d19a      	bne.n	8002260 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 f940 	bl	80025b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e01a      	b.n	8002374 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2220      	movs	r2, #32
 8002344:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6859      	ldr	r1, [r3, #4]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4b0b      	ldr	r3, [pc, #44]	@ (8002380 <HAL_I2C_Mem_Read+0x230>)
 8002352:	400b      	ands	r3, r1
 8002354:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2220      	movs	r2, #32
 800235a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	e000      	b.n	8002374 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002372:	2302      	movs	r3, #2
  }
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	80002400 	.word	0x80002400
 8002380:	fe00e800 	.word	0xfe00e800

08002384 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af02      	add	r7, sp, #8
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	4608      	mov	r0, r1
 800238e:	4611      	mov	r1, r2
 8002390:	461a      	mov	r2, r3
 8002392:	4603      	mov	r3, r0
 8002394:	817b      	strh	r3, [r7, #10]
 8002396:	460b      	mov	r3, r1
 8002398:	813b      	strh	r3, [r7, #8]
 800239a:	4613      	mov	r3, r2
 800239c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800239e:	88fb      	ldrh	r3, [r7, #6]
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	8979      	ldrh	r1, [r7, #10]
 80023a4:	4b20      	ldr	r3, [pc, #128]	@ (8002428 <I2C_RequestMemoryRead+0xa4>)
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	2300      	movs	r3, #0
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 fa26 	bl	80027fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023b0:	69fa      	ldr	r2, [r7, #28]
 80023b2:	69b9      	ldr	r1, [r7, #24]
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 f8b6 	bl	8002526 <I2C_WaitOnTXISFlagUntilTimeout>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e02c      	b.n	800241e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023c4:	88fb      	ldrh	r3, [r7, #6]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d105      	bne.n	80023d6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023ca:	893b      	ldrh	r3, [r7, #8]
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80023d4:	e015      	b.n	8002402 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80023d6:	893b      	ldrh	r3, [r7, #8]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	b29b      	uxth	r3, r3
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	69b9      	ldr	r1, [r7, #24]
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 f89c 	bl	8002526 <I2C_WaitOnTXISFlagUntilTimeout>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e012      	b.n	800241e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023f8:	893b      	ldrh	r3, [r7, #8]
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	2200      	movs	r2, #0
 800240a:	2140      	movs	r1, #64	@ 0x40
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 f831 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	80002000 	.word	0x80002000

0800242c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b02      	cmp	r3, #2
 8002440:	d103      	bne.n	800244a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2200      	movs	r2, #0
 8002448:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b01      	cmp	r3, #1
 8002456:	d007      	beq.n	8002468 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	699a      	ldr	r2, [r3, #24]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	619a      	str	r2, [r3, #24]
  }
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	4613      	mov	r3, r2
 8002482:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002484:	e03b      	b.n	80024fe <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	6839      	ldr	r1, [r7, #0]
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 f8d6 	bl	800263c <I2C_IsErrorOccurred>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e041      	b.n	800251e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a0:	d02d      	beq.n	80024fe <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024a2:	f7ff f923 	bl	80016ec <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d302      	bcc.n	80024b8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d122      	bne.n	80024fe <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	699a      	ldr	r2, [r3, #24]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	4013      	ands	r3, r2
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	bf0c      	ite	eq
 80024c8:	2301      	moveq	r3, #1
 80024ca:	2300      	movne	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	461a      	mov	r2, r3
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d113      	bne.n	80024fe <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024da:	f043 0220 	orr.w	r2, r3, #32
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2220      	movs	r2, #32
 80024e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e00f      	b.n	800251e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	699a      	ldr	r2, [r3, #24]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	4013      	ands	r3, r2
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	429a      	cmp	r2, r3
 800250c:	bf0c      	ite	eq
 800250e:	2301      	moveq	r3, #1
 8002510:	2300      	movne	r3, #0
 8002512:	b2db      	uxtb	r3, r3
 8002514:	461a      	mov	r2, r3
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	429a      	cmp	r2, r3
 800251a:	d0b4      	beq.n	8002486 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b084      	sub	sp, #16
 800252a:	af00      	add	r7, sp, #0
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002532:	e033      	b.n	800259c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	68b9      	ldr	r1, [r7, #8]
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 f87f 	bl	800263c <I2C_IsErrorOccurred>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e031      	b.n	80025ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254e:	d025      	beq.n	800259c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002550:	f7ff f8cc 	bl	80016ec <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	429a      	cmp	r2, r3
 800255e:	d302      	bcc.n	8002566 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d11a      	bne.n	800259c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b02      	cmp	r3, #2
 8002572:	d013      	beq.n	800259c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002578:	f043 0220 	orr.w	r2, r3, #32
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e007      	b.n	80025ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d1c4      	bne.n	8002534 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025c0:	e02f      	b.n	8002622 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 f838 	bl	800263c <I2C_IsErrorOccurred>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e02d      	b.n	8002632 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d6:	f7ff f889 	bl	80016ec <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d302      	bcc.n	80025ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d11a      	bne.n	8002622 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f003 0320 	and.w	r3, r3, #32
 80025f6:	2b20      	cmp	r3, #32
 80025f8:	d013      	beq.n	8002622 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fe:	f043 0220 	orr.w	r2, r3, #32
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2220      	movs	r2, #32
 800260a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e007      	b.n	8002632 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	f003 0320 	and.w	r3, r3, #32
 800262c:	2b20      	cmp	r3, #32
 800262e:	d1c8      	bne.n	80025c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08a      	sub	sp, #40	@ 0x28
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	f003 0310 	and.w	r3, r3, #16
 8002664:	2b00      	cmp	r3, #0
 8002666:	d068      	beq.n	800273a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2210      	movs	r2, #16
 800266e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002670:	e049      	b.n	8002706 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d045      	beq.n	8002706 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800267a:	f7ff f837 	bl	80016ec <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	429a      	cmp	r2, r3
 8002688:	d302      	bcc.n	8002690 <I2C_IsErrorOccurred+0x54>
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d13a      	bne.n	8002706 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800269a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026b2:	d121      	bne.n	80026f8 <I2C_IsErrorOccurred+0xbc>
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026ba:	d01d      	beq.n	80026f8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80026bc:	7cfb      	ldrb	r3, [r7, #19]
 80026be:	2b20      	cmp	r3, #32
 80026c0:	d01a      	beq.n	80026f8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026d0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80026d2:	f7ff f80b 	bl	80016ec <HAL_GetTick>
 80026d6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026d8:	e00e      	b.n	80026f8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80026da:	f7ff f807 	bl	80016ec <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b19      	cmp	r3, #25
 80026e6:	d907      	bls.n	80026f8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	f043 0320 	orr.w	r3, r3, #32
 80026ee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80026f6:	e006      	b.n	8002706 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f003 0320 	and.w	r3, r3, #32
 8002702:	2b20      	cmp	r3, #32
 8002704:	d1e9      	bne.n	80026da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	f003 0320 	and.w	r3, r3, #32
 8002710:	2b20      	cmp	r3, #32
 8002712:	d003      	beq.n	800271c <I2C_IsErrorOccurred+0xe0>
 8002714:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0aa      	beq.n	8002672 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800271c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002720:	2b00      	cmp	r3, #0
 8002722:	d103      	bne.n	800272c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2220      	movs	r2, #32
 800272a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	f043 0304 	orr.w	r3, r3, #4
 8002732:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00b      	beq.n	8002764 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800275c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00b      	beq.n	8002786 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	f043 0308 	orr.w	r3, r3, #8
 8002774:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800277e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00b      	beq.n	80027a8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	f043 0302 	orr.w	r3, r3, #2
 8002796:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80027a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d01c      	beq.n	80027ea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f7ff fe3b 	bl	800242c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6859      	ldr	r1, [r3, #4]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b0d      	ldr	r3, [pc, #52]	@ (80027f8 <I2C_IsErrorOccurred+0x1bc>)
 80027c2:	400b      	ands	r3, r1
 80027c4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	431a      	orrs	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2220      	movs	r2, #32
 80027d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80027ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3728      	adds	r7, #40	@ 0x28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	fe00e800 	.word	0xfe00e800

080027fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	607b      	str	r3, [r7, #4]
 8002806:	460b      	mov	r3, r1
 8002808:	817b      	strh	r3, [r7, #10]
 800280a:	4613      	mov	r3, r2
 800280c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800280e:	897b      	ldrh	r3, [r7, #10]
 8002810:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002814:	7a7b      	ldrb	r3, [r7, #9]
 8002816:	041b      	lsls	r3, r3, #16
 8002818:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800281c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	4313      	orrs	r3, r2
 8002826:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800282a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	0d5b      	lsrs	r3, r3, #21
 8002836:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800283a:	4b08      	ldr	r3, [pc, #32]	@ (800285c <I2C_TransferConfig+0x60>)
 800283c:	430b      	orrs	r3, r1
 800283e:	43db      	mvns	r3, r3
 8002840:	ea02 0103 	and.w	r1, r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	430a      	orrs	r2, r1
 800284c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800284e:	bf00      	nop
 8002850:	371c      	adds	r7, #28
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	03ff63ff 	.word	0x03ff63ff

08002860 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b20      	cmp	r3, #32
 8002874:	d138      	bne.n	80028e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002880:	2302      	movs	r3, #2
 8002882:	e032      	b.n	80028ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2224      	movs	r2, #36	@ 0x24
 8002890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0201 	bic.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80028b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6819      	ldr	r1, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0201 	orr.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	e000      	b.n	80028ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028e8:	2302      	movs	r3, #2
  }
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b085      	sub	sp, #20
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b20      	cmp	r3, #32
 800290a:	d139      	bne.n	8002980 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002916:	2302      	movs	r3, #2
 8002918:	e033      	b.n	8002982 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2224      	movs	r2, #36	@ 0x24
 8002926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0201 	bic.w	r2, r2, #1
 8002938:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002948:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	021b      	lsls	r3, r3, #8
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4313      	orrs	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2220      	movs	r2, #32
 8002970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	e000      	b.n	8002982 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002980:	2302      	movs	r3, #2
  }
}
 8002982:	4618      	mov	r0, r3
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
	...

08002990 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002994:	4b04      	ldr	r3, [pc, #16]	@ (80029a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800299c:	4618      	mov	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40007000 	.word	0x40007000

080029ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029ba:	d130      	bne.n	8002a1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80029bc:	4b23      	ldr	r3, [pc, #140]	@ (8002a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029c8:	d038      	beq.n	8002a3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029ca:	4b20      	ldr	r3, [pc, #128]	@ (8002a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029d2:	4a1e      	ldr	r2, [pc, #120]	@ (8002a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029da:	4b1d      	ldr	r3, [pc, #116]	@ (8002a50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2232      	movs	r2, #50	@ 0x32
 80029e0:	fb02 f303 	mul.w	r3, r2, r3
 80029e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029e6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ea:	0c9b      	lsrs	r3, r3, #18
 80029ec:	3301      	adds	r3, #1
 80029ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029f0:	e002      	b.n	80029f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	3b01      	subs	r3, #1
 80029f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029f8:	4b14      	ldr	r3, [pc, #80]	@ (8002a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a04:	d102      	bne.n	8002a0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1f2      	bne.n	80029f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a18:	d110      	bne.n	8002a3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e00f      	b.n	8002a3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a2a:	d007      	beq.n	8002a3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a2c:	4b07      	ldr	r3, [pc, #28]	@ (8002a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a34:	4a05      	ldr	r2, [pc, #20]	@ (8002a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40007000 	.word	0x40007000
 8002a50:	20000000 	.word	0x20000000
 8002a54:	431bde83 	.word	0x431bde83

08002a58 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e3ca      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a6a:	4b97      	ldr	r3, [pc, #604]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a74:	4b94      	ldr	r3, [pc, #592]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 80e4 	beq.w	8002c54 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d007      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x4a>
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	2b0c      	cmp	r3, #12
 8002a96:	f040 808b 	bne.w	8002bb0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	f040 8087 	bne.w	8002bb0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002aa2:	4b89      	ldr	r3, [pc, #548]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <HAL_RCC_OscConfig+0x62>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e3a2      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1a      	ldr	r2, [r3, #32]
 8002abe:	4b82      	ldr	r3, [pc, #520]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d004      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x7c>
 8002aca:	4b7f      	ldr	r3, [pc, #508]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ad2:	e005      	b.n	8002ae0 <HAL_RCC_OscConfig+0x88>
 8002ad4:	4b7c      	ldr	r3, [pc, #496]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ada:	091b      	lsrs	r3, r3, #4
 8002adc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d223      	bcs.n	8002b2c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 fd87 	bl	80035fc <RCC_SetFlashLatencyFromMSIRange>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e383      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002af8:	4b73      	ldr	r3, [pc, #460]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a72      	ldr	r2, [pc, #456]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002afe:	f043 0308 	orr.w	r3, r3, #8
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	4b70      	ldr	r3, [pc, #448]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	496d      	ldr	r1, [pc, #436]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b16:	4b6c      	ldr	r3, [pc, #432]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	021b      	lsls	r3, r3, #8
 8002b24:	4968      	ldr	r1, [pc, #416]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	604b      	str	r3, [r1, #4]
 8002b2a:	e025      	b.n	8002b78 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b2c:	4b66      	ldr	r3, [pc, #408]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a65      	ldr	r2, [pc, #404]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002b32:	f043 0308 	orr.w	r3, r3, #8
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	4b63      	ldr	r3, [pc, #396]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	4960      	ldr	r1, [pc, #384]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b4a:	4b5f      	ldr	r3, [pc, #380]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	021b      	lsls	r3, r3, #8
 8002b58:	495b      	ldr	r1, [pc, #364]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d109      	bne.n	8002b78 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 fd47 	bl	80035fc <RCC_SetFlashLatencyFromMSIRange>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e343      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b78:	f000 fc4a 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	4b52      	ldr	r3, [pc, #328]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	091b      	lsrs	r3, r3, #4
 8002b84:	f003 030f 	and.w	r3, r3, #15
 8002b88:	4950      	ldr	r1, [pc, #320]	@ (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002b8a:	5ccb      	ldrb	r3, [r1, r3]
 8002b8c:	f003 031f 	and.w	r3, r3, #31
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
 8002b94:	4a4e      	ldr	r2, [pc, #312]	@ (8002cd0 <HAL_RCC_OscConfig+0x278>)
 8002b96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b98:	4b4e      	ldr	r3, [pc, #312]	@ (8002cd4 <HAL_RCC_OscConfig+0x27c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe fb3d 	bl	800121c <HAL_InitTick>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d052      	beq.n	8002c52 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	e327      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d032      	beq.n	8002c1e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bb8:	4b43      	ldr	r3, [pc, #268]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a42      	ldr	r2, [pc, #264]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bc4:	f7fe fd92 	bl	80016ec <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bcc:	f7fe fd8e 	bl	80016ec <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e310      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bde:	4b3a      	ldr	r3, [pc, #232]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bea:	4b37      	ldr	r3, [pc, #220]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a36      	ldr	r2, [pc, #216]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002bf0:	f043 0308 	orr.w	r3, r3, #8
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	4b34      	ldr	r3, [pc, #208]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	4931      	ldr	r1, [pc, #196]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c08:	4b2f      	ldr	r3, [pc, #188]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	021b      	lsls	r3, r3, #8
 8002c16:	492c      	ldr	r1, [pc, #176]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
 8002c1c:	e01a      	b.n	8002c54 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c1e:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a29      	ldr	r2, [pc, #164]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c2a:	f7fe fd5f 	bl	80016ec <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c32:	f7fe fd5b 	bl	80016ec <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e2dd      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c44:	4b20      	ldr	r3, [pc, #128]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f0      	bne.n	8002c32 <HAL_RCC_OscConfig+0x1da>
 8002c50:	e000      	b.n	8002c54 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c52:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d074      	beq.n	8002d4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d005      	beq.n	8002c72 <HAL_RCC_OscConfig+0x21a>
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	2b0c      	cmp	r3, #12
 8002c6a:	d10e      	bne.n	8002c8a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	d10b      	bne.n	8002c8a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c72:	4b15      	ldr	r3, [pc, #84]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d064      	beq.n	8002d48 <HAL_RCC_OscConfig+0x2f0>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d160      	bne.n	8002d48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e2ba      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c92:	d106      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x24a>
 8002c94:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a0b      	ldr	r2, [pc, #44]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002c9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	e026      	b.n	8002cf0 <HAL_RCC_OscConfig+0x298>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002caa:	d115      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x280>
 8002cac:	4b06      	ldr	r3, [pc, #24]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a05      	ldr	r2, [pc, #20]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002cb2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	4b03      	ldr	r3, [pc, #12]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a02      	ldr	r2, [pc, #8]	@ (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002cbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	e014      	b.n	8002cf0 <HAL_RCC_OscConfig+0x298>
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	0800a980 	.word	0x0800a980
 8002cd0:	20000000 	.word	0x20000000
 8002cd4:	20000004 	.word	0x20000004
 8002cd8:	4ba0      	ldr	r3, [pc, #640]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a9f      	ldr	r2, [pc, #636]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002cde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	4b9d      	ldr	r3, [pc, #628]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a9c      	ldr	r2, [pc, #624]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002cea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d013      	beq.n	8002d20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7fe fcf8 	bl	80016ec <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d00:	f7fe fcf4 	bl	80016ec <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	@ 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e276      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d12:	4b92      	ldr	r3, [pc, #584]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCC_OscConfig+0x2a8>
 8002d1e:	e014      	b.n	8002d4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fe fce4 	bl	80016ec <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d28:	f7fe fce0 	bl	80016ec <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b64      	cmp	r3, #100	@ 0x64
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e262      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d3a:	4b88      	ldr	r3, [pc, #544]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x2d0>
 8002d46:	e000      	b.n	8002d4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d060      	beq.n	8002e18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_OscConfig+0x310>
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	2b0c      	cmp	r3, #12
 8002d60:	d119      	bne.n	8002d96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d116      	bne.n	8002d96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d68:	4b7c      	ldr	r3, [pc, #496]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_RCC_OscConfig+0x328>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e23f      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d80:	4b76      	ldr	r3, [pc, #472]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	061b      	lsls	r3, r3, #24
 8002d8e:	4973      	ldr	r1, [pc, #460]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d94:	e040      	b.n	8002e18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d023      	beq.n	8002de6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d9e:	4b6f      	ldr	r3, [pc, #444]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a6e      	ldr	r2, [pc, #440]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002da4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002daa:	f7fe fc9f 	bl	80016ec <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db2:	f7fe fc9b 	bl	80016ec <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e21d      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dc4:	4b65      	ldr	r3, [pc, #404]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0f0      	beq.n	8002db2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd0:	4b62      	ldr	r3, [pc, #392]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	061b      	lsls	r3, r3, #24
 8002dde:	495f      	ldr	r1, [pc, #380]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	604b      	str	r3, [r1, #4]
 8002de4:	e018      	b.n	8002e18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002de6:	4b5d      	ldr	r3, [pc, #372]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a5c      	ldr	r2, [pc, #368]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002dec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df2:	f7fe fc7b 	bl	80016ec <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dfa:	f7fe fc77 	bl	80016ec <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e1f9      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e0c:	4b53      	ldr	r3, [pc, #332]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1f0      	bne.n	8002dfa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d03c      	beq.n	8002e9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d01c      	beq.n	8002e66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e2c:	4b4b      	ldr	r3, [pc, #300]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e32:	4a4a      	ldr	r2, [pc, #296]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3c:	f7fe fc56 	bl	80016ec <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e44:	f7fe fc52 	bl	80016ec <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e1d4      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e56:	4b41      	ldr	r3, [pc, #260]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0ef      	beq.n	8002e44 <HAL_RCC_OscConfig+0x3ec>
 8002e64:	e01b      	b.n	8002e9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e66:	4b3d      	ldr	r3, [pc, #244]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e6c:	4a3b      	ldr	r2, [pc, #236]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002e6e:	f023 0301 	bic.w	r3, r3, #1
 8002e72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e76:	f7fe fc39 	bl	80016ec <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e7e:	f7fe fc35 	bl	80016ec <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e1b7      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e90:	4b32      	ldr	r3, [pc, #200]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1ef      	bne.n	8002e7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0304 	and.w	r3, r3, #4
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 80a6 	beq.w	8002ff8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eac:	2300      	movs	r3, #0
 8002eae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10d      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ebc:	4b27      	ldr	r3, [pc, #156]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec0:	4a26      	ldr	r2, [pc, #152]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002ec2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ec6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ec8:	4b24      	ldr	r3, [pc, #144]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ecc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ed8:	4b21      	ldr	r3, [pc, #132]	@ (8002f60 <HAL_RCC_OscConfig+0x508>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d118      	bne.n	8002f16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8002f60 <HAL_RCC_OscConfig+0x508>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8002f60 <HAL_RCC_OscConfig+0x508>)
 8002eea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef0:	f7fe fbfc 	bl	80016ec <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef8:	f7fe fbf8 	bl	80016ec <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e17a      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f0a:	4b15      	ldr	r3, [pc, #84]	@ (8002f60 <HAL_RCC_OscConfig+0x508>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f0      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d108      	bne.n	8002f30 <HAL_RCC_OscConfig+0x4d8>
 8002f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f24:	4a0d      	ldr	r2, [pc, #52]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f2e:	e029      	b.n	8002f84 <HAL_RCC_OscConfig+0x52c>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2b05      	cmp	r3, #5
 8002f36:	d115      	bne.n	8002f64 <HAL_RCC_OscConfig+0x50c>
 8002f38:	4b08      	ldr	r3, [pc, #32]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f3e:	4a07      	ldr	r2, [pc, #28]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002f40:	f043 0304 	orr.w	r3, r3, #4
 8002f44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f48:	4b04      	ldr	r3, [pc, #16]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f4e:	4a03      	ldr	r2, [pc, #12]	@ (8002f5c <HAL_RCC_OscConfig+0x504>)
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f58:	e014      	b.n	8002f84 <HAL_RCC_OscConfig+0x52c>
 8002f5a:	bf00      	nop
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	40007000 	.word	0x40007000
 8002f64:	4b9c      	ldr	r3, [pc, #624]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 8002f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f6a:	4a9b      	ldr	r2, [pc, #620]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 8002f6c:	f023 0301 	bic.w	r3, r3, #1
 8002f70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f74:	4b98      	ldr	r3, [pc, #608]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 8002f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f7a:	4a97      	ldr	r2, [pc, #604]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 8002f7c:	f023 0304 	bic.w	r3, r3, #4
 8002f80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d016      	beq.n	8002fba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8c:	f7fe fbae 	bl	80016ec <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f92:	e00a      	b.n	8002faa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f94:	f7fe fbaa 	bl	80016ec <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e12a      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002faa:	4b8b      	ldr	r3, [pc, #556]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 8002fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0ed      	beq.n	8002f94 <HAL_RCC_OscConfig+0x53c>
 8002fb8:	e015      	b.n	8002fe6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fba:	f7fe fb97 	bl	80016ec <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fc0:	e00a      	b.n	8002fd8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc2:	f7fe fb93 	bl	80016ec <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e113      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fd8:	4b7f      	ldr	r3, [pc, #508]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1ed      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fe6:	7ffb      	ldrb	r3, [r7, #31]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d105      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fec:	4b7a      	ldr	r3, [pc, #488]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 8002fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff0:	4a79      	ldr	r2, [pc, #484]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 8002ff2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ff6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 80fe 	beq.w	80031fe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003006:	2b02      	cmp	r3, #2
 8003008:	f040 80d0 	bne.w	80031ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800300c:	4b72      	ldr	r3, [pc, #456]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f003 0203 	and.w	r2, r3, #3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301c:	429a      	cmp	r2, r3
 800301e:	d130      	bne.n	8003082 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302a:	3b01      	subs	r3, #1
 800302c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800302e:	429a      	cmp	r2, r3
 8003030:	d127      	bne.n	8003082 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800303c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800303e:	429a      	cmp	r2, r3
 8003040:	d11f      	bne.n	8003082 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800304c:	2a07      	cmp	r2, #7
 800304e:	bf14      	ite	ne
 8003050:	2201      	movne	r2, #1
 8003052:	2200      	moveq	r2, #0
 8003054:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003056:	4293      	cmp	r3, r2
 8003058:	d113      	bne.n	8003082 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003064:	085b      	lsrs	r3, r3, #1
 8003066:	3b01      	subs	r3, #1
 8003068:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800306a:	429a      	cmp	r2, r3
 800306c:	d109      	bne.n	8003082 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003078:	085b      	lsrs	r3, r3, #1
 800307a:	3b01      	subs	r3, #1
 800307c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800307e:	429a      	cmp	r2, r3
 8003080:	d06e      	beq.n	8003160 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	2b0c      	cmp	r3, #12
 8003086:	d069      	beq.n	800315c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003088:	4b53      	ldr	r3, [pc, #332]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d105      	bne.n	80030a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003094:	4b50      	ldr	r3, [pc, #320]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0ad      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030a4:	4b4c      	ldr	r3, [pc, #304]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a4b      	ldr	r2, [pc, #300]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 80030aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030b0:	f7fe fb1c 	bl	80016ec <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b8:	f7fe fb18 	bl	80016ec <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e09a      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ca:	4b43      	ldr	r3, [pc, #268]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030d6:	4b40      	ldr	r3, [pc, #256]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	4b40      	ldr	r3, [pc, #256]	@ (80031dc <HAL_RCC_OscConfig+0x784>)
 80030dc:	4013      	ands	r3, r2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80030e6:	3a01      	subs	r2, #1
 80030e8:	0112      	lsls	r2, r2, #4
 80030ea:	4311      	orrs	r1, r2
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80030f0:	0212      	lsls	r2, r2, #8
 80030f2:	4311      	orrs	r1, r2
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80030f8:	0852      	lsrs	r2, r2, #1
 80030fa:	3a01      	subs	r2, #1
 80030fc:	0552      	lsls	r2, r2, #21
 80030fe:	4311      	orrs	r1, r2
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003104:	0852      	lsrs	r2, r2, #1
 8003106:	3a01      	subs	r2, #1
 8003108:	0652      	lsls	r2, r2, #25
 800310a:	4311      	orrs	r1, r2
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003110:	0912      	lsrs	r2, r2, #4
 8003112:	0452      	lsls	r2, r2, #17
 8003114:	430a      	orrs	r2, r1
 8003116:	4930      	ldr	r1, [pc, #192]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 8003118:	4313      	orrs	r3, r2
 800311a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800311c:	4b2e      	ldr	r3, [pc, #184]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a2d      	ldr	r2, [pc, #180]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 8003122:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003126:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003128:	4b2b      	ldr	r3, [pc, #172]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	4a2a      	ldr	r2, [pc, #168]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 800312e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003132:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003134:	f7fe fada 	bl	80016ec <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313c:	f7fe fad6 	bl	80016ec <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e058      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800314e:	4b22      	ldr	r3, [pc, #136]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800315a:	e050      	b.n	80031fe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e04f      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003160:	4b1d      	ldr	r3, [pc, #116]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d148      	bne.n	80031fe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800316c:	4b1a      	ldr	r3, [pc, #104]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a19      	ldr	r2, [pc, #100]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 8003172:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003176:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003178:	4b17      	ldr	r3, [pc, #92]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	4a16      	ldr	r2, [pc, #88]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 800317e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003182:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003184:	f7fe fab2 	bl	80016ec <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318c:	f7fe faae 	bl	80016ec <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e030      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800319e:	4b0e      	ldr	r3, [pc, #56]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x734>
 80031aa:	e028      	b.n	80031fe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2b0c      	cmp	r3, #12
 80031b0:	d023      	beq.n	80031fa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b2:	4b09      	ldr	r3, [pc, #36]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a08      	ldr	r2, [pc, #32]	@ (80031d8 <HAL_RCC_OscConfig+0x780>)
 80031b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031be:	f7fe fa95 	bl	80016ec <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031c4:	e00c      	b.n	80031e0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c6:	f7fe fa91 	bl	80016ec <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d905      	bls.n	80031e0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e013      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
 80031d8:	40021000 	.word	0x40021000
 80031dc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031e0:	4b09      	ldr	r3, [pc, #36]	@ (8003208 <HAL_RCC_OscConfig+0x7b0>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1ec      	bne.n	80031c6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031ec:	4b06      	ldr	r3, [pc, #24]	@ (8003208 <HAL_RCC_OscConfig+0x7b0>)
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	4905      	ldr	r1, [pc, #20]	@ (8003208 <HAL_RCC_OscConfig+0x7b0>)
 80031f2:	4b06      	ldr	r3, [pc, #24]	@ (800320c <HAL_RCC_OscConfig+0x7b4>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	60cb      	str	r3, [r1, #12]
 80031f8:	e001      	b.n	80031fe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3720      	adds	r7, #32
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40021000 	.word	0x40021000
 800320c:	feeefffc 	.word	0xfeeefffc

08003210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0e7      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003224:	4b75      	ldr	r3, [pc, #468]	@ (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d910      	bls.n	8003254 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003232:	4b72      	ldr	r3, [pc, #456]	@ (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f023 0207 	bic.w	r2, r3, #7
 800323a:	4970      	ldr	r1, [pc, #448]	@ (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	4313      	orrs	r3, r2
 8003240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003242:	4b6e      	ldr	r3, [pc, #440]	@ (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d001      	beq.n	8003254 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0cf      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d010      	beq.n	8003282 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	4b66      	ldr	r3, [pc, #408]	@ (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800326c:	429a      	cmp	r2, r3
 800326e:	d908      	bls.n	8003282 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003270:	4b63      	ldr	r3, [pc, #396]	@ (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4960      	ldr	r1, [pc, #384]	@ (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 800327e:	4313      	orrs	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d04c      	beq.n	8003328 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b03      	cmp	r3, #3
 8003294:	d107      	bne.n	80032a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003296:	4b5a      	ldr	r3, [pc, #360]	@ (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d121      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e0a6      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d107      	bne.n	80032be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ae:	4b54      	ldr	r3, [pc, #336]	@ (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d115      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e09a      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d107      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032c6:	4b4e      	ldr	r3, [pc, #312]	@ (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d109      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e08e      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e086      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032e6:	4b46      	ldr	r3, [pc, #280]	@ (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f023 0203 	bic.w	r2, r3, #3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	4943      	ldr	r1, [pc, #268]	@ (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032f8:	f7fe f9f8 	bl	80016ec <HAL_GetTick>
 80032fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fe:	e00a      	b.n	8003316 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003300:	f7fe f9f4 	bl	80016ec <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800330e:	4293      	cmp	r3, r2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e06e      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003316:	4b3a      	ldr	r3, [pc, #232]	@ (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 020c 	and.w	r2, r3, #12
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	429a      	cmp	r2, r3
 8003326:	d1eb      	bne.n	8003300 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d010      	beq.n	8003356 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	4b31      	ldr	r3, [pc, #196]	@ (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003340:	429a      	cmp	r2, r3
 8003342:	d208      	bcs.n	8003356 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003344:	4b2e      	ldr	r3, [pc, #184]	@ (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	492b      	ldr	r1, [pc, #172]	@ (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 8003352:	4313      	orrs	r3, r2
 8003354:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003356:	4b29      	ldr	r3, [pc, #164]	@ (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d210      	bcs.n	8003386 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003364:	4b25      	ldr	r3, [pc, #148]	@ (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f023 0207 	bic.w	r2, r3, #7
 800336c:	4923      	ldr	r1, [pc, #140]	@ (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	4313      	orrs	r3, r2
 8003372:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003374:	4b21      	ldr	r3, [pc, #132]	@ (80033fc <HAL_RCC_ClockConfig+0x1ec>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d001      	beq.n	8003386 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e036      	b.n	80033f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b00      	cmp	r3, #0
 8003390:	d008      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003392:	4b1b      	ldr	r3, [pc, #108]	@ (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	4918      	ldr	r1, [pc, #96]	@ (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d009      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033b0:	4b13      	ldr	r3, [pc, #76]	@ (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4910      	ldr	r1, [pc, #64]	@ (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033c4:	f000 f824 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 80033c8:	4602      	mov	r2, r0
 80033ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003400 <HAL_RCC_ClockConfig+0x1f0>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	091b      	lsrs	r3, r3, #4
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	490b      	ldr	r1, [pc, #44]	@ (8003404 <HAL_RCC_ClockConfig+0x1f4>)
 80033d6:	5ccb      	ldrb	r3, [r1, r3]
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	fa22 f303 	lsr.w	r3, r2, r3
 80033e0:	4a09      	ldr	r2, [pc, #36]	@ (8003408 <HAL_RCC_ClockConfig+0x1f8>)
 80033e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033e4:	4b09      	ldr	r3, [pc, #36]	@ (800340c <HAL_RCC_ClockConfig+0x1fc>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fd ff17 	bl	800121c <HAL_InitTick>
 80033ee:	4603      	mov	r3, r0
 80033f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80033f2:	7afb      	ldrb	r3, [r7, #11]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40022000 	.word	0x40022000
 8003400:	40021000 	.word	0x40021000
 8003404:	0800a980 	.word	0x0800a980
 8003408:	20000000 	.word	0x20000000
 800340c:	20000004 	.word	0x20000004

08003410 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003410:	b480      	push	{r7}
 8003412:	b089      	sub	sp, #36	@ 0x24
 8003414:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
 800341a:	2300      	movs	r3, #0
 800341c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800341e:	4b3e      	ldr	r3, [pc, #248]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003428:	4b3b      	ldr	r3, [pc, #236]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_RCC_GetSysClockFreq+0x34>
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	2b0c      	cmp	r3, #12
 800343c:	d121      	bne.n	8003482 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d11e      	bne.n	8003482 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003444:	4b34      	ldr	r3, [pc, #208]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b00      	cmp	r3, #0
 800344e:	d107      	bne.n	8003460 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003450:	4b31      	ldr	r3, [pc, #196]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 8003452:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003456:	0a1b      	lsrs	r3, r3, #8
 8003458:	f003 030f 	and.w	r3, r3, #15
 800345c:	61fb      	str	r3, [r7, #28]
 800345e:	e005      	b.n	800346c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003460:	4b2d      	ldr	r3, [pc, #180]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	091b      	lsrs	r3, r3, #4
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800346c:	4a2b      	ldr	r2, [pc, #172]	@ (800351c <HAL_RCC_GetSysClockFreq+0x10c>)
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003474:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10d      	bne.n	8003498 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003480:	e00a      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	2b04      	cmp	r3, #4
 8003486:	d102      	bne.n	800348e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003488:	4b25      	ldr	r3, [pc, #148]	@ (8003520 <HAL_RCC_GetSysClockFreq+0x110>)
 800348a:	61bb      	str	r3, [r7, #24]
 800348c:	e004      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	2b08      	cmp	r3, #8
 8003492:	d101      	bne.n	8003498 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003494:	4b23      	ldr	r3, [pc, #140]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x114>)
 8003496:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	2b0c      	cmp	r3, #12
 800349c:	d134      	bne.n	8003508 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800349e:	4b1e      	ldr	r3, [pc, #120]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d003      	beq.n	80034b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d003      	beq.n	80034bc <HAL_RCC_GetSysClockFreq+0xac>
 80034b4:	e005      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003520 <HAL_RCC_GetSysClockFreq+0x110>)
 80034b8:	617b      	str	r3, [r7, #20]
      break;
 80034ba:	e005      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034bc:	4b19      	ldr	r3, [pc, #100]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x114>)
 80034be:	617b      	str	r3, [r7, #20]
      break;
 80034c0:	e002      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	617b      	str	r3, [r7, #20]
      break;
 80034c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034c8:	4b13      	ldr	r3, [pc, #76]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	3301      	adds	r3, #1
 80034d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034d6:	4b10      	ldr	r3, [pc, #64]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	0a1b      	lsrs	r3, r3, #8
 80034dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	fb03 f202 	mul.w	r2, r3, r2
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x108>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	0e5b      	lsrs	r3, r3, #25
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	3301      	adds	r3, #1
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	fbb2 f3f3 	udiv	r3, r2, r3
 8003506:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003508:	69bb      	ldr	r3, [r7, #24]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3724      	adds	r7, #36	@ 0x24
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000
 800351c:	0800a998 	.word	0x0800a998
 8003520:	00f42400 	.word	0x00f42400
 8003524:	007a1200 	.word	0x007a1200

08003528 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800352c:	4b03      	ldr	r3, [pc, #12]	@ (800353c <HAL_RCC_GetHCLKFreq+0x14>)
 800352e:	681b      	ldr	r3, [r3, #0]
}
 8003530:	4618      	mov	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	20000000 	.word	0x20000000

08003540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003544:	f7ff fff0 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 8003548:	4602      	mov	r2, r0
 800354a:	4b06      	ldr	r3, [pc, #24]	@ (8003564 <HAL_RCC_GetPCLK1Freq+0x24>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	0a1b      	lsrs	r3, r3, #8
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	4904      	ldr	r1, [pc, #16]	@ (8003568 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003556:	5ccb      	ldrb	r3, [r1, r3]
 8003558:	f003 031f 	and.w	r3, r3, #31
 800355c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003560:	4618      	mov	r0, r3
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40021000 	.word	0x40021000
 8003568:	0800a990 	.word	0x0800a990

0800356c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003570:	f7ff ffda 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 8003574:	4602      	mov	r2, r0
 8003576:	4b06      	ldr	r3, [pc, #24]	@ (8003590 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	0adb      	lsrs	r3, r3, #11
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	4904      	ldr	r1, [pc, #16]	@ (8003594 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003582:	5ccb      	ldrb	r3, [r1, r3]
 8003584:	f003 031f 	and.w	r3, r3, #31
 8003588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800358c:	4618      	mov	r0, r3
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40021000 	.word	0x40021000
 8003594:	0800a990 	.word	0x0800a990

08003598 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	220f      	movs	r2, #15
 80035a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80035a8:	4b12      	ldr	r3, [pc, #72]	@ (80035f4 <HAL_RCC_GetClockConfig+0x5c>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 0203 	and.w	r2, r3, #3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80035b4:	4b0f      	ldr	r3, [pc, #60]	@ (80035f4 <HAL_RCC_GetClockConfig+0x5c>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80035c0:	4b0c      	ldr	r3, [pc, #48]	@ (80035f4 <HAL_RCC_GetClockConfig+0x5c>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80035cc:	4b09      	ldr	r3, [pc, #36]	@ (80035f4 <HAL_RCC_GetClockConfig+0x5c>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	08db      	lsrs	r3, r3, #3
 80035d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80035da:	4b07      	ldr	r3, [pc, #28]	@ (80035f8 <HAL_RCC_GetClockConfig+0x60>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0207 	and.w	r2, r3, #7
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	601a      	str	r2, [r3, #0]
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40021000 	.word	0x40021000
 80035f8:	40022000 	.word	0x40022000

080035fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003604:	2300      	movs	r3, #0
 8003606:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003608:	4b2a      	ldr	r3, [pc, #168]	@ (80036b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800360a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003614:	f7ff f9bc 	bl	8002990 <HAL_PWREx_GetVoltageRange>
 8003618:	6178      	str	r0, [r7, #20]
 800361a:	e014      	b.n	8003646 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800361c:	4b25      	ldr	r3, [pc, #148]	@ (80036b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800361e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003620:	4a24      	ldr	r2, [pc, #144]	@ (80036b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003626:	6593      	str	r3, [r2, #88]	@ 0x58
 8003628:	4b22      	ldr	r3, [pc, #136]	@ (80036b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800362a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003634:	f7ff f9ac 	bl	8002990 <HAL_PWREx_GetVoltageRange>
 8003638:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800363a:	4b1e      	ldr	r3, [pc, #120]	@ (80036b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800363c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363e:	4a1d      	ldr	r2, [pc, #116]	@ (80036b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003640:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003644:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800364c:	d10b      	bne.n	8003666 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b80      	cmp	r3, #128	@ 0x80
 8003652:	d919      	bls.n	8003688 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2ba0      	cmp	r3, #160	@ 0xa0
 8003658:	d902      	bls.n	8003660 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800365a:	2302      	movs	r3, #2
 800365c:	613b      	str	r3, [r7, #16]
 800365e:	e013      	b.n	8003688 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003660:	2301      	movs	r3, #1
 8003662:	613b      	str	r3, [r7, #16]
 8003664:	e010      	b.n	8003688 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b80      	cmp	r3, #128	@ 0x80
 800366a:	d902      	bls.n	8003672 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800366c:	2303      	movs	r3, #3
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	e00a      	b.n	8003688 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b80      	cmp	r3, #128	@ 0x80
 8003676:	d102      	bne.n	800367e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003678:	2302      	movs	r3, #2
 800367a:	613b      	str	r3, [r7, #16]
 800367c:	e004      	b.n	8003688 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b70      	cmp	r3, #112	@ 0x70
 8003682:	d101      	bne.n	8003688 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003684:	2301      	movs	r3, #1
 8003686:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003688:	4b0b      	ldr	r3, [pc, #44]	@ (80036b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f023 0207 	bic.w	r2, r3, #7
 8003690:	4909      	ldr	r1, [pc, #36]	@ (80036b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003698:	4b07      	ldr	r3, [pc, #28]	@ (80036b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d001      	beq.n	80036aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40021000 	.word	0x40021000
 80036b8:	40022000 	.word	0x40022000

080036bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036c4:	2300      	movs	r3, #0
 80036c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036c8:	2300      	movs	r3, #0
 80036ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d041      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036dc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036e0:	d02a      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036e2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036e6:	d824      	bhi.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036ec:	d008      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036f2:	d81e      	bhi.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00a      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80036f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036fc:	d010      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036fe:	e018      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003700:	4b86      	ldr	r3, [pc, #536]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	4a85      	ldr	r2, [pc, #532]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003706:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800370a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800370c:	e015      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3304      	adds	r3, #4
 8003712:	2100      	movs	r1, #0
 8003714:	4618      	mov	r0, r3
 8003716:	f001 f829 	bl	800476c <RCCEx_PLLSAI1_Config>
 800371a:	4603      	mov	r3, r0
 800371c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800371e:	e00c      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3320      	adds	r3, #32
 8003724:	2100      	movs	r1, #0
 8003726:	4618      	mov	r0, r3
 8003728:	f001 f914 	bl	8004954 <RCCEx_PLLSAI2_Config>
 800372c:	4603      	mov	r3, r0
 800372e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003730:	e003      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	74fb      	strb	r3, [r7, #19]
      break;
 8003736:	e000      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003738:	bf00      	nop
    }

    if(ret == HAL_OK)
 800373a:	7cfb      	ldrb	r3, [r7, #19]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10b      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003740:	4b76      	ldr	r3, [pc, #472]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003746:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800374e:	4973      	ldr	r1, [pc, #460]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003756:	e001      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003758:	7cfb      	ldrb	r3, [r7, #19]
 800375a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d041      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800376c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003770:	d02a      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003772:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003776:	d824      	bhi.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003778:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800377c:	d008      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800377e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003782:	d81e      	bhi.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003788:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800378c:	d010      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800378e:	e018      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003790:	4b62      	ldr	r3, [pc, #392]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4a61      	ldr	r2, [pc, #388]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003796:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800379a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800379c:	e015      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3304      	adds	r3, #4
 80037a2:	2100      	movs	r1, #0
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 ffe1 	bl	800476c <RCCEx_PLLSAI1_Config>
 80037aa:	4603      	mov	r3, r0
 80037ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037ae:	e00c      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3320      	adds	r3, #32
 80037b4:	2100      	movs	r1, #0
 80037b6:	4618      	mov	r0, r3
 80037b8:	f001 f8cc 	bl	8004954 <RCCEx_PLLSAI2_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037c0:	e003      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	74fb      	strb	r3, [r7, #19]
      break;
 80037c6:	e000      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80037c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037ca:	7cfb      	ldrb	r3, [r7, #19]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10b      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037d0:	4b52      	ldr	r3, [pc, #328]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037de:	494f      	ldr	r1, [pc, #316]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80037e6:	e001      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e8:	7cfb      	ldrb	r3, [r7, #19]
 80037ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 80a0 	beq.w	800393a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037fa:	2300      	movs	r3, #0
 80037fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037fe:	4b47      	ldr	r3, [pc, #284]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800380e:	2300      	movs	r3, #0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00d      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003814:	4b41      	ldr	r3, [pc, #260]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003818:	4a40      	ldr	r2, [pc, #256]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800381a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800381e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003820:	4b3e      	ldr	r3, [pc, #248]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003824:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800382c:	2301      	movs	r3, #1
 800382e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003830:	4b3b      	ldr	r3, [pc, #236]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a3a      	ldr	r2, [pc, #232]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003836:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800383a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800383c:	f7fd ff56 	bl	80016ec <HAL_GetTick>
 8003840:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003842:	e009      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003844:	f7fd ff52 	bl	80016ec <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d902      	bls.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	74fb      	strb	r3, [r7, #19]
        break;
 8003856:	e005      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003858:	4b31      	ldr	r3, [pc, #196]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0ef      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003864:	7cfb      	ldrb	r3, [r7, #19]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d15c      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800386a:	4b2c      	ldr	r3, [pc, #176]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800386c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003870:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003874:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d01f      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	429a      	cmp	r2, r3
 8003886:	d019      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003888:	4b24      	ldr	r3, [pc, #144]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800388e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003892:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003894:	4b21      	ldr	r3, [pc, #132]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800389a:	4a20      	ldr	r2, [pc, #128]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800389c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038a4:	4b1d      	ldr	r3, [pc, #116]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038aa:	4a1c      	ldr	r2, [pc, #112]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038b4:	4a19      	ldr	r2, [pc, #100]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d016      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c6:	f7fd ff11 	bl	80016ec <HAL_GetTick>
 80038ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038cc:	e00b      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ce:	f7fd ff0d 	bl	80016ec <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038dc:	4293      	cmp	r3, r2
 80038de:	d902      	bls.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	74fb      	strb	r3, [r7, #19]
            break;
 80038e4:	e006      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038e6:	4b0d      	ldr	r3, [pc, #52]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0ec      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80038f4:	7cfb      	ldrb	r3, [r7, #19]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10c      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038fa:	4b08      	ldr	r3, [pc, #32]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003900:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800390a:	4904      	ldr	r1, [pc, #16]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003912:	e009      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003914:	7cfb      	ldrb	r3, [r7, #19]
 8003916:	74bb      	strb	r3, [r7, #18]
 8003918:	e006      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800391a:	bf00      	nop
 800391c:	40021000 	.word	0x40021000
 8003920:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003924:	7cfb      	ldrb	r3, [r7, #19]
 8003926:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003928:	7c7b      	ldrb	r3, [r7, #17]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d105      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800392e:	4b9e      	ldr	r3, [pc, #632]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003932:	4a9d      	ldr	r2, [pc, #628]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003934:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003938:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003946:	4b98      	ldr	r3, [pc, #608]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800394c:	f023 0203 	bic.w	r2, r3, #3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003954:	4994      	ldr	r1, [pc, #592]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00a      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003968:	4b8f      	ldr	r3, [pc, #572]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396e:	f023 020c 	bic.w	r2, r3, #12
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003976:	498c      	ldr	r1, [pc, #560]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800398a:	4b87      	ldr	r3, [pc, #540]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003990:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003998:	4983      	ldr	r1, [pc, #524]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0308 	and.w	r3, r3, #8
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00a      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039ac:	4b7e      	ldr	r3, [pc, #504]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ba:	497b      	ldr	r1, [pc, #492]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0310 	and.w	r3, r3, #16
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039ce:	4b76      	ldr	r3, [pc, #472]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039dc:	4972      	ldr	r1, [pc, #456]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0320 	and.w	r3, r3, #32
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039f0:	4b6d      	ldr	r3, [pc, #436]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fe:	496a      	ldr	r1, [pc, #424]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a12:	4b65      	ldr	r3, [pc, #404]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a18:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a20:	4961      	ldr	r1, [pc, #388]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00a      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a34:	4b5c      	ldr	r3, [pc, #368]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a42:	4959      	ldr	r1, [pc, #356]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a56:	4b54      	ldr	r3, [pc, #336]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a5c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a64:	4950      	ldr	r1, [pc, #320]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00a      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a78:	4b4b      	ldr	r3, [pc, #300]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a7e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a86:	4948      	ldr	r1, [pc, #288]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00a      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a9a:	4b43      	ldr	r3, [pc, #268]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa8:	493f      	ldr	r1, [pc, #252]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d028      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003abc:	4b3a      	ldr	r3, [pc, #232]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aca:	4937      	ldr	r1, [pc, #220]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ad6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ada:	d106      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003adc:	4b32      	ldr	r3, [pc, #200]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	4a31      	ldr	r2, [pc, #196]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ae6:	60d3      	str	r3, [r2, #12]
 8003ae8:	e011      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003af2:	d10c      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3304      	adds	r3, #4
 8003af8:	2101      	movs	r1, #1
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fe36 	bl	800476c <RCCEx_PLLSAI1_Config>
 8003b00:	4603      	mov	r3, r0
 8003b02:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b04:	7cfb      	ldrb	r3, [r7, #19]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003b0a:	7cfb      	ldrb	r3, [r7, #19]
 8003b0c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d028      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b1a:	4b23      	ldr	r3, [pc, #140]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b20:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b28:	491f      	ldr	r1, [pc, #124]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b38:	d106      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b44:	60d3      	str	r3, [r2, #12]
 8003b46:	e011      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b50:	d10c      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3304      	adds	r3, #4
 8003b56:	2101      	movs	r1, #1
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 fe07 	bl	800476c <RCCEx_PLLSAI1_Config>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b62:	7cfb      	ldrb	r3, [r7, #19]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003b68:	7cfb      	ldrb	r3, [r7, #19]
 8003b6a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d02b      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b78:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b7e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b86:	4908      	ldr	r1, [pc, #32]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b96:	d109      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b98:	4b03      	ldr	r3, [pc, #12]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	4a02      	ldr	r2, [pc, #8]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ba2:	60d3      	str	r3, [r2, #12]
 8003ba4:	e014      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003ba6:	bf00      	nop
 8003ba8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003bb4:	d10c      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	2101      	movs	r1, #1
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 fdd5 	bl	800476c <RCCEx_PLLSAI1_Config>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bc6:	7cfb      	ldrb	r3, [r7, #19]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003bcc:	7cfb      	ldrb	r3, [r7, #19]
 8003bce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d02f      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bea:	4928      	ldr	r1, [pc, #160]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bfa:	d10d      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3304      	adds	r3, #4
 8003c00:	2102      	movs	r1, #2
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fdb2 	bl	800476c <RCCEx_PLLSAI1_Config>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c0c:	7cfb      	ldrb	r3, [r7, #19]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d014      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c12:	7cfb      	ldrb	r3, [r7, #19]
 8003c14:	74bb      	strb	r3, [r7, #18]
 8003c16:	e011      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c20:	d10c      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	3320      	adds	r3, #32
 8003c26:	2102      	movs	r1, #2
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 fe93 	bl	8004954 <RCCEx_PLLSAI2_Config>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c32:	7cfb      	ldrb	r3, [r7, #19]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c38:	7cfb      	ldrb	r3, [r7, #19]
 8003c3a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00a      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c48:	4b10      	ldr	r3, [pc, #64]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c4e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c56:	490d      	ldr	r1, [pc, #52]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00b      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c6a:	4b08      	ldr	r3, [pc, #32]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c70:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c7a:	4904      	ldr	r1, [pc, #16]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c82:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40021000 	.word	0x40021000

08003c90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b088      	sub	sp, #32
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ca2:	d13e      	bne.n	8003d22 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003ca4:	4bb2      	ldr	r3, [pc, #712]	@ (8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cae:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cb6:	d028      	beq.n	8003d0a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cbe:	f200 8542 	bhi.w	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cc8:	d005      	beq.n	8003cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cd0:	d00e      	beq.n	8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003cd2:	f000 bd38 	b.w	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003cd6:	4ba6      	ldr	r3, [pc, #664]	@ (8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	f040 8532 	bne.w	800474a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8003ce6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cea:	61fb      	str	r3, [r7, #28]
      break;
 8003cec:	f000 bd2d 	b.w	800474a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003cf0:	4b9f      	ldr	r3, [pc, #636]	@ (8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	f040 8527 	bne.w	800474e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8003d00:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003d04:	61fb      	str	r3, [r7, #28]
      break;
 8003d06:	f000 bd22 	b.w	800474e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003d0a:	4b99      	ldr	r3, [pc, #612]	@ (8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d16:	f040 851c 	bne.w	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8003d1a:	4b96      	ldr	r3, [pc, #600]	@ (8003f74 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003d1c:	61fb      	str	r3, [r7, #28]
      break;
 8003d1e:	f000 bd18 	b.w	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d22:	4b93      	ldr	r3, [pc, #588]	@ (8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	d036      	beq.n	8003da0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2b03      	cmp	r3, #3
 8003d36:	d840      	bhi.n	8003dba <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d003      	beq.n	8003d46 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d020      	beq.n	8003d86 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003d44:	e039      	b.n	8003dba <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003d46:	4b8a      	ldr	r3, [pc, #552]	@ (8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d116      	bne.n	8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003d52:	4b87      	ldr	r3, [pc, #540]	@ (8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d005      	beq.n	8003d6a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003d5e:	4b84      	ldr	r3, [pc, #528]	@ (8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	091b      	lsrs	r3, r3, #4
 8003d64:	f003 030f 	and.w	r3, r3, #15
 8003d68:	e005      	b.n	8003d76 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003d6a:	4b81      	ldr	r3, [pc, #516]	@ (8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d70:	0a1b      	lsrs	r3, r3, #8
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	4a80      	ldr	r2, [pc, #512]	@ (8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003d7e:	e01f      	b.n	8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	61bb      	str	r3, [r7, #24]
      break;
 8003d84:	e01c      	b.n	8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003d86:	4b7a      	ldr	r3, [pc, #488]	@ (8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d92:	d102      	bne.n	8003d9a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8003d94:	4b79      	ldr	r3, [pc, #484]	@ (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003d96:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003d98:	e012      	b.n	8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	61bb      	str	r3, [r7, #24]
      break;
 8003d9e:	e00f      	b.n	8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003da0:	4b73      	ldr	r3, [pc, #460]	@ (8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003dac:	d102      	bne.n	8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8003dae:	4b74      	ldr	r3, [pc, #464]	@ (8003f80 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003db0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003db2:	e005      	b.n	8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	61bb      	str	r3, [r7, #24]
      break;
 8003db8:	e002      	b.n	8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61bb      	str	r3, [r7, #24]
      break;
 8003dbe:	bf00      	nop
    }

    switch(PeriphClk)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003dc6:	f000 80dd 	beq.w	8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003dd0:	f200 84c1 	bhi.w	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003dda:	f000 80d3 	beq.w	8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003de4:	f200 84b7 	bhi.w	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dee:	f000 835f 	beq.w	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003df8:	f200 84ad 	bhi.w	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e02:	f000 847e 	beq.w	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e0c:	f200 84a3 	bhi.w	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e16:	f000 82cd 	beq.w	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e20:	f200 8499 	bhi.w	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e2a:	f000 80ab 	beq.w	8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e34:	f200 848f 	bhi.w	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e3e:	f000 8090 	beq.w	8003f62 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e48:	f200 8485 	bhi.w	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e52:	d07f      	beq.n	8003f54 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e5a:	f200 847c 	bhi.w	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e64:	f000 8403 	beq.w	800466e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e6e:	f200 8472 	bhi.w	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e78:	f000 83af 	beq.w	80045da <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e82:	f200 8468 	bhi.w	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e8c:	f000 8379 	beq.w	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e96:	f200 845e 	bhi.w	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b80      	cmp	r3, #128	@ 0x80
 8003e9e:	f000 8344 	beq.w	800452a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b80      	cmp	r3, #128	@ 0x80
 8003ea6:	f200 8456 	bhi.w	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d84b      	bhi.n	8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 844f 	beq.w	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	2b1f      	cmp	r3, #31
 8003ebe:	f200 844a 	bhi.w	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8003ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec8:	080040b1 	.word	0x080040b1
 8003ecc:	0800411f 	.word	0x0800411f
 8003ed0:	08004757 	.word	0x08004757
 8003ed4:	080041b3 	.word	0x080041b3
 8003ed8:	08004757 	.word	0x08004757
 8003edc:	08004757 	.word	0x08004757
 8003ee0:	08004757 	.word	0x08004757
 8003ee4:	08004239 	.word	0x08004239
 8003ee8:	08004757 	.word	0x08004757
 8003eec:	08004757 	.word	0x08004757
 8003ef0:	08004757 	.word	0x08004757
 8003ef4:	08004757 	.word	0x08004757
 8003ef8:	08004757 	.word	0x08004757
 8003efc:	08004757 	.word	0x08004757
 8003f00:	08004757 	.word	0x08004757
 8003f04:	080042b1 	.word	0x080042b1
 8003f08:	08004757 	.word	0x08004757
 8003f0c:	08004757 	.word	0x08004757
 8003f10:	08004757 	.word	0x08004757
 8003f14:	08004757 	.word	0x08004757
 8003f18:	08004757 	.word	0x08004757
 8003f1c:	08004757 	.word	0x08004757
 8003f20:	08004757 	.word	0x08004757
 8003f24:	08004757 	.word	0x08004757
 8003f28:	08004757 	.word	0x08004757
 8003f2c:	08004757 	.word	0x08004757
 8003f30:	08004757 	.word	0x08004757
 8003f34:	08004757 	.word	0x08004757
 8003f38:	08004757 	.word	0x08004757
 8003f3c:	08004757 	.word	0x08004757
 8003f40:	08004757 	.word	0x08004757
 8003f44:	08004333 	.word	0x08004333
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b40      	cmp	r3, #64	@ 0x40
 8003f4c:	f000 82c1 	beq.w	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003f50:	f000 bc01 	b.w	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003f54:	69b9      	ldr	r1, [r7, #24]
 8003f56:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003f5a:	f000 fdd9 	bl	8004b10 <RCCEx_GetSAIxPeriphCLKFreq>
 8003f5e:	61f8      	str	r0, [r7, #28]
      break;
 8003f60:	e3fa      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003f62:	69b9      	ldr	r1, [r7, #24]
 8003f64:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003f68:	f000 fdd2 	bl	8004b10 <RCCEx_GetSAIxPeriphCLKFreq>
 8003f6c:	61f8      	str	r0, [r7, #28]
      break;
 8003f6e:	e3f3      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003f70:	40021000 	.word	0x40021000
 8003f74:	0003d090 	.word	0x0003d090
 8003f78:	0800a998 	.word	0x0800a998
 8003f7c:	00f42400 	.word	0x00f42400
 8003f80:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003f84:	4ba9      	ldr	r3, [pc, #676]	@ (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003f8e:	613b      	str	r3, [r7, #16]
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003f96:	d00c      	beq.n	8003fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003f9e:	d87f      	bhi.n	80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fa6:	d04e      	beq.n	8004046 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fae:	d01d      	beq.n	8003fec <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8003fb0:	e076      	b.n	80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003fb2:	4b9e      	ldr	r3, [pc, #632]	@ (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d172      	bne.n	80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003fbe:	4b9b      	ldr	r3, [pc, #620]	@ (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d005      	beq.n	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8003fca:	4b98      	ldr	r3, [pc, #608]	@ (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	091b      	lsrs	r3, r3, #4
 8003fd0:	f003 030f 	and.w	r3, r3, #15
 8003fd4:	e005      	b.n	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8003fd6:	4b95      	ldr	r3, [pc, #596]	@ (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003fd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fdc:	0a1b      	lsrs	r3, r3, #8
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	4a93      	ldr	r2, [pc, #588]	@ (8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8003fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fe8:	61fb      	str	r3, [r7, #28]
          break;
 8003fea:	e05b      	b.n	80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003fec:	4b8f      	ldr	r3, [pc, #572]	@ (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ff4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ff8:	d156      	bne.n	80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003ffa:	4b8c      	ldr	r3, [pc, #560]	@ (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004002:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004006:	d14f      	bne.n	80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004008:	4b88      	ldr	r3, [pc, #544]	@ (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	0a1b      	lsrs	r3, r3, #8
 800400e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004012:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	fb03 f202 	mul.w	r2, r3, r2
 800401c:	4b83      	ldr	r3, [pc, #524]	@ (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	091b      	lsrs	r3, r3, #4
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	3301      	adds	r3, #1
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800402e:	4b7f      	ldr	r3, [pc, #508]	@ (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	0d5b      	lsrs	r3, r3, #21
 8004034:	f003 0303 	and.w	r3, r3, #3
 8004038:	3301      	adds	r3, #1
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004042:	61fb      	str	r3, [r7, #28]
          break;
 8004044:	e030      	b.n	80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004046:	4b79      	ldr	r3, [pc, #484]	@ (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800404e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004052:	d12b      	bne.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004054:	4b75      	ldr	r3, [pc, #468]	@ (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800405c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004060:	d124      	bne.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004062:	4b72      	ldr	r3, [pc, #456]	@ (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	0a1b      	lsrs	r3, r3, #8
 8004068:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800406c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	fb03 f202 	mul.w	r2, r3, r2
 8004076:	4b6d      	ldr	r3, [pc, #436]	@ (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	091b      	lsrs	r3, r3, #4
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	3301      	adds	r3, #1
 8004082:	fbb2 f3f3 	udiv	r3, r2, r3
 8004086:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004088:	4b68      	ldr	r3, [pc, #416]	@ (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	0d5b      	lsrs	r3, r3, #21
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	3301      	adds	r3, #1
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	fbb2 f3f3 	udiv	r3, r2, r3
 800409c:	61fb      	str	r3, [r7, #28]
          break;
 800409e:	e005      	b.n	80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 80040a0:	bf00      	nop
 80040a2:	e359      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80040a4:	bf00      	nop
 80040a6:	e357      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80040a8:	bf00      	nop
 80040aa:	e355      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80040ac:	bf00      	nop
        break;
 80040ae:	e353      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80040b0:	4b5e      	ldr	r3, [pc, #376]	@ (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d827      	bhi.n	8004112 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80040c2:	a201      	add	r2, pc, #4	@ (adr r2, 80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80040c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c8:	080040d9 	.word	0x080040d9
 80040cc:	080040e1 	.word	0x080040e1
 80040d0:	080040e9 	.word	0x080040e9
 80040d4:	080040fd 	.word	0x080040fd
          frequency = HAL_RCC_GetPCLK2Freq();
 80040d8:	f7ff fa48 	bl	800356c <HAL_RCC_GetPCLK2Freq>
 80040dc:	61f8      	str	r0, [r7, #28]
          break;
 80040de:	e01d      	b.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 80040e0:	f7ff f996 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 80040e4:	61f8      	str	r0, [r7, #28]
          break;
 80040e6:	e019      	b.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80040e8:	4b50      	ldr	r3, [pc, #320]	@ (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040f4:	d10f      	bne.n	8004116 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 80040f6:	4b4f      	ldr	r3, [pc, #316]	@ (8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80040f8:	61fb      	str	r3, [r7, #28]
          break;
 80040fa:	e00c      	b.n	8004116 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80040fc:	4b4b      	ldr	r3, [pc, #300]	@ (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b02      	cmp	r3, #2
 8004108:	d107      	bne.n	800411a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 800410a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800410e:	61fb      	str	r3, [r7, #28]
          break;
 8004110:	e003      	b.n	800411a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8004112:	bf00      	nop
 8004114:	e320      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004116:	bf00      	nop
 8004118:	e31e      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800411a:	bf00      	nop
        break;
 800411c:	e31c      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800411e:	4b43      	ldr	r3, [pc, #268]	@ (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004124:	f003 030c 	and.w	r3, r3, #12
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	2b0c      	cmp	r3, #12
 800412e:	d83a      	bhi.n	80041a6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8004130:	a201      	add	r2, pc, #4	@ (adr r2, 8004138 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8004132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004136:	bf00      	nop
 8004138:	0800416d 	.word	0x0800416d
 800413c:	080041a7 	.word	0x080041a7
 8004140:	080041a7 	.word	0x080041a7
 8004144:	080041a7 	.word	0x080041a7
 8004148:	08004175 	.word	0x08004175
 800414c:	080041a7 	.word	0x080041a7
 8004150:	080041a7 	.word	0x080041a7
 8004154:	080041a7 	.word	0x080041a7
 8004158:	0800417d 	.word	0x0800417d
 800415c:	080041a7 	.word	0x080041a7
 8004160:	080041a7 	.word	0x080041a7
 8004164:	080041a7 	.word	0x080041a7
 8004168:	08004191 	.word	0x08004191
          frequency = HAL_RCC_GetPCLK1Freq();
 800416c:	f7ff f9e8 	bl	8003540 <HAL_RCC_GetPCLK1Freq>
 8004170:	61f8      	str	r0, [r7, #28]
          break;
 8004172:	e01d      	b.n	80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8004174:	f7ff f94c 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 8004178:	61f8      	str	r0, [r7, #28]
          break;
 800417a:	e019      	b.n	80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800417c:	4b2b      	ldr	r3, [pc, #172]	@ (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004188:	d10f      	bne.n	80041aa <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 800418a:	4b2a      	ldr	r3, [pc, #168]	@ (8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800418c:	61fb      	str	r3, [r7, #28]
          break;
 800418e:	e00c      	b.n	80041aa <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004190:	4b26      	ldr	r3, [pc, #152]	@ (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b02      	cmp	r3, #2
 800419c:	d107      	bne.n	80041ae <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 800419e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041a2:	61fb      	str	r3, [r7, #28]
          break;
 80041a4:	e003      	b.n	80041ae <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 80041a6:	bf00      	nop
 80041a8:	e2d6      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80041aa:	bf00      	nop
 80041ac:	e2d4      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80041ae:	bf00      	nop
        break;
 80041b0:	e2d2      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80041b2:	4b1e      	ldr	r3, [pc, #120]	@ (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80041b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	2b30      	cmp	r3, #48	@ 0x30
 80041c2:	d021      	beq.n	8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2b30      	cmp	r3, #48	@ 0x30
 80041c8:	d829      	bhi.n	800421e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	2b20      	cmp	r3, #32
 80041ce:	d011      	beq.n	80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	2b20      	cmp	r3, #32
 80041d4:	d823      	bhi.n	800421e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	2b10      	cmp	r3, #16
 80041e0:	d004      	beq.n	80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 80041e2:	e01c      	b.n	800421e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80041e4:	f7ff f9ac 	bl	8003540 <HAL_RCC_GetPCLK1Freq>
 80041e8:	61f8      	str	r0, [r7, #28]
          break;
 80041ea:	e01d      	b.n	8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 80041ec:	f7ff f910 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 80041f0:	61f8      	str	r0, [r7, #28]
          break;
 80041f2:	e019      	b.n	8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80041f4:	4b0d      	ldr	r3, [pc, #52]	@ (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004200:	d10f      	bne.n	8004222 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8004202:	4b0c      	ldr	r3, [pc, #48]	@ (8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004204:	61fb      	str	r3, [r7, #28]
          break;
 8004206:	e00c      	b.n	8004222 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004208:	4b08      	ldr	r3, [pc, #32]	@ (800422c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800420a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b02      	cmp	r3, #2
 8004214:	d107      	bne.n	8004226 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8004216:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800421a:	61fb      	str	r3, [r7, #28]
          break;
 800421c:	e003      	b.n	8004226 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 800421e:	bf00      	nop
 8004220:	e29a      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004222:	bf00      	nop
 8004224:	e298      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004226:	bf00      	nop
        break;
 8004228:	e296      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800422a:	bf00      	nop
 800422c:	40021000 	.word	0x40021000
 8004230:	0800a998 	.word	0x0800a998
 8004234:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004238:	4b9b      	ldr	r3, [pc, #620]	@ (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800423e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	2bc0      	cmp	r3, #192	@ 0xc0
 8004248:	d021      	beq.n	800428e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	2bc0      	cmp	r3, #192	@ 0xc0
 800424e:	d829      	bhi.n	80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	2b80      	cmp	r3, #128	@ 0x80
 8004254:	d011      	beq.n	800427a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	2b80      	cmp	r3, #128	@ 0x80
 800425a:	d823      	bhi.n	80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	2b40      	cmp	r3, #64	@ 0x40
 8004266:	d004      	beq.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8004268:	e01c      	b.n	80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 800426a:	f7ff f969 	bl	8003540 <HAL_RCC_GetPCLK1Freq>
 800426e:	61f8      	str	r0, [r7, #28]
          break;
 8004270:	e01d      	b.n	80042ae <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004272:	f7ff f8cd 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 8004276:	61f8      	str	r0, [r7, #28]
          break;
 8004278:	e019      	b.n	80042ae <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800427a:	4b8b      	ldr	r3, [pc, #556]	@ (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004282:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004286:	d10f      	bne.n	80042a8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8004288:	4b88      	ldr	r3, [pc, #544]	@ (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800428a:	61fb      	str	r3, [r7, #28]
          break;
 800428c:	e00c      	b.n	80042a8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800428e:	4b86      	ldr	r3, [pc, #536]	@ (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b02      	cmp	r3, #2
 800429a:	d107      	bne.n	80042ac <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 800429c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042a0:	61fb      	str	r3, [r7, #28]
          break;
 80042a2:	e003      	b.n	80042ac <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 80042a4:	bf00      	nop
 80042a6:	e257      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80042a8:	bf00      	nop
 80042aa:	e255      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80042ac:	bf00      	nop
        break;
 80042ae:	e253      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80042b0:	4b7d      	ldr	r3, [pc, #500]	@ (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80042b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042ba:	613b      	str	r3, [r7, #16]
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042c2:	d025      	beq.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042ca:	d82c      	bhi.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042d2:	d013      	beq.n	80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042da:	d824      	bhi.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d004      	beq.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042e8:	d004      	beq.n	80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 80042ea:	e01c      	b.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 80042ec:	f7ff f928 	bl	8003540 <HAL_RCC_GetPCLK1Freq>
 80042f0:	61f8      	str	r0, [r7, #28]
          break;
 80042f2:	e01d      	b.n	8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 80042f4:	f7ff f88c 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 80042f8:	61f8      	str	r0, [r7, #28]
          break;
 80042fa:	e019      	b.n	8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042fc:	4b6a      	ldr	r3, [pc, #424]	@ (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004304:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004308:	d10f      	bne.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 800430a:	4b68      	ldr	r3, [pc, #416]	@ (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800430c:	61fb      	str	r3, [r7, #28]
          break;
 800430e:	e00c      	b.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004310:	4b65      	ldr	r3, [pc, #404]	@ (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b02      	cmp	r3, #2
 800431c:	d107      	bne.n	800432e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 800431e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004322:	61fb      	str	r3, [r7, #28]
          break;
 8004324:	e003      	b.n	800432e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8004326:	bf00      	nop
 8004328:	e216      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800432a:	bf00      	nop
 800432c:	e214      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800432e:	bf00      	nop
        break;
 8004330:	e212      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004332:	4b5d      	ldr	r3, [pc, #372]	@ (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004338:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004344:	d025      	beq.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800434c:	d82c      	bhi.n	80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004354:	d013      	beq.n	800437e <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800435c:	d824      	bhi.n	80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d004      	beq.n	800436e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800436a:	d004      	beq.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 800436c:	e01c      	b.n	80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 800436e:	f7ff f8e7 	bl	8003540 <HAL_RCC_GetPCLK1Freq>
 8004372:	61f8      	str	r0, [r7, #28]
          break;
 8004374:	e01d      	b.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8004376:	f7ff f84b 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 800437a:	61f8      	str	r0, [r7, #28]
          break;
 800437c:	e019      	b.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800437e:	4b4a      	ldr	r3, [pc, #296]	@ (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800438a:	d10f      	bne.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 800438c:	4b47      	ldr	r3, [pc, #284]	@ (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800438e:	61fb      	str	r3, [r7, #28]
          break;
 8004390:	e00c      	b.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004392:	4b45      	ldr	r3, [pc, #276]	@ (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b02      	cmp	r3, #2
 800439e:	d107      	bne.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 80043a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043a4:	61fb      	str	r3, [r7, #28]
          break;
 80043a6:	e003      	b.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 80043a8:	bf00      	nop
 80043aa:	e1d5      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80043ac:	bf00      	nop
 80043ae:	e1d3      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80043b0:	bf00      	nop
        break;
 80043b2:	e1d1      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80043b4:	4b3c      	ldr	r3, [pc, #240]	@ (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80043be:	613b      	str	r3, [r7, #16]
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80043c6:	d00c      	beq.n	80043e2 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80043ce:	d864      	bhi.n	800449a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043d6:	d008      	beq.n	80043ea <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043de:	d030      	beq.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 80043e0:	e05b      	b.n	800449a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 80043e2:	f7ff f815 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 80043e6:	61f8      	str	r0, [r7, #28]
          break;
 80043e8:	e05c      	b.n	80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80043ea:	4b2f      	ldr	r3, [pc, #188]	@ (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043f6:	d152      	bne.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 80043f8:	4b2b      	ldr	r3, [pc, #172]	@ (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d04c      	beq.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004404:	4b28      	ldr	r3, [pc, #160]	@ (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	0a1b      	lsrs	r3, r3, #8
 800440a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800440e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	fb03 f202 	mul.w	r2, r3, r2
 8004418:	4b23      	ldr	r3, [pc, #140]	@ (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	091b      	lsrs	r3, r3, #4
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	3301      	adds	r3, #1
 8004424:	fbb2 f3f3 	udiv	r3, r2, r3
 8004428:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800442a:	4b1f      	ldr	r3, [pc, #124]	@ (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	0e5b      	lsrs	r3, r3, #25
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	3301      	adds	r3, #1
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	fbb2 f3f3 	udiv	r3, r2, r3
 800443e:	61fb      	str	r3, [r7, #28]
          break;
 8004440:	e02d      	b.n	800449e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8004442:	4b19      	ldr	r3, [pc, #100]	@ (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800444a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800444e:	d128      	bne.n	80044a2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8004450:	4b15      	ldr	r3, [pc, #84]	@ (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d022      	beq.n	80044a2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800445c:	4b12      	ldr	r3, [pc, #72]	@ (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	0a1b      	lsrs	r3, r3, #8
 8004462:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004466:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	fb03 f202 	mul.w	r2, r3, r2
 8004470:	4b0d      	ldr	r3, [pc, #52]	@ (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	091b      	lsrs	r3, r3, #4
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	3301      	adds	r3, #1
 800447c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004480:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8004482:	4b09      	ldr	r3, [pc, #36]	@ (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	0e5b      	lsrs	r3, r3, #25
 8004488:	f003 0303 	and.w	r3, r3, #3
 800448c:	3301      	adds	r3, #1
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	fbb2 f3f3 	udiv	r3, r2, r3
 8004496:	61fb      	str	r3, [r7, #28]
          break;
 8004498:	e003      	b.n	80044a2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 800449a:	bf00      	nop
 800449c:	e15c      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800449e:	bf00      	nop
 80044a0:	e15a      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80044a2:	bf00      	nop
        break;
 80044a4:	e158      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80044a6:	bf00      	nop
 80044a8:	40021000 	.word	0x40021000
 80044ac:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80044b0:	4b9d      	ldr	r3, [pc, #628]	@ (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80044b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044ba:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d103      	bne.n	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 80044c2:	f7ff f853 	bl	800356c <HAL_RCC_GetPCLK2Freq>
 80044c6:	61f8      	str	r0, [r7, #28]
        break;
 80044c8:	e146      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 80044ca:	f7fe ffa1 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 80044ce:	61f8      	str	r0, [r7, #28]
        break;
 80044d0:	e142      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80044d2:	4b95      	ldr	r3, [pc, #596]	@ (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80044d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044d8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80044dc:	613b      	str	r3, [r7, #16]
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044e4:	d013      	beq.n	800450e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044ec:	d819      	bhi.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d004      	beq.n	80044fe <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044fa:	d004      	beq.n	8004506 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 80044fc:	e011      	b.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 80044fe:	f7ff f81f 	bl	8003540 <HAL_RCC_GetPCLK1Freq>
 8004502:	61f8      	str	r0, [r7, #28]
          break;
 8004504:	e010      	b.n	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8004506:	f7fe ff83 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 800450a:	61f8      	str	r0, [r7, #28]
          break;
 800450c:	e00c      	b.n	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800450e:	4b86      	ldr	r3, [pc, #536]	@ (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800451a:	d104      	bne.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 800451c:	4b83      	ldr	r3, [pc, #524]	@ (800472c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800451e:	61fb      	str	r3, [r7, #28]
          break;
 8004520:	e001      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8004522:	bf00      	nop
 8004524:	e118      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004526:	bf00      	nop
        break;
 8004528:	e116      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800452a:	4b7f      	ldr	r3, [pc, #508]	@ (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800452c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004530:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800453c:	d013      	beq.n	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004544:	d819      	bhi.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d004      	beq.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004552:	d004      	beq.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8004554:	e011      	b.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004556:	f7fe fff3 	bl	8003540 <HAL_RCC_GetPCLK1Freq>
 800455a:	61f8      	str	r0, [r7, #28]
          break;
 800455c:	e010      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800455e:	f7fe ff57 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 8004562:	61f8      	str	r0, [r7, #28]
          break;
 8004564:	e00c      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004566:	4b70      	ldr	r3, [pc, #448]	@ (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800456e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004572:	d104      	bne.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8004574:	4b6d      	ldr	r3, [pc, #436]	@ (800472c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004576:	61fb      	str	r3, [r7, #28]
          break;
 8004578:	e001      	b.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 800457a:	bf00      	nop
 800457c:	e0ec      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800457e:	bf00      	nop
        break;
 8004580:	e0ea      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004582:	4b69      	ldr	r3, [pc, #420]	@ (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004588:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800458c:	613b      	str	r3, [r7, #16]
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004594:	d013      	beq.n	80045be <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800459c:	d819      	bhi.n	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d004      	beq.n	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045aa:	d004      	beq.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 80045ac:	e011      	b.n	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 80045ae:	f7fe ffc7 	bl	8003540 <HAL_RCC_GetPCLK1Freq>
 80045b2:	61f8      	str	r0, [r7, #28]
          break;
 80045b4:	e010      	b.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 80045b6:	f7fe ff2b 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 80045ba:	61f8      	str	r0, [r7, #28]
          break;
 80045bc:	e00c      	b.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80045be:	4b5a      	ldr	r3, [pc, #360]	@ (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ca:	d104      	bne.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 80045cc:	4b57      	ldr	r3, [pc, #348]	@ (800472c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80045ce:	61fb      	str	r3, [r7, #28]
          break;
 80045d0:	e001      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 80045d2:	bf00      	nop
 80045d4:	e0c0      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80045d6:	bf00      	nop
        break;
 80045d8:	e0be      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80045da:	4b53      	ldr	r3, [pc, #332]	@ (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80045dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80045e4:	613b      	str	r3, [r7, #16]
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80045ec:	d02c      	beq.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80045f4:	d833      	bhi.n	800465e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80045fc:	d01a      	beq.n	8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004604:	d82b      	bhi.n	800465e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d004      	beq.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004612:	d004      	beq.n	800461e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8004614:	e023      	b.n	800465e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004616:	f7fe ff93 	bl	8003540 <HAL_RCC_GetPCLK1Freq>
 800461a:	61f8      	str	r0, [r7, #28]
          break;
 800461c:	e026      	b.n	800466c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800461e:	4b42      	ldr	r3, [pc, #264]	@ (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004620:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b02      	cmp	r3, #2
 800462a:	d11a      	bne.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 800462c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004630:	61fb      	str	r3, [r7, #28]
          break;
 8004632:	e016      	b.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004634:	4b3c      	ldr	r3, [pc, #240]	@ (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800463c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004640:	d111      	bne.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8004642:	4b3a      	ldr	r3, [pc, #232]	@ (800472c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004644:	61fb      	str	r3, [r7, #28]
          break;
 8004646:	e00e      	b.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004648:	4b37      	ldr	r3, [pc, #220]	@ (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800464a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b02      	cmp	r3, #2
 8004654:	d109      	bne.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8004656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800465a:	61fb      	str	r3, [r7, #28]
          break;
 800465c:	e005      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 800465e:	bf00      	nop
 8004660:	e07a      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004662:	bf00      	nop
 8004664:	e078      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004666:	bf00      	nop
 8004668:	e076      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800466a:	bf00      	nop
        break;
 800466c:	e074      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800466e:	4b2e      	ldr	r3, [pc, #184]	@ (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004674:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004678:	613b      	str	r3, [r7, #16]
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004680:	d02c      	beq.n	80046dc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004688:	d833      	bhi.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004690:	d01a      	beq.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004698:	d82b      	bhi.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d004      	beq.n	80046aa <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046a6:	d004      	beq.n	80046b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 80046a8:	e023      	b.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 80046aa:	f7fe ff49 	bl	8003540 <HAL_RCC_GetPCLK1Freq>
 80046ae:	61f8      	str	r0, [r7, #28]
          break;
 80046b0:	e026      	b.n	8004700 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80046b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80046b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d11a      	bne.n	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 80046c0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80046c4:	61fb      	str	r3, [r7, #28]
          break;
 80046c6:	e016      	b.n	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80046c8:	4b17      	ldr	r3, [pc, #92]	@ (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046d4:	d111      	bne.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 80046d6:	4b15      	ldr	r3, [pc, #84]	@ (800472c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80046d8:	61fb      	str	r3, [r7, #28]
          break;
 80046da:	e00e      	b.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80046dc:	4b12      	ldr	r3, [pc, #72]	@ (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80046de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d109      	bne.n	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 80046ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046ee:	61fb      	str	r3, [r7, #28]
          break;
 80046f0:	e005      	b.n	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 80046f2:	bf00      	nop
 80046f4:	e030      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80046f6:	bf00      	nop
 80046f8:	e02e      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80046fa:	bf00      	nop
 80046fc:	e02c      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80046fe:	bf00      	nop
        break;
 8004700:	e02a      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004702:	4b09      	ldr	r3, [pc, #36]	@ (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004708:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d004      	beq.n	800471e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800471a:	d009      	beq.n	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 800471c:	e012      	b.n	8004744 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800471e:	f7fe ff0f 	bl	8003540 <HAL_RCC_GetPCLK1Freq>
 8004722:	61f8      	str	r0, [r7, #28]
          break;
 8004724:	e00e      	b.n	8004744 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8004726:	bf00      	nop
 8004728:	40021000 	.word	0x40021000
 800472c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004730:	4b0c      	ldr	r3, [pc, #48]	@ (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800473c:	d101      	bne.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 800473e:	4b0a      	ldr	r3, [pc, #40]	@ (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004740:	61fb      	str	r3, [r7, #28]
          break;
 8004742:	bf00      	nop
        break;
 8004744:	e008      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004746:	bf00      	nop
 8004748:	e006      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800474a:	bf00      	nop
 800474c:	e004      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800474e:	bf00      	nop
 8004750:	e002      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004752:	bf00      	nop
 8004754:	e000      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004756:	bf00      	nop
    }
  }

  return(frequency);
 8004758:	69fb      	ldr	r3, [r7, #28]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3720      	adds	r7, #32
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	40021000 	.word	0x40021000
 8004768:	00f42400 	.word	0x00f42400

0800476c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800477a:	4b75      	ldr	r3, [pc, #468]	@ (8004950 <RCCEx_PLLSAI1_Config+0x1e4>)
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d018      	beq.n	80047b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004786:	4b72      	ldr	r3, [pc, #456]	@ (8004950 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f003 0203 	and.w	r2, r3, #3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d10d      	bne.n	80047b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
       ||
 800479a:	2b00      	cmp	r3, #0
 800479c:	d009      	beq.n	80047b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800479e:	4b6c      	ldr	r3, [pc, #432]	@ (8004950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	091b      	lsrs	r3, r3, #4
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	1c5a      	adds	r2, r3, #1
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
       ||
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d047      	beq.n	8004842 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	73fb      	strb	r3, [r7, #15]
 80047b6:	e044      	b.n	8004842 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b03      	cmp	r3, #3
 80047be:	d018      	beq.n	80047f2 <RCCEx_PLLSAI1_Config+0x86>
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d825      	bhi.n	8004810 <RCCEx_PLLSAI1_Config+0xa4>
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d002      	beq.n	80047ce <RCCEx_PLLSAI1_Config+0x62>
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d009      	beq.n	80047e0 <RCCEx_PLLSAI1_Config+0x74>
 80047cc:	e020      	b.n	8004810 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047ce:	4b60      	ldr	r3, [pc, #384]	@ (8004950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d11d      	bne.n	8004816 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047de:	e01a      	b.n	8004816 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047e0:	4b5b      	ldr	r3, [pc, #364]	@ (8004950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d116      	bne.n	800481a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047f0:	e013      	b.n	800481a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047f2:	4b57      	ldr	r3, [pc, #348]	@ (8004950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10f      	bne.n	800481e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047fe:	4b54      	ldr	r3, [pc, #336]	@ (8004950 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d109      	bne.n	800481e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800480e:	e006      	b.n	800481e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	73fb      	strb	r3, [r7, #15]
      break;
 8004814:	e004      	b.n	8004820 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004816:	bf00      	nop
 8004818:	e002      	b.n	8004820 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800481a:	bf00      	nop
 800481c:	e000      	b.n	8004820 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800481e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004820:	7bfb      	ldrb	r3, [r7, #15]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10d      	bne.n	8004842 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004826:	4b4a      	ldr	r3, [pc, #296]	@ (8004950 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6819      	ldr	r1, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	3b01      	subs	r3, #1
 8004838:	011b      	lsls	r3, r3, #4
 800483a:	430b      	orrs	r3, r1
 800483c:	4944      	ldr	r1, [pc, #272]	@ (8004950 <RCCEx_PLLSAI1_Config+0x1e4>)
 800483e:	4313      	orrs	r3, r2
 8004840:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004842:	7bfb      	ldrb	r3, [r7, #15]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d17d      	bne.n	8004944 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004848:	4b41      	ldr	r3, [pc, #260]	@ (8004950 <RCCEx_PLLSAI1_Config+0x1e4>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a40      	ldr	r2, [pc, #256]	@ (8004950 <RCCEx_PLLSAI1_Config+0x1e4>)
 800484e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004852:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004854:	f7fc ff4a 	bl	80016ec <HAL_GetTick>
 8004858:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800485a:	e009      	b.n	8004870 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800485c:	f7fc ff46 	bl	80016ec <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d902      	bls.n	8004870 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	73fb      	strb	r3, [r7, #15]
        break;
 800486e:	e005      	b.n	800487c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004870:	4b37      	ldr	r3, [pc, #220]	@ (8004950 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1ef      	bne.n	800485c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d160      	bne.n	8004944 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d111      	bne.n	80048ac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004888:	4b31      	ldr	r3, [pc, #196]	@ (8004950 <RCCEx_PLLSAI1_Config+0x1e4>)
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004890:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6892      	ldr	r2, [r2, #8]
 8004898:	0211      	lsls	r1, r2, #8
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	68d2      	ldr	r2, [r2, #12]
 800489e:	0912      	lsrs	r2, r2, #4
 80048a0:	0452      	lsls	r2, r2, #17
 80048a2:	430a      	orrs	r2, r1
 80048a4:	492a      	ldr	r1, [pc, #168]	@ (8004950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	610b      	str	r3, [r1, #16]
 80048aa:	e027      	b.n	80048fc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d112      	bne.n	80048d8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048b2:	4b27      	ldr	r3, [pc, #156]	@ (8004950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80048ba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	6892      	ldr	r2, [r2, #8]
 80048c2:	0211      	lsls	r1, r2, #8
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6912      	ldr	r2, [r2, #16]
 80048c8:	0852      	lsrs	r2, r2, #1
 80048ca:	3a01      	subs	r2, #1
 80048cc:	0552      	lsls	r2, r2, #21
 80048ce:	430a      	orrs	r2, r1
 80048d0:	491f      	ldr	r1, [pc, #124]	@ (8004950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	610b      	str	r3, [r1, #16]
 80048d6:	e011      	b.n	80048fc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80048e0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6892      	ldr	r2, [r2, #8]
 80048e8:	0211      	lsls	r1, r2, #8
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	6952      	ldr	r2, [r2, #20]
 80048ee:	0852      	lsrs	r2, r2, #1
 80048f0:	3a01      	subs	r2, #1
 80048f2:	0652      	lsls	r2, r2, #25
 80048f4:	430a      	orrs	r2, r1
 80048f6:	4916      	ldr	r1, [pc, #88]	@ (8004950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048fc:	4b14      	ldr	r3, [pc, #80]	@ (8004950 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a13      	ldr	r2, [pc, #76]	@ (8004950 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004902:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004906:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004908:	f7fc fef0 	bl	80016ec <HAL_GetTick>
 800490c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800490e:	e009      	b.n	8004924 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004910:	f7fc feec 	bl	80016ec <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d902      	bls.n	8004924 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	73fb      	strb	r3, [r7, #15]
          break;
 8004922:	e005      	b.n	8004930 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004924:	4b0a      	ldr	r3, [pc, #40]	@ (8004950 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0ef      	beq.n	8004910 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d106      	bne.n	8004944 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004936:	4b06      	ldr	r3, [pc, #24]	@ (8004950 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004938:	691a      	ldr	r2, [r3, #16]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	4904      	ldr	r1, [pc, #16]	@ (8004950 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004940:	4313      	orrs	r3, r2
 8004942:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004944:	7bfb      	ldrb	r3, [r7, #15]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40021000 	.word	0x40021000

08004954 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800495e:	2300      	movs	r3, #0
 8004960:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004962:	4b6a      	ldr	r3, [pc, #424]	@ (8004b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d018      	beq.n	80049a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800496e:	4b67      	ldr	r3, [pc, #412]	@ (8004b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f003 0203 	and.w	r2, r3, #3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d10d      	bne.n	800499a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
       ||
 8004982:	2b00      	cmp	r3, #0
 8004984:	d009      	beq.n	800499a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004986:	4b61      	ldr	r3, [pc, #388]	@ (8004b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	091b      	lsrs	r3, r3, #4
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
       ||
 8004996:	429a      	cmp	r2, r3
 8004998:	d047      	beq.n	8004a2a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	73fb      	strb	r3, [r7, #15]
 800499e:	e044      	b.n	8004a2a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	d018      	beq.n	80049da <RCCEx_PLLSAI2_Config+0x86>
 80049a8:	2b03      	cmp	r3, #3
 80049aa:	d825      	bhi.n	80049f8 <RCCEx_PLLSAI2_Config+0xa4>
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d002      	beq.n	80049b6 <RCCEx_PLLSAI2_Config+0x62>
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d009      	beq.n	80049c8 <RCCEx_PLLSAI2_Config+0x74>
 80049b4:	e020      	b.n	80049f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049b6:	4b55      	ldr	r3, [pc, #340]	@ (8004b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d11d      	bne.n	80049fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049c6:	e01a      	b.n	80049fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049c8:	4b50      	ldr	r3, [pc, #320]	@ (8004b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d116      	bne.n	8004a02 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049d8:	e013      	b.n	8004a02 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049da:	4b4c      	ldr	r3, [pc, #304]	@ (8004b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10f      	bne.n	8004a06 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049e6:	4b49      	ldr	r3, [pc, #292]	@ (8004b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d109      	bne.n	8004a06 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049f6:	e006      	b.n	8004a06 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	73fb      	strb	r3, [r7, #15]
      break;
 80049fc:	e004      	b.n	8004a08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049fe:	bf00      	nop
 8004a00:	e002      	b.n	8004a08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a02:	bf00      	nop
 8004a04:	e000      	b.n	8004a08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a06:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10d      	bne.n	8004a2a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a0e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6819      	ldr	r1, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	430b      	orrs	r3, r1
 8004a24:	4939      	ldr	r1, [pc, #228]	@ (8004b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a2a:	7bfb      	ldrb	r3, [r7, #15]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d167      	bne.n	8004b00 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a30:	4b36      	ldr	r3, [pc, #216]	@ (8004b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a35      	ldr	r2, [pc, #212]	@ (8004b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a3c:	f7fc fe56 	bl	80016ec <HAL_GetTick>
 8004a40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a42:	e009      	b.n	8004a58 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a44:	f7fc fe52 	bl	80016ec <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d902      	bls.n	8004a58 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	73fb      	strb	r3, [r7, #15]
        break;
 8004a56:	e005      	b.n	8004a64 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a58:	4b2c      	ldr	r3, [pc, #176]	@ (8004b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1ef      	bne.n	8004a44 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d14a      	bne.n	8004b00 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d111      	bne.n	8004a94 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a70:	4b26      	ldr	r3, [pc, #152]	@ (8004b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004a78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6892      	ldr	r2, [r2, #8]
 8004a80:	0211      	lsls	r1, r2, #8
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	68d2      	ldr	r2, [r2, #12]
 8004a86:	0912      	lsrs	r2, r2, #4
 8004a88:	0452      	lsls	r2, r2, #17
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	491f      	ldr	r1, [pc, #124]	@ (8004b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	614b      	str	r3, [r1, #20]
 8004a92:	e011      	b.n	8004ab8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a94:	4b1d      	ldr	r3, [pc, #116]	@ (8004b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004a9c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6892      	ldr	r2, [r2, #8]
 8004aa4:	0211      	lsls	r1, r2, #8
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6912      	ldr	r2, [r2, #16]
 8004aaa:	0852      	lsrs	r2, r2, #1
 8004aac:	3a01      	subs	r2, #1
 8004aae:	0652      	lsls	r2, r2, #25
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	4916      	ldr	r1, [pc, #88]	@ (8004b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ab8:	4b14      	ldr	r3, [pc, #80]	@ (8004b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a13      	ldr	r2, [pc, #76]	@ (8004b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004abe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ac2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac4:	f7fc fe12 	bl	80016ec <HAL_GetTick>
 8004ac8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004aca:	e009      	b.n	8004ae0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004acc:	f7fc fe0e 	bl	80016ec <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d902      	bls.n	8004ae0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	73fb      	strb	r3, [r7, #15]
          break;
 8004ade:	e005      	b.n	8004aec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8004b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0ef      	beq.n	8004acc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d106      	bne.n	8004b00 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004af2:	4b06      	ldr	r3, [pc, #24]	@ (8004b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af4:	695a      	ldr	r2, [r3, #20]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	4904      	ldr	r1, [pc, #16]	@ (8004b0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40021000 	.word	0x40021000

08004b10 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b089      	sub	sp, #36	@ 0x24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004b22:	2300      	movs	r3, #0
 8004b24:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b2c:	d10c      	bne.n	8004b48 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004b2e:	4b6e      	ldr	r3, [pc, #440]	@ (8004ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b34:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004b38:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004b40:	d112      	bne.n	8004b68 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004b42:	4b6a      	ldr	r3, [pc, #424]	@ (8004cec <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004b44:	61fb      	str	r3, [r7, #28]
 8004b46:	e00f      	b.n	8004b68 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b4e:	d10b      	bne.n	8004b68 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004b50:	4b65      	ldr	r3, [pc, #404]	@ (8004ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b56:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004b5a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004b62:	d101      	bne.n	8004b68 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004b64:	4b61      	ldr	r3, [pc, #388]	@ (8004cec <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004b66:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f040 80b4 	bne.w	8004cd8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004b7a:	d003      	beq.n	8004b84 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b82:	d135      	bne.n	8004bf0 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004b84:	4b58      	ldr	r3, [pc, #352]	@ (8004ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b90:	f040 80a1 	bne.w	8004cd6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8004b94:	4b54      	ldr	r3, [pc, #336]	@ (8004ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 809a 	beq.w	8004cd6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004ba2:	4b51      	ldr	r3, [pc, #324]	@ (8004ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	091b      	lsrs	r3, r3, #4
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	3301      	adds	r3, #1
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004bb6:	4b4c      	ldr	r3, [pc, #304]	@ (8004ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	0a1b      	lsrs	r3, r3, #8
 8004bbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bc0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10a      	bne.n	8004bde <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004bc8:	4b47      	ldr	r3, [pc, #284]	@ (8004ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8004bd4:	2311      	movs	r3, #17
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	e001      	b.n	8004bde <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8004bda:	2307      	movs	r3, #7
 8004bdc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	fb03 f202 	mul.w	r2, r3, r2
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bec:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004bee:	e072      	b.n	8004cd6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d133      	bne.n	8004c5e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004bf6:	4b3c      	ldr	r3, [pc, #240]	@ (8004ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c02:	d169      	bne.n	8004cd8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004c04:	4b38      	ldr	r3, [pc, #224]	@ (8004ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d063      	beq.n	8004cd8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004c10:	4b35      	ldr	r3, [pc, #212]	@ (8004ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	091b      	lsrs	r3, r3, #4
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c22:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004c24:	4b30      	ldr	r3, [pc, #192]	@ (8004ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	0a1b      	lsrs	r3, r3, #8
 8004c2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c2e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10a      	bne.n	8004c4c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004c36:	4b2c      	ldr	r3, [pc, #176]	@ (8004ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8004c42:	2311      	movs	r3, #17
 8004c44:	617b      	str	r3, [r7, #20]
 8004c46:	e001      	b.n	8004c4c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8004c48:	2307      	movs	r3, #7
 8004c4a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	fb03 f202 	mul.w	r2, r3, r2
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5a:	61fb      	str	r3, [r7, #28]
 8004c5c:	e03c      	b.n	8004cd8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c64:	d003      	beq.n	8004c6e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c6c:	d134      	bne.n	8004cd8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8004c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c7a:	d12d      	bne.n	8004cd8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d027      	beq.n	8004cd8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004c88:	4b17      	ldr	r3, [pc, #92]	@ (8004ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	091b      	lsrs	r3, r3, #4
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	3301      	adds	r3, #1
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004c9c:	4b12      	ldr	r3, [pc, #72]	@ (8004ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	0a1b      	lsrs	r3, r3, #8
 8004ca2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ca6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10a      	bne.n	8004cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8004cae:	4b0e      	ldr	r3, [pc, #56]	@ (8004ce8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8004cba:	2311      	movs	r3, #17
 8004cbc:	617b      	str	r3, [r7, #20]
 8004cbe:	e001      	b.n	8004cc4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8004cc0:	2307      	movs	r3, #7
 8004cc2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	fb03 f202 	mul.w	r2, r3, r2
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd2:	61fb      	str	r3, [r7, #28]
 8004cd4:	e000      	b.n	8004cd8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004cd6:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004cd8:	69fb      	ldr	r3, [r7, #28]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3724      	adds	r7, #36	@ 0x24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	001fff68 	.word	0x001fff68

08004cf0 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d904      	bls.n	8004d0e <HAL_SAI_InitProtocol+0x1e>
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	3b03      	subs	r3, #3
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d812      	bhi.n	8004d32 <HAL_SAI_InitProtocol+0x42>
 8004d0c:	e008      	b.n	8004d20 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	68b9      	ldr	r1, [r7, #8]
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 fba3 	bl	8005460 <SAI_InitI2S>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d1e:	e00b      	b.n	8004d38 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	68b9      	ldr	r1, [r7, #8]
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f000 fc4c 	bl	80055c4 <SAI_InitPCM>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d30:	e002      	b.n	8004d38 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	75fb      	strb	r3, [r7, #23]
      break;
 8004d36:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d38:	7dfb      	ldrb	r3, [r7, #23]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d104      	bne.n	8004d48 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 f808 	bl	8004d54 <HAL_SAI_Init>
 8004d44:	4603      	mov	r3, r0
 8004d46:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b088      	sub	sp, #32
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e155      	b.n	8005012 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d106      	bne.n	8004d80 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7fc f87a 	bl	8000e74 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 fca1 	bl	80056c8 <SAI_Disable>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e140      	b.n	8005012 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d00c      	beq.n	8004dba <HAL_SAI_Init+0x66>
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d80d      	bhi.n	8004dc0 <HAL_SAI_Init+0x6c>
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <HAL_SAI_Init+0x5a>
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d003      	beq.n	8004db4 <HAL_SAI_Init+0x60>
 8004dac:	e008      	b.n	8004dc0 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004dae:	2300      	movs	r3, #0
 8004db0:	61fb      	str	r3, [r7, #28]
      break;
 8004db2:	e008      	b.n	8004dc6 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004db4:	2310      	movs	r3, #16
 8004db6:	61fb      	str	r3, [r7, #28]
      break;
 8004db8:	e005      	b.n	8004dc6 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004dba:	2320      	movs	r3, #32
 8004dbc:	61fb      	str	r3, [r7, #28]
      break;
 8004dbe:	e002      	b.n	8004dc6 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	61fb      	str	r3, [r7, #28]
      break;
 8004dc4:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d81d      	bhi.n	8004e0a <HAL_SAI_Init+0xb6>
 8004dce:	a201      	add	r2, pc, #4	@ (adr r2, 8004dd4 <HAL_SAI_Init+0x80>)
 8004dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd4:	08004de5 	.word	0x08004de5
 8004dd8:	08004deb 	.word	0x08004deb
 8004ddc:	08004df3 	.word	0x08004df3
 8004de0:	08004dfb 	.word	0x08004dfb
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	617b      	str	r3, [r7, #20]
      break;
 8004de8:	e012      	b.n	8004e10 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004dea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004dee:	617b      	str	r3, [r7, #20]
      break;
 8004df0:	e00e      	b.n	8004e10 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004df2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004df6:	617b      	str	r3, [r7, #20]
      break;
 8004df8:	e00a      	b.n	8004e10 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004dfa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004dfe:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f043 0301 	orr.w	r3, r3, #1
 8004e06:	61fb      	str	r3, [r7, #28]
      break;
 8004e08:	e002      	b.n	8004e10 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	617b      	str	r3, [r7, #20]
      break;
 8004e0e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a81      	ldr	r2, [pc, #516]	@ (800501c <HAL_SAI_Init+0x2c8>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d004      	beq.n	8004e24 <HAL_SAI_Init+0xd0>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a80      	ldr	r2, [pc, #512]	@ (8005020 <HAL_SAI_Init+0x2cc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d103      	bne.n	8004e2c <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8004e24:	4a7f      	ldr	r2, [pc, #508]	@ (8005024 <HAL_SAI_Init+0x2d0>)
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	e002      	b.n	8004e32 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004e2c:	4a7e      	ldr	r2, [pc, #504]	@ (8005028 <HAL_SAI_Init+0x2d4>)
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d041      	beq.n	8004ebe <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a77      	ldr	r2, [pc, #476]	@ (800501c <HAL_SAI_Init+0x2c8>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d004      	beq.n	8004e4e <HAL_SAI_Init+0xfa>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a75      	ldr	r2, [pc, #468]	@ (8005020 <HAL_SAI_Init+0x2cc>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d105      	bne.n	8004e5a <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004e4e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004e52:	f7fe ff1d 	bl	8003c90 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e56:	6138      	str	r0, [r7, #16]
 8004e58:	e004      	b.n	8004e64 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004e5a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004e5e:	f7fe ff17 	bl	8003c90 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e62:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	4613      	mov	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	461a      	mov	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	025b      	lsls	r3, r3, #9
 8004e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7a:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4a6b      	ldr	r2, [pc, #428]	@ (800502c <HAL_SAI_Init+0x2d8>)
 8004e80:	fba2 2303 	umull	r2, r3, r2, r3
 8004e84:	08da      	lsrs	r2, r3, #3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004e8a:	68f9      	ldr	r1, [r7, #12]
 8004e8c:	4b67      	ldr	r3, [pc, #412]	@ (800502c <HAL_SAI_Init+0x2d8>)
 8004e8e:	fba3 2301 	umull	r2, r3, r3, r1
 8004e92:	08da      	lsrs	r2, r3, #3
 8004e94:	4613      	mov	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	1aca      	subs	r2, r1, r3
 8004e9e:	2a08      	cmp	r2, #8
 8004ea0:	d904      	bls.n	8004eac <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d104      	bne.n	8004ebe <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	085a      	lsrs	r2, r3, #1
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_SAI_Init+0x17a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d109      	bne.n	8004ee2 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <HAL_SAI_Init+0x186>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	e001      	b.n	8004ede <HAL_SAI_Init+0x18a>
 8004eda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ede:	61bb      	str	r3, [r7, #24]
 8004ee0:	e008      	b.n	8004ef4 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d102      	bne.n	8004ef0 <HAL_SAI_Init+0x19c>
 8004eea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004eee:	e000      	b.n	8004ef2 <HAL_SAI_Init+0x19e>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6819      	ldr	r1, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	4b4c      	ldr	r3, [pc, #304]	@ (8005030 <HAL_SAI_Init+0x2dc>)
 8004f00:	400b      	ands	r3, r1
 8004f02:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6819      	ldr	r1, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f12:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f18:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 8004f2c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004f38:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	051b      	lsls	r3, r3, #20
 8004f40:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6812      	ldr	r2, [r2, #0]
 8004f54:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004f58:	f023 030f 	bic.w	r3, r3, #15
 8004f5c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6859      	ldr	r1, [r3, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699a      	ldr	r2, [r3, #24]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6899      	ldr	r1, [r3, #8]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	4b2b      	ldr	r3, [pc, #172]	@ (8005034 <HAL_SAI_Init+0x2e0>)
 8004f88:	400b      	ands	r3, r1
 8004f8a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6899      	ldr	r1, [r3, #8]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f96:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004f9c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8004fa2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8004fa8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004fb2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68d9      	ldr	r1, [r3, #12]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8004fca:	400b      	ands	r3, r1
 8004fcc:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68d9      	ldr	r1, [r3, #12]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fdc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fe2:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004fe4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fea:	3b01      	subs	r3, #1
 8004fec:	021b      	lsls	r3, r3, #8
 8004fee:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3720      	adds	r7, #32
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	40015404 	.word	0x40015404
 8005020:	40015424 	.word	0x40015424
 8005024:	40015400 	.word	0x40015400
 8005028:	40015800 	.word	0x40015800
 800502c:	cccccccd 	.word	0xcccccccd
 8005030:	ff05c010 	.word	0xff05c010
 8005034:	fff88000 	.word	0xfff88000

08005038 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005040:	2300      	movs	r3, #0
 8005042:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800504a:	2b01      	cmp	r3, #1
 800504c:	d101      	bne.n	8005052 <HAL_SAI_Abort+0x1a>
 800504e:	2302      	movs	r3, #2
 8005050:	e053      	b.n	80050fa <HAL_SAI_Abort+0xc2>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 fb34 	bl	80056c8 <SAI_Disable>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005074:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005078:	d125      	bne.n	80050c6 <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005088:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b12      	cmp	r3, #18
 8005094:	d108      	bne.n	80050a8 <HAL_SAI_Abort+0x70>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800509a:	2b00      	cmp	r3, #0
 800509c:	d004      	beq.n	80050a8 <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fc fcc8 	bl	8001a38 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b22      	cmp	r3, #34	@ 0x22
 80050b2:	d108      	bne.n	80050c6 <HAL_SAI_Abort+0x8e>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d004      	beq.n	80050c6 <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fc fcb9 	bl	8001a38 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2200      	movs	r2, #0
 80050cc:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f04f 32ff 	mov.w	r2, #4294967295
 80050d6:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0208 	orr.w	r2, r2, #8
 80050e6:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
	...

08005104 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 8192 	beq.w	800543e <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f003 0308 	and.w	r3, r3, #8
 8005138:	2b00      	cmp	r3, #0
 800513a:	d009      	beq.n	8005150 <HAL_SAI_IRQHandler+0x4c>
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f003 0308 	and.w	r3, r3, #8
 8005142:	2b00      	cmp	r3, #0
 8005144:	d004      	beq.n	8005150 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	4798      	blx	r3
 800514e:	e176      	b.n	800543e <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d01e      	beq.n	8005198 <HAL_SAI_IRQHandler+0x94>
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	d019      	beq.n	8005198 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2201      	movs	r2, #1
 800516a:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b22      	cmp	r3, #34	@ 0x22
 8005176:	d101      	bne.n	800517c <HAL_SAI_IRQHandler+0x78>
 8005178:	2301      	movs	r3, #1
 800517a:	e000      	b.n	800517e <HAL_SAI_IRQHandler+0x7a>
 800517c:	2302      	movs	r3, #2
 800517e:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	431a      	orrs	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f95b 	bl	800544c <HAL_SAI_ErrorCallback>
 8005196:	e152      	b.n	800543e <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d011      	beq.n	80051c6 <HAL_SAI_IRQHandler+0xc2>
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00c      	beq.n	80051c6 <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2202      	movs	r2, #2
 80051b2:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 8140 	beq.w	800543e <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051c2:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 80051c4:	e13b      	b.n	800543e <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f003 0320 	and.w	r3, r3, #32
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d055      	beq.n	800527c <HAL_SAI_IRQHandler+0x178>
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f003 0320 	and.w	r3, r3, #32
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d050      	beq.n	800527c <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2220      	movs	r2, #32
 80051e0:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051e8:	f043 0204 	orr.w	r2, r3, #4
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d038      	beq.n	800526e <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005200:	2b00      	cmp	r3, #0
 8005202:	d016      	beq.n	8005232 <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005208:	4a8f      	ldr	r2, [pc, #572]	@ (8005448 <HAL_SAI_IRQHandler+0x344>)
 800520a:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005210:	4618      	mov	r0, r3
 8005212:	f7fc fc4f 	bl	8001ab4 <HAL_DMA_Abort_IT>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00a      	beq.n	8005232 <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005222:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f90d 	bl	800544c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005236:	2b00      	cmp	r3, #0
 8005238:	f000 80fc 	beq.w	8005434 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005240:	4a81      	ldr	r2, [pc, #516]	@ (8005448 <HAL_SAI_IRQHandler+0x344>)
 8005242:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005248:	4618      	mov	r0, r3
 800524a:	f7fc fc33 	bl	8001ab4 <HAL_DMA_Abort_IT>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	f000 80ef 	beq.w	8005434 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800525c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f8f0 	bl	800544c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800526c:	e0e2      	b.n	8005434 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7ff fee2 	bl	8005038 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f8e9 	bl	800544c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800527a:	e0db      	b.n	8005434 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005282:	2b00      	cmp	r3, #0
 8005284:	d055      	beq.n	8005332 <HAL_SAI_IRQHandler+0x22e>
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800528c:	2b00      	cmp	r3, #0
 800528e:	d050      	beq.n	8005332 <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2240      	movs	r2, #64	@ 0x40
 8005296:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800529e:	f043 0208 	orr.w	r2, r3, #8
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d038      	beq.n	8005324 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d016      	beq.n	80052e8 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052be:	4a62      	ldr	r2, [pc, #392]	@ (8005448 <HAL_SAI_IRQHandler+0x344>)
 80052c0:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fc fbf4 	bl	8001ab4 <HAL_DMA_Abort_IT>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00a      	beq.n	80052e8 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052d8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f8b2 	bl	800544c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 80a3 	beq.w	8005438 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f6:	4a54      	ldr	r2, [pc, #336]	@ (8005448 <HAL_SAI_IRQHandler+0x344>)
 80052f8:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fc fbd8 	bl	8001ab4 <HAL_DMA_Abort_IT>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 8096 	beq.w	8005438 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005312:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f895 	bl	800544c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005322:	e089      	b.n	8005438 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7ff fe87 	bl	8005038 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f88e 	bl	800544c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005330:	e082      	b.n	8005438 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	2b00      	cmp	r3, #0
 800533a:	d061      	beq.n	8005400 <HAL_SAI_IRQHandler+0x2fc>
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	f003 0304 	and.w	r3, r3, #4
 8005342:	2b00      	cmp	r3, #0
 8005344:	d05c      	beq.n	8005400 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2204      	movs	r2, #4
 800534c:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005354:	f043 0220 	orr.w	r2, r3, #32
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d036      	beq.n	80053d6 <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800536c:	2b00      	cmp	r3, #0
 800536e:	d016      	beq.n	800539e <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005374:	4a34      	ldr	r2, [pc, #208]	@ (8005448 <HAL_SAI_IRQHandler+0x344>)
 8005376:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800537c:	4618      	mov	r0, r3
 800537e:	f7fc fb99 	bl	8001ab4 <HAL_DMA_Abort_IT>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00a      	beq.n	800539e <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800538e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f857 	bl	800544c <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d04a      	beq.n	800543c <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053aa:	4a27      	ldr	r2, [pc, #156]	@ (8005448 <HAL_SAI_IRQHandler+0x344>)
 80053ac:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fc fb7e 	bl	8001ab4 <HAL_DMA_Abort_IT>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d03e      	beq.n	800543c <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053c4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f83c 	bl	800544c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80053d4:	e032      	b.n	800543c <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2200      	movs	r2, #0
 80053dc:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f04f 32ff 	mov.w	r2, #4294967295
 80053e6:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f827 	bl	800544c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80053fe:	e01d      	b.n	800543c <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f003 0310 	and.w	r3, r3, #16
 8005406:	2b00      	cmp	r3, #0
 8005408:	d019      	beq.n	800543e <HAL_SAI_IRQHandler+0x33a>
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f003 0310 	and.w	r3, r3, #16
 8005410:	2b00      	cmp	r3, #0
 8005412:	d014      	beq.n	800543e <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2210      	movs	r2, #16
 800541a:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005422:	f043 0210 	orr.w	r2, r3, #16
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f80d 	bl	800544c <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8005432:	e004      	b.n	800543e <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005434:	bf00      	nop
 8005436:	e002      	b.n	800543e <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005438:	bf00      	nop
 800543a:	e000      	b.n	800543e <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800543c:	bf00      	nop
}
 800543e:	bf00      	nop
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	0800573d 	.word	0x0800573d

0800544c <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800546e:	2300      	movs	r3, #0
 8005470:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <SAI_InitI2S+0x2e>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2b02      	cmp	r3, #2
 800548c:	d103      	bne.n	8005496 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005494:	e002      	b.n	800549c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2201      	movs	r2, #1
 800549a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80054a2:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80054aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	683a      	ldr	r2, [r7, #0]
 80054b6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e077      	b.n	80055b6 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d107      	bne.n	80054dc <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80054d8:	651a      	str	r2, [r3, #80]	@ 0x50
 80054da:	e006      	b.n	80054ea <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80054e2:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b03      	cmp	r3, #3
 80054ee:	d84f      	bhi.n	8005590 <SAI_InitI2S+0x130>
 80054f0:	a201      	add	r2, pc, #4	@ (adr r2, 80054f8 <SAI_InitI2S+0x98>)
 80054f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f6:	bf00      	nop
 80054f8:	08005509 	.word	0x08005509
 80054fc:	0800552b 	.word	0x0800552b
 8005500:	0800554d 	.word	0x0800554d
 8005504:	0800556f 	.word	0x0800556f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2280      	movs	r2, #128	@ 0x80
 800550c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	085b      	lsrs	r3, r3, #1
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	085b      	lsrs	r3, r3, #1
 800551c:	011a      	lsls	r2, r3, #4
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2240      	movs	r2, #64	@ 0x40
 8005526:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005528:	e035      	b.n	8005596 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2280      	movs	r2, #128	@ 0x80
 800552e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	085b      	lsrs	r3, r3, #1
 8005534:	019a      	lsls	r2, r3, #6
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	085b      	lsrs	r3, r3, #1
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2280      	movs	r2, #128	@ 0x80
 8005548:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800554a:	e024      	b.n	8005596 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	22c0      	movs	r2, #192	@ 0xc0
 8005550:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	085b      	lsrs	r3, r3, #1
 8005556:	019a      	lsls	r2, r3, #6
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	085b      	lsrs	r3, r3, #1
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2280      	movs	r2, #128	@ 0x80
 800556a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800556c:	e013      	b.n	8005596 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	22e0      	movs	r2, #224	@ 0xe0
 8005572:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	085b      	lsrs	r3, r3, #1
 8005578:	019a      	lsls	r2, r3, #6
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	085b      	lsrs	r3, r3, #1
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2280      	movs	r2, #128	@ 0x80
 800558c:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800558e:	e002      	b.n	8005596 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	75fb      	strb	r3, [r7, #23]
      break;
 8005594:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2b02      	cmp	r3, #2
 800559a:	d10b      	bne.n	80055b4 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d102      	bne.n	80055a8 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2210      	movs	r2, #16
 80055a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d102      	bne.n	80055b4 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2208      	movs	r2, #8
 80055b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 80055b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	371c      	adds	r7, #28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop

080055c4 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
 80055d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055d2:	2300      	movs	r3, #0
 80055d4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <SAI_InitPCM+0x2e>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d103      	bne.n	80055fa <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2201      	movs	r2, #1
 80055f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80055f8:	e002      	b.n	8005600 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800560c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005614:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005628:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2b04      	cmp	r3, #4
 800562e:	d103      	bne.n	8005638 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2201      	movs	r2, #1
 8005634:	645a      	str	r2, [r3, #68]	@ 0x44
 8005636:	e002      	b.n	800563e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	220d      	movs	r2, #13
 800563c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b03      	cmp	r3, #3
 8005642:	d837      	bhi.n	80056b4 <SAI_InitPCM+0xf0>
 8005644:	a201      	add	r2, pc, #4	@ (adr r2, 800564c <SAI_InitPCM+0x88>)
 8005646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564a:	bf00      	nop
 800564c:	0800565d 	.word	0x0800565d
 8005650:	08005673 	.word	0x08005673
 8005654:	08005689 	.word	0x08005689
 8005658:	0800569f 	.word	0x0800569f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2280      	movs	r2, #128	@ 0x80
 8005660:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	011a      	lsls	r2, r3, #4
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2240      	movs	r2, #64	@ 0x40
 800566e:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005670:	e023      	b.n	80056ba <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2280      	movs	r2, #128	@ 0x80
 8005676:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2280      	movs	r2, #128	@ 0x80
 8005684:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005686:	e018      	b.n	80056ba <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	22c0      	movs	r2, #192	@ 0xc0
 800568c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2280      	movs	r2, #128	@ 0x80
 800569a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800569c:	e00d      	b.n	80056ba <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	22e0      	movs	r2, #224	@ 0xe0
 80056a2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2280      	movs	r2, #128	@ 0x80
 80056b0:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80056b2:	e002      	b.n	80056ba <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	75fb      	strb	r3, [r7, #23]
      break;
 80056b8:	bf00      	nop
  }

  return status;
 80056ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	371c      	adds	r7, #28
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80056d0:	4b18      	ldr	r3, [pc, #96]	@ (8005734 <SAI_Disable+0x6c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a18      	ldr	r2, [pc, #96]	@ (8005738 <SAI_Disable+0x70>)
 80056d6:	fba2 2303 	umull	r2, r3, r2, r3
 80056da:	0b1b      	lsrs	r3, r3, #12
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80056f2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10a      	bne.n	8005710 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005700:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	72fb      	strb	r3, [r7, #11]
      break;
 800570e:	e009      	b.n	8005724 <SAI_Disable+0x5c>
    }
    count--;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3b01      	subs	r3, #1
 8005714:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1e7      	bne.n	80056f4 <SAI_Disable+0x2c>

  return status;
 8005724:	7afb      	ldrb	r3, [r7, #11]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	20000000 	.word	0x20000000
 8005738:	95cbec1b 	.word	0x95cbec1b

0800573c <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005748:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005758:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2200      	movs	r2, #0
 8005760:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f04f 32ff 	mov.w	r2, #4294967295
 800576a:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005772:	2b20      	cmp	r3, #32
 8005774:	d00a      	beq.n	800578c <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f7ff ffa6 	bl	80056c8 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0208 	orr.w	r2, r2, #8
 800578a:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f7ff fe55 	bl	800544c <HAL_SAI_ErrorCallback>
#endif
}
 80057a2:	bf00      	nop
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b084      	sub	sp, #16
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e095      	b.n	80058e8 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d108      	bne.n	80057d6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057cc:	d009      	beq.n	80057e2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	61da      	str	r2, [r3, #28]
 80057d4:	e005      	b.n	80057e2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d106      	bne.n	8005802 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7fb fc83 	bl	8001108 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2202      	movs	r2, #2
 8005806:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005818:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005822:	d902      	bls.n	800582a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005824:	2300      	movs	r3, #0
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	e002      	b.n	8005830 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800582a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800582e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005838:	d007      	beq.n	800584a <HAL_SPI_Init+0xa0>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005842:	d002      	beq.n	800584a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800585a:	431a      	orrs	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	431a      	orrs	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	431a      	orrs	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005878:	431a      	orrs	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005882:	431a      	orrs	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800588c:	ea42 0103 	orr.w	r1, r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005894:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	430a      	orrs	r2, r1
 800589e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	0c1b      	lsrs	r3, r3, #16
 80058a6:	f003 0204 	and.w	r2, r3, #4
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ae:	f003 0310 	and.w	r3, r3, #16
 80058b2:	431a      	orrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058b8:	f003 0308 	and.w	r3, r3, #8
 80058bc:	431a      	orrs	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80058c6:	ea42 0103 	orr.w	r1, r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b088      	sub	sp, #32
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	603b      	str	r3, [r7, #0]
 80058fc:	4613      	mov	r3, r2
 80058fe:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005900:	f7fb fef4 	bl	80016ec <HAL_GetTick>
 8005904:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005906:	88fb      	ldrh	r3, [r7, #6]
 8005908:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b01      	cmp	r3, #1
 8005914:	d001      	beq.n	800591a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005916:	2302      	movs	r3, #2
 8005918:	e15c      	b.n	8005bd4 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <HAL_SPI_Transmit+0x36>
 8005920:	88fb      	ldrh	r3, [r7, #6]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e154      	b.n	8005bd4 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_SPI_Transmit+0x48>
 8005934:	2302      	movs	r3, #2
 8005936:	e14d      	b.n	8005bd4 <HAL_SPI_Transmit+0x2e4>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2203      	movs	r2, #3
 8005944:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	88fa      	ldrh	r2, [r7, #6]
 8005958:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	88fa      	ldrh	r2, [r7, #6]
 800595e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800598a:	d10f      	bne.n	80059ac <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800599a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b6:	2b40      	cmp	r3, #64	@ 0x40
 80059b8:	d007      	beq.n	80059ca <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80059d2:	d952      	bls.n	8005a7a <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d002      	beq.n	80059e2 <HAL_SPI_Transmit+0xf2>
 80059dc:	8b7b      	ldrh	r3, [r7, #26]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d145      	bne.n	8005a6e <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e6:	881a      	ldrh	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f2:	1c9a      	adds	r2, r3, #2
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	3b01      	subs	r3, #1
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a06:	e032      	b.n	8005a6e <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d112      	bne.n	8005a3c <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1a:	881a      	ldrh	r2, [r3, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a26:	1c9a      	adds	r2, r3, #2
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	3b01      	subs	r3, #1
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a3a:	e018      	b.n	8005a6e <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a3c:	f7fb fe56 	bl	80016ec <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d803      	bhi.n	8005a54 <HAL_SPI_Transmit+0x164>
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a52:	d102      	bne.n	8005a5a <HAL_SPI_Transmit+0x16a>
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d109      	bne.n	8005a6e <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e0b2      	b.n	8005bd4 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1c7      	bne.n	8005a08 <HAL_SPI_Transmit+0x118>
 8005a78:	e083      	b.n	8005b82 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <HAL_SPI_Transmit+0x198>
 8005a82:	8b7b      	ldrh	r3, [r7, #26]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d177      	bne.n	8005b78 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d912      	bls.n	8005ab8 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a96:	881a      	ldrh	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa2:	1c9a      	adds	r2, r3, #2
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3b02      	subs	r3, #2
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ab6:	e05f      	b.n	8005b78 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	330c      	adds	r3, #12
 8005ac2:	7812      	ldrb	r2, [r2, #0]
 8005ac4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005ade:	e04b      	b.n	8005b78 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d12b      	bne.n	8005b46 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d912      	bls.n	8005b1e <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005afc:	881a      	ldrh	r2, [r3, #0]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b08:	1c9a      	adds	r2, r3, #2
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	3b02      	subs	r3, #2
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b1c:	e02c      	b.n	8005b78 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	330c      	adds	r3, #12
 8005b28:	7812      	ldrb	r2, [r2, #0]
 8005b2a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b30:	1c5a      	adds	r2, r3, #1
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b44:	e018      	b.n	8005b78 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b46:	f7fb fdd1 	bl	80016ec <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d803      	bhi.n	8005b5e <HAL_SPI_Transmit+0x26e>
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5c:	d102      	bne.n	8005b64 <HAL_SPI_Transmit+0x274>
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d109      	bne.n	8005b78 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e02d      	b.n	8005bd4 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1ae      	bne.n	8005ae0 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b82:	69fa      	ldr	r2, [r7, #28]
 8005b84:	6839      	ldr	r1, [r7, #0]
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 f946 	bl	8005e18 <SPI_EndRxTxTransaction>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d002      	beq.n	8005b98 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2220      	movs	r2, #32
 8005b96:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10a      	bne.n	8005bb6 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	617b      	str	r3, [r7, #20]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	617b      	str	r3, [r7, #20]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	617b      	str	r3, [r7, #20]
 8005bb4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e000      	b.n	8005bd4 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
  }
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3720      	adds	r7, #32
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b088      	sub	sp, #32
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	603b      	str	r3, [r7, #0]
 8005be8:	4613      	mov	r3, r2
 8005bea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005bec:	f7fb fd7e 	bl	80016ec <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf4:	1a9b      	subs	r3, r3, r2
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005bfc:	f7fb fd76 	bl	80016ec <HAL_GetTick>
 8005c00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c02:	4b39      	ldr	r3, [pc, #228]	@ (8005ce8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	015b      	lsls	r3, r3, #5
 8005c08:	0d1b      	lsrs	r3, r3, #20
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	fb02 f303 	mul.w	r3, r2, r3
 8005c10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c12:	e054      	b.n	8005cbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1a:	d050      	beq.n	8005cbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c1c:	f7fb fd66 	bl	80016ec <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d902      	bls.n	8005c32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d13d      	bne.n	8005cae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005c40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c4a:	d111      	bne.n	8005c70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c54:	d004      	beq.n	8005c60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c5e:	d107      	bne.n	8005c70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c78:	d10f      	bne.n	8005c9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e017      	b.n	8005cde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	bf0c      	ite	eq
 8005cce:	2301      	moveq	r3, #1
 8005cd0:	2300      	movne	r3, #0
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	79fb      	ldrb	r3, [r7, #7]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d19b      	bne.n	8005c14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3720      	adds	r7, #32
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20000000 	.word	0x20000000

08005cec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b08a      	sub	sp, #40	@ 0x28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
 8005cf8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005cfe:	f7fb fcf5 	bl	80016ec <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d06:	1a9b      	subs	r3, r3, r2
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005d0e:	f7fb fced 	bl	80016ec <HAL_GetTick>
 8005d12:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	330c      	adds	r3, #12
 8005d1a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005d1c:	4b3d      	ldr	r3, [pc, #244]	@ (8005e14 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	4613      	mov	r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	00da      	lsls	r2, r3, #3
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	0d1b      	lsrs	r3, r3, #20
 8005d2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d2e:	fb02 f303 	mul.w	r3, r2, r3
 8005d32:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005d34:	e060      	b.n	8005df8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005d3c:	d107      	bne.n	8005d4e <SPI_WaitFifoStateUntilTimeout+0x62>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d104      	bne.n	8005d4e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005d4c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d54:	d050      	beq.n	8005df8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d56:	f7fb fcc9 	bl	80016ec <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d902      	bls.n	8005d6c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d13d      	bne.n	8005de8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005d7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d84:	d111      	bne.n	8005daa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d8e:	d004      	beq.n	8005d9a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d98:	d107      	bne.n	8005daa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005da8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005db2:	d10f      	bne.n	8005dd4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005dd2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e010      	b.n	8005e0a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	3b01      	subs	r3, #1
 8005df6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	4013      	ands	r3, r2
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d196      	bne.n	8005d36 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3728      	adds	r7, #40	@ 0x28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	20000000 	.word	0x20000000

08005e18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af02      	add	r7, sp, #8
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f7ff ff5b 	bl	8005cec <SPI_WaitFifoStateUntilTimeout>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d007      	beq.n	8005e4c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e40:	f043 0220 	orr.w	r2, r3, #32
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e027      	b.n	8005e9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2200      	movs	r2, #0
 8005e54:	2180      	movs	r1, #128	@ 0x80
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f7ff fec0 	bl	8005bdc <SPI_WaitFlagStateUntilTimeout>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d007      	beq.n	8005e72 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e66:	f043 0220 	orr.w	r2, r3, #32
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e014      	b.n	8005e9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f7ff ff34 	bl	8005cec <SPI_WaitFifoStateUntilTimeout>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d007      	beq.n	8005e9a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e8e:	f043 0220 	orr.w	r2, r3, #32
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e000      	b.n	8005e9c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e049      	b.n	8005f4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d106      	bne.n	8005ed0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f841 	bl	8005f52 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3304      	adds	r3, #4
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4610      	mov	r0, r2
 8005ee4:	f000 f9e0 	bl	80062a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
	...

08005f68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d001      	beq.n	8005f80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e04f      	b.n	8006020 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f042 0201 	orr.w	r2, r2, #1
 8005f96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a23      	ldr	r2, [pc, #140]	@ (800602c <HAL_TIM_Base_Start_IT+0xc4>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d01d      	beq.n	8005fde <HAL_TIM_Base_Start_IT+0x76>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005faa:	d018      	beq.n	8005fde <HAL_TIM_Base_Start_IT+0x76>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a1f      	ldr	r2, [pc, #124]	@ (8006030 <HAL_TIM_Base_Start_IT+0xc8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d013      	beq.n	8005fde <HAL_TIM_Base_Start_IT+0x76>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a1e      	ldr	r2, [pc, #120]	@ (8006034 <HAL_TIM_Base_Start_IT+0xcc>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d00e      	beq.n	8005fde <HAL_TIM_Base_Start_IT+0x76>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8006038 <HAL_TIM_Base_Start_IT+0xd0>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d009      	beq.n	8005fde <HAL_TIM_Base_Start_IT+0x76>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a1b      	ldr	r2, [pc, #108]	@ (800603c <HAL_TIM_Base_Start_IT+0xd4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d004      	beq.n	8005fde <HAL_TIM_Base_Start_IT+0x76>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a19      	ldr	r2, [pc, #100]	@ (8006040 <HAL_TIM_Base_Start_IT+0xd8>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d115      	bne.n	800600a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	4b17      	ldr	r3, [pc, #92]	@ (8006044 <HAL_TIM_Base_Start_IT+0xdc>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2b06      	cmp	r3, #6
 8005fee:	d015      	beq.n	800601c <HAL_TIM_Base_Start_IT+0xb4>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ff6:	d011      	beq.n	800601c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f042 0201 	orr.w	r2, r2, #1
 8006006:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006008:	e008      	b.n	800601c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f042 0201 	orr.w	r2, r2, #1
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	e000      	b.n	800601e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	40012c00 	.word	0x40012c00
 8006030:	40000400 	.word	0x40000400
 8006034:	40000800 	.word	0x40000800
 8006038:	40000c00 	.word	0x40000c00
 800603c:	40013400 	.word	0x40013400
 8006040:	40014000 	.word	0x40014000
 8006044:	00010007 	.word	0x00010007

08006048 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d020      	beq.n	80060ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b00      	cmp	r3, #0
 8006072:	d01b      	beq.n	80060ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f06f 0202 	mvn.w	r2, #2
 800607c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	f003 0303 	and.w	r3, r3, #3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f8e9 	bl	800626a <HAL_TIM_IC_CaptureCallback>
 8006098:	e005      	b.n	80060a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f8db 	bl	8006256 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f8ec 	bl	800627e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	f003 0304 	and.w	r3, r3, #4
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d020      	beq.n	80060f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f003 0304 	and.w	r3, r3, #4
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d01b      	beq.n	80060f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f06f 0204 	mvn.w	r2, #4
 80060c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2202      	movs	r2, #2
 80060ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f8c3 	bl	800626a <HAL_TIM_IC_CaptureCallback>
 80060e4:	e005      	b.n	80060f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f8b5 	bl	8006256 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f8c6 	bl	800627e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f003 0308 	and.w	r3, r3, #8
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d020      	beq.n	8006144 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f003 0308 	and.w	r3, r3, #8
 8006108:	2b00      	cmp	r3, #0
 800610a:	d01b      	beq.n	8006144 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f06f 0208 	mvn.w	r2, #8
 8006114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2204      	movs	r2, #4
 800611a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	f003 0303 	and.w	r3, r3, #3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f89d 	bl	800626a <HAL_TIM_IC_CaptureCallback>
 8006130:	e005      	b.n	800613e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f88f 	bl	8006256 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 f8a0 	bl	800627e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f003 0310 	and.w	r3, r3, #16
 800614a:	2b00      	cmp	r3, #0
 800614c:	d020      	beq.n	8006190 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f003 0310 	and.w	r3, r3, #16
 8006154:	2b00      	cmp	r3, #0
 8006156:	d01b      	beq.n	8006190 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f06f 0210 	mvn.w	r2, #16
 8006160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2208      	movs	r2, #8
 8006166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f877 	bl	800626a <HAL_TIM_IC_CaptureCallback>
 800617c:	e005      	b.n	800618a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f869 	bl	8006256 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 f87a 	bl	800627e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00c      	beq.n	80061b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d007      	beq.n	80061b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f06f 0201 	mvn.w	r2, #1
 80061ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7fa fde8 	bl	8000d84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d104      	bne.n	80061c8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00c      	beq.n	80061e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d007      	beq.n	80061e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80061da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f913 	bl	8006408 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00c      	beq.n	8006206 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d007      	beq.n	8006206 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80061fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f90b 	bl	800641c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00c      	beq.n	800622a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006216:	2b00      	cmp	r3, #0
 8006218:	d007      	beq.n	800622a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f834 	bl	8006292 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	f003 0320 	and.w	r3, r3, #32
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00c      	beq.n	800624e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f003 0320 	and.w	r3, r3, #32
 800623a:	2b00      	cmp	r3, #0
 800623c:	d007      	beq.n	800624e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f06f 0220 	mvn.w	r2, #32
 8006246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f8d3 	bl	80063f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800624e:	bf00      	nop
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006256:	b480      	push	{r7}
 8006258:	b083      	sub	sp, #12
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800625e:	bf00      	nop
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800626a:	b480      	push	{r7}
 800626c:	b083      	sub	sp, #12
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006272:	bf00      	nop
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800627e:	b480      	push	{r7}
 8006280:	b083      	sub	sp, #12
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006286:	bf00      	nop
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006292:	b480      	push	{r7}
 8006294:	b083      	sub	sp, #12
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800629a:	bf00      	nop
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
	...

080062a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a46      	ldr	r2, [pc, #280]	@ (80063d4 <TIM_Base_SetConfig+0x12c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d013      	beq.n	80062e8 <TIM_Base_SetConfig+0x40>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062c6:	d00f      	beq.n	80062e8 <TIM_Base_SetConfig+0x40>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a43      	ldr	r2, [pc, #268]	@ (80063d8 <TIM_Base_SetConfig+0x130>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d00b      	beq.n	80062e8 <TIM_Base_SetConfig+0x40>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a42      	ldr	r2, [pc, #264]	@ (80063dc <TIM_Base_SetConfig+0x134>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d007      	beq.n	80062e8 <TIM_Base_SetConfig+0x40>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a41      	ldr	r2, [pc, #260]	@ (80063e0 <TIM_Base_SetConfig+0x138>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d003      	beq.n	80062e8 <TIM_Base_SetConfig+0x40>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a40      	ldr	r2, [pc, #256]	@ (80063e4 <TIM_Base_SetConfig+0x13c>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d108      	bne.n	80062fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a35      	ldr	r2, [pc, #212]	@ (80063d4 <TIM_Base_SetConfig+0x12c>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d01f      	beq.n	8006342 <TIM_Base_SetConfig+0x9a>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006308:	d01b      	beq.n	8006342 <TIM_Base_SetConfig+0x9a>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a32      	ldr	r2, [pc, #200]	@ (80063d8 <TIM_Base_SetConfig+0x130>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d017      	beq.n	8006342 <TIM_Base_SetConfig+0x9a>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a31      	ldr	r2, [pc, #196]	@ (80063dc <TIM_Base_SetConfig+0x134>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d013      	beq.n	8006342 <TIM_Base_SetConfig+0x9a>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a30      	ldr	r2, [pc, #192]	@ (80063e0 <TIM_Base_SetConfig+0x138>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d00f      	beq.n	8006342 <TIM_Base_SetConfig+0x9a>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a2f      	ldr	r2, [pc, #188]	@ (80063e4 <TIM_Base_SetConfig+0x13c>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d00b      	beq.n	8006342 <TIM_Base_SetConfig+0x9a>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a2e      	ldr	r2, [pc, #184]	@ (80063e8 <TIM_Base_SetConfig+0x140>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d007      	beq.n	8006342 <TIM_Base_SetConfig+0x9a>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a2d      	ldr	r2, [pc, #180]	@ (80063ec <TIM_Base_SetConfig+0x144>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d003      	beq.n	8006342 <TIM_Base_SetConfig+0x9a>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a2c      	ldr	r2, [pc, #176]	@ (80063f0 <TIM_Base_SetConfig+0x148>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d108      	bne.n	8006354 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	4313      	orrs	r3, r2
 8006352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	4313      	orrs	r3, r2
 8006360:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a16      	ldr	r2, [pc, #88]	@ (80063d4 <TIM_Base_SetConfig+0x12c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d00f      	beq.n	80063a0 <TIM_Base_SetConfig+0xf8>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a18      	ldr	r2, [pc, #96]	@ (80063e4 <TIM_Base_SetConfig+0x13c>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d00b      	beq.n	80063a0 <TIM_Base_SetConfig+0xf8>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a17      	ldr	r2, [pc, #92]	@ (80063e8 <TIM_Base_SetConfig+0x140>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d007      	beq.n	80063a0 <TIM_Base_SetConfig+0xf8>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a16      	ldr	r2, [pc, #88]	@ (80063ec <TIM_Base_SetConfig+0x144>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d003      	beq.n	80063a0 <TIM_Base_SetConfig+0xf8>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a15      	ldr	r2, [pc, #84]	@ (80063f0 <TIM_Base_SetConfig+0x148>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d103      	bne.n	80063a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	691a      	ldr	r2, [r3, #16]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d105      	bne.n	80063c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	f023 0201 	bic.w	r2, r3, #1
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	611a      	str	r2, [r3, #16]
  }
}
 80063c6:	bf00      	nop
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	40012c00 	.word	0x40012c00
 80063d8:	40000400 	.word	0x40000400
 80063dc:	40000800 	.word	0x40000800
 80063e0:	40000c00 	.word	0x40000c00
 80063e4:	40013400 	.word	0x40013400
 80063e8:	40014000 	.word	0x40014000
 80063ec:	40014400 	.word	0x40014400
 80063f0:	40014800 	.word	0x40014800

080063f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e040      	b.n	80064c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006446:	2b00      	cmp	r3, #0
 8006448:	d106      	bne.n	8006458 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7fb f888 	bl	8001568 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2224      	movs	r2, #36	@ 0x24
 800645c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 0201 	bic.w	r2, r2, #1
 800646c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006472:	2b00      	cmp	r3, #0
 8006474:	d002      	beq.n	800647c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 ff58 	bl	800732c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fc9d 	bl	8006dbc <UART_SetConfig>
 8006482:	4603      	mov	r3, r0
 8006484:	2b01      	cmp	r3, #1
 8006486:	d101      	bne.n	800648c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e01b      	b.n	80064c4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800649a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689a      	ldr	r2, [r3, #8]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f042 0201 	orr.w	r2, r2, #1
 80064ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 ffd7 	bl	8007470 <UART_CheckIdleState>
 80064c2:	4603      	mov	r3, r0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b08a      	sub	sp, #40	@ 0x28
 80064d0:	af02      	add	r7, sp, #8
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	603b      	str	r3, [r7, #0]
 80064d8:	4613      	mov	r3, r2
 80064da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064e0:	2b20      	cmp	r3, #32
 80064e2:	d177      	bne.n	80065d4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <HAL_UART_Transmit+0x24>
 80064ea:	88fb      	ldrh	r3, [r7, #6]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d101      	bne.n	80064f4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e070      	b.n	80065d6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2221      	movs	r2, #33	@ 0x21
 8006500:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006502:	f7fb f8f3 	bl	80016ec <HAL_GetTick>
 8006506:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	88fa      	ldrh	r2, [r7, #6]
 800650c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	88fa      	ldrh	r2, [r7, #6]
 8006514:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006520:	d108      	bne.n	8006534 <HAL_UART_Transmit+0x68>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d104      	bne.n	8006534 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800652a:	2300      	movs	r3, #0
 800652c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	61bb      	str	r3, [r7, #24]
 8006532:	e003      	b.n	800653c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006538:	2300      	movs	r3, #0
 800653a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800653c:	e02f      	b.n	800659e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2200      	movs	r2, #0
 8006546:	2180      	movs	r1, #128	@ 0x80
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f001 f839 	bl	80075c0 <UART_WaitOnFlagUntilTimeout>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d004      	beq.n	800655e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2220      	movs	r2, #32
 8006558:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e03b      	b.n	80065d6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10b      	bne.n	800657c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	881a      	ldrh	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006570:	b292      	uxth	r2, r2
 8006572:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	3302      	adds	r3, #2
 8006578:	61bb      	str	r3, [r7, #24]
 800657a:	e007      	b.n	800658c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	781a      	ldrb	r2, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	3301      	adds	r3, #1
 800658a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006592:	b29b      	uxth	r3, r3
 8006594:	3b01      	subs	r3, #1
 8006596:	b29a      	uxth	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1c9      	bne.n	800653e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	2200      	movs	r2, #0
 80065b2:	2140      	movs	r1, #64	@ 0x40
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f001 f803 	bl	80075c0 <UART_WaitOnFlagUntilTimeout>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d004      	beq.n	80065ca <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2220      	movs	r2, #32
 80065c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e005      	b.n	80065d6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2220      	movs	r2, #32
 80065ce:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80065d0:	2300      	movs	r3, #0
 80065d2:	e000      	b.n	80065d6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80065d4:	2302      	movs	r3, #2
  }
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3720      	adds	r7, #32
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b08a      	sub	sp, #40	@ 0x28
 80065e2:	af02      	add	r7, sp, #8
 80065e4:	60f8      	str	r0, [r7, #12]
 80065e6:	60b9      	str	r1, [r7, #8]
 80065e8:	603b      	str	r3, [r7, #0]
 80065ea:	4613      	mov	r3, r2
 80065ec:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065f4:	2b20      	cmp	r3, #32
 80065f6:	f040 80b6 	bne.w	8006766 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <HAL_UART_Receive+0x28>
 8006600:	88fb      	ldrh	r3, [r7, #6]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e0ae      	b.n	8006768 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2222      	movs	r2, #34	@ 0x22
 8006616:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006620:	f7fb f864 	bl	80016ec <HAL_GetTick>
 8006624:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	88fa      	ldrh	r2, [r7, #6]
 800662a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	88fa      	ldrh	r2, [r7, #6]
 8006632:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800663e:	d10e      	bne.n	800665e <HAL_UART_Receive+0x80>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d105      	bne.n	8006654 <HAL_UART_Receive+0x76>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800664e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006652:	e02d      	b.n	80066b0 <HAL_UART_Receive+0xd2>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	22ff      	movs	r2, #255	@ 0xff
 8006658:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800665c:	e028      	b.n	80066b0 <HAL_UART_Receive+0xd2>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10d      	bne.n	8006682 <HAL_UART_Receive+0xa4>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d104      	bne.n	8006678 <HAL_UART_Receive+0x9a>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	22ff      	movs	r2, #255	@ 0xff
 8006672:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006676:	e01b      	b.n	80066b0 <HAL_UART_Receive+0xd2>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	227f      	movs	r2, #127	@ 0x7f
 800667c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006680:	e016      	b.n	80066b0 <HAL_UART_Receive+0xd2>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800668a:	d10d      	bne.n	80066a8 <HAL_UART_Receive+0xca>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d104      	bne.n	800669e <HAL_UART_Receive+0xc0>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	227f      	movs	r2, #127	@ 0x7f
 8006698:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800669c:	e008      	b.n	80066b0 <HAL_UART_Receive+0xd2>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	223f      	movs	r2, #63	@ 0x3f
 80066a2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80066a6:	e003      	b.n	80066b0 <HAL_UART_Receive+0xd2>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80066b6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066c0:	d108      	bne.n	80066d4 <HAL_UART_Receive+0xf6>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d104      	bne.n	80066d4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80066ca:	2300      	movs	r3, #0
 80066cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	61bb      	str	r3, [r7, #24]
 80066d2:	e003      	b.n	80066dc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066d8:	2300      	movs	r3, #0
 80066da:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80066dc:	e037      	b.n	800674e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2200      	movs	r2, #0
 80066e6:	2120      	movs	r1, #32
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 ff69 	bl	80075c0 <UART_WaitOnFlagUntilTimeout>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d005      	beq.n	8006700 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2220      	movs	r2, #32
 80066f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e033      	b.n	8006768 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10c      	bne.n	8006720 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800670c:	b29a      	uxth	r2, r3
 800670e:	8a7b      	ldrh	r3, [r7, #18]
 8006710:	4013      	ands	r3, r2
 8006712:	b29a      	uxth	r2, r3
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	3302      	adds	r3, #2
 800671c:	61bb      	str	r3, [r7, #24]
 800671e:	e00d      	b.n	800673c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006726:	b29b      	uxth	r3, r3
 8006728:	b2da      	uxtb	r2, r3
 800672a:	8a7b      	ldrh	r3, [r7, #18]
 800672c:	b2db      	uxtb	r3, r3
 800672e:	4013      	ands	r3, r2
 8006730:	b2da      	uxtb	r2, r3
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	3301      	adds	r3, #1
 800673a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006742:	b29b      	uxth	r3, r3
 8006744:	3b01      	subs	r3, #1
 8006746:	b29a      	uxth	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006754:	b29b      	uxth	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1c1      	bne.n	80066de <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2220      	movs	r2, #32
 800675e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	e000      	b.n	8006768 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006766:	2302      	movs	r3, #2
  }
}
 8006768:	4618      	mov	r0, r3
 800676a:	3720      	adds	r7, #32
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b0ba      	sub	sp, #232	@ 0xe8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006796:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800679a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800679e:	4013      	ands	r3, r2
 80067a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80067a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d115      	bne.n	80067d8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80067ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067b0:	f003 0320 	and.w	r3, r3, #32
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00f      	beq.n	80067d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80067b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067bc:	f003 0320 	and.w	r3, r3, #32
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d009      	beq.n	80067d8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 82ca 	beq.w	8006d62 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	4798      	blx	r3
      }
      return;
 80067d6:	e2c4      	b.n	8006d62 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80067d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 8117 	beq.w	8006a10 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80067e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d106      	bne.n	80067fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80067ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80067f2:	4b85      	ldr	r3, [pc, #532]	@ (8006a08 <HAL_UART_IRQHandler+0x298>)
 80067f4:	4013      	ands	r3, r2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f000 810a 	beq.w	8006a10 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80067fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	2b00      	cmp	r3, #0
 8006806:	d011      	beq.n	800682c <HAL_UART_IRQHandler+0xbc>
 8006808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800680c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00b      	beq.n	800682c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2201      	movs	r2, #1
 800681a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006822:	f043 0201 	orr.w	r2, r3, #1
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800682c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b00      	cmp	r3, #0
 8006836:	d011      	beq.n	800685c <HAL_UART_IRQHandler+0xec>
 8006838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00b      	beq.n	800685c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2202      	movs	r2, #2
 800684a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006852:	f043 0204 	orr.w	r2, r3, #4
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800685c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006860:	f003 0304 	and.w	r3, r3, #4
 8006864:	2b00      	cmp	r3, #0
 8006866:	d011      	beq.n	800688c <HAL_UART_IRQHandler+0x11c>
 8006868:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00b      	beq.n	800688c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2204      	movs	r2, #4
 800687a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006882:	f043 0202 	orr.w	r2, r3, #2
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800688c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006890:	f003 0308 	and.w	r3, r3, #8
 8006894:	2b00      	cmp	r3, #0
 8006896:	d017      	beq.n	80068c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800689c:	f003 0320 	and.w	r3, r3, #32
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d105      	bne.n	80068b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80068a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00b      	beq.n	80068c8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2208      	movs	r2, #8
 80068b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068be:	f043 0208 	orr.w	r2, r3, #8
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80068c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d012      	beq.n	80068fa <HAL_UART_IRQHandler+0x18a>
 80068d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00c      	beq.n	80068fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068f0:	f043 0220 	orr.w	r2, r3, #32
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 8230 	beq.w	8006d66 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800690a:	f003 0320 	and.w	r3, r3, #32
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00d      	beq.n	800692e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006916:	f003 0320 	and.w	r3, r3, #32
 800691a:	2b00      	cmp	r3, #0
 800691c:	d007      	beq.n	800692e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006922:	2b00      	cmp	r3, #0
 8006924:	d003      	beq.n	800692e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006934:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006942:	2b40      	cmp	r3, #64	@ 0x40
 8006944:	d005      	beq.n	8006952 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006946:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800694a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800694e:	2b00      	cmp	r3, #0
 8006950:	d04f      	beq.n	80069f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fea1 	bl	800769a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006962:	2b40      	cmp	r3, #64	@ 0x40
 8006964:	d141      	bne.n	80069ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3308      	adds	r3, #8
 800696c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006970:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006974:	e853 3f00 	ldrex	r3, [r3]
 8006978:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800697c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006980:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006984:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3308      	adds	r3, #8
 800698e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006992:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006996:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800699e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80069a2:	e841 2300 	strex	r3, r2, [r1]
 80069a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80069aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1d9      	bne.n	8006966 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d013      	beq.n	80069e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069be:	4a13      	ldr	r2, [pc, #76]	@ (8006a0c <HAL_UART_IRQHandler+0x29c>)
 80069c0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fb f874 	bl	8001ab4 <HAL_DMA_Abort_IT>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d017      	beq.n	8006a02 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80069dc:	4610      	mov	r0, r2
 80069de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e0:	e00f      	b.n	8006a02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f9d4 	bl	8006d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e8:	e00b      	b.n	8006a02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f9d0 	bl	8006d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f0:	e007      	b.n	8006a02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f9cc 	bl	8006d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006a00:	e1b1      	b.n	8006d66 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a02:	bf00      	nop
    return;
 8006a04:	e1af      	b.n	8006d66 <HAL_UART_IRQHandler+0x5f6>
 8006a06:	bf00      	nop
 8006a08:	04000120 	.word	0x04000120
 8006a0c:	08007763 	.word	0x08007763

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	f040 816a 	bne.w	8006cee <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a1e:	f003 0310 	and.w	r3, r3, #16
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f000 8163 	beq.w	8006cee <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a2c:	f003 0310 	and.w	r3, r3, #16
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 815c 	beq.w	8006cee <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2210      	movs	r2, #16
 8006a3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a48:	2b40      	cmp	r3, #64	@ 0x40
 8006a4a:	f040 80d4 	bne.w	8006bf6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a5a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 80ad 	beq.w	8006bbe <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006a6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	f080 80a5 	bcs.w	8006bbe <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a7a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 0320 	and.w	r3, r3, #32
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f040 8086 	bne.w	8006b9c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a9c:	e853 3f00 	ldrex	r3, [r3]
 8006aa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006aa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006aa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006aac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006aba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006abe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006ac6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006aca:	e841 2300 	strex	r3, r2, [r1]
 8006ace:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1da      	bne.n	8006a90 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	3308      	adds	r3, #8
 8006ae0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ae4:	e853 3f00 	ldrex	r3, [r3]
 8006ae8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006aea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006aec:	f023 0301 	bic.w	r3, r3, #1
 8006af0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3308      	adds	r3, #8
 8006afa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006afe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b02:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e1      	bne.n	8006ada <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3308      	adds	r3, #8
 8006b1c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b20:	e853 3f00 	ldrex	r3, [r3]
 8006b24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	3308      	adds	r3, #8
 8006b36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006b40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b42:	e841 2300 	strex	r3, r2, [r1]
 8006b46:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006b48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1e3      	bne.n	8006b16 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2220      	movs	r2, #32
 8006b52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b64:	e853 3f00 	ldrex	r3, [r3]
 8006b68:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b6c:	f023 0310 	bic.w	r3, r3, #16
 8006b70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	461a      	mov	r2, r3
 8006b7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b80:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b86:	e841 2300 	strex	r3, r2, [r1]
 8006b8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1e4      	bne.n	8006b5c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fa ff4e 	bl	8001a38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f8f4 	bl	8006da4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006bbc:	e0d5      	b.n	8006d6a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006bc4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	f040 80ce 	bne.w	8006d6a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0320 	and.w	r3, r3, #32
 8006bda:	2b20      	cmp	r3, #32
 8006bdc:	f040 80c5 	bne.w	8006d6a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2202      	movs	r2, #2
 8006be4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006bec:	4619      	mov	r1, r3
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f8d8 	bl	8006da4 <HAL_UARTEx_RxEventCallback>
      return;
 8006bf4:	e0b9      	b.n	8006d6a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f000 80ab 	beq.w	8006d6e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006c18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 80a6 	beq.w	8006d6e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c2a:	e853 3f00 	ldrex	r3, [r3]
 8006c2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c44:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c4c:	e841 2300 	strex	r3, r2, [r1]
 8006c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1e4      	bne.n	8006c22 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3308      	adds	r3, #8
 8006c5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c62:	e853 3f00 	ldrex	r3, [r3]
 8006c66:	623b      	str	r3, [r7, #32]
   return(result);
 8006c68:	6a3b      	ldr	r3, [r7, #32]
 8006c6a:	f023 0301 	bic.w	r3, r3, #1
 8006c6e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	3308      	adds	r3, #8
 8006c78:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006c7c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c84:	e841 2300 	strex	r3, r2, [r1]
 8006c88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1e3      	bne.n	8006c58 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2220      	movs	r2, #32
 8006c94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	e853 3f00 	ldrex	r3, [r3]
 8006cb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f023 0310 	bic.w	r3, r3, #16
 8006cb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006cc6:	61fb      	str	r3, [r7, #28]
 8006cc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cca:	69b9      	ldr	r1, [r7, #24]
 8006ccc:	69fa      	ldr	r2, [r7, #28]
 8006cce:	e841 2300 	strex	r3, r2, [r1]
 8006cd2:	617b      	str	r3, [r7, #20]
   return(result);
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1e4      	bne.n	8006ca4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2202      	movs	r2, #2
 8006cde:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ce0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f85c 	bl	8006da4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006cec:	e03f      	b.n	8006d6e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00e      	beq.n	8006d18 <HAL_UART_IRQHandler+0x5a8>
 8006cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d008      	beq.n	8006d18 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006d0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 fd66 	bl	80077e2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d16:	e02d      	b.n	8006d74 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00e      	beq.n	8006d42 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d008      	beq.n	8006d42 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d01c      	beq.n	8006d72 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	4798      	blx	r3
    }
    return;
 8006d40:	e017      	b.n	8006d72 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d012      	beq.n	8006d74 <HAL_UART_IRQHandler+0x604>
 8006d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00c      	beq.n	8006d74 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fd17 	bl	800778e <UART_EndTransmit_IT>
    return;
 8006d60:	e008      	b.n	8006d74 <HAL_UART_IRQHandler+0x604>
      return;
 8006d62:	bf00      	nop
 8006d64:	e006      	b.n	8006d74 <HAL_UART_IRQHandler+0x604>
    return;
 8006d66:	bf00      	nop
 8006d68:	e004      	b.n	8006d74 <HAL_UART_IRQHandler+0x604>
      return;
 8006d6a:	bf00      	nop
 8006d6c:	e002      	b.n	8006d74 <HAL_UART_IRQHandler+0x604>
      return;
 8006d6e:	bf00      	nop
 8006d70:	e000      	b.n	8006d74 <HAL_UART_IRQHandler+0x604>
    return;
 8006d72:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006d74:	37e8      	adds	r7, #232	@ 0xe8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop

08006d7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	460b      	mov	r3, r1
 8006dae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dc0:	b08a      	sub	sp, #40	@ 0x28
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	689a      	ldr	r2, [r3, #8]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	69db      	ldr	r3, [r3, #28]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	4ba4      	ldr	r3, [pc, #656]	@ (800707c <UART_SetConfig+0x2c0>)
 8006dec:	4013      	ands	r3, r2
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	6812      	ldr	r2, [r2, #0]
 8006df2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006df4:	430b      	orrs	r3, r1
 8006df6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	68da      	ldr	r2, [r3, #12]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a99      	ldr	r2, [pc, #612]	@ (8007080 <UART_SetConfig+0x2c4>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d004      	beq.n	8006e28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6a1b      	ldr	r3, [r3, #32]
 8006e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e24:	4313      	orrs	r3, r2
 8006e26:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a90      	ldr	r2, [pc, #576]	@ (8007084 <UART_SetConfig+0x2c8>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d126      	bne.n	8006e94 <UART_SetConfig+0xd8>
 8006e46:	4b90      	ldr	r3, [pc, #576]	@ (8007088 <UART_SetConfig+0x2cc>)
 8006e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e4c:	f003 0303 	and.w	r3, r3, #3
 8006e50:	2b03      	cmp	r3, #3
 8006e52:	d81b      	bhi.n	8006e8c <UART_SetConfig+0xd0>
 8006e54:	a201      	add	r2, pc, #4	@ (adr r2, 8006e5c <UART_SetConfig+0xa0>)
 8006e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5a:	bf00      	nop
 8006e5c:	08006e6d 	.word	0x08006e6d
 8006e60:	08006e7d 	.word	0x08006e7d
 8006e64:	08006e75 	.word	0x08006e75
 8006e68:	08006e85 	.word	0x08006e85
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e72:	e116      	b.n	80070a2 <UART_SetConfig+0x2e6>
 8006e74:	2302      	movs	r3, #2
 8006e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e7a:	e112      	b.n	80070a2 <UART_SetConfig+0x2e6>
 8006e7c:	2304      	movs	r3, #4
 8006e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e82:	e10e      	b.n	80070a2 <UART_SetConfig+0x2e6>
 8006e84:	2308      	movs	r3, #8
 8006e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e8a:	e10a      	b.n	80070a2 <UART_SetConfig+0x2e6>
 8006e8c:	2310      	movs	r3, #16
 8006e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e92:	e106      	b.n	80070a2 <UART_SetConfig+0x2e6>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a7c      	ldr	r2, [pc, #496]	@ (800708c <UART_SetConfig+0x2d0>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d138      	bne.n	8006f10 <UART_SetConfig+0x154>
 8006e9e:	4b7a      	ldr	r3, [pc, #488]	@ (8007088 <UART_SetConfig+0x2cc>)
 8006ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ea4:	f003 030c 	and.w	r3, r3, #12
 8006ea8:	2b0c      	cmp	r3, #12
 8006eaa:	d82d      	bhi.n	8006f08 <UART_SetConfig+0x14c>
 8006eac:	a201      	add	r2, pc, #4	@ (adr r2, 8006eb4 <UART_SetConfig+0xf8>)
 8006eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb2:	bf00      	nop
 8006eb4:	08006ee9 	.word	0x08006ee9
 8006eb8:	08006f09 	.word	0x08006f09
 8006ebc:	08006f09 	.word	0x08006f09
 8006ec0:	08006f09 	.word	0x08006f09
 8006ec4:	08006ef9 	.word	0x08006ef9
 8006ec8:	08006f09 	.word	0x08006f09
 8006ecc:	08006f09 	.word	0x08006f09
 8006ed0:	08006f09 	.word	0x08006f09
 8006ed4:	08006ef1 	.word	0x08006ef1
 8006ed8:	08006f09 	.word	0x08006f09
 8006edc:	08006f09 	.word	0x08006f09
 8006ee0:	08006f09 	.word	0x08006f09
 8006ee4:	08006f01 	.word	0x08006f01
 8006ee8:	2300      	movs	r3, #0
 8006eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eee:	e0d8      	b.n	80070a2 <UART_SetConfig+0x2e6>
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ef6:	e0d4      	b.n	80070a2 <UART_SetConfig+0x2e6>
 8006ef8:	2304      	movs	r3, #4
 8006efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006efe:	e0d0      	b.n	80070a2 <UART_SetConfig+0x2e6>
 8006f00:	2308      	movs	r3, #8
 8006f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f06:	e0cc      	b.n	80070a2 <UART_SetConfig+0x2e6>
 8006f08:	2310      	movs	r3, #16
 8006f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f0e:	e0c8      	b.n	80070a2 <UART_SetConfig+0x2e6>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a5e      	ldr	r2, [pc, #376]	@ (8007090 <UART_SetConfig+0x2d4>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d125      	bne.n	8006f66 <UART_SetConfig+0x1aa>
 8006f1a:	4b5b      	ldr	r3, [pc, #364]	@ (8007088 <UART_SetConfig+0x2cc>)
 8006f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f20:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f24:	2b30      	cmp	r3, #48	@ 0x30
 8006f26:	d016      	beq.n	8006f56 <UART_SetConfig+0x19a>
 8006f28:	2b30      	cmp	r3, #48	@ 0x30
 8006f2a:	d818      	bhi.n	8006f5e <UART_SetConfig+0x1a2>
 8006f2c:	2b20      	cmp	r3, #32
 8006f2e:	d00a      	beq.n	8006f46 <UART_SetConfig+0x18a>
 8006f30:	2b20      	cmp	r3, #32
 8006f32:	d814      	bhi.n	8006f5e <UART_SetConfig+0x1a2>
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d002      	beq.n	8006f3e <UART_SetConfig+0x182>
 8006f38:	2b10      	cmp	r3, #16
 8006f3a:	d008      	beq.n	8006f4e <UART_SetConfig+0x192>
 8006f3c:	e00f      	b.n	8006f5e <UART_SetConfig+0x1a2>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f44:	e0ad      	b.n	80070a2 <UART_SetConfig+0x2e6>
 8006f46:	2302      	movs	r3, #2
 8006f48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f4c:	e0a9      	b.n	80070a2 <UART_SetConfig+0x2e6>
 8006f4e:	2304      	movs	r3, #4
 8006f50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f54:	e0a5      	b.n	80070a2 <UART_SetConfig+0x2e6>
 8006f56:	2308      	movs	r3, #8
 8006f58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f5c:	e0a1      	b.n	80070a2 <UART_SetConfig+0x2e6>
 8006f5e:	2310      	movs	r3, #16
 8006f60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f64:	e09d      	b.n	80070a2 <UART_SetConfig+0x2e6>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a4a      	ldr	r2, [pc, #296]	@ (8007094 <UART_SetConfig+0x2d8>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d125      	bne.n	8006fbc <UART_SetConfig+0x200>
 8006f70:	4b45      	ldr	r3, [pc, #276]	@ (8007088 <UART_SetConfig+0x2cc>)
 8006f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f76:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f7c:	d016      	beq.n	8006fac <UART_SetConfig+0x1f0>
 8006f7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f80:	d818      	bhi.n	8006fb4 <UART_SetConfig+0x1f8>
 8006f82:	2b80      	cmp	r3, #128	@ 0x80
 8006f84:	d00a      	beq.n	8006f9c <UART_SetConfig+0x1e0>
 8006f86:	2b80      	cmp	r3, #128	@ 0x80
 8006f88:	d814      	bhi.n	8006fb4 <UART_SetConfig+0x1f8>
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d002      	beq.n	8006f94 <UART_SetConfig+0x1d8>
 8006f8e:	2b40      	cmp	r3, #64	@ 0x40
 8006f90:	d008      	beq.n	8006fa4 <UART_SetConfig+0x1e8>
 8006f92:	e00f      	b.n	8006fb4 <UART_SetConfig+0x1f8>
 8006f94:	2300      	movs	r3, #0
 8006f96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f9a:	e082      	b.n	80070a2 <UART_SetConfig+0x2e6>
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fa2:	e07e      	b.n	80070a2 <UART_SetConfig+0x2e6>
 8006fa4:	2304      	movs	r3, #4
 8006fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006faa:	e07a      	b.n	80070a2 <UART_SetConfig+0x2e6>
 8006fac:	2308      	movs	r3, #8
 8006fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fb2:	e076      	b.n	80070a2 <UART_SetConfig+0x2e6>
 8006fb4:	2310      	movs	r3, #16
 8006fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fba:	e072      	b.n	80070a2 <UART_SetConfig+0x2e6>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a35      	ldr	r2, [pc, #212]	@ (8007098 <UART_SetConfig+0x2dc>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d12a      	bne.n	800701c <UART_SetConfig+0x260>
 8006fc6:	4b30      	ldr	r3, [pc, #192]	@ (8007088 <UART_SetConfig+0x2cc>)
 8006fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fcc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fd4:	d01a      	beq.n	800700c <UART_SetConfig+0x250>
 8006fd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fda:	d81b      	bhi.n	8007014 <UART_SetConfig+0x258>
 8006fdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fe0:	d00c      	beq.n	8006ffc <UART_SetConfig+0x240>
 8006fe2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fe6:	d815      	bhi.n	8007014 <UART_SetConfig+0x258>
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d003      	beq.n	8006ff4 <UART_SetConfig+0x238>
 8006fec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ff0:	d008      	beq.n	8007004 <UART_SetConfig+0x248>
 8006ff2:	e00f      	b.n	8007014 <UART_SetConfig+0x258>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ffa:	e052      	b.n	80070a2 <UART_SetConfig+0x2e6>
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007002:	e04e      	b.n	80070a2 <UART_SetConfig+0x2e6>
 8007004:	2304      	movs	r3, #4
 8007006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800700a:	e04a      	b.n	80070a2 <UART_SetConfig+0x2e6>
 800700c:	2308      	movs	r3, #8
 800700e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007012:	e046      	b.n	80070a2 <UART_SetConfig+0x2e6>
 8007014:	2310      	movs	r3, #16
 8007016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800701a:	e042      	b.n	80070a2 <UART_SetConfig+0x2e6>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a17      	ldr	r2, [pc, #92]	@ (8007080 <UART_SetConfig+0x2c4>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d13a      	bne.n	800709c <UART_SetConfig+0x2e0>
 8007026:	4b18      	ldr	r3, [pc, #96]	@ (8007088 <UART_SetConfig+0x2cc>)
 8007028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800702c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007030:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007034:	d01a      	beq.n	800706c <UART_SetConfig+0x2b0>
 8007036:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800703a:	d81b      	bhi.n	8007074 <UART_SetConfig+0x2b8>
 800703c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007040:	d00c      	beq.n	800705c <UART_SetConfig+0x2a0>
 8007042:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007046:	d815      	bhi.n	8007074 <UART_SetConfig+0x2b8>
 8007048:	2b00      	cmp	r3, #0
 800704a:	d003      	beq.n	8007054 <UART_SetConfig+0x298>
 800704c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007050:	d008      	beq.n	8007064 <UART_SetConfig+0x2a8>
 8007052:	e00f      	b.n	8007074 <UART_SetConfig+0x2b8>
 8007054:	2300      	movs	r3, #0
 8007056:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800705a:	e022      	b.n	80070a2 <UART_SetConfig+0x2e6>
 800705c:	2302      	movs	r3, #2
 800705e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007062:	e01e      	b.n	80070a2 <UART_SetConfig+0x2e6>
 8007064:	2304      	movs	r3, #4
 8007066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800706a:	e01a      	b.n	80070a2 <UART_SetConfig+0x2e6>
 800706c:	2308      	movs	r3, #8
 800706e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007072:	e016      	b.n	80070a2 <UART_SetConfig+0x2e6>
 8007074:	2310      	movs	r3, #16
 8007076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800707a:	e012      	b.n	80070a2 <UART_SetConfig+0x2e6>
 800707c:	efff69f3 	.word	0xefff69f3
 8007080:	40008000 	.word	0x40008000
 8007084:	40013800 	.word	0x40013800
 8007088:	40021000 	.word	0x40021000
 800708c:	40004400 	.word	0x40004400
 8007090:	40004800 	.word	0x40004800
 8007094:	40004c00 	.word	0x40004c00
 8007098:	40005000 	.word	0x40005000
 800709c:	2310      	movs	r3, #16
 800709e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a9f      	ldr	r2, [pc, #636]	@ (8007324 <UART_SetConfig+0x568>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d17a      	bne.n	80071a2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070b0:	2b08      	cmp	r3, #8
 80070b2:	d824      	bhi.n	80070fe <UART_SetConfig+0x342>
 80070b4:	a201      	add	r2, pc, #4	@ (adr r2, 80070bc <UART_SetConfig+0x300>)
 80070b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ba:	bf00      	nop
 80070bc:	080070e1 	.word	0x080070e1
 80070c0:	080070ff 	.word	0x080070ff
 80070c4:	080070e9 	.word	0x080070e9
 80070c8:	080070ff 	.word	0x080070ff
 80070cc:	080070ef 	.word	0x080070ef
 80070d0:	080070ff 	.word	0x080070ff
 80070d4:	080070ff 	.word	0x080070ff
 80070d8:	080070ff 	.word	0x080070ff
 80070dc:	080070f7 	.word	0x080070f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070e0:	f7fc fa2e 	bl	8003540 <HAL_RCC_GetPCLK1Freq>
 80070e4:	61f8      	str	r0, [r7, #28]
        break;
 80070e6:	e010      	b.n	800710a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070e8:	4b8f      	ldr	r3, [pc, #572]	@ (8007328 <UART_SetConfig+0x56c>)
 80070ea:	61fb      	str	r3, [r7, #28]
        break;
 80070ec:	e00d      	b.n	800710a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070ee:	f7fc f98f 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 80070f2:	61f8      	str	r0, [r7, #28]
        break;
 80070f4:	e009      	b.n	800710a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070fa:	61fb      	str	r3, [r7, #28]
        break;
 80070fc:	e005      	b.n	800710a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80070fe:	2300      	movs	r3, #0
 8007100:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007108:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	2b00      	cmp	r3, #0
 800710e:	f000 80fb 	beq.w	8007308 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	685a      	ldr	r2, [r3, #4]
 8007116:	4613      	mov	r3, r2
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	4413      	add	r3, r2
 800711c:	69fa      	ldr	r2, [r7, #28]
 800711e:	429a      	cmp	r2, r3
 8007120:	d305      	bcc.n	800712e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007128:	69fa      	ldr	r2, [r7, #28]
 800712a:	429a      	cmp	r2, r3
 800712c:	d903      	bls.n	8007136 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007134:	e0e8      	b.n	8007308 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	2200      	movs	r2, #0
 800713a:	461c      	mov	r4, r3
 800713c:	4615      	mov	r5, r2
 800713e:	f04f 0200 	mov.w	r2, #0
 8007142:	f04f 0300 	mov.w	r3, #0
 8007146:	022b      	lsls	r3, r5, #8
 8007148:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800714c:	0222      	lsls	r2, r4, #8
 800714e:	68f9      	ldr	r1, [r7, #12]
 8007150:	6849      	ldr	r1, [r1, #4]
 8007152:	0849      	lsrs	r1, r1, #1
 8007154:	2000      	movs	r0, #0
 8007156:	4688      	mov	r8, r1
 8007158:	4681      	mov	r9, r0
 800715a:	eb12 0a08 	adds.w	sl, r2, r8
 800715e:	eb43 0b09 	adc.w	fp, r3, r9
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	603b      	str	r3, [r7, #0]
 800716a:	607a      	str	r2, [r7, #4]
 800716c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007170:	4650      	mov	r0, sl
 8007172:	4659      	mov	r1, fp
 8007174:	f7f9 f87c 	bl	8000270 <__aeabi_uldivmod>
 8007178:	4602      	mov	r2, r0
 800717a:	460b      	mov	r3, r1
 800717c:	4613      	mov	r3, r2
 800717e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007186:	d308      	bcc.n	800719a <UART_SetConfig+0x3de>
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800718e:	d204      	bcs.n	800719a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	69ba      	ldr	r2, [r7, #24]
 8007196:	60da      	str	r2, [r3, #12]
 8007198:	e0b6      	b.n	8007308 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80071a0:	e0b2      	b.n	8007308 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	69db      	ldr	r3, [r3, #28]
 80071a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071aa:	d15e      	bne.n	800726a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80071ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80071b0:	2b08      	cmp	r3, #8
 80071b2:	d828      	bhi.n	8007206 <UART_SetConfig+0x44a>
 80071b4:	a201      	add	r2, pc, #4	@ (adr r2, 80071bc <UART_SetConfig+0x400>)
 80071b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ba:	bf00      	nop
 80071bc:	080071e1 	.word	0x080071e1
 80071c0:	080071e9 	.word	0x080071e9
 80071c4:	080071f1 	.word	0x080071f1
 80071c8:	08007207 	.word	0x08007207
 80071cc:	080071f7 	.word	0x080071f7
 80071d0:	08007207 	.word	0x08007207
 80071d4:	08007207 	.word	0x08007207
 80071d8:	08007207 	.word	0x08007207
 80071dc:	080071ff 	.word	0x080071ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071e0:	f7fc f9ae 	bl	8003540 <HAL_RCC_GetPCLK1Freq>
 80071e4:	61f8      	str	r0, [r7, #28]
        break;
 80071e6:	e014      	b.n	8007212 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071e8:	f7fc f9c0 	bl	800356c <HAL_RCC_GetPCLK2Freq>
 80071ec:	61f8      	str	r0, [r7, #28]
        break;
 80071ee:	e010      	b.n	8007212 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071f0:	4b4d      	ldr	r3, [pc, #308]	@ (8007328 <UART_SetConfig+0x56c>)
 80071f2:	61fb      	str	r3, [r7, #28]
        break;
 80071f4:	e00d      	b.n	8007212 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071f6:	f7fc f90b 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 80071fa:	61f8      	str	r0, [r7, #28]
        break;
 80071fc:	e009      	b.n	8007212 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007202:	61fb      	str	r3, [r7, #28]
        break;
 8007204:	e005      	b.n	8007212 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007206:	2300      	movs	r3, #0
 8007208:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007210:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d077      	beq.n	8007308 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	005a      	lsls	r2, r3, #1
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	085b      	lsrs	r3, r3, #1
 8007222:	441a      	add	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	fbb2 f3f3 	udiv	r3, r2, r3
 800722c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	2b0f      	cmp	r3, #15
 8007232:	d916      	bls.n	8007262 <UART_SetConfig+0x4a6>
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800723a:	d212      	bcs.n	8007262 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	b29b      	uxth	r3, r3
 8007240:	f023 030f 	bic.w	r3, r3, #15
 8007244:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	085b      	lsrs	r3, r3, #1
 800724a:	b29b      	uxth	r3, r3
 800724c:	f003 0307 	and.w	r3, r3, #7
 8007250:	b29a      	uxth	r2, r3
 8007252:	8afb      	ldrh	r3, [r7, #22]
 8007254:	4313      	orrs	r3, r2
 8007256:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	8afa      	ldrh	r2, [r7, #22]
 800725e:	60da      	str	r2, [r3, #12]
 8007260:	e052      	b.n	8007308 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007268:	e04e      	b.n	8007308 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800726a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800726e:	2b08      	cmp	r3, #8
 8007270:	d827      	bhi.n	80072c2 <UART_SetConfig+0x506>
 8007272:	a201      	add	r2, pc, #4	@ (adr r2, 8007278 <UART_SetConfig+0x4bc>)
 8007274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007278:	0800729d 	.word	0x0800729d
 800727c:	080072a5 	.word	0x080072a5
 8007280:	080072ad 	.word	0x080072ad
 8007284:	080072c3 	.word	0x080072c3
 8007288:	080072b3 	.word	0x080072b3
 800728c:	080072c3 	.word	0x080072c3
 8007290:	080072c3 	.word	0x080072c3
 8007294:	080072c3 	.word	0x080072c3
 8007298:	080072bb 	.word	0x080072bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800729c:	f7fc f950 	bl	8003540 <HAL_RCC_GetPCLK1Freq>
 80072a0:	61f8      	str	r0, [r7, #28]
        break;
 80072a2:	e014      	b.n	80072ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072a4:	f7fc f962 	bl	800356c <HAL_RCC_GetPCLK2Freq>
 80072a8:	61f8      	str	r0, [r7, #28]
        break;
 80072aa:	e010      	b.n	80072ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072ac:	4b1e      	ldr	r3, [pc, #120]	@ (8007328 <UART_SetConfig+0x56c>)
 80072ae:	61fb      	str	r3, [r7, #28]
        break;
 80072b0:	e00d      	b.n	80072ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072b2:	f7fc f8ad 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 80072b6:	61f8      	str	r0, [r7, #28]
        break;
 80072b8:	e009      	b.n	80072ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072be:	61fb      	str	r3, [r7, #28]
        break;
 80072c0:	e005      	b.n	80072ce <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80072cc:	bf00      	nop
    }

    if (pclk != 0U)
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d019      	beq.n	8007308 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	085a      	lsrs	r2, r3, #1
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	441a      	add	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	2b0f      	cmp	r3, #15
 80072ec:	d909      	bls.n	8007302 <UART_SetConfig+0x546>
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072f4:	d205      	bcs.n	8007302 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	60da      	str	r2, [r3, #12]
 8007300:	e002      	b.n	8007308 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007314:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007318:	4618      	mov	r0, r3
 800731a:	3728      	adds	r7, #40	@ 0x28
 800731c:	46bd      	mov	sp, r7
 800731e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007322:	bf00      	nop
 8007324:	40008000 	.word	0x40008000
 8007328:	00f42400 	.word	0x00f42400

0800732c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007338:	f003 0308 	and.w	r3, r3, #8
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00a      	beq.n	8007356 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	430a      	orrs	r2, r1
 8007354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00a      	beq.n	8007378 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	430a      	orrs	r2, r1
 8007376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800737c:	f003 0302 	and.w	r3, r3, #2
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00a      	beq.n	800739a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800739e:	f003 0304 	and.w	r3, r3, #4
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00a      	beq.n	80073bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	430a      	orrs	r2, r1
 80073ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c0:	f003 0310 	and.w	r3, r3, #16
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00a      	beq.n	80073de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e2:	f003 0320 	and.w	r3, r3, #32
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00a      	beq.n	8007400 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	430a      	orrs	r2, r1
 80073fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007408:	2b00      	cmp	r3, #0
 800740a:	d01a      	beq.n	8007442 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007426:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800742a:	d10a      	bne.n	8007442 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	430a      	orrs	r2, r1
 8007440:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00a      	beq.n	8007464 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	430a      	orrs	r2, r1
 8007462:	605a      	str	r2, [r3, #4]
  }
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b098      	sub	sp, #96	@ 0x60
 8007474:	af02      	add	r7, sp, #8
 8007476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007480:	f7fa f934 	bl	80016ec <HAL_GetTick>
 8007484:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0308 	and.w	r3, r3, #8
 8007490:	2b08      	cmp	r3, #8
 8007492:	d12e      	bne.n	80074f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007494:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800749c:	2200      	movs	r2, #0
 800749e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f88c 	bl	80075c0 <UART_WaitOnFlagUntilTimeout>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d021      	beq.n	80074f2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074b6:	e853 3f00 	ldrex	r3, [r3]
 80074ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	461a      	mov	r2, r3
 80074ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80074ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074d4:	e841 2300 	strex	r3, r2, [r1]
 80074d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1e6      	bne.n	80074ae <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2220      	movs	r2, #32
 80074e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e062      	b.n	80075b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0304 	and.w	r3, r3, #4
 80074fc:	2b04      	cmp	r3, #4
 80074fe:	d149      	bne.n	8007594 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007500:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007504:	9300      	str	r3, [sp, #0]
 8007506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007508:	2200      	movs	r2, #0
 800750a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f856 	bl	80075c0 <UART_WaitOnFlagUntilTimeout>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d03c      	beq.n	8007594 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007522:	e853 3f00 	ldrex	r3, [r3]
 8007526:	623b      	str	r3, [r7, #32]
   return(result);
 8007528:	6a3b      	ldr	r3, [r7, #32]
 800752a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800752e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	461a      	mov	r2, r3
 8007536:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007538:	633b      	str	r3, [r7, #48]	@ 0x30
 800753a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800753e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007540:	e841 2300 	strex	r3, r2, [r1]
 8007544:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1e6      	bne.n	800751a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	3308      	adds	r3, #8
 8007552:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	e853 3f00 	ldrex	r3, [r3]
 800755a:	60fb      	str	r3, [r7, #12]
   return(result);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f023 0301 	bic.w	r3, r3, #1
 8007562:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	3308      	adds	r3, #8
 800756a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800756c:	61fa      	str	r2, [r7, #28]
 800756e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007570:	69b9      	ldr	r1, [r7, #24]
 8007572:	69fa      	ldr	r2, [r7, #28]
 8007574:	e841 2300 	strex	r3, r2, [r1]
 8007578:	617b      	str	r3, [r7, #20]
   return(result);
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1e5      	bne.n	800754c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2220      	movs	r2, #32
 8007584:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007590:	2303      	movs	r3, #3
 8007592:	e011      	b.n	80075b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2220      	movs	r2, #32
 8007598:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2220      	movs	r2, #32
 800759e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3758      	adds	r7, #88	@ 0x58
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	603b      	str	r3, [r7, #0]
 80075cc:	4613      	mov	r3, r2
 80075ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075d0:	e04f      	b.n	8007672 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d8:	d04b      	beq.n	8007672 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075da:	f7fa f887 	bl	80016ec <HAL_GetTick>
 80075de:	4602      	mov	r2, r0
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	69ba      	ldr	r2, [r7, #24]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d302      	bcc.n	80075f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d101      	bne.n	80075f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e04e      	b.n	8007692 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0304 	and.w	r3, r3, #4
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d037      	beq.n	8007672 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	2b80      	cmp	r3, #128	@ 0x80
 8007606:	d034      	beq.n	8007672 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	2b40      	cmp	r3, #64	@ 0x40
 800760c:	d031      	beq.n	8007672 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	f003 0308 	and.w	r3, r3, #8
 8007618:	2b08      	cmp	r3, #8
 800761a:	d110      	bne.n	800763e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2208      	movs	r2, #8
 8007622:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f000 f838 	bl	800769a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2208      	movs	r2, #8
 800762e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e029      	b.n	8007692 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	69db      	ldr	r3, [r3, #28]
 8007644:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007648:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800764c:	d111      	bne.n	8007672 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007656:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 f81e 	bl	800769a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2220      	movs	r2, #32
 8007662:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e00f      	b.n	8007692 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	69da      	ldr	r2, [r3, #28]
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	4013      	ands	r3, r2
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	429a      	cmp	r2, r3
 8007680:	bf0c      	ite	eq
 8007682:	2301      	moveq	r3, #1
 8007684:	2300      	movne	r3, #0
 8007686:	b2db      	uxtb	r3, r3
 8007688:	461a      	mov	r2, r3
 800768a:	79fb      	ldrb	r3, [r7, #7]
 800768c:	429a      	cmp	r2, r3
 800768e:	d0a0      	beq.n	80075d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800769a:	b480      	push	{r7}
 800769c:	b095      	sub	sp, #84	@ 0x54
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076aa:	e853 3f00 	ldrex	r3, [r3]
 80076ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	461a      	mov	r2, r3
 80076be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80076c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076c8:	e841 2300 	strex	r3, r2, [r1]
 80076cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1e6      	bne.n	80076a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	3308      	adds	r3, #8
 80076da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076dc:	6a3b      	ldr	r3, [r7, #32]
 80076de:	e853 3f00 	ldrex	r3, [r3]
 80076e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	f023 0301 	bic.w	r3, r3, #1
 80076ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	3308      	adds	r3, #8
 80076f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076fc:	e841 2300 	strex	r3, r2, [r1]
 8007700:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007704:	2b00      	cmp	r3, #0
 8007706:	d1e5      	bne.n	80076d4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800770c:	2b01      	cmp	r3, #1
 800770e:	d118      	bne.n	8007742 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	e853 3f00 	ldrex	r3, [r3]
 800771c:	60bb      	str	r3, [r7, #8]
   return(result);
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	f023 0310 	bic.w	r3, r3, #16
 8007724:	647b      	str	r3, [r7, #68]	@ 0x44
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	461a      	mov	r2, r3
 800772c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800772e:	61bb      	str	r3, [r7, #24]
 8007730:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007732:	6979      	ldr	r1, [r7, #20]
 8007734:	69ba      	ldr	r2, [r7, #24]
 8007736:	e841 2300 	strex	r3, r2, [r1]
 800773a:	613b      	str	r3, [r7, #16]
   return(result);
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1e6      	bne.n	8007710 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2220      	movs	r2, #32
 8007746:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007756:	bf00      	nop
 8007758:	3754      	adds	r7, #84	@ 0x54
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b084      	sub	sp, #16
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800776e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f7ff fb05 	bl	8006d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007786:	bf00      	nop
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b088      	sub	sp, #32
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	e853 3f00 	ldrex	r3, [r3]
 80077a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077aa:	61fb      	str	r3, [r7, #28]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	461a      	mov	r2, r3
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	61bb      	str	r3, [r7, #24]
 80077b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b8:	6979      	ldr	r1, [r7, #20]
 80077ba:	69ba      	ldr	r2, [r7, #24]
 80077bc:	e841 2300 	strex	r3, r2, [r1]
 80077c0:	613b      	str	r3, [r7, #16]
   return(result);
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1e6      	bne.n	8007796 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2220      	movs	r2, #32
 80077cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f7ff fad1 	bl	8006d7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077da:	bf00      	nop
 80077dc:	3720      	adds	r7, #32
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b083      	sub	sp, #12
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80077ea:	bf00      	nop
 80077ec:	370c      	adds	r7, #12
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b085      	sub	sp, #20
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	4603      	mov	r3, r0
 80077fe:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007800:	2300      	movs	r3, #0
 8007802:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007804:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007808:	2b84      	cmp	r3, #132	@ 0x84
 800780a:	d005      	beq.n	8007818 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800780c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4413      	add	r3, r2
 8007814:	3303      	adds	r3, #3
 8007816:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007818:	68fb      	ldr	r3, [r7, #12]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3714      	adds	r7, #20
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800782a:	f000 fb8d 	bl	8007f48 <vTaskStartScheduler>
  
  return osOK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	bd80      	pop	{r7, pc}

08007834 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007836:	b089      	sub	sp, #36	@ 0x24
 8007838:	af04      	add	r7, sp, #16
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d020      	beq.n	8007888 <osThreadCreate+0x54>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d01c      	beq.n	8007888 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685c      	ldr	r4, [r3, #4]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	691e      	ldr	r6, [r3, #16]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007860:	4618      	mov	r0, r3
 8007862:	f7ff ffc8 	bl	80077f6 <makeFreeRtosPriority>
 8007866:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	695b      	ldr	r3, [r3, #20]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007870:	9202      	str	r2, [sp, #8]
 8007872:	9301      	str	r3, [sp, #4]
 8007874:	9100      	str	r1, [sp, #0]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	4632      	mov	r2, r6
 800787a:	4629      	mov	r1, r5
 800787c:	4620      	mov	r0, r4
 800787e:	f000 f8ed 	bl	8007a5c <xTaskCreateStatic>
 8007882:	4603      	mov	r3, r0
 8007884:	60fb      	str	r3, [r7, #12]
 8007886:	e01c      	b.n	80078c2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685c      	ldr	r4, [r3, #4]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007894:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800789c:	4618      	mov	r0, r3
 800789e:	f7ff ffaa 	bl	80077f6 <makeFreeRtosPriority>
 80078a2:	4602      	mov	r2, r0
 80078a4:	f107 030c 	add.w	r3, r7, #12
 80078a8:	9301      	str	r3, [sp, #4]
 80078aa:	9200      	str	r2, [sp, #0]
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	4632      	mov	r2, r6
 80078b0:	4629      	mov	r1, r5
 80078b2:	4620      	mov	r0, r4
 80078b4:	f000 f932 	bl	8007b1c <xTaskCreate>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d001      	beq.n	80078c2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80078be:	2300      	movs	r3, #0
 80078c0:	e000      	b.n	80078c4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80078c2:	68fb      	ldr	r3, [r7, #12]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3714      	adds	r7, #20
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080078cc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <osDelay+0x16>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	e000      	b.n	80078e4 <osDelay+0x18>
 80078e2:	2301      	movs	r3, #1
 80078e4:	4618      	mov	r0, r3
 80078e6:	f000 faf9 	bl	8007edc <vTaskDelay>
  
  return osOK;
 80078ea:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f103 0208 	add.w	r2, r3, #8
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f04f 32ff 	mov.w	r2, #4294967295
 800790c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f103 0208 	add.w	r2, r3, #8
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f103 0208 	add.w	r2, r3, #8
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007942:	bf00      	nop
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800794e:	b480      	push	{r7}
 8007950:	b085      	sub	sp, #20
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	689a      	ldr	r2, [r3, #8]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	1c5a      	adds	r2, r3, #1
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	601a      	str	r2, [r3, #0]
}
 800798a:	bf00      	nop
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007996:	b480      	push	{r7}
 8007998:	b085      	sub	sp, #20
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ac:	d103      	bne.n	80079b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	e00c      	b.n	80079d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	3308      	adds	r3, #8
 80079ba:	60fb      	str	r3, [r7, #12]
 80079bc:	e002      	b.n	80079c4 <vListInsert+0x2e>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	60fb      	str	r3, [r7, #12]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d2f6      	bcs.n	80079be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	1c5a      	adds	r2, r3, #1
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	601a      	str	r2, [r3, #0]
}
 80079fc:	bf00      	nop
 80079fe:	3714      	adds	r7, #20
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	6892      	ldr	r2, [r2, #8]
 8007a1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	6852      	ldr	r2, [r2, #4]
 8007a28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d103      	bne.n	8007a3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	689a      	ldr	r2, [r3, #8]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	1e5a      	subs	r2, r3, #1
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b08e      	sub	sp, #56	@ 0x38
 8007a60:	af04      	add	r7, sp, #16
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
 8007a68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10b      	bne.n	8007a88 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a82:	bf00      	nop
 8007a84:	bf00      	nop
 8007a86:	e7fd      	b.n	8007a84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d10b      	bne.n	8007aa6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	61fb      	str	r3, [r7, #28]
}
 8007aa0:	bf00      	nop
 8007aa2:	bf00      	nop
 8007aa4:	e7fd      	b.n	8007aa2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007aa6:	23a0      	movs	r3, #160	@ 0xa0
 8007aa8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	2ba0      	cmp	r3, #160	@ 0xa0
 8007aae:	d00b      	beq.n	8007ac8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	61bb      	str	r3, [r7, #24]
}
 8007ac2:	bf00      	nop
 8007ac4:	bf00      	nop
 8007ac6:	e7fd      	b.n	8007ac4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007ac8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d01e      	beq.n	8007b0e <xTaskCreateStatic+0xb2>
 8007ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d01b      	beq.n	8007b0e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007adc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ade:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007ae8:	2300      	movs	r3, #0
 8007aea:	9303      	str	r3, [sp, #12]
 8007aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aee:	9302      	str	r3, [sp, #8]
 8007af0:	f107 0314 	add.w	r3, r7, #20
 8007af4:	9301      	str	r3, [sp, #4]
 8007af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af8:	9300      	str	r3, [sp, #0]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	68b9      	ldr	r1, [r7, #8]
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f000 f851 	bl	8007ba8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b06:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007b08:	f000 f8ee 	bl	8007ce8 <prvAddNewTaskToReadyList>
 8007b0c:	e001      	b.n	8007b12 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007b12:	697b      	ldr	r3, [r7, #20]
	}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3728      	adds	r7, #40	@ 0x28
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b08c      	sub	sp, #48	@ 0x30
 8007b20:	af04      	add	r7, sp, #16
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	603b      	str	r3, [r7, #0]
 8007b28:	4613      	mov	r3, r2
 8007b2a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007b2c:	88fb      	ldrh	r3, [r7, #6]
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4618      	mov	r0, r3
 8007b32:	f000 ff91 	bl	8008a58 <pvPortMalloc>
 8007b36:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00e      	beq.n	8007b5c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007b3e:	20a0      	movs	r0, #160	@ 0xa0
 8007b40:	f000 ff8a 	bl	8008a58 <pvPortMalloc>
 8007b44:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d003      	beq.n	8007b54 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b52:	e005      	b.n	8007b60 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007b54:	6978      	ldr	r0, [r7, #20]
 8007b56:	f001 f84d 	bl	8008bf4 <vPortFree>
 8007b5a:	e001      	b.n	8007b60 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d017      	beq.n	8007b96 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007b6e:	88fa      	ldrh	r2, [r7, #6]
 8007b70:	2300      	movs	r3, #0
 8007b72:	9303      	str	r3, [sp, #12]
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	9302      	str	r3, [sp, #8]
 8007b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b7a:	9301      	str	r3, [sp, #4]
 8007b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	68b9      	ldr	r1, [r7, #8]
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f000 f80f 	bl	8007ba8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b8a:	69f8      	ldr	r0, [r7, #28]
 8007b8c:	f000 f8ac 	bl	8007ce8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b90:	2301      	movs	r3, #1
 8007b92:	61bb      	str	r3, [r7, #24]
 8007b94:	e002      	b.n	8007b9c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007b96:	f04f 33ff 	mov.w	r3, #4294967295
 8007b9a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b9c:	69bb      	ldr	r3, [r7, #24]
	}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3720      	adds	r7, #32
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
	...

08007ba8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b088      	sub	sp, #32
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
 8007bb4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	f023 0307 	bic.w	r3, r3, #7
 8007bce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	f003 0307 	and.w	r3, r3, #7
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00b      	beq.n	8007bf2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	617b      	str	r3, [r7, #20]
}
 8007bec:	bf00      	nop
 8007bee:	bf00      	nop
 8007bf0:	e7fd      	b.n	8007bee <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d01f      	beq.n	8007c38 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	61fb      	str	r3, [r7, #28]
 8007bfc:	e012      	b.n	8007c24 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	4413      	add	r3, r2
 8007c04:	7819      	ldrb	r1, [r3, #0]
 8007c06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	3334      	adds	r3, #52	@ 0x34
 8007c0e:	460a      	mov	r2, r1
 8007c10:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	4413      	add	r3, r2
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d006      	beq.n	8007c2c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	3301      	adds	r3, #1
 8007c22:	61fb      	str	r3, [r7, #28]
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	2b0f      	cmp	r3, #15
 8007c28:	d9e9      	bls.n	8007bfe <prvInitialiseNewTask+0x56>
 8007c2a:	e000      	b.n	8007c2e <prvInitialiseNewTask+0x86>
			{
				break;
 8007c2c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c36:	e003      	b.n	8007c40 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c42:	2b06      	cmp	r3, #6
 8007c44:	d901      	bls.n	8007c4a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c46:	2306      	movs	r3, #6
 8007c48:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c54:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c58:	2200      	movs	r2, #0
 8007c5a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5e:	3304      	adds	r3, #4
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7ff fe67 	bl	8007934 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c68:	3318      	adds	r3, #24
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7ff fe62 	bl	8007934 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c74:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c78:	f1c3 0207 	rsb	r2, r3, #7
 8007c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c84:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c98:	334c      	adds	r3, #76	@ 0x4c
 8007c9a:	224c      	movs	r2, #76	@ 0x4c
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f001 fdce 	bl	8009840 <memset>
 8007ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca6:	4a0d      	ldr	r2, [pc, #52]	@ (8007cdc <prvInitialiseNewTask+0x134>)
 8007ca8:	651a      	str	r2, [r3, #80]	@ 0x50
 8007caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cac:	4a0c      	ldr	r2, [pc, #48]	@ (8007ce0 <prvInitialiseNewTask+0x138>)
 8007cae:	655a      	str	r2, [r3, #84]	@ 0x54
 8007cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb2:	4a0c      	ldr	r2, [pc, #48]	@ (8007ce4 <prvInitialiseNewTask+0x13c>)
 8007cb4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007cb6:	683a      	ldr	r2, [r7, #0]
 8007cb8:	68f9      	ldr	r1, [r7, #12]
 8007cba:	69b8      	ldr	r0, [r7, #24]
 8007cbc:	f000 fcba 	bl	8008634 <pxPortInitialiseStack>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cd2:	bf00      	nop
 8007cd4:	3720      	adds	r7, #32
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	20001718 	.word	0x20001718
 8007ce0:	20001780 	.word	0x20001780
 8007ce4:	200017e8 	.word	0x200017e8

08007ce8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007cf0:	f000 fdd2 	bl	8008898 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007cf4:	4b2a      	ldr	r3, [pc, #168]	@ (8007da0 <prvAddNewTaskToReadyList+0xb8>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	4a29      	ldr	r2, [pc, #164]	@ (8007da0 <prvAddNewTaskToReadyList+0xb8>)
 8007cfc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007cfe:	4b29      	ldr	r3, [pc, #164]	@ (8007da4 <prvAddNewTaskToReadyList+0xbc>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d109      	bne.n	8007d1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d06:	4a27      	ldr	r2, [pc, #156]	@ (8007da4 <prvAddNewTaskToReadyList+0xbc>)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d0c:	4b24      	ldr	r3, [pc, #144]	@ (8007da0 <prvAddNewTaskToReadyList+0xb8>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d110      	bne.n	8007d36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d14:	f000 fb64 	bl	80083e0 <prvInitialiseTaskLists>
 8007d18:	e00d      	b.n	8007d36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d1a:	4b23      	ldr	r3, [pc, #140]	@ (8007da8 <prvAddNewTaskToReadyList+0xc0>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d109      	bne.n	8007d36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d22:	4b20      	ldr	r3, [pc, #128]	@ (8007da4 <prvAddNewTaskToReadyList+0xbc>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d802      	bhi.n	8007d36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d30:	4a1c      	ldr	r2, [pc, #112]	@ (8007da4 <prvAddNewTaskToReadyList+0xbc>)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d36:	4b1d      	ldr	r3, [pc, #116]	@ (8007dac <prvAddNewTaskToReadyList+0xc4>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	4a1b      	ldr	r2, [pc, #108]	@ (8007dac <prvAddNewTaskToReadyList+0xc4>)
 8007d3e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d44:	2201      	movs	r2, #1
 8007d46:	409a      	lsls	r2, r3
 8007d48:	4b19      	ldr	r3, [pc, #100]	@ (8007db0 <prvAddNewTaskToReadyList+0xc8>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	4a18      	ldr	r2, [pc, #96]	@ (8007db0 <prvAddNewTaskToReadyList+0xc8>)
 8007d50:	6013      	str	r3, [r2, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d56:	4613      	mov	r3, r2
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	4413      	add	r3, r2
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	4a15      	ldr	r2, [pc, #84]	@ (8007db4 <prvAddNewTaskToReadyList+0xcc>)
 8007d60:	441a      	add	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	3304      	adds	r3, #4
 8007d66:	4619      	mov	r1, r3
 8007d68:	4610      	mov	r0, r2
 8007d6a:	f7ff fdf0 	bl	800794e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007d6e:	f000 fdc5 	bl	80088fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007d72:	4b0d      	ldr	r3, [pc, #52]	@ (8007da8 <prvAddNewTaskToReadyList+0xc0>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00e      	beq.n	8007d98 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8007da4 <prvAddNewTaskToReadyList+0xbc>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d207      	bcs.n	8007d98 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007d88:	4b0b      	ldr	r3, [pc, #44]	@ (8007db8 <prvAddNewTaskToReadyList+0xd0>)
 8007d8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d8e:	601a      	str	r2, [r3, #0]
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d98:	bf00      	nop
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	20000b0c 	.word	0x20000b0c
 8007da4:	20000a0c 	.word	0x20000a0c
 8007da8:	20000b18 	.word	0x20000b18
 8007dac:	20000b28 	.word	0x20000b28
 8007db0:	20000b14 	.word	0x20000b14
 8007db4:	20000a10 	.word	0x20000a10
 8007db8:	e000ed04 	.word	0xe000ed04

08007dbc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007dc4:	f000 fd68 	bl	8008898 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d102      	bne.n	8007dd4 <vTaskDelete+0x18>
 8007dce:	4b39      	ldr	r3, [pc, #228]	@ (8007eb4 <vTaskDelete+0xf8>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	e000      	b.n	8007dd6 <vTaskDelete+0x1a>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	3304      	adds	r3, #4
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7ff fe13 	bl	8007a08 <uxListRemove>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d115      	bne.n	8007e14 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dec:	4932      	ldr	r1, [pc, #200]	@ (8007eb8 <vTaskDelete+0xfc>)
 8007dee:	4613      	mov	r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4413      	add	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	440b      	add	r3, r1
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10a      	bne.n	8007e14 <vTaskDelete+0x58>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e02:	2201      	movs	r2, #1
 8007e04:	fa02 f303 	lsl.w	r3, r2, r3
 8007e08:	43da      	mvns	r2, r3
 8007e0a:	4b2c      	ldr	r3, [pc, #176]	@ (8007ebc <vTaskDelete+0x100>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4013      	ands	r3, r2
 8007e10:	4a2a      	ldr	r2, [pc, #168]	@ (8007ebc <vTaskDelete+0x100>)
 8007e12:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d004      	beq.n	8007e26 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	3318      	adds	r3, #24
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7ff fdf1 	bl	8007a08 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007e26:	4b26      	ldr	r3, [pc, #152]	@ (8007ec0 <vTaskDelete+0x104>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	4a24      	ldr	r2, [pc, #144]	@ (8007ec0 <vTaskDelete+0x104>)
 8007e2e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007e30:	4b20      	ldr	r3, [pc, #128]	@ (8007eb4 <vTaskDelete+0xf8>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d10b      	bne.n	8007e52 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	3304      	adds	r3, #4
 8007e3e:	4619      	mov	r1, r3
 8007e40:	4820      	ldr	r0, [pc, #128]	@ (8007ec4 <vTaskDelete+0x108>)
 8007e42:	f7ff fd84 	bl	800794e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007e46:	4b20      	ldr	r3, [pc, #128]	@ (8007ec8 <vTaskDelete+0x10c>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	4a1e      	ldr	r2, [pc, #120]	@ (8007ec8 <vTaskDelete+0x10c>)
 8007e4e:	6013      	str	r3, [r2, #0]
 8007e50:	e009      	b.n	8007e66 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007e52:	4b1e      	ldr	r3, [pc, #120]	@ (8007ecc <vTaskDelete+0x110>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	3b01      	subs	r3, #1
 8007e58:	4a1c      	ldr	r2, [pc, #112]	@ (8007ecc <vTaskDelete+0x110>)
 8007e5a:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 fb2d 	bl	80084bc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007e62:	f000 fb61 	bl	8008528 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8007e66:	f000 fd49 	bl	80088fc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007e6a:	4b19      	ldr	r3, [pc, #100]	@ (8007ed0 <vTaskDelete+0x114>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d01c      	beq.n	8007eac <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 8007e72:	4b10      	ldr	r3, [pc, #64]	@ (8007eb4 <vTaskDelete+0xf8>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d117      	bne.n	8007eac <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007e7c:	4b15      	ldr	r3, [pc, #84]	@ (8007ed4 <vTaskDelete+0x118>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00b      	beq.n	8007e9c <vTaskDelete+0xe0>
	__asm volatile
 8007e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e88:	f383 8811 	msr	BASEPRI, r3
 8007e8c:	f3bf 8f6f 	isb	sy
 8007e90:	f3bf 8f4f 	dsb	sy
 8007e94:	60bb      	str	r3, [r7, #8]
}
 8007e96:	bf00      	nop
 8007e98:	bf00      	nop
 8007e9a:	e7fd      	b.n	8007e98 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8007e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8007ed8 <vTaskDelete+0x11c>)
 8007e9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ea2:	601a      	str	r2, [r3, #0]
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007eac:	bf00      	nop
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	20000a0c 	.word	0x20000a0c
 8007eb8:	20000a10 	.word	0x20000a10
 8007ebc:	20000b14 	.word	0x20000b14
 8007ec0:	20000b28 	.word	0x20000b28
 8007ec4:	20000ae0 	.word	0x20000ae0
 8007ec8:	20000af4 	.word	0x20000af4
 8007ecc:	20000b0c 	.word	0x20000b0c
 8007ed0:	20000b18 	.word	0x20000b18
 8007ed4:	20000b34 	.word	0x20000b34
 8007ed8:	e000ed04 	.word	0xe000ed04

08007edc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d018      	beq.n	8007f20 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007eee:	4b14      	ldr	r3, [pc, #80]	@ (8007f40 <vTaskDelay+0x64>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00b      	beq.n	8007f0e <vTaskDelay+0x32>
	__asm volatile
 8007ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007efa:	f383 8811 	msr	BASEPRI, r3
 8007efe:	f3bf 8f6f 	isb	sy
 8007f02:	f3bf 8f4f 	dsb	sy
 8007f06:	60bb      	str	r3, [r7, #8]
}
 8007f08:	bf00      	nop
 8007f0a:	bf00      	nop
 8007f0c:	e7fd      	b.n	8007f0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007f0e:	f000 f885 	bl	800801c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007f12:	2100      	movs	r1, #0
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 fb27 	bl	8008568 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007f1a:	f000 f88d 	bl	8008038 <xTaskResumeAll>
 8007f1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d107      	bne.n	8007f36 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007f26:	4b07      	ldr	r3, [pc, #28]	@ (8007f44 <vTaskDelay+0x68>)
 8007f28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f2c:	601a      	str	r2, [r3, #0]
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f36:	bf00      	nop
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	20000b34 	.word	0x20000b34
 8007f44:	e000ed04 	.word	0xe000ed04

08007f48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b08a      	sub	sp, #40	@ 0x28
 8007f4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f52:	2300      	movs	r3, #0
 8007f54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f56:	463a      	mov	r2, r7
 8007f58:	1d39      	adds	r1, r7, #4
 8007f5a:	f107 0308 	add.w	r3, r7, #8
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7f8 fb24 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	9202      	str	r2, [sp, #8]
 8007f6c:	9301      	str	r3, [sp, #4]
 8007f6e:	2300      	movs	r3, #0
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	2300      	movs	r3, #0
 8007f74:	460a      	mov	r2, r1
 8007f76:	4921      	ldr	r1, [pc, #132]	@ (8007ffc <vTaskStartScheduler+0xb4>)
 8007f78:	4821      	ldr	r0, [pc, #132]	@ (8008000 <vTaskStartScheduler+0xb8>)
 8007f7a:	f7ff fd6f 	bl	8007a5c <xTaskCreateStatic>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	4a20      	ldr	r2, [pc, #128]	@ (8008004 <vTaskStartScheduler+0xbc>)
 8007f82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f84:	4b1f      	ldr	r3, [pc, #124]	@ (8008004 <vTaskStartScheduler+0xbc>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d002      	beq.n	8007f92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	617b      	str	r3, [r7, #20]
 8007f90:	e001      	b.n	8007f96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f92:	2300      	movs	r3, #0
 8007f94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d11b      	bne.n	8007fd4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa0:	f383 8811 	msr	BASEPRI, r3
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	613b      	str	r3, [r7, #16]
}
 8007fae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007fb0:	4b15      	ldr	r3, [pc, #84]	@ (8008008 <vTaskStartScheduler+0xc0>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	334c      	adds	r3, #76	@ 0x4c
 8007fb6:	4a15      	ldr	r2, [pc, #84]	@ (800800c <vTaskStartScheduler+0xc4>)
 8007fb8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007fba:	4b15      	ldr	r3, [pc, #84]	@ (8008010 <vTaskStartScheduler+0xc8>)
 8007fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8007fc0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007fc2:	4b14      	ldr	r3, [pc, #80]	@ (8008014 <vTaskStartScheduler+0xcc>)
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007fc8:	4b13      	ldr	r3, [pc, #76]	@ (8008018 <vTaskStartScheduler+0xd0>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007fce:	f000 fbbf 	bl	8008750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007fd2:	e00f      	b.n	8007ff4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fda:	d10b      	bne.n	8007ff4 <vTaskStartScheduler+0xac>
	__asm volatile
 8007fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	60fb      	str	r3, [r7, #12]
}
 8007fee:	bf00      	nop
 8007ff0:	bf00      	nop
 8007ff2:	e7fd      	b.n	8007ff0 <vTaskStartScheduler+0xa8>
}
 8007ff4:	bf00      	nop
 8007ff6:	3718      	adds	r7, #24
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	0800a8f4 	.word	0x0800a8f4
 8008000:	080083b1 	.word	0x080083b1
 8008004:	20000b30 	.word	0x20000b30
 8008008:	20000a0c 	.word	0x20000a0c
 800800c:	20000028 	.word	0x20000028
 8008010:	20000b2c 	.word	0x20000b2c
 8008014:	20000b18 	.word	0x20000b18
 8008018:	20000b10 	.word	0x20000b10

0800801c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800801c:	b480      	push	{r7}
 800801e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008020:	4b04      	ldr	r3, [pc, #16]	@ (8008034 <vTaskSuspendAll+0x18>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	3301      	adds	r3, #1
 8008026:	4a03      	ldr	r2, [pc, #12]	@ (8008034 <vTaskSuspendAll+0x18>)
 8008028:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800802a:	bf00      	nop
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr
 8008034:	20000b34 	.word	0x20000b34

08008038 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800803e:	2300      	movs	r3, #0
 8008040:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008042:	2300      	movs	r3, #0
 8008044:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008046:	4b42      	ldr	r3, [pc, #264]	@ (8008150 <xTaskResumeAll+0x118>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d10b      	bne.n	8008066 <xTaskResumeAll+0x2e>
	__asm volatile
 800804e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	603b      	str	r3, [r7, #0]
}
 8008060:	bf00      	nop
 8008062:	bf00      	nop
 8008064:	e7fd      	b.n	8008062 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008066:	f000 fc17 	bl	8008898 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800806a:	4b39      	ldr	r3, [pc, #228]	@ (8008150 <xTaskResumeAll+0x118>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	3b01      	subs	r3, #1
 8008070:	4a37      	ldr	r2, [pc, #220]	@ (8008150 <xTaskResumeAll+0x118>)
 8008072:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008074:	4b36      	ldr	r3, [pc, #216]	@ (8008150 <xTaskResumeAll+0x118>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d161      	bne.n	8008140 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800807c:	4b35      	ldr	r3, [pc, #212]	@ (8008154 <xTaskResumeAll+0x11c>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d05d      	beq.n	8008140 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008084:	e02e      	b.n	80080e4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008086:	4b34      	ldr	r3, [pc, #208]	@ (8008158 <xTaskResumeAll+0x120>)
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	3318      	adds	r3, #24
 8008092:	4618      	mov	r0, r3
 8008094:	f7ff fcb8 	bl	8007a08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	3304      	adds	r3, #4
 800809c:	4618      	mov	r0, r3
 800809e:	f7ff fcb3 	bl	8007a08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a6:	2201      	movs	r2, #1
 80080a8:	409a      	lsls	r2, r3
 80080aa:	4b2c      	ldr	r3, [pc, #176]	@ (800815c <xTaskResumeAll+0x124>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	4a2a      	ldr	r2, [pc, #168]	@ (800815c <xTaskResumeAll+0x124>)
 80080b2:	6013      	str	r3, [r2, #0]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080b8:	4613      	mov	r3, r2
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	4413      	add	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4a27      	ldr	r2, [pc, #156]	@ (8008160 <xTaskResumeAll+0x128>)
 80080c2:	441a      	add	r2, r3
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	3304      	adds	r3, #4
 80080c8:	4619      	mov	r1, r3
 80080ca:	4610      	mov	r0, r2
 80080cc:	f7ff fc3f 	bl	800794e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080d4:	4b23      	ldr	r3, [pc, #140]	@ (8008164 <xTaskResumeAll+0x12c>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080da:	429a      	cmp	r2, r3
 80080dc:	d302      	bcc.n	80080e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80080de:	4b22      	ldr	r3, [pc, #136]	@ (8008168 <xTaskResumeAll+0x130>)
 80080e0:	2201      	movs	r2, #1
 80080e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080e4:	4b1c      	ldr	r3, [pc, #112]	@ (8008158 <xTaskResumeAll+0x120>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1cc      	bne.n	8008086 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80080f2:	f000 fa19 	bl	8008528 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80080f6:	4b1d      	ldr	r3, [pc, #116]	@ (800816c <xTaskResumeAll+0x134>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d010      	beq.n	8008124 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008102:	f000 f837 	bl	8008174 <xTaskIncrementTick>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d002      	beq.n	8008112 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800810c:	4b16      	ldr	r3, [pc, #88]	@ (8008168 <xTaskResumeAll+0x130>)
 800810e:	2201      	movs	r2, #1
 8008110:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	3b01      	subs	r3, #1
 8008116:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1f1      	bne.n	8008102 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800811e:	4b13      	ldr	r3, [pc, #76]	@ (800816c <xTaskResumeAll+0x134>)
 8008120:	2200      	movs	r2, #0
 8008122:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008124:	4b10      	ldr	r3, [pc, #64]	@ (8008168 <xTaskResumeAll+0x130>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d009      	beq.n	8008140 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800812c:	2301      	movs	r3, #1
 800812e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008130:	4b0f      	ldr	r3, [pc, #60]	@ (8008170 <xTaskResumeAll+0x138>)
 8008132:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008136:	601a      	str	r2, [r3, #0]
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008140:	f000 fbdc 	bl	80088fc <vPortExitCritical>

	return xAlreadyYielded;
 8008144:	68bb      	ldr	r3, [r7, #8]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	20000b34 	.word	0x20000b34
 8008154:	20000b0c 	.word	0x20000b0c
 8008158:	20000acc 	.word	0x20000acc
 800815c:	20000b14 	.word	0x20000b14
 8008160:	20000a10 	.word	0x20000a10
 8008164:	20000a0c 	.word	0x20000a0c
 8008168:	20000b20 	.word	0x20000b20
 800816c:	20000b1c 	.word	0x20000b1c
 8008170:	e000ed04 	.word	0xe000ed04

08008174 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800817a:	2300      	movs	r3, #0
 800817c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800817e:	4b4f      	ldr	r3, [pc, #316]	@ (80082bc <xTaskIncrementTick+0x148>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	f040 808f 	bne.w	80082a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008188:	4b4d      	ldr	r3, [pc, #308]	@ (80082c0 <xTaskIncrementTick+0x14c>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	3301      	adds	r3, #1
 800818e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008190:	4a4b      	ldr	r2, [pc, #300]	@ (80082c0 <xTaskIncrementTick+0x14c>)
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d121      	bne.n	80081e0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800819c:	4b49      	ldr	r3, [pc, #292]	@ (80082c4 <xTaskIncrementTick+0x150>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00b      	beq.n	80081be <xTaskIncrementTick+0x4a>
	__asm volatile
 80081a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081aa:	f383 8811 	msr	BASEPRI, r3
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	f3bf 8f4f 	dsb	sy
 80081b6:	603b      	str	r3, [r7, #0]
}
 80081b8:	bf00      	nop
 80081ba:	bf00      	nop
 80081bc:	e7fd      	b.n	80081ba <xTaskIncrementTick+0x46>
 80081be:	4b41      	ldr	r3, [pc, #260]	@ (80082c4 <xTaskIncrementTick+0x150>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	60fb      	str	r3, [r7, #12]
 80081c4:	4b40      	ldr	r3, [pc, #256]	@ (80082c8 <xTaskIncrementTick+0x154>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a3e      	ldr	r2, [pc, #248]	@ (80082c4 <xTaskIncrementTick+0x150>)
 80081ca:	6013      	str	r3, [r2, #0]
 80081cc:	4a3e      	ldr	r2, [pc, #248]	@ (80082c8 <xTaskIncrementTick+0x154>)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6013      	str	r3, [r2, #0]
 80081d2:	4b3e      	ldr	r3, [pc, #248]	@ (80082cc <xTaskIncrementTick+0x158>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	3301      	adds	r3, #1
 80081d8:	4a3c      	ldr	r2, [pc, #240]	@ (80082cc <xTaskIncrementTick+0x158>)
 80081da:	6013      	str	r3, [r2, #0]
 80081dc:	f000 f9a4 	bl	8008528 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80081e0:	4b3b      	ldr	r3, [pc, #236]	@ (80082d0 <xTaskIncrementTick+0x15c>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	693a      	ldr	r2, [r7, #16]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d348      	bcc.n	800827c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081ea:	4b36      	ldr	r3, [pc, #216]	@ (80082c4 <xTaskIncrementTick+0x150>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d104      	bne.n	80081fe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081f4:	4b36      	ldr	r3, [pc, #216]	@ (80082d0 <xTaskIncrementTick+0x15c>)
 80081f6:	f04f 32ff 	mov.w	r2, #4294967295
 80081fa:	601a      	str	r2, [r3, #0]
					break;
 80081fc:	e03e      	b.n	800827c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081fe:	4b31      	ldr	r3, [pc, #196]	@ (80082c4 <xTaskIncrementTick+0x150>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	429a      	cmp	r2, r3
 8008214:	d203      	bcs.n	800821e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008216:	4a2e      	ldr	r2, [pc, #184]	@ (80082d0 <xTaskIncrementTick+0x15c>)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800821c:	e02e      	b.n	800827c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	3304      	adds	r3, #4
 8008222:	4618      	mov	r0, r3
 8008224:	f7ff fbf0 	bl	8007a08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800822c:	2b00      	cmp	r3, #0
 800822e:	d004      	beq.n	800823a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	3318      	adds	r3, #24
 8008234:	4618      	mov	r0, r3
 8008236:	f7ff fbe7 	bl	8007a08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823e:	2201      	movs	r2, #1
 8008240:	409a      	lsls	r2, r3
 8008242:	4b24      	ldr	r3, [pc, #144]	@ (80082d4 <xTaskIncrementTick+0x160>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4313      	orrs	r3, r2
 8008248:	4a22      	ldr	r2, [pc, #136]	@ (80082d4 <xTaskIncrementTick+0x160>)
 800824a:	6013      	str	r3, [r2, #0]
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008250:	4613      	mov	r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4413      	add	r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	4a1f      	ldr	r2, [pc, #124]	@ (80082d8 <xTaskIncrementTick+0x164>)
 800825a:	441a      	add	r2, r3
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	3304      	adds	r3, #4
 8008260:	4619      	mov	r1, r3
 8008262:	4610      	mov	r0, r2
 8008264:	f7ff fb73 	bl	800794e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800826c:	4b1b      	ldr	r3, [pc, #108]	@ (80082dc <xTaskIncrementTick+0x168>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008272:	429a      	cmp	r2, r3
 8008274:	d3b9      	bcc.n	80081ea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008276:	2301      	movs	r3, #1
 8008278:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800827a:	e7b6      	b.n	80081ea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800827c:	4b17      	ldr	r3, [pc, #92]	@ (80082dc <xTaskIncrementTick+0x168>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008282:	4915      	ldr	r1, [pc, #84]	@ (80082d8 <xTaskIncrementTick+0x164>)
 8008284:	4613      	mov	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	440b      	add	r3, r1
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d901      	bls.n	8008298 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008294:	2301      	movs	r3, #1
 8008296:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008298:	4b11      	ldr	r3, [pc, #68]	@ (80082e0 <xTaskIncrementTick+0x16c>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d007      	beq.n	80082b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80082a0:	2301      	movs	r3, #1
 80082a2:	617b      	str	r3, [r7, #20]
 80082a4:	e004      	b.n	80082b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80082a6:	4b0f      	ldr	r3, [pc, #60]	@ (80082e4 <xTaskIncrementTick+0x170>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	3301      	adds	r3, #1
 80082ac:	4a0d      	ldr	r2, [pc, #52]	@ (80082e4 <xTaskIncrementTick+0x170>)
 80082ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80082b0:	697b      	ldr	r3, [r7, #20]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3718      	adds	r7, #24
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	20000b34 	.word	0x20000b34
 80082c0:	20000b10 	.word	0x20000b10
 80082c4:	20000ac4 	.word	0x20000ac4
 80082c8:	20000ac8 	.word	0x20000ac8
 80082cc:	20000b24 	.word	0x20000b24
 80082d0:	20000b2c 	.word	0x20000b2c
 80082d4:	20000b14 	.word	0x20000b14
 80082d8:	20000a10 	.word	0x20000a10
 80082dc:	20000a0c 	.word	0x20000a0c
 80082e0:	20000b20 	.word	0x20000b20
 80082e4:	20000b1c 	.word	0x20000b1c

080082e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80082e8:	b480      	push	{r7}
 80082ea:	b087      	sub	sp, #28
 80082ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80082ee:	4b2a      	ldr	r3, [pc, #168]	@ (8008398 <vTaskSwitchContext+0xb0>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d003      	beq.n	80082fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80082f6:	4b29      	ldr	r3, [pc, #164]	@ (800839c <vTaskSwitchContext+0xb4>)
 80082f8:	2201      	movs	r2, #1
 80082fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80082fc:	e045      	b.n	800838a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80082fe:	4b27      	ldr	r3, [pc, #156]	@ (800839c <vTaskSwitchContext+0xb4>)
 8008300:	2200      	movs	r2, #0
 8008302:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008304:	4b26      	ldr	r3, [pc, #152]	@ (80083a0 <vTaskSwitchContext+0xb8>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	fab3 f383 	clz	r3, r3
 8008310:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008312:	7afb      	ldrb	r3, [r7, #11]
 8008314:	f1c3 031f 	rsb	r3, r3, #31
 8008318:	617b      	str	r3, [r7, #20]
 800831a:	4922      	ldr	r1, [pc, #136]	@ (80083a4 <vTaskSwitchContext+0xbc>)
 800831c:	697a      	ldr	r2, [r7, #20]
 800831e:	4613      	mov	r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	440b      	add	r3, r1
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10b      	bne.n	8008346 <vTaskSwitchContext+0x5e>
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	607b      	str	r3, [r7, #4]
}
 8008340:	bf00      	nop
 8008342:	bf00      	nop
 8008344:	e7fd      	b.n	8008342 <vTaskSwitchContext+0x5a>
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	4613      	mov	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	4413      	add	r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	4a14      	ldr	r2, [pc, #80]	@ (80083a4 <vTaskSwitchContext+0xbc>)
 8008352:	4413      	add	r3, r2
 8008354:	613b      	str	r3, [r7, #16]
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	685a      	ldr	r2, [r3, #4]
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	605a      	str	r2, [r3, #4]
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	3308      	adds	r3, #8
 8008368:	429a      	cmp	r2, r3
 800836a:	d104      	bne.n	8008376 <vTaskSwitchContext+0x8e>
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	685a      	ldr	r2, [r3, #4]
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	605a      	str	r2, [r3, #4]
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	4a0a      	ldr	r2, [pc, #40]	@ (80083a8 <vTaskSwitchContext+0xc0>)
 800837e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008380:	4b09      	ldr	r3, [pc, #36]	@ (80083a8 <vTaskSwitchContext+0xc0>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	334c      	adds	r3, #76	@ 0x4c
 8008386:	4a09      	ldr	r2, [pc, #36]	@ (80083ac <vTaskSwitchContext+0xc4>)
 8008388:	6013      	str	r3, [r2, #0]
}
 800838a:	bf00      	nop
 800838c:	371c      	adds	r7, #28
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	20000b34 	.word	0x20000b34
 800839c:	20000b20 	.word	0x20000b20
 80083a0:	20000b14 	.word	0x20000b14
 80083a4:	20000a10 	.word	0x20000a10
 80083a8:	20000a0c 	.word	0x20000a0c
 80083ac:	20000028 	.word	0x20000028

080083b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80083b8:	f000 f852 	bl	8008460 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80083bc:	4b06      	ldr	r3, [pc, #24]	@ (80083d8 <prvIdleTask+0x28>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d9f9      	bls.n	80083b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80083c4:	4b05      	ldr	r3, [pc, #20]	@ (80083dc <prvIdleTask+0x2c>)
 80083c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083ca:	601a      	str	r2, [r3, #0]
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80083d4:	e7f0      	b.n	80083b8 <prvIdleTask+0x8>
 80083d6:	bf00      	nop
 80083d8:	20000a10 	.word	0x20000a10
 80083dc:	e000ed04 	.word	0xe000ed04

080083e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083e6:	2300      	movs	r3, #0
 80083e8:	607b      	str	r3, [r7, #4]
 80083ea:	e00c      	b.n	8008406 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	4613      	mov	r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	4413      	add	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4a12      	ldr	r2, [pc, #72]	@ (8008440 <prvInitialiseTaskLists+0x60>)
 80083f8:	4413      	add	r3, r2
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7ff fa7a 	bl	80078f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	3301      	adds	r3, #1
 8008404:	607b      	str	r3, [r7, #4]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2b06      	cmp	r3, #6
 800840a:	d9ef      	bls.n	80083ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800840c:	480d      	ldr	r0, [pc, #52]	@ (8008444 <prvInitialiseTaskLists+0x64>)
 800840e:	f7ff fa71 	bl	80078f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008412:	480d      	ldr	r0, [pc, #52]	@ (8008448 <prvInitialiseTaskLists+0x68>)
 8008414:	f7ff fa6e 	bl	80078f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008418:	480c      	ldr	r0, [pc, #48]	@ (800844c <prvInitialiseTaskLists+0x6c>)
 800841a:	f7ff fa6b 	bl	80078f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800841e:	480c      	ldr	r0, [pc, #48]	@ (8008450 <prvInitialiseTaskLists+0x70>)
 8008420:	f7ff fa68 	bl	80078f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008424:	480b      	ldr	r0, [pc, #44]	@ (8008454 <prvInitialiseTaskLists+0x74>)
 8008426:	f7ff fa65 	bl	80078f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800842a:	4b0b      	ldr	r3, [pc, #44]	@ (8008458 <prvInitialiseTaskLists+0x78>)
 800842c:	4a05      	ldr	r2, [pc, #20]	@ (8008444 <prvInitialiseTaskLists+0x64>)
 800842e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008430:	4b0a      	ldr	r3, [pc, #40]	@ (800845c <prvInitialiseTaskLists+0x7c>)
 8008432:	4a05      	ldr	r2, [pc, #20]	@ (8008448 <prvInitialiseTaskLists+0x68>)
 8008434:	601a      	str	r2, [r3, #0]
}
 8008436:	bf00      	nop
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	20000a10 	.word	0x20000a10
 8008444:	20000a9c 	.word	0x20000a9c
 8008448:	20000ab0 	.word	0x20000ab0
 800844c:	20000acc 	.word	0x20000acc
 8008450:	20000ae0 	.word	0x20000ae0
 8008454:	20000af8 	.word	0x20000af8
 8008458:	20000ac4 	.word	0x20000ac4
 800845c:	20000ac8 	.word	0x20000ac8

08008460 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008466:	e019      	b.n	800849c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008468:	f000 fa16 	bl	8008898 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800846c:	4b10      	ldr	r3, [pc, #64]	@ (80084b0 <prvCheckTasksWaitingTermination+0x50>)
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	3304      	adds	r3, #4
 8008478:	4618      	mov	r0, r3
 800847a:	f7ff fac5 	bl	8007a08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800847e:	4b0d      	ldr	r3, [pc, #52]	@ (80084b4 <prvCheckTasksWaitingTermination+0x54>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	3b01      	subs	r3, #1
 8008484:	4a0b      	ldr	r2, [pc, #44]	@ (80084b4 <prvCheckTasksWaitingTermination+0x54>)
 8008486:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008488:	4b0b      	ldr	r3, [pc, #44]	@ (80084b8 <prvCheckTasksWaitingTermination+0x58>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3b01      	subs	r3, #1
 800848e:	4a0a      	ldr	r2, [pc, #40]	@ (80084b8 <prvCheckTasksWaitingTermination+0x58>)
 8008490:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008492:	f000 fa33 	bl	80088fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f810 	bl	80084bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800849c:	4b06      	ldr	r3, [pc, #24]	@ (80084b8 <prvCheckTasksWaitingTermination+0x58>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1e1      	bne.n	8008468 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80084a4:	bf00      	nop
 80084a6:	bf00      	nop
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	20000ae0 	.word	0x20000ae0
 80084b4:	20000b0c 	.word	0x20000b0c
 80084b8:	20000af4 	.word	0x20000af4

080084bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	334c      	adds	r3, #76	@ 0x4c
 80084c8:	4618      	mov	r0, r3
 80084ca:	f001 f9d1 	bl	8009870 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d108      	bne.n	80084ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084dc:	4618      	mov	r0, r3
 80084de:	f000 fb89 	bl	8008bf4 <vPortFree>
				vPortFree( pxTCB );
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fb86 	bl	8008bf4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80084e8:	e019      	b.n	800851e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d103      	bne.n	80084fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 fb7d 	bl	8008bf4 <vPortFree>
	}
 80084fa:	e010      	b.n	800851e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008502:	2b02      	cmp	r3, #2
 8008504:	d00b      	beq.n	800851e <prvDeleteTCB+0x62>
	__asm volatile
 8008506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800850a:	f383 8811 	msr	BASEPRI, r3
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f3bf 8f4f 	dsb	sy
 8008516:	60fb      	str	r3, [r7, #12]
}
 8008518:	bf00      	nop
 800851a:	bf00      	nop
 800851c:	e7fd      	b.n	800851a <prvDeleteTCB+0x5e>
	}
 800851e:	bf00      	nop
 8008520:	3710      	adds	r7, #16
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
	...

08008528 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800852e:	4b0c      	ldr	r3, [pc, #48]	@ (8008560 <prvResetNextTaskUnblockTime+0x38>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d104      	bne.n	8008542 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008538:	4b0a      	ldr	r3, [pc, #40]	@ (8008564 <prvResetNextTaskUnblockTime+0x3c>)
 800853a:	f04f 32ff 	mov.w	r2, #4294967295
 800853e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008540:	e008      	b.n	8008554 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008542:	4b07      	ldr	r3, [pc, #28]	@ (8008560 <prvResetNextTaskUnblockTime+0x38>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	4a04      	ldr	r2, [pc, #16]	@ (8008564 <prvResetNextTaskUnblockTime+0x3c>)
 8008552:	6013      	str	r3, [r2, #0]
}
 8008554:	bf00      	nop
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr
 8008560:	20000ac4 	.word	0x20000ac4
 8008564:	20000b2c 	.word	0x20000b2c

08008568 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008572:	4b29      	ldr	r3, [pc, #164]	@ (8008618 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008578:	4b28      	ldr	r3, [pc, #160]	@ (800861c <prvAddCurrentTaskToDelayedList+0xb4>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	3304      	adds	r3, #4
 800857e:	4618      	mov	r0, r3
 8008580:	f7ff fa42 	bl	8007a08 <uxListRemove>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d10b      	bne.n	80085a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800858a:	4b24      	ldr	r3, [pc, #144]	@ (800861c <prvAddCurrentTaskToDelayedList+0xb4>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008590:	2201      	movs	r2, #1
 8008592:	fa02 f303 	lsl.w	r3, r2, r3
 8008596:	43da      	mvns	r2, r3
 8008598:	4b21      	ldr	r3, [pc, #132]	@ (8008620 <prvAddCurrentTaskToDelayedList+0xb8>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4013      	ands	r3, r2
 800859e:	4a20      	ldr	r2, [pc, #128]	@ (8008620 <prvAddCurrentTaskToDelayedList+0xb8>)
 80085a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a8:	d10a      	bne.n	80085c0 <prvAddCurrentTaskToDelayedList+0x58>
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d007      	beq.n	80085c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085b0:	4b1a      	ldr	r3, [pc, #104]	@ (800861c <prvAddCurrentTaskToDelayedList+0xb4>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	3304      	adds	r3, #4
 80085b6:	4619      	mov	r1, r3
 80085b8:	481a      	ldr	r0, [pc, #104]	@ (8008624 <prvAddCurrentTaskToDelayedList+0xbc>)
 80085ba:	f7ff f9c8 	bl	800794e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80085be:	e026      	b.n	800860e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4413      	add	r3, r2
 80085c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80085c8:	4b14      	ldr	r3, [pc, #80]	@ (800861c <prvAddCurrentTaskToDelayedList+0xb4>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68ba      	ldr	r2, [r7, #8]
 80085ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80085d0:	68ba      	ldr	r2, [r7, #8]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d209      	bcs.n	80085ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085d8:	4b13      	ldr	r3, [pc, #76]	@ (8008628 <prvAddCurrentTaskToDelayedList+0xc0>)
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	4b0f      	ldr	r3, [pc, #60]	@ (800861c <prvAddCurrentTaskToDelayedList+0xb4>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	3304      	adds	r3, #4
 80085e2:	4619      	mov	r1, r3
 80085e4:	4610      	mov	r0, r2
 80085e6:	f7ff f9d6 	bl	8007996 <vListInsert>
}
 80085ea:	e010      	b.n	800860e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085ec:	4b0f      	ldr	r3, [pc, #60]	@ (800862c <prvAddCurrentTaskToDelayedList+0xc4>)
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	4b0a      	ldr	r3, [pc, #40]	@ (800861c <prvAddCurrentTaskToDelayedList+0xb4>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	3304      	adds	r3, #4
 80085f6:	4619      	mov	r1, r3
 80085f8:	4610      	mov	r0, r2
 80085fa:	f7ff f9cc 	bl	8007996 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80085fe:	4b0c      	ldr	r3, [pc, #48]	@ (8008630 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	429a      	cmp	r2, r3
 8008606:	d202      	bcs.n	800860e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008608:	4a09      	ldr	r2, [pc, #36]	@ (8008630 <prvAddCurrentTaskToDelayedList+0xc8>)
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	6013      	str	r3, [r2, #0]
}
 800860e:	bf00      	nop
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	20000b10 	.word	0x20000b10
 800861c:	20000a0c 	.word	0x20000a0c
 8008620:	20000b14 	.word	0x20000b14
 8008624:	20000af8 	.word	0x20000af8
 8008628:	20000ac8 	.word	0x20000ac8
 800862c:	20000ac4 	.word	0x20000ac4
 8008630:	20000b2c 	.word	0x20000b2c

08008634 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	3b04      	subs	r3, #4
 8008644:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800864c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	3b04      	subs	r3, #4
 8008652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	f023 0201 	bic.w	r2, r3, #1
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	3b04      	subs	r3, #4
 8008662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008664:	4a0c      	ldr	r2, [pc, #48]	@ (8008698 <pxPortInitialiseStack+0x64>)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	3b14      	subs	r3, #20
 800866e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	3b04      	subs	r3, #4
 800867a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f06f 0202 	mvn.w	r2, #2
 8008682:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	3b20      	subs	r3, #32
 8008688:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800868a:	68fb      	ldr	r3, [r7, #12]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3714      	adds	r7, #20
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr
 8008698:	0800869d 	.word	0x0800869d

0800869c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80086a2:	2300      	movs	r3, #0
 80086a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80086a6:	4b13      	ldr	r3, [pc, #76]	@ (80086f4 <prvTaskExitError+0x58>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ae:	d00b      	beq.n	80086c8 <prvTaskExitError+0x2c>
	__asm volatile
 80086b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	60fb      	str	r3, [r7, #12]
}
 80086c2:	bf00      	nop
 80086c4:	bf00      	nop
 80086c6:	e7fd      	b.n	80086c4 <prvTaskExitError+0x28>
	__asm volatile
 80086c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	60bb      	str	r3, [r7, #8]
}
 80086da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80086dc:	bf00      	nop
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d0fc      	beq.n	80086de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80086e4:	bf00      	nop
 80086e6:	bf00      	nop
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	2000000c 	.word	0x2000000c
	...

08008700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008700:	4b07      	ldr	r3, [pc, #28]	@ (8008720 <pxCurrentTCBConst2>)
 8008702:	6819      	ldr	r1, [r3, #0]
 8008704:	6808      	ldr	r0, [r1, #0]
 8008706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800870a:	f380 8809 	msr	PSP, r0
 800870e:	f3bf 8f6f 	isb	sy
 8008712:	f04f 0000 	mov.w	r0, #0
 8008716:	f380 8811 	msr	BASEPRI, r0
 800871a:	4770      	bx	lr
 800871c:	f3af 8000 	nop.w

08008720 <pxCurrentTCBConst2>:
 8008720:	20000a0c 	.word	0x20000a0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008724:	bf00      	nop
 8008726:	bf00      	nop

08008728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008728:	4808      	ldr	r0, [pc, #32]	@ (800874c <prvPortStartFirstTask+0x24>)
 800872a:	6800      	ldr	r0, [r0, #0]
 800872c:	6800      	ldr	r0, [r0, #0]
 800872e:	f380 8808 	msr	MSP, r0
 8008732:	f04f 0000 	mov.w	r0, #0
 8008736:	f380 8814 	msr	CONTROL, r0
 800873a:	b662      	cpsie	i
 800873c:	b661      	cpsie	f
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	f3bf 8f6f 	isb	sy
 8008746:	df00      	svc	0
 8008748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800874a:	bf00      	nop
 800874c:	e000ed08 	.word	0xe000ed08

08008750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b086      	sub	sp, #24
 8008754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008756:	4b47      	ldr	r3, [pc, #284]	@ (8008874 <xPortStartScheduler+0x124>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a47      	ldr	r2, [pc, #284]	@ (8008878 <xPortStartScheduler+0x128>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d10b      	bne.n	8008778 <xPortStartScheduler+0x28>
	__asm volatile
 8008760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008764:	f383 8811 	msr	BASEPRI, r3
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	f3bf 8f4f 	dsb	sy
 8008770:	613b      	str	r3, [r7, #16]
}
 8008772:	bf00      	nop
 8008774:	bf00      	nop
 8008776:	e7fd      	b.n	8008774 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008778:	4b3e      	ldr	r3, [pc, #248]	@ (8008874 <xPortStartScheduler+0x124>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a3f      	ldr	r2, [pc, #252]	@ (800887c <xPortStartScheduler+0x12c>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d10b      	bne.n	800879a <xPortStartScheduler+0x4a>
	__asm volatile
 8008782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008786:	f383 8811 	msr	BASEPRI, r3
 800878a:	f3bf 8f6f 	isb	sy
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	60fb      	str	r3, [r7, #12]
}
 8008794:	bf00      	nop
 8008796:	bf00      	nop
 8008798:	e7fd      	b.n	8008796 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800879a:	4b39      	ldr	r3, [pc, #228]	@ (8008880 <xPortStartScheduler+0x130>)
 800879c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	22ff      	movs	r2, #255	@ 0xff
 80087aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80087b4:	78fb      	ldrb	r3, [r7, #3]
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80087bc:	b2da      	uxtb	r2, r3
 80087be:	4b31      	ldr	r3, [pc, #196]	@ (8008884 <xPortStartScheduler+0x134>)
 80087c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80087c2:	4b31      	ldr	r3, [pc, #196]	@ (8008888 <xPortStartScheduler+0x138>)
 80087c4:	2207      	movs	r2, #7
 80087c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087c8:	e009      	b.n	80087de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80087ca:	4b2f      	ldr	r3, [pc, #188]	@ (8008888 <xPortStartScheduler+0x138>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	3b01      	subs	r3, #1
 80087d0:	4a2d      	ldr	r2, [pc, #180]	@ (8008888 <xPortStartScheduler+0x138>)
 80087d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80087d4:	78fb      	ldrb	r3, [r7, #3]
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	005b      	lsls	r3, r3, #1
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087de:	78fb      	ldrb	r3, [r7, #3]
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087e6:	2b80      	cmp	r3, #128	@ 0x80
 80087e8:	d0ef      	beq.n	80087ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80087ea:	4b27      	ldr	r3, [pc, #156]	@ (8008888 <xPortStartScheduler+0x138>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f1c3 0307 	rsb	r3, r3, #7
 80087f2:	2b04      	cmp	r3, #4
 80087f4:	d00b      	beq.n	800880e <xPortStartScheduler+0xbe>
	__asm volatile
 80087f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087fa:	f383 8811 	msr	BASEPRI, r3
 80087fe:	f3bf 8f6f 	isb	sy
 8008802:	f3bf 8f4f 	dsb	sy
 8008806:	60bb      	str	r3, [r7, #8]
}
 8008808:	bf00      	nop
 800880a:	bf00      	nop
 800880c:	e7fd      	b.n	800880a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800880e:	4b1e      	ldr	r3, [pc, #120]	@ (8008888 <xPortStartScheduler+0x138>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	021b      	lsls	r3, r3, #8
 8008814:	4a1c      	ldr	r2, [pc, #112]	@ (8008888 <xPortStartScheduler+0x138>)
 8008816:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008818:	4b1b      	ldr	r3, [pc, #108]	@ (8008888 <xPortStartScheduler+0x138>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008820:	4a19      	ldr	r2, [pc, #100]	@ (8008888 <xPortStartScheduler+0x138>)
 8008822:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	b2da      	uxtb	r2, r3
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800882c:	4b17      	ldr	r3, [pc, #92]	@ (800888c <xPortStartScheduler+0x13c>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a16      	ldr	r2, [pc, #88]	@ (800888c <xPortStartScheduler+0x13c>)
 8008832:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008836:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008838:	4b14      	ldr	r3, [pc, #80]	@ (800888c <xPortStartScheduler+0x13c>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a13      	ldr	r2, [pc, #76]	@ (800888c <xPortStartScheduler+0x13c>)
 800883e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008842:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008844:	f000 f8da 	bl	80089fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008848:	4b11      	ldr	r3, [pc, #68]	@ (8008890 <xPortStartScheduler+0x140>)
 800884a:	2200      	movs	r2, #0
 800884c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800884e:	f000 f8f9 	bl	8008a44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008852:	4b10      	ldr	r3, [pc, #64]	@ (8008894 <xPortStartScheduler+0x144>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a0f      	ldr	r2, [pc, #60]	@ (8008894 <xPortStartScheduler+0x144>)
 8008858:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800885c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800885e:	f7ff ff63 	bl	8008728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008862:	f7ff fd41 	bl	80082e8 <vTaskSwitchContext>
	prvTaskExitError();
 8008866:	f7ff ff19 	bl	800869c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3718      	adds	r7, #24
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}
 8008874:	e000ed00 	.word	0xe000ed00
 8008878:	410fc271 	.word	0x410fc271
 800887c:	410fc270 	.word	0x410fc270
 8008880:	e000e400 	.word	0xe000e400
 8008884:	20000b38 	.word	0x20000b38
 8008888:	20000b3c 	.word	0x20000b3c
 800888c:	e000ed20 	.word	0xe000ed20
 8008890:	2000000c 	.word	0x2000000c
 8008894:	e000ef34 	.word	0xe000ef34

08008898 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
	__asm volatile
 800889e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a2:	f383 8811 	msr	BASEPRI, r3
 80088a6:	f3bf 8f6f 	isb	sy
 80088aa:	f3bf 8f4f 	dsb	sy
 80088ae:	607b      	str	r3, [r7, #4]
}
 80088b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80088b2:	4b10      	ldr	r3, [pc, #64]	@ (80088f4 <vPortEnterCritical+0x5c>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	3301      	adds	r3, #1
 80088b8:	4a0e      	ldr	r2, [pc, #56]	@ (80088f4 <vPortEnterCritical+0x5c>)
 80088ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80088bc:	4b0d      	ldr	r3, [pc, #52]	@ (80088f4 <vPortEnterCritical+0x5c>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d110      	bne.n	80088e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80088c4:	4b0c      	ldr	r3, [pc, #48]	@ (80088f8 <vPortEnterCritical+0x60>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00b      	beq.n	80088e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80088ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	603b      	str	r3, [r7, #0]
}
 80088e0:	bf00      	nop
 80088e2:	bf00      	nop
 80088e4:	e7fd      	b.n	80088e2 <vPortEnterCritical+0x4a>
	}
}
 80088e6:	bf00      	nop
 80088e8:	370c      	adds	r7, #12
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	2000000c 	.word	0x2000000c
 80088f8:	e000ed04 	.word	0xe000ed04

080088fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008902:	4b12      	ldr	r3, [pc, #72]	@ (800894c <vPortExitCritical+0x50>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d10b      	bne.n	8008922 <vPortExitCritical+0x26>
	__asm volatile
 800890a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800890e:	f383 8811 	msr	BASEPRI, r3
 8008912:	f3bf 8f6f 	isb	sy
 8008916:	f3bf 8f4f 	dsb	sy
 800891a:	607b      	str	r3, [r7, #4]
}
 800891c:	bf00      	nop
 800891e:	bf00      	nop
 8008920:	e7fd      	b.n	800891e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008922:	4b0a      	ldr	r3, [pc, #40]	@ (800894c <vPortExitCritical+0x50>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	3b01      	subs	r3, #1
 8008928:	4a08      	ldr	r2, [pc, #32]	@ (800894c <vPortExitCritical+0x50>)
 800892a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800892c:	4b07      	ldr	r3, [pc, #28]	@ (800894c <vPortExitCritical+0x50>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d105      	bne.n	8008940 <vPortExitCritical+0x44>
 8008934:	2300      	movs	r3, #0
 8008936:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800893e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr
 800894c:	2000000c 	.word	0x2000000c

08008950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008950:	f3ef 8009 	mrs	r0, PSP
 8008954:	f3bf 8f6f 	isb	sy
 8008958:	4b15      	ldr	r3, [pc, #84]	@ (80089b0 <pxCurrentTCBConst>)
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	f01e 0f10 	tst.w	lr, #16
 8008960:	bf08      	it	eq
 8008962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800896a:	6010      	str	r0, [r2, #0]
 800896c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008970:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008974:	f380 8811 	msr	BASEPRI, r0
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	f3bf 8f6f 	isb	sy
 8008980:	f7ff fcb2 	bl	80082e8 <vTaskSwitchContext>
 8008984:	f04f 0000 	mov.w	r0, #0
 8008988:	f380 8811 	msr	BASEPRI, r0
 800898c:	bc09      	pop	{r0, r3}
 800898e:	6819      	ldr	r1, [r3, #0]
 8008990:	6808      	ldr	r0, [r1, #0]
 8008992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008996:	f01e 0f10 	tst.w	lr, #16
 800899a:	bf08      	it	eq
 800899c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80089a0:	f380 8809 	msr	PSP, r0
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	f3af 8000 	nop.w

080089b0 <pxCurrentTCBConst>:
 80089b0:	20000a0c 	.word	0x20000a0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80089b4:	bf00      	nop
 80089b6:	bf00      	nop

080089b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
	__asm volatile
 80089be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	607b      	str	r3, [r7, #4]
}
 80089d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80089d2:	f7ff fbcf 	bl	8008174 <xTaskIncrementTick>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d003      	beq.n	80089e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80089dc:	4b06      	ldr	r3, [pc, #24]	@ (80089f8 <SysTick_Handler+0x40>)
 80089de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	2300      	movs	r3, #0
 80089e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	f383 8811 	msr	BASEPRI, r3
}
 80089ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80089f0:	bf00      	nop
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	e000ed04 	.word	0xe000ed04

080089fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80089fc:	b480      	push	{r7}
 80089fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a00:	4b0b      	ldr	r3, [pc, #44]	@ (8008a30 <vPortSetupTimerInterrupt+0x34>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a06:	4b0b      	ldr	r3, [pc, #44]	@ (8008a34 <vPortSetupTimerInterrupt+0x38>)
 8008a08:	2200      	movs	r2, #0
 8008a0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a38 <vPortSetupTimerInterrupt+0x3c>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a0a      	ldr	r2, [pc, #40]	@ (8008a3c <vPortSetupTimerInterrupt+0x40>)
 8008a12:	fba2 2303 	umull	r2, r3, r2, r3
 8008a16:	099b      	lsrs	r3, r3, #6
 8008a18:	4a09      	ldr	r2, [pc, #36]	@ (8008a40 <vPortSetupTimerInterrupt+0x44>)
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a1e:	4b04      	ldr	r3, [pc, #16]	@ (8008a30 <vPortSetupTimerInterrupt+0x34>)
 8008a20:	2207      	movs	r2, #7
 8008a22:	601a      	str	r2, [r3, #0]
}
 8008a24:	bf00      	nop
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop
 8008a30:	e000e010 	.word	0xe000e010
 8008a34:	e000e018 	.word	0xe000e018
 8008a38:	20000000 	.word	0x20000000
 8008a3c:	10624dd3 	.word	0x10624dd3
 8008a40:	e000e014 	.word	0xe000e014

08008a44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008a54 <vPortEnableVFP+0x10>
 8008a48:	6801      	ldr	r1, [r0, #0]
 8008a4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008a4e:	6001      	str	r1, [r0, #0]
 8008a50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008a52:	bf00      	nop
 8008a54:	e000ed88 	.word	0xe000ed88

08008a58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b08a      	sub	sp, #40	@ 0x28
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a60:	2300      	movs	r3, #0
 8008a62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a64:	f7ff fada 	bl	800801c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a68:	4b5c      	ldr	r3, [pc, #368]	@ (8008bdc <pvPortMalloc+0x184>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d101      	bne.n	8008a74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a70:	f000 f924 	bl	8008cbc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a74:	4b5a      	ldr	r3, [pc, #360]	@ (8008be0 <pvPortMalloc+0x188>)
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4013      	ands	r3, r2
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f040 8095 	bne.w	8008bac <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d01e      	beq.n	8008ac6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008a88:	2208      	movs	r2, #8
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f003 0307 	and.w	r3, r3, #7
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d015      	beq.n	8008ac6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f023 0307 	bic.w	r3, r3, #7
 8008aa0:	3308      	adds	r3, #8
 8008aa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f003 0307 	and.w	r3, r3, #7
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00b      	beq.n	8008ac6 <pvPortMalloc+0x6e>
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	617b      	str	r3, [r7, #20]
}
 8008ac0:	bf00      	nop
 8008ac2:	bf00      	nop
 8008ac4:	e7fd      	b.n	8008ac2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d06f      	beq.n	8008bac <pvPortMalloc+0x154>
 8008acc:	4b45      	ldr	r3, [pc, #276]	@ (8008be4 <pvPortMalloc+0x18c>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d86a      	bhi.n	8008bac <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ad6:	4b44      	ldr	r3, [pc, #272]	@ (8008be8 <pvPortMalloc+0x190>)
 8008ad8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ada:	4b43      	ldr	r3, [pc, #268]	@ (8008be8 <pvPortMalloc+0x190>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ae0:	e004      	b.n	8008aec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d903      	bls.n	8008afe <pvPortMalloc+0xa6>
 8008af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1f1      	bne.n	8008ae2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008afe:	4b37      	ldr	r3, [pc, #220]	@ (8008bdc <pvPortMalloc+0x184>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d051      	beq.n	8008bac <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b08:	6a3b      	ldr	r3, [r7, #32]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2208      	movs	r2, #8
 8008b0e:	4413      	add	r3, r2
 8008b10:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	6a3b      	ldr	r3, [r7, #32]
 8008b18:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	1ad2      	subs	r2, r2, r3
 8008b22:	2308      	movs	r3, #8
 8008b24:	005b      	lsls	r3, r3, #1
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d920      	bls.n	8008b6c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4413      	add	r3, r2
 8008b30:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	f003 0307 	and.w	r3, r3, #7
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d00b      	beq.n	8008b54 <pvPortMalloc+0xfc>
	__asm volatile
 8008b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b40:	f383 8811 	msr	BASEPRI, r3
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	613b      	str	r3, [r7, #16]
}
 8008b4e:	bf00      	nop
 8008b50:	bf00      	nop
 8008b52:	e7fd      	b.n	8008b50 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b56:	685a      	ldr	r2, [r3, #4]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	1ad2      	subs	r2, r2, r3
 8008b5c:	69bb      	ldr	r3, [r7, #24]
 8008b5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b66:	69b8      	ldr	r0, [r7, #24]
 8008b68:	f000 f90a 	bl	8008d80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8008be4 <pvPortMalloc+0x18c>)
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	4a1b      	ldr	r2, [pc, #108]	@ (8008be4 <pvPortMalloc+0x18c>)
 8008b78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8008be4 <pvPortMalloc+0x18c>)
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8008bec <pvPortMalloc+0x194>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d203      	bcs.n	8008b8e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b86:	4b17      	ldr	r3, [pc, #92]	@ (8008be4 <pvPortMalloc+0x18c>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a18      	ldr	r2, [pc, #96]	@ (8008bec <pvPortMalloc+0x194>)
 8008b8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b90:	685a      	ldr	r2, [r3, #4]
 8008b92:	4b13      	ldr	r3, [pc, #76]	@ (8008be0 <pvPortMalloc+0x188>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	431a      	orrs	r2, r3
 8008b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008ba2:	4b13      	ldr	r3, [pc, #76]	@ (8008bf0 <pvPortMalloc+0x198>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	4a11      	ldr	r2, [pc, #68]	@ (8008bf0 <pvPortMalloc+0x198>)
 8008baa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008bac:	f7ff fa44 	bl	8008038 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	f003 0307 	and.w	r3, r3, #7
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00b      	beq.n	8008bd2 <pvPortMalloc+0x17a>
	__asm volatile
 8008bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bbe:	f383 8811 	msr	BASEPRI, r3
 8008bc2:	f3bf 8f6f 	isb	sy
 8008bc6:	f3bf 8f4f 	dsb	sy
 8008bca:	60fb      	str	r3, [r7, #12]
}
 8008bcc:	bf00      	nop
 8008bce:	bf00      	nop
 8008bd0:	e7fd      	b.n	8008bce <pvPortMalloc+0x176>
	return pvReturn;
 8008bd2:	69fb      	ldr	r3, [r7, #28]
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3728      	adds	r7, #40	@ 0x28
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	20001700 	.word	0x20001700
 8008be0:	20001714 	.word	0x20001714
 8008be4:	20001704 	.word	0x20001704
 8008be8:	200016f8 	.word	0x200016f8
 8008bec:	20001708 	.word	0x20001708
 8008bf0:	2000170c 	.word	0x2000170c

08008bf4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d04f      	beq.n	8008ca6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c06:	2308      	movs	r3, #8
 8008c08:	425b      	negs	r3, r3
 8008c0a:	697a      	ldr	r2, [r7, #20]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	685a      	ldr	r2, [r3, #4]
 8008c18:	4b25      	ldr	r3, [pc, #148]	@ (8008cb0 <vPortFree+0xbc>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d10b      	bne.n	8008c3a <vPortFree+0x46>
	__asm volatile
 8008c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	60fb      	str	r3, [r7, #12]
}
 8008c34:	bf00      	nop
 8008c36:	bf00      	nop
 8008c38:	e7fd      	b.n	8008c36 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00b      	beq.n	8008c5a <vPortFree+0x66>
	__asm volatile
 8008c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c46:	f383 8811 	msr	BASEPRI, r3
 8008c4a:	f3bf 8f6f 	isb	sy
 8008c4e:	f3bf 8f4f 	dsb	sy
 8008c52:	60bb      	str	r3, [r7, #8]
}
 8008c54:	bf00      	nop
 8008c56:	bf00      	nop
 8008c58:	e7fd      	b.n	8008c56 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	685a      	ldr	r2, [r3, #4]
 8008c5e:	4b14      	ldr	r3, [pc, #80]	@ (8008cb0 <vPortFree+0xbc>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4013      	ands	r3, r2
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d01e      	beq.n	8008ca6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d11a      	bne.n	8008ca6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	685a      	ldr	r2, [r3, #4]
 8008c74:	4b0e      	ldr	r3, [pc, #56]	@ (8008cb0 <vPortFree+0xbc>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	43db      	mvns	r3, r3
 8008c7a:	401a      	ands	r2, r3
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c80:	f7ff f9cc 	bl	800801c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	685a      	ldr	r2, [r3, #4]
 8008c88:	4b0a      	ldr	r3, [pc, #40]	@ (8008cb4 <vPortFree+0xc0>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	4a09      	ldr	r2, [pc, #36]	@ (8008cb4 <vPortFree+0xc0>)
 8008c90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c92:	6938      	ldr	r0, [r7, #16]
 8008c94:	f000 f874 	bl	8008d80 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008c98:	4b07      	ldr	r3, [pc, #28]	@ (8008cb8 <vPortFree+0xc4>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	4a06      	ldr	r2, [pc, #24]	@ (8008cb8 <vPortFree+0xc4>)
 8008ca0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008ca2:	f7ff f9c9 	bl	8008038 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ca6:	bf00      	nop
 8008ca8:	3718      	adds	r7, #24
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	20001714 	.word	0x20001714
 8008cb4:	20001704 	.word	0x20001704
 8008cb8:	20001710 	.word	0x20001710

08008cbc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008cc2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8008cc6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008cc8:	4b27      	ldr	r3, [pc, #156]	@ (8008d68 <prvHeapInit+0xac>)
 8008cca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f003 0307 	and.w	r3, r3, #7
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00c      	beq.n	8008cf0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	3307      	adds	r3, #7
 8008cda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f023 0307 	bic.w	r3, r3, #7
 8008ce2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	1ad3      	subs	r3, r2, r3
 8008cea:	4a1f      	ldr	r2, [pc, #124]	@ (8008d68 <prvHeapInit+0xac>)
 8008cec:	4413      	add	r3, r2
 8008cee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8008d6c <prvHeapInit+0xb0>)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8008d6c <prvHeapInit+0xb0>)
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	68ba      	ldr	r2, [r7, #8]
 8008d04:	4413      	add	r3, r2
 8008d06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d08:	2208      	movs	r2, #8
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	1a9b      	subs	r3, r3, r2
 8008d0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f023 0307 	bic.w	r3, r3, #7
 8008d16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	4a15      	ldr	r2, [pc, #84]	@ (8008d70 <prvHeapInit+0xb4>)
 8008d1c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d1e:	4b14      	ldr	r3, [pc, #80]	@ (8008d70 <prvHeapInit+0xb4>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2200      	movs	r2, #0
 8008d24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d26:	4b12      	ldr	r3, [pc, #72]	@ (8008d70 <prvHeapInit+0xb4>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	1ad2      	subs	r2, r2, r3
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8008d70 <prvHeapInit+0xb4>)
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	4a0a      	ldr	r2, [pc, #40]	@ (8008d74 <prvHeapInit+0xb8>)
 8008d4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	4a09      	ldr	r2, [pc, #36]	@ (8008d78 <prvHeapInit+0xbc>)
 8008d52:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d54:	4b09      	ldr	r3, [pc, #36]	@ (8008d7c <prvHeapInit+0xc0>)
 8008d56:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008d5a:	601a      	str	r2, [r3, #0]
}
 8008d5c:	bf00      	nop
 8008d5e:	3714      	adds	r7, #20
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr
 8008d68:	20000b40 	.word	0x20000b40
 8008d6c:	200016f8 	.word	0x200016f8
 8008d70:	20001700 	.word	0x20001700
 8008d74:	20001708 	.word	0x20001708
 8008d78:	20001704 	.word	0x20001704
 8008d7c:	20001714 	.word	0x20001714

08008d80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d88:	4b28      	ldr	r3, [pc, #160]	@ (8008e2c <prvInsertBlockIntoFreeList+0xac>)
 8008d8a:	60fb      	str	r3, [r7, #12]
 8008d8c:	e002      	b.n	8008d94 <prvInsertBlockIntoFreeList+0x14>
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	60fb      	str	r3, [r7, #12]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d8f7      	bhi.n	8008d8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	4413      	add	r3, r2
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d108      	bne.n	8008dc2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	685a      	ldr	r2, [r3, #4]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	441a      	add	r2, r3
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	441a      	add	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d118      	bne.n	8008e08 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	4b15      	ldr	r3, [pc, #84]	@ (8008e30 <prvInsertBlockIntoFreeList+0xb0>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d00d      	beq.n	8008dfe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	685a      	ldr	r2, [r3, #4]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	441a      	add	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	601a      	str	r2, [r3, #0]
 8008dfc:	e008      	b.n	8008e10 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8008e30 <prvInsertBlockIntoFreeList+0xb0>)
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	601a      	str	r2, [r3, #0]
 8008e06:	e003      	b.n	8008e10 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d002      	beq.n	8008e1e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e1e:	bf00      	nop
 8008e20:	3714      	adds	r7, #20
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	200016f8 	.word	0x200016f8
 8008e30:	20001700 	.word	0x20001700

08008e34 <MCP23S17_Init>:
#include "spi.h"

uint8_t etat_des_LEDAs = 0xff;
uint8_t etat_des_LEDBs = 0xff;

void MCP23S17_Init( void){
 8008e34:	b580      	push	{r7, lr}
 8008e36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); //reset High
 8008e38:	2201      	movs	r2, #1
 8008e3a:	2101      	movs	r1, #1
 8008e3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008e40:	f7f9 f8d2 	bl	8001fe8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);	//CS High
 8008e44:	2201      	movs	r2, #1
 8008e46:	2180      	movs	r1, #128	@ 0x80
 8008e48:	480a      	ldr	r0, [pc, #40]	@ (8008e74 <MCP23S17_Init+0x40>)
 8008e4a:	f7f9 f8cd 	bl	8001fe8 <HAL_GPIO_WritePin>

	// Configurer tous les GPIO comme sorties
	MCP23S17_Write(IODIRA, 0x00);
 8008e4e:	2100      	movs	r1, #0
 8008e50:	2000      	movs	r0, #0
 8008e52:	f000 f811 	bl	8008e78 <MCP23S17_Write>
	MCP23S17_Write(IODIRB, 0x00);
 8008e56:	2100      	movs	r1, #0
 8008e58:	2001      	movs	r0, #1
 8008e5a:	f000 f80d 	bl	8008e78 <MCP23S17_Write>

	// Eteindre toutes les led
	MCP23S17_Write(MCPGPIOA, 0xff);
 8008e5e:	21ff      	movs	r1, #255	@ 0xff
 8008e60:	2012      	movs	r0, #18
 8008e62:	f000 f809 	bl	8008e78 <MCP23S17_Write>
	MCP23S17_Write(MCPGPIOB, 0xff);
 8008e66:	21ff      	movs	r1, #255	@ 0xff
 8008e68:	2013      	movs	r0, #19
 8008e6a:	f000 f805 	bl	8008e78 <MCP23S17_Write>
}
 8008e6e:	bf00      	nop
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	48000400 	.word	0x48000400

08008e78 <MCP23S17_Write>:

// Fonction pour écrire dans un registre du MCP23S17
void MCP23S17_Write( uint8_t reg, uint8_t value) {
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	4603      	mov	r3, r0
 8008e80:	460a      	mov	r2, r1
 8008e82:	71fb      	strb	r3, [r7, #7]
 8008e84:	4613      	mov	r3, r2
 8008e86:	71bb      	strb	r3, [r7, #6]
	uint8_t data[3] = {MCP23S17_ADDR_WRITE, reg, value};
 8008e88:	2340      	movs	r3, #64	@ 0x40
 8008e8a:	733b      	strb	r3, [r7, #12]
 8008e8c:	79fb      	ldrb	r3, [r7, #7]
 8008e8e:	737b      	strb	r3, [r7, #13]
 8008e90:	79bb      	ldrb	r3, [r7, #6]
 8008e92:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // CS Low
 8008e94:	2200      	movs	r2, #0
 8008e96:	2180      	movs	r1, #128	@ 0x80
 8008e98:	4809      	ldr	r0, [pc, #36]	@ (8008ec0 <MCP23S17_Write+0x48>)
 8008e9a:	f7f9 f8a5 	bl	8001fe8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, data, 3, HAL_MAX_DELAY);
 8008e9e:	f107 010c 	add.w	r1, r7, #12
 8008ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ea6:	2203      	movs	r2, #3
 8008ea8:	4806      	ldr	r0, [pc, #24]	@ (8008ec4 <MCP23S17_Write+0x4c>)
 8008eaa:	f7fc fd21 	bl	80058f0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);   // CS High
 8008eae:	2201      	movs	r2, #1
 8008eb0:	2180      	movs	r1, #128	@ 0x80
 8008eb2:	4803      	ldr	r0, [pc, #12]	@ (8008ec0 <MCP23S17_Write+0x48>)
 8008eb4:	f7f9 f898 	bl	8001fe8 <HAL_GPIO_WritePin>
}
 8008eb8:	bf00      	nop
 8008eba:	3710      	adds	r7, #16
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	48000400 	.word	0x48000400
 8008ec4:	200008cc 	.word	0x200008cc

08008ec8 <drv_led>:

uint8_t drv_led(uint8_t led_num, uint8_t gpio)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	4603      	mov	r3, r0
 8008ed0:	460a      	mov	r2, r1
 8008ed2:	71fb      	strb	r3, [r7, #7]
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	71bb      	strb	r3, [r7, #6]
		etat_des_LEDAs =0xff;
		etat_des_LEDBs =0xff;
		MCP23S17_Write(gpio, etat_des_LEDAs);

	}
	if((led_num>=0 && led_num<=7 && gpio==MCPGPIOA)){
 8008ed8:	79fb      	ldrb	r3, [r7, #7]
 8008eda:	2b07      	cmp	r3, #7
 8008edc:	d816      	bhi.n	8008f0c <drv_led+0x44>
 8008ede:	79bb      	ldrb	r3, [r7, #6]
 8008ee0:	2b12      	cmp	r3, #18
 8008ee2:	d113      	bne.n	8008f0c <drv_led+0x44>
		etat_des_LEDAs ^= (1 << led_num);
 8008ee4:	79fb      	ldrb	r3, [r7, #7]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8008eec:	b25a      	sxtb	r2, r3
 8008eee:	4b17      	ldr	r3, [pc, #92]	@ (8008f4c <drv_led+0x84>)
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	b25b      	sxtb	r3, r3
 8008ef4:	4053      	eors	r3, r2
 8008ef6:	b25b      	sxtb	r3, r3
 8008ef8:	b2da      	uxtb	r2, r3
 8008efa:	4b14      	ldr	r3, [pc, #80]	@ (8008f4c <drv_led+0x84>)
 8008efc:	701a      	strb	r2, [r3, #0]
		MCP23S17_Write(gpio, etat_des_LEDAs);
 8008efe:	4b13      	ldr	r3, [pc, #76]	@ (8008f4c <drv_led+0x84>)
 8008f00:	781a      	ldrb	r2, [r3, #0]
 8008f02:	79bb      	ldrb	r3, [r7, #6]
 8008f04:	4611      	mov	r1, r2
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7ff ffb6 	bl	8008e78 <MCP23S17_Write>
	}
	if((led_num>=0 && led_num<=7 && gpio==MCPGPIOB)){
 8008f0c:	79fb      	ldrb	r3, [r7, #7]
 8008f0e:	2b07      	cmp	r3, #7
 8008f10:	d816      	bhi.n	8008f40 <drv_led+0x78>
 8008f12:	79bb      	ldrb	r3, [r7, #6]
 8008f14:	2b13      	cmp	r3, #19
 8008f16:	d113      	bne.n	8008f40 <drv_led+0x78>
			etat_des_LEDBs ^= (1 << led_num);
 8008f18:	79fb      	ldrb	r3, [r7, #7]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f20:	b25a      	sxtb	r2, r3
 8008f22:	4b0b      	ldr	r3, [pc, #44]	@ (8008f50 <drv_led+0x88>)
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	b25b      	sxtb	r3, r3
 8008f28:	4053      	eors	r3, r2
 8008f2a:	b25b      	sxtb	r3, r3
 8008f2c:	b2da      	uxtb	r2, r3
 8008f2e:	4b08      	ldr	r3, [pc, #32]	@ (8008f50 <drv_led+0x88>)
 8008f30:	701a      	strb	r2, [r3, #0]
			MCP23S17_Write(gpio, etat_des_LEDBs);
 8008f32:	4b07      	ldr	r3, [pc, #28]	@ (8008f50 <drv_led+0x88>)
 8008f34:	781a      	ldrb	r2, [r3, #0]
 8008f36:	79bb      	ldrb	r3, [r7, #6]
 8008f38:	4611      	mov	r1, r2
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7ff ff9c 	bl	8008e78 <MCP23S17_Write>
		}
	return 0;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3708      	adds	r7, #8
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	20000010 	.word	0x20000010
 8008f50:	20000011 	.word	0x20000011

08008f54 <drv_uart2_receive>:
#include "main.h"
#include "drv_uart2.h"
#include "usart.h"

uint8_t drv_uart2_receive(char * pData, uint16_t size)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&huart2, (uint8_t*)(pData), size, HAL_MAX_DELAY);
 8008f60:	887a      	ldrh	r2, [r7, #2]
 8008f62:	f04f 33ff 	mov.w	r3, #4294967295
 8008f66:	6879      	ldr	r1, [r7, #4]
 8008f68:	4803      	ldr	r0, [pc, #12]	@ (8008f78 <drv_uart2_receive+0x24>)
 8008f6a:	f7fd fb38 	bl	80065de <HAL_UART_Receive>

	return 0;	// Life's too short for error management
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	20000980 	.word	0x20000980

08008f7c <drv_uart2_transmit>:

uint8_t drv_uart2_transmit(const char * pData, uint16_t size)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	460b      	mov	r3, r1
 8008f86:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, size, HAL_MAX_DELAY);
 8008f88:	887a      	ldrh	r2, [r7, #2]
 8008f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f8e:	6879      	ldr	r1, [r7, #4]
 8008f90:	4803      	ldr	r0, [pc, #12]	@ (8008fa0 <drv_uart2_transmit+0x24>)
 8008f92:	f7fd fa9b 	bl	80064cc <HAL_UART_Transmit>

	return 0;	// Srsly, don't do that kids
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3708      	adds	r7, #8
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	20000980 	.word	0x20000980

08008fa4 <sh_help>:
static int uart_write(char * s, uint16_t size) {
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
	return size;
}

static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 8008fa4:	b590      	push	{r4, r7, lr}
 8008fa6:	b089      	sub	sp, #36	@ 0x24
 8008fa8:	af02      	add	r7, sp, #8
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	617b      	str	r3, [r7, #20]
 8008fb4:	e029      	b.n	800900a <sh_help+0x66>
		int size;
		size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->func_list[i].c, h_shell->func_list[i].description);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8008fbc:	68f9      	ldr	r1, [r7, #12]
 8008fbe:	697a      	ldr	r2, [r7, #20]
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	005b      	lsls	r3, r3, #1
 8008fc4:	4413      	add	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	440b      	add	r3, r1
 8008fca:	3304      	adds	r3, #4
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	461c      	mov	r4, r3
 8008fd0:	68f9      	ldr	r1, [r7, #12]
 8008fd2:	697a      	ldr	r2, [r7, #20]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	005b      	lsls	r3, r3, #1
 8008fd8:	4413      	add	r3, r2
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	440b      	add	r3, r1
 8008fde:	330c      	adds	r3, #12
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	9300      	str	r3, [sp, #0]
 8008fe4:	4623      	mov	r3, r4
 8008fe6:	4a0e      	ldr	r2, [pc, #56]	@ (8009020 <sh_help+0x7c>)
 8008fe8:	213c      	movs	r1, #60	@ 0x3c
 8008fea:	f000 fb1d 	bl	8009628 <sniprintf>
 8008fee:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8008ffc:	6939      	ldr	r1, [r7, #16]
 8008ffe:	b289      	uxth	r1, r1
 8009000:	4610      	mov	r0, r2
 8009002:	4798      	blx	r3
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	3301      	adds	r3, #1
 8009008:	617b      	str	r3, [r7, #20]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	697a      	ldr	r2, [r7, #20]
 8009010:	429a      	cmp	r2, r3
 8009012:	dbd0      	blt.n	8008fb6 <sh_help+0x12>
	}

	return 0;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	371c      	adds	r7, #28
 800901a:	46bd      	mov	sp, r7
 800901c:	bd90      	pop	{r4, r7, pc}
 800901e:	bf00      	nop
 8009020:	0800a8fc 	.word	0x0800a8fc

08009024 <shell_init>:

void shell_init(h_shell_t * h_shell) {
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
	int size = 0;
 800902c:	2300      	movs	r3, #0
 800902e:	60fb      	str	r3, [r7, #12]

	h_shell->func_list_size = 0;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	601a      	str	r2, [r3, #0]

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800903c:	4a16      	ldr	r2, [pc, #88]	@ (8009098 <shell_init+0x74>)
 800903e:	213c      	movs	r1, #60	@ 0x3c
 8009040:	4618      	mov	r0, r3
 8009042:	f000 faf1 	bl	8009628 <sniprintf>
 8009046:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8009054:	68f9      	ldr	r1, [r7, #12]
 8009056:	b289      	uxth	r1, r1
 8009058:	4610      	mov	r0, r2
 800905a:	4798      	blx	r3

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Correction TD (v0.2.1 du coup?)\r\n");
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8009062:	4a0e      	ldr	r2, [pc, #56]	@ (800909c <shell_init+0x78>)
 8009064:	213c      	movs	r1, #60	@ 0x3c
 8009066:	4618      	mov	r0, r3
 8009068:	f000 fade 	bl	8009628 <sniprintf>
 800906c:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800907a:	68f9      	ldr	r1, [r7, #12]
 800907c:	b289      	uxth	r1, r1
 800907e:	4610      	mov	r0, r2
 8009080:	4798      	blx	r3

	shell_add(h_shell, 'h', sh_help, "Help");
 8009082:	4b07      	ldr	r3, [pc, #28]	@ (80090a0 <shell_init+0x7c>)
 8009084:	4a07      	ldr	r2, [pc, #28]	@ (80090a4 <shell_init+0x80>)
 8009086:	2168      	movs	r1, #104	@ 0x68
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f80d 	bl	80090a8 <shell_add>
}
 800908e:	bf00      	nop
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	0800a908 	.word	0x0800a908
 800909c:	0800a930 	.word	0x0800a930
 80090a0:	0800a954 	.word	0x0800a954
 80090a4:	08008fa5 	.word	0x08008fa5

080090a8 <shell_add>:

int shell_add(h_shell_t * h_shell, char c, shell_func_pointer_t pfunc, char * description) {
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	607a      	str	r2, [r7, #4]
 80090b2:	603b      	str	r3, [r7, #0]
 80090b4:	460b      	mov	r3, r1
 80090b6:	72fb      	strb	r3, [r7, #11]
	if (h_shell->func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80090be:	dc27      	bgt.n	8009110 <shell_add+0x68>
		h_shell->func_list[h_shell->func_list_size].c = c;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	68f9      	ldr	r1, [r7, #12]
 80090c6:	4613      	mov	r3, r2
 80090c8:	005b      	lsls	r3, r3, #1
 80090ca:	4413      	add	r3, r2
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	440b      	add	r3, r1
 80090d0:	3304      	adds	r3, #4
 80090d2:	7afa      	ldrb	r2, [r7, #11]
 80090d4:	701a      	strb	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].func = pfunc;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	68f9      	ldr	r1, [r7, #12]
 80090dc:	4613      	mov	r3, r2
 80090de:	005b      	lsls	r3, r3, #1
 80090e0:	4413      	add	r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	440b      	add	r3, r1
 80090e6:	3308      	adds	r3, #8
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	601a      	str	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].description = description;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	68f9      	ldr	r1, [r7, #12]
 80090f2:	4613      	mov	r3, r2
 80090f4:	005b      	lsls	r3, r3, #1
 80090f6:	4413      	add	r3, r2
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	440b      	add	r3, r1
 80090fc:	330c      	adds	r3, #12
 80090fe:	683a      	ldr	r2, [r7, #0]
 8009100:	601a      	str	r2, [r3, #0]
		h_shell->func_list_size++;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	1c5a      	adds	r2, r3, #1
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	601a      	str	r2, [r3, #0]
		return 0;
 800910c:	2300      	movs	r3, #0
 800910e:	e001      	b.n	8009114 <shell_add+0x6c>
	}

	return -1;
 8009110:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009114:	4618      	mov	r0, r3
 8009116:	3714      	adds	r7, #20
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 8009120:	b580      	push	{r7, lr}
 8009122:	b08e      	sub	sp, #56	@ 0x38
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
	int i;

	char c = buf[0];
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8009132:	2300      	movs	r3, #0
 8009134:	637b      	str	r3, [r7, #52]	@ 0x34
 8009136:	e011      	b.n	800915c <shell_exec+0x3c>
		if (h_shell->func_list[i].c == c) {
 8009138:	6879      	ldr	r1, [r7, #4]
 800913a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800913c:	4613      	mov	r3, r2
 800913e:	005b      	lsls	r3, r3, #1
 8009140:	4413      	add	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	440b      	add	r3, r1
 8009146:	3304      	adds	r3, #4
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800914e:	429a      	cmp	r2, r3
 8009150:	d101      	bne.n	8009156 <shell_exec+0x36>
			argc = 1;
 8009152:	2301      	movs	r3, #1
 8009154:	62bb      	str	r3, [r7, #40]	@ 0x28
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8009156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009158:	3301      	adds	r3, #1
 800915a:	637b      	str	r3, [r7, #52]	@ 0x34
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009162:	429a      	cmp	r2, r3
 8009164:	dbe8      	blt.n	8009138 <shell_exec+0x18>
			return h_shell->func_list[i].func(h_shell, argc, argv);
		}}
	}

	int size;
	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 800916c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009170:	4a0a      	ldr	r2, [pc, #40]	@ (800919c <shell_exec+0x7c>)
 8009172:	213c      	movs	r1, #60	@ 0x3c
 8009174:	f000 fa58 	bl	8009628 <sniprintf>
 8009178:	62f8      	str	r0, [r7, #44]	@ 0x2c
	h_shell->drv.transmit(h_shell->print_buffer, size);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8009186:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009188:	b289      	uxth	r1, r1
 800918a:	4610      	mov	r0, r2
 800918c:	4798      	blx	r3
	return -1;
 800918e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009192:	4618      	mov	r0, r3
 8009194:	3738      	adds	r7, #56	@ 0x38
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	0800a95c 	.word	0x0800a95c

080091a0 <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run(h_shell_t * h_shell) {
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
	int reading = 0;
 80091a8:	2300      	movs	r3, #0
 80091aa:	617b      	str	r3, [r7, #20]
	int pos = 0;
 80091ac:	2300      	movs	r3, #0
 80091ae:	613b      	str	r3, [r7, #16]

	while (1) {
		h_shell->drv.transmit(prompt, 2);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80091b6:	2102      	movs	r1, #2
 80091b8:	483a      	ldr	r0, [pc, #232]	@ (80092a4 <shell_run+0x104>)
 80091ba:	4798      	blx	r3
		reading = 1;
 80091bc:	2301      	movs	r3, #1
 80091be:	617b      	str	r3, [r7, #20]

		while(reading) {
 80091c0:	e064      	b.n	800928c <shell_run+0xec>
			char c;
			h_shell->drv.receive(&c, 1);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 80091c8:	f107 020b 	add.w	r2, r7, #11
 80091cc:	2101      	movs	r1, #1
 80091ce:	4610      	mov	r0, r2
 80091d0:	4798      	blx	r3
			int size;

			switch (c) {
 80091d2:	7afb      	ldrb	r3, [r7, #11]
 80091d4:	2b08      	cmp	r3, #8
 80091d6:	d036      	beq.n	8009246 <shell_run+0xa6>
 80091d8:	2b0d      	cmp	r3, #13
 80091da:	d141      	bne.n	8009260 <shell_run+0xc0>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80091e2:	4a31      	ldr	r2, [pc, #196]	@ (80092a8 <shell_run+0x108>)
 80091e4:	213c      	movs	r1, #60	@ 0x3c
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 fa1e 	bl	8009628 <sniprintf>
 80091ec:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80091fa:	68f9      	ldr	r1, [r7, #12]
 80091fc:	b289      	uxth	r1, r1
 80091fe:	4610      	mov	r0, r2
 8009200:	4798      	blx	r3
				h_shell->cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	1c5a      	adds	r2, r3, #1
 8009206:	613a      	str	r2, [r7, #16]
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	4413      	add	r3, r2
 800920c:	2200      	movs	r2, #0
 800920e:	f883 2340 	strb.w	r2, [r3, #832]	@ 0x340
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, ":%s\r\n", h_shell->cmd_buffer);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f503 7350 	add.w	r3, r3, #832	@ 0x340
 800921e:	4a23      	ldr	r2, [pc, #140]	@ (80092ac <shell_run+0x10c>)
 8009220:	213c      	movs	r1, #60	@ 0x3c
 8009222:	f000 fa01 	bl	8009628 <sniprintf>
 8009226:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8009234:	68f9      	ldr	r1, [r7, #12]
 8009236:	b289      	uxth	r1, r1
 8009238:	4610      	mov	r0, r2
 800923a:	4798      	blx	r3
				reading = 0;        //exit read loop
 800923c:	2300      	movs	r3, #0
 800923e:	617b      	str	r3, [r7, #20]
				pos = 0;            //reset buffer
 8009240:	2300      	movs	r3, #0
 8009242:	613b      	str	r3, [r7, #16]
				break;
 8009244:	e022      	b.n	800928c <shell_run+0xec>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	2b00      	cmp	r3, #0
 800924a:	dd1e      	ble.n	800928a <shell_run+0xea>
					pos--;          //remove it in buffer
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	3b01      	subs	r3, #1
 8009250:	613b      	str	r3, [r7, #16]

					h_shell->drv.transmit(backspace, 3);	// delete the char on the terminal
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009258:	2103      	movs	r1, #3
 800925a:	4815      	ldr	r0, [pc, #84]	@ (80092b0 <shell_run+0x110>)
 800925c:	4798      	blx	r3
				}
				break;
 800925e:	e014      	b.n	800928a <shell_run+0xea>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	2b3b      	cmp	r3, #59	@ 0x3b
 8009264:	dc12      	bgt.n	800928c <shell_run+0xec>
					h_shell->drv.transmit(&c, 1);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800926c:	f107 020b 	add.w	r2, r7, #11
 8009270:	2101      	movs	r1, #1
 8009272:	4610      	mov	r0, r2
 8009274:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c; //store
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	1c5a      	adds	r2, r3, #1
 800927a:	613a      	str	r2, [r7, #16]
 800927c:	7af9      	ldrb	r1, [r7, #11]
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	4413      	add	r3, r2
 8009282:	460a      	mov	r2, r1
 8009284:	f883 2340 	strb.w	r2, [r3, #832]	@ 0x340
 8009288:	e000      	b.n	800928c <shell_run+0xec>
				break;
 800928a:	bf00      	nop
		while(reading) {
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d197      	bne.n	80091c2 <shell_run+0x22>
				}
			}
		}
		shell_exec(h_shell, h_shell->cmd_buffer);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f503 7350 	add.w	r3, r3, #832	@ 0x340
 8009298:	4619      	mov	r1, r3
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f7ff ff40 	bl	8009120 <shell_exec>
		h_shell->drv.transmit(prompt, 2);
 80092a0:	e786      	b.n	80091b0 <shell_run+0x10>
 80092a2:	bf00      	nop
 80092a4:	20000018 	.word	0x20000018
 80092a8:	0800a974 	.word	0x0800a974
 80092ac:	0800a978 	.word	0x0800a978
 80092b0:	20000014 	.word	0x20000014

080092b4 <atoi>:
 80092b4:	220a      	movs	r2, #10
 80092b6:	2100      	movs	r1, #0
 80092b8:	f000 b87a 	b.w	80093b0 <strtol>

080092bc <_strtol_l.constprop.0>:
 80092bc:	2b24      	cmp	r3, #36	@ 0x24
 80092be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092c2:	4686      	mov	lr, r0
 80092c4:	4690      	mov	r8, r2
 80092c6:	d801      	bhi.n	80092cc <_strtol_l.constprop.0+0x10>
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d106      	bne.n	80092da <_strtol_l.constprop.0+0x1e>
 80092cc:	f000 fb5c 	bl	8009988 <__errno>
 80092d0:	2316      	movs	r3, #22
 80092d2:	6003      	str	r3, [r0, #0]
 80092d4:	2000      	movs	r0, #0
 80092d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092da:	4834      	ldr	r0, [pc, #208]	@ (80093ac <_strtol_l.constprop.0+0xf0>)
 80092dc:	460d      	mov	r5, r1
 80092de:	462a      	mov	r2, r5
 80092e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80092e4:	5d06      	ldrb	r6, [r0, r4]
 80092e6:	f016 0608 	ands.w	r6, r6, #8
 80092ea:	d1f8      	bne.n	80092de <_strtol_l.constprop.0+0x22>
 80092ec:	2c2d      	cmp	r4, #45	@ 0x2d
 80092ee:	d12d      	bne.n	800934c <_strtol_l.constprop.0+0x90>
 80092f0:	782c      	ldrb	r4, [r5, #0]
 80092f2:	2601      	movs	r6, #1
 80092f4:	1c95      	adds	r5, r2, #2
 80092f6:	f033 0210 	bics.w	r2, r3, #16
 80092fa:	d109      	bne.n	8009310 <_strtol_l.constprop.0+0x54>
 80092fc:	2c30      	cmp	r4, #48	@ 0x30
 80092fe:	d12a      	bne.n	8009356 <_strtol_l.constprop.0+0x9a>
 8009300:	782a      	ldrb	r2, [r5, #0]
 8009302:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009306:	2a58      	cmp	r2, #88	@ 0x58
 8009308:	d125      	bne.n	8009356 <_strtol_l.constprop.0+0x9a>
 800930a:	786c      	ldrb	r4, [r5, #1]
 800930c:	2310      	movs	r3, #16
 800930e:	3502      	adds	r5, #2
 8009310:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009314:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009318:	2200      	movs	r2, #0
 800931a:	fbbc f9f3 	udiv	r9, ip, r3
 800931e:	4610      	mov	r0, r2
 8009320:	fb03 ca19 	mls	sl, r3, r9, ip
 8009324:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009328:	2f09      	cmp	r7, #9
 800932a:	d81b      	bhi.n	8009364 <_strtol_l.constprop.0+0xa8>
 800932c:	463c      	mov	r4, r7
 800932e:	42a3      	cmp	r3, r4
 8009330:	dd27      	ble.n	8009382 <_strtol_l.constprop.0+0xc6>
 8009332:	1c57      	adds	r7, r2, #1
 8009334:	d007      	beq.n	8009346 <_strtol_l.constprop.0+0x8a>
 8009336:	4581      	cmp	r9, r0
 8009338:	d320      	bcc.n	800937c <_strtol_l.constprop.0+0xc0>
 800933a:	d101      	bne.n	8009340 <_strtol_l.constprop.0+0x84>
 800933c:	45a2      	cmp	sl, r4
 800933e:	db1d      	blt.n	800937c <_strtol_l.constprop.0+0xc0>
 8009340:	fb00 4003 	mla	r0, r0, r3, r4
 8009344:	2201      	movs	r2, #1
 8009346:	f815 4b01 	ldrb.w	r4, [r5], #1
 800934a:	e7eb      	b.n	8009324 <_strtol_l.constprop.0+0x68>
 800934c:	2c2b      	cmp	r4, #43	@ 0x2b
 800934e:	bf04      	itt	eq
 8009350:	782c      	ldrbeq	r4, [r5, #0]
 8009352:	1c95      	addeq	r5, r2, #2
 8009354:	e7cf      	b.n	80092f6 <_strtol_l.constprop.0+0x3a>
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1da      	bne.n	8009310 <_strtol_l.constprop.0+0x54>
 800935a:	2c30      	cmp	r4, #48	@ 0x30
 800935c:	bf0c      	ite	eq
 800935e:	2308      	moveq	r3, #8
 8009360:	230a      	movne	r3, #10
 8009362:	e7d5      	b.n	8009310 <_strtol_l.constprop.0+0x54>
 8009364:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009368:	2f19      	cmp	r7, #25
 800936a:	d801      	bhi.n	8009370 <_strtol_l.constprop.0+0xb4>
 800936c:	3c37      	subs	r4, #55	@ 0x37
 800936e:	e7de      	b.n	800932e <_strtol_l.constprop.0+0x72>
 8009370:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009374:	2f19      	cmp	r7, #25
 8009376:	d804      	bhi.n	8009382 <_strtol_l.constprop.0+0xc6>
 8009378:	3c57      	subs	r4, #87	@ 0x57
 800937a:	e7d8      	b.n	800932e <_strtol_l.constprop.0+0x72>
 800937c:	f04f 32ff 	mov.w	r2, #4294967295
 8009380:	e7e1      	b.n	8009346 <_strtol_l.constprop.0+0x8a>
 8009382:	1c53      	adds	r3, r2, #1
 8009384:	d108      	bne.n	8009398 <_strtol_l.constprop.0+0xdc>
 8009386:	2322      	movs	r3, #34	@ 0x22
 8009388:	f8ce 3000 	str.w	r3, [lr]
 800938c:	4660      	mov	r0, ip
 800938e:	f1b8 0f00 	cmp.w	r8, #0
 8009392:	d0a0      	beq.n	80092d6 <_strtol_l.constprop.0+0x1a>
 8009394:	1e69      	subs	r1, r5, #1
 8009396:	e006      	b.n	80093a6 <_strtol_l.constprop.0+0xea>
 8009398:	b106      	cbz	r6, 800939c <_strtol_l.constprop.0+0xe0>
 800939a:	4240      	negs	r0, r0
 800939c:	f1b8 0f00 	cmp.w	r8, #0
 80093a0:	d099      	beq.n	80092d6 <_strtol_l.constprop.0+0x1a>
 80093a2:	2a00      	cmp	r2, #0
 80093a4:	d1f6      	bne.n	8009394 <_strtol_l.constprop.0+0xd8>
 80093a6:	f8c8 1000 	str.w	r1, [r8]
 80093aa:	e794      	b.n	80092d6 <_strtol_l.constprop.0+0x1a>
 80093ac:	0800a9c9 	.word	0x0800a9c9

080093b0 <strtol>:
 80093b0:	4613      	mov	r3, r2
 80093b2:	460a      	mov	r2, r1
 80093b4:	4601      	mov	r1, r0
 80093b6:	4802      	ldr	r0, [pc, #8]	@ (80093c0 <strtol+0x10>)
 80093b8:	6800      	ldr	r0, [r0, #0]
 80093ba:	f7ff bf7f 	b.w	80092bc <_strtol_l.constprop.0>
 80093be:	bf00      	nop
 80093c0:	20000028 	.word	0x20000028

080093c4 <std>:
 80093c4:	2300      	movs	r3, #0
 80093c6:	b510      	push	{r4, lr}
 80093c8:	4604      	mov	r4, r0
 80093ca:	e9c0 3300 	strd	r3, r3, [r0]
 80093ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093d2:	6083      	str	r3, [r0, #8]
 80093d4:	8181      	strh	r1, [r0, #12]
 80093d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80093d8:	81c2      	strh	r2, [r0, #14]
 80093da:	6183      	str	r3, [r0, #24]
 80093dc:	4619      	mov	r1, r3
 80093de:	2208      	movs	r2, #8
 80093e0:	305c      	adds	r0, #92	@ 0x5c
 80093e2:	f000 fa2d 	bl	8009840 <memset>
 80093e6:	4b0d      	ldr	r3, [pc, #52]	@ (800941c <std+0x58>)
 80093e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80093ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009420 <std+0x5c>)
 80093ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80093ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009424 <std+0x60>)
 80093f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80093f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009428 <std+0x64>)
 80093f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80093f6:	4b0d      	ldr	r3, [pc, #52]	@ (800942c <std+0x68>)
 80093f8:	6224      	str	r4, [r4, #32]
 80093fa:	429c      	cmp	r4, r3
 80093fc:	d006      	beq.n	800940c <std+0x48>
 80093fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009402:	4294      	cmp	r4, r2
 8009404:	d002      	beq.n	800940c <std+0x48>
 8009406:	33d0      	adds	r3, #208	@ 0xd0
 8009408:	429c      	cmp	r4, r3
 800940a:	d105      	bne.n	8009418 <std+0x54>
 800940c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009414:	f000 bae2 	b.w	80099dc <__retarget_lock_init_recursive>
 8009418:	bd10      	pop	{r4, pc}
 800941a:	bf00      	nop
 800941c:	08009691 	.word	0x08009691
 8009420:	080096b3 	.word	0x080096b3
 8009424:	080096eb 	.word	0x080096eb
 8009428:	0800970f 	.word	0x0800970f
 800942c:	20001718 	.word	0x20001718

08009430 <stdio_exit_handler>:
 8009430:	4a02      	ldr	r2, [pc, #8]	@ (800943c <stdio_exit_handler+0xc>)
 8009432:	4903      	ldr	r1, [pc, #12]	@ (8009440 <stdio_exit_handler+0x10>)
 8009434:	4803      	ldr	r0, [pc, #12]	@ (8009444 <stdio_exit_handler+0x14>)
 8009436:	f000 b869 	b.w	800950c <_fwalk_sglue>
 800943a:	bf00      	nop
 800943c:	2000001c 	.word	0x2000001c
 8009440:	0800a549 	.word	0x0800a549
 8009444:	2000002c 	.word	0x2000002c

08009448 <cleanup_stdio>:
 8009448:	6841      	ldr	r1, [r0, #4]
 800944a:	4b0c      	ldr	r3, [pc, #48]	@ (800947c <cleanup_stdio+0x34>)
 800944c:	4299      	cmp	r1, r3
 800944e:	b510      	push	{r4, lr}
 8009450:	4604      	mov	r4, r0
 8009452:	d001      	beq.n	8009458 <cleanup_stdio+0x10>
 8009454:	f001 f878 	bl	800a548 <_fflush_r>
 8009458:	68a1      	ldr	r1, [r4, #8]
 800945a:	4b09      	ldr	r3, [pc, #36]	@ (8009480 <cleanup_stdio+0x38>)
 800945c:	4299      	cmp	r1, r3
 800945e:	d002      	beq.n	8009466 <cleanup_stdio+0x1e>
 8009460:	4620      	mov	r0, r4
 8009462:	f001 f871 	bl	800a548 <_fflush_r>
 8009466:	68e1      	ldr	r1, [r4, #12]
 8009468:	4b06      	ldr	r3, [pc, #24]	@ (8009484 <cleanup_stdio+0x3c>)
 800946a:	4299      	cmp	r1, r3
 800946c:	d004      	beq.n	8009478 <cleanup_stdio+0x30>
 800946e:	4620      	mov	r0, r4
 8009470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009474:	f001 b868 	b.w	800a548 <_fflush_r>
 8009478:	bd10      	pop	{r4, pc}
 800947a:	bf00      	nop
 800947c:	20001718 	.word	0x20001718
 8009480:	20001780 	.word	0x20001780
 8009484:	200017e8 	.word	0x200017e8

08009488 <global_stdio_init.part.0>:
 8009488:	b510      	push	{r4, lr}
 800948a:	4b0b      	ldr	r3, [pc, #44]	@ (80094b8 <global_stdio_init.part.0+0x30>)
 800948c:	4c0b      	ldr	r4, [pc, #44]	@ (80094bc <global_stdio_init.part.0+0x34>)
 800948e:	4a0c      	ldr	r2, [pc, #48]	@ (80094c0 <global_stdio_init.part.0+0x38>)
 8009490:	601a      	str	r2, [r3, #0]
 8009492:	4620      	mov	r0, r4
 8009494:	2200      	movs	r2, #0
 8009496:	2104      	movs	r1, #4
 8009498:	f7ff ff94 	bl	80093c4 <std>
 800949c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80094a0:	2201      	movs	r2, #1
 80094a2:	2109      	movs	r1, #9
 80094a4:	f7ff ff8e 	bl	80093c4 <std>
 80094a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80094ac:	2202      	movs	r2, #2
 80094ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094b2:	2112      	movs	r1, #18
 80094b4:	f7ff bf86 	b.w	80093c4 <std>
 80094b8:	20001850 	.word	0x20001850
 80094bc:	20001718 	.word	0x20001718
 80094c0:	08009431 	.word	0x08009431

080094c4 <__sfp_lock_acquire>:
 80094c4:	4801      	ldr	r0, [pc, #4]	@ (80094cc <__sfp_lock_acquire+0x8>)
 80094c6:	f000 ba8a 	b.w	80099de <__retarget_lock_acquire_recursive>
 80094ca:	bf00      	nop
 80094cc:	20001859 	.word	0x20001859

080094d0 <__sfp_lock_release>:
 80094d0:	4801      	ldr	r0, [pc, #4]	@ (80094d8 <__sfp_lock_release+0x8>)
 80094d2:	f000 ba85 	b.w	80099e0 <__retarget_lock_release_recursive>
 80094d6:	bf00      	nop
 80094d8:	20001859 	.word	0x20001859

080094dc <__sinit>:
 80094dc:	b510      	push	{r4, lr}
 80094de:	4604      	mov	r4, r0
 80094e0:	f7ff fff0 	bl	80094c4 <__sfp_lock_acquire>
 80094e4:	6a23      	ldr	r3, [r4, #32]
 80094e6:	b11b      	cbz	r3, 80094f0 <__sinit+0x14>
 80094e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094ec:	f7ff bff0 	b.w	80094d0 <__sfp_lock_release>
 80094f0:	4b04      	ldr	r3, [pc, #16]	@ (8009504 <__sinit+0x28>)
 80094f2:	6223      	str	r3, [r4, #32]
 80094f4:	4b04      	ldr	r3, [pc, #16]	@ (8009508 <__sinit+0x2c>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1f5      	bne.n	80094e8 <__sinit+0xc>
 80094fc:	f7ff ffc4 	bl	8009488 <global_stdio_init.part.0>
 8009500:	e7f2      	b.n	80094e8 <__sinit+0xc>
 8009502:	bf00      	nop
 8009504:	08009449 	.word	0x08009449
 8009508:	20001850 	.word	0x20001850

0800950c <_fwalk_sglue>:
 800950c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009510:	4607      	mov	r7, r0
 8009512:	4688      	mov	r8, r1
 8009514:	4614      	mov	r4, r2
 8009516:	2600      	movs	r6, #0
 8009518:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800951c:	f1b9 0901 	subs.w	r9, r9, #1
 8009520:	d505      	bpl.n	800952e <_fwalk_sglue+0x22>
 8009522:	6824      	ldr	r4, [r4, #0]
 8009524:	2c00      	cmp	r4, #0
 8009526:	d1f7      	bne.n	8009518 <_fwalk_sglue+0xc>
 8009528:	4630      	mov	r0, r6
 800952a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800952e:	89ab      	ldrh	r3, [r5, #12]
 8009530:	2b01      	cmp	r3, #1
 8009532:	d907      	bls.n	8009544 <_fwalk_sglue+0x38>
 8009534:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009538:	3301      	adds	r3, #1
 800953a:	d003      	beq.n	8009544 <_fwalk_sglue+0x38>
 800953c:	4629      	mov	r1, r5
 800953e:	4638      	mov	r0, r7
 8009540:	47c0      	blx	r8
 8009542:	4306      	orrs	r6, r0
 8009544:	3568      	adds	r5, #104	@ 0x68
 8009546:	e7e9      	b.n	800951c <_fwalk_sglue+0x10>

08009548 <iprintf>:
 8009548:	b40f      	push	{r0, r1, r2, r3}
 800954a:	b507      	push	{r0, r1, r2, lr}
 800954c:	4906      	ldr	r1, [pc, #24]	@ (8009568 <iprintf+0x20>)
 800954e:	ab04      	add	r3, sp, #16
 8009550:	6808      	ldr	r0, [r1, #0]
 8009552:	f853 2b04 	ldr.w	r2, [r3], #4
 8009556:	6881      	ldr	r1, [r0, #8]
 8009558:	9301      	str	r3, [sp, #4]
 800955a:	f000 fccb 	bl	8009ef4 <_vfiprintf_r>
 800955e:	b003      	add	sp, #12
 8009560:	f85d eb04 	ldr.w	lr, [sp], #4
 8009564:	b004      	add	sp, #16
 8009566:	4770      	bx	lr
 8009568:	20000028 	.word	0x20000028

0800956c <_puts_r>:
 800956c:	6a03      	ldr	r3, [r0, #32]
 800956e:	b570      	push	{r4, r5, r6, lr}
 8009570:	6884      	ldr	r4, [r0, #8]
 8009572:	4605      	mov	r5, r0
 8009574:	460e      	mov	r6, r1
 8009576:	b90b      	cbnz	r3, 800957c <_puts_r+0x10>
 8009578:	f7ff ffb0 	bl	80094dc <__sinit>
 800957c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800957e:	07db      	lsls	r3, r3, #31
 8009580:	d405      	bmi.n	800958e <_puts_r+0x22>
 8009582:	89a3      	ldrh	r3, [r4, #12]
 8009584:	0598      	lsls	r0, r3, #22
 8009586:	d402      	bmi.n	800958e <_puts_r+0x22>
 8009588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800958a:	f000 fa28 	bl	80099de <__retarget_lock_acquire_recursive>
 800958e:	89a3      	ldrh	r3, [r4, #12]
 8009590:	0719      	lsls	r1, r3, #28
 8009592:	d502      	bpl.n	800959a <_puts_r+0x2e>
 8009594:	6923      	ldr	r3, [r4, #16]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d135      	bne.n	8009606 <_puts_r+0x9a>
 800959a:	4621      	mov	r1, r4
 800959c:	4628      	mov	r0, r5
 800959e:	f000 f8f9 	bl	8009794 <__swsetup_r>
 80095a2:	b380      	cbz	r0, 8009606 <_puts_r+0x9a>
 80095a4:	f04f 35ff 	mov.w	r5, #4294967295
 80095a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80095aa:	07da      	lsls	r2, r3, #31
 80095ac:	d405      	bmi.n	80095ba <_puts_r+0x4e>
 80095ae:	89a3      	ldrh	r3, [r4, #12]
 80095b0:	059b      	lsls	r3, r3, #22
 80095b2:	d402      	bmi.n	80095ba <_puts_r+0x4e>
 80095b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095b6:	f000 fa13 	bl	80099e0 <__retarget_lock_release_recursive>
 80095ba:	4628      	mov	r0, r5
 80095bc:	bd70      	pop	{r4, r5, r6, pc}
 80095be:	2b00      	cmp	r3, #0
 80095c0:	da04      	bge.n	80095cc <_puts_r+0x60>
 80095c2:	69a2      	ldr	r2, [r4, #24]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	dc17      	bgt.n	80095f8 <_puts_r+0x8c>
 80095c8:	290a      	cmp	r1, #10
 80095ca:	d015      	beq.n	80095f8 <_puts_r+0x8c>
 80095cc:	6823      	ldr	r3, [r4, #0]
 80095ce:	1c5a      	adds	r2, r3, #1
 80095d0:	6022      	str	r2, [r4, #0]
 80095d2:	7019      	strb	r1, [r3, #0]
 80095d4:	68a3      	ldr	r3, [r4, #8]
 80095d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80095da:	3b01      	subs	r3, #1
 80095dc:	60a3      	str	r3, [r4, #8]
 80095de:	2900      	cmp	r1, #0
 80095e0:	d1ed      	bne.n	80095be <_puts_r+0x52>
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	da11      	bge.n	800960a <_puts_r+0x9e>
 80095e6:	4622      	mov	r2, r4
 80095e8:	210a      	movs	r1, #10
 80095ea:	4628      	mov	r0, r5
 80095ec:	f000 f893 	bl	8009716 <__swbuf_r>
 80095f0:	3001      	adds	r0, #1
 80095f2:	d0d7      	beq.n	80095a4 <_puts_r+0x38>
 80095f4:	250a      	movs	r5, #10
 80095f6:	e7d7      	b.n	80095a8 <_puts_r+0x3c>
 80095f8:	4622      	mov	r2, r4
 80095fa:	4628      	mov	r0, r5
 80095fc:	f000 f88b 	bl	8009716 <__swbuf_r>
 8009600:	3001      	adds	r0, #1
 8009602:	d1e7      	bne.n	80095d4 <_puts_r+0x68>
 8009604:	e7ce      	b.n	80095a4 <_puts_r+0x38>
 8009606:	3e01      	subs	r6, #1
 8009608:	e7e4      	b.n	80095d4 <_puts_r+0x68>
 800960a:	6823      	ldr	r3, [r4, #0]
 800960c:	1c5a      	adds	r2, r3, #1
 800960e:	6022      	str	r2, [r4, #0]
 8009610:	220a      	movs	r2, #10
 8009612:	701a      	strb	r2, [r3, #0]
 8009614:	e7ee      	b.n	80095f4 <_puts_r+0x88>
	...

08009618 <puts>:
 8009618:	4b02      	ldr	r3, [pc, #8]	@ (8009624 <puts+0xc>)
 800961a:	4601      	mov	r1, r0
 800961c:	6818      	ldr	r0, [r3, #0]
 800961e:	f7ff bfa5 	b.w	800956c <_puts_r>
 8009622:	bf00      	nop
 8009624:	20000028 	.word	0x20000028

08009628 <sniprintf>:
 8009628:	b40c      	push	{r2, r3}
 800962a:	b530      	push	{r4, r5, lr}
 800962c:	4b17      	ldr	r3, [pc, #92]	@ (800968c <sniprintf+0x64>)
 800962e:	1e0c      	subs	r4, r1, #0
 8009630:	681d      	ldr	r5, [r3, #0]
 8009632:	b09d      	sub	sp, #116	@ 0x74
 8009634:	da08      	bge.n	8009648 <sniprintf+0x20>
 8009636:	238b      	movs	r3, #139	@ 0x8b
 8009638:	602b      	str	r3, [r5, #0]
 800963a:	f04f 30ff 	mov.w	r0, #4294967295
 800963e:	b01d      	add	sp, #116	@ 0x74
 8009640:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009644:	b002      	add	sp, #8
 8009646:	4770      	bx	lr
 8009648:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800964c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009650:	bf14      	ite	ne
 8009652:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009656:	4623      	moveq	r3, r4
 8009658:	9304      	str	r3, [sp, #16]
 800965a:	9307      	str	r3, [sp, #28]
 800965c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009660:	9002      	str	r0, [sp, #8]
 8009662:	9006      	str	r0, [sp, #24]
 8009664:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009668:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800966a:	ab21      	add	r3, sp, #132	@ 0x84
 800966c:	a902      	add	r1, sp, #8
 800966e:	4628      	mov	r0, r5
 8009670:	9301      	str	r3, [sp, #4]
 8009672:	f000 fb19 	bl	8009ca8 <_svfiprintf_r>
 8009676:	1c43      	adds	r3, r0, #1
 8009678:	bfbc      	itt	lt
 800967a:	238b      	movlt	r3, #139	@ 0x8b
 800967c:	602b      	strlt	r3, [r5, #0]
 800967e:	2c00      	cmp	r4, #0
 8009680:	d0dd      	beq.n	800963e <sniprintf+0x16>
 8009682:	9b02      	ldr	r3, [sp, #8]
 8009684:	2200      	movs	r2, #0
 8009686:	701a      	strb	r2, [r3, #0]
 8009688:	e7d9      	b.n	800963e <sniprintf+0x16>
 800968a:	bf00      	nop
 800968c:	20000028 	.word	0x20000028

08009690 <__sread>:
 8009690:	b510      	push	{r4, lr}
 8009692:	460c      	mov	r4, r1
 8009694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009698:	f000 f952 	bl	8009940 <_read_r>
 800969c:	2800      	cmp	r0, #0
 800969e:	bfab      	itete	ge
 80096a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80096a2:	89a3      	ldrhlt	r3, [r4, #12]
 80096a4:	181b      	addge	r3, r3, r0
 80096a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80096aa:	bfac      	ite	ge
 80096ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80096ae:	81a3      	strhlt	r3, [r4, #12]
 80096b0:	bd10      	pop	{r4, pc}

080096b2 <__swrite>:
 80096b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096b6:	461f      	mov	r7, r3
 80096b8:	898b      	ldrh	r3, [r1, #12]
 80096ba:	05db      	lsls	r3, r3, #23
 80096bc:	4605      	mov	r5, r0
 80096be:	460c      	mov	r4, r1
 80096c0:	4616      	mov	r6, r2
 80096c2:	d505      	bpl.n	80096d0 <__swrite+0x1e>
 80096c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096c8:	2302      	movs	r3, #2
 80096ca:	2200      	movs	r2, #0
 80096cc:	f000 f926 	bl	800991c <_lseek_r>
 80096d0:	89a3      	ldrh	r3, [r4, #12]
 80096d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80096da:	81a3      	strh	r3, [r4, #12]
 80096dc:	4632      	mov	r2, r6
 80096de:	463b      	mov	r3, r7
 80096e0:	4628      	mov	r0, r5
 80096e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096e6:	f000 b93d 	b.w	8009964 <_write_r>

080096ea <__sseek>:
 80096ea:	b510      	push	{r4, lr}
 80096ec:	460c      	mov	r4, r1
 80096ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096f2:	f000 f913 	bl	800991c <_lseek_r>
 80096f6:	1c43      	adds	r3, r0, #1
 80096f8:	89a3      	ldrh	r3, [r4, #12]
 80096fa:	bf15      	itete	ne
 80096fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80096fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009702:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009706:	81a3      	strheq	r3, [r4, #12]
 8009708:	bf18      	it	ne
 800970a:	81a3      	strhne	r3, [r4, #12]
 800970c:	bd10      	pop	{r4, pc}

0800970e <__sclose>:
 800970e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009712:	f000 b89d 	b.w	8009850 <_close_r>

08009716 <__swbuf_r>:
 8009716:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009718:	460e      	mov	r6, r1
 800971a:	4614      	mov	r4, r2
 800971c:	4605      	mov	r5, r0
 800971e:	b118      	cbz	r0, 8009728 <__swbuf_r+0x12>
 8009720:	6a03      	ldr	r3, [r0, #32]
 8009722:	b90b      	cbnz	r3, 8009728 <__swbuf_r+0x12>
 8009724:	f7ff feda 	bl	80094dc <__sinit>
 8009728:	69a3      	ldr	r3, [r4, #24]
 800972a:	60a3      	str	r3, [r4, #8]
 800972c:	89a3      	ldrh	r3, [r4, #12]
 800972e:	071a      	lsls	r2, r3, #28
 8009730:	d501      	bpl.n	8009736 <__swbuf_r+0x20>
 8009732:	6923      	ldr	r3, [r4, #16]
 8009734:	b943      	cbnz	r3, 8009748 <__swbuf_r+0x32>
 8009736:	4621      	mov	r1, r4
 8009738:	4628      	mov	r0, r5
 800973a:	f000 f82b 	bl	8009794 <__swsetup_r>
 800973e:	b118      	cbz	r0, 8009748 <__swbuf_r+0x32>
 8009740:	f04f 37ff 	mov.w	r7, #4294967295
 8009744:	4638      	mov	r0, r7
 8009746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009748:	6823      	ldr	r3, [r4, #0]
 800974a:	6922      	ldr	r2, [r4, #16]
 800974c:	1a98      	subs	r0, r3, r2
 800974e:	6963      	ldr	r3, [r4, #20]
 8009750:	b2f6      	uxtb	r6, r6
 8009752:	4283      	cmp	r3, r0
 8009754:	4637      	mov	r7, r6
 8009756:	dc05      	bgt.n	8009764 <__swbuf_r+0x4e>
 8009758:	4621      	mov	r1, r4
 800975a:	4628      	mov	r0, r5
 800975c:	f000 fef4 	bl	800a548 <_fflush_r>
 8009760:	2800      	cmp	r0, #0
 8009762:	d1ed      	bne.n	8009740 <__swbuf_r+0x2a>
 8009764:	68a3      	ldr	r3, [r4, #8]
 8009766:	3b01      	subs	r3, #1
 8009768:	60a3      	str	r3, [r4, #8]
 800976a:	6823      	ldr	r3, [r4, #0]
 800976c:	1c5a      	adds	r2, r3, #1
 800976e:	6022      	str	r2, [r4, #0]
 8009770:	701e      	strb	r6, [r3, #0]
 8009772:	6962      	ldr	r2, [r4, #20]
 8009774:	1c43      	adds	r3, r0, #1
 8009776:	429a      	cmp	r2, r3
 8009778:	d004      	beq.n	8009784 <__swbuf_r+0x6e>
 800977a:	89a3      	ldrh	r3, [r4, #12]
 800977c:	07db      	lsls	r3, r3, #31
 800977e:	d5e1      	bpl.n	8009744 <__swbuf_r+0x2e>
 8009780:	2e0a      	cmp	r6, #10
 8009782:	d1df      	bne.n	8009744 <__swbuf_r+0x2e>
 8009784:	4621      	mov	r1, r4
 8009786:	4628      	mov	r0, r5
 8009788:	f000 fede 	bl	800a548 <_fflush_r>
 800978c:	2800      	cmp	r0, #0
 800978e:	d0d9      	beq.n	8009744 <__swbuf_r+0x2e>
 8009790:	e7d6      	b.n	8009740 <__swbuf_r+0x2a>
	...

08009794 <__swsetup_r>:
 8009794:	b538      	push	{r3, r4, r5, lr}
 8009796:	4b29      	ldr	r3, [pc, #164]	@ (800983c <__swsetup_r+0xa8>)
 8009798:	4605      	mov	r5, r0
 800979a:	6818      	ldr	r0, [r3, #0]
 800979c:	460c      	mov	r4, r1
 800979e:	b118      	cbz	r0, 80097a8 <__swsetup_r+0x14>
 80097a0:	6a03      	ldr	r3, [r0, #32]
 80097a2:	b90b      	cbnz	r3, 80097a8 <__swsetup_r+0x14>
 80097a4:	f7ff fe9a 	bl	80094dc <__sinit>
 80097a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097ac:	0719      	lsls	r1, r3, #28
 80097ae:	d422      	bmi.n	80097f6 <__swsetup_r+0x62>
 80097b0:	06da      	lsls	r2, r3, #27
 80097b2:	d407      	bmi.n	80097c4 <__swsetup_r+0x30>
 80097b4:	2209      	movs	r2, #9
 80097b6:	602a      	str	r2, [r5, #0]
 80097b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097bc:	81a3      	strh	r3, [r4, #12]
 80097be:	f04f 30ff 	mov.w	r0, #4294967295
 80097c2:	e033      	b.n	800982c <__swsetup_r+0x98>
 80097c4:	0758      	lsls	r0, r3, #29
 80097c6:	d512      	bpl.n	80097ee <__swsetup_r+0x5a>
 80097c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097ca:	b141      	cbz	r1, 80097de <__swsetup_r+0x4a>
 80097cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097d0:	4299      	cmp	r1, r3
 80097d2:	d002      	beq.n	80097da <__swsetup_r+0x46>
 80097d4:	4628      	mov	r0, r5
 80097d6:	f000 f913 	bl	8009a00 <_free_r>
 80097da:	2300      	movs	r3, #0
 80097dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80097de:	89a3      	ldrh	r3, [r4, #12]
 80097e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80097e4:	81a3      	strh	r3, [r4, #12]
 80097e6:	2300      	movs	r3, #0
 80097e8:	6063      	str	r3, [r4, #4]
 80097ea:	6923      	ldr	r3, [r4, #16]
 80097ec:	6023      	str	r3, [r4, #0]
 80097ee:	89a3      	ldrh	r3, [r4, #12]
 80097f0:	f043 0308 	orr.w	r3, r3, #8
 80097f4:	81a3      	strh	r3, [r4, #12]
 80097f6:	6923      	ldr	r3, [r4, #16]
 80097f8:	b94b      	cbnz	r3, 800980e <__swsetup_r+0x7a>
 80097fa:	89a3      	ldrh	r3, [r4, #12]
 80097fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009800:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009804:	d003      	beq.n	800980e <__swsetup_r+0x7a>
 8009806:	4621      	mov	r1, r4
 8009808:	4628      	mov	r0, r5
 800980a:	f000 feeb 	bl	800a5e4 <__smakebuf_r>
 800980e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009812:	f013 0201 	ands.w	r2, r3, #1
 8009816:	d00a      	beq.n	800982e <__swsetup_r+0x9a>
 8009818:	2200      	movs	r2, #0
 800981a:	60a2      	str	r2, [r4, #8]
 800981c:	6962      	ldr	r2, [r4, #20]
 800981e:	4252      	negs	r2, r2
 8009820:	61a2      	str	r2, [r4, #24]
 8009822:	6922      	ldr	r2, [r4, #16]
 8009824:	b942      	cbnz	r2, 8009838 <__swsetup_r+0xa4>
 8009826:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800982a:	d1c5      	bne.n	80097b8 <__swsetup_r+0x24>
 800982c:	bd38      	pop	{r3, r4, r5, pc}
 800982e:	0799      	lsls	r1, r3, #30
 8009830:	bf58      	it	pl
 8009832:	6962      	ldrpl	r2, [r4, #20]
 8009834:	60a2      	str	r2, [r4, #8]
 8009836:	e7f4      	b.n	8009822 <__swsetup_r+0x8e>
 8009838:	2000      	movs	r0, #0
 800983a:	e7f7      	b.n	800982c <__swsetup_r+0x98>
 800983c:	20000028 	.word	0x20000028

08009840 <memset>:
 8009840:	4402      	add	r2, r0
 8009842:	4603      	mov	r3, r0
 8009844:	4293      	cmp	r3, r2
 8009846:	d100      	bne.n	800984a <memset+0xa>
 8009848:	4770      	bx	lr
 800984a:	f803 1b01 	strb.w	r1, [r3], #1
 800984e:	e7f9      	b.n	8009844 <memset+0x4>

08009850 <_close_r>:
 8009850:	b538      	push	{r3, r4, r5, lr}
 8009852:	4d06      	ldr	r5, [pc, #24]	@ (800986c <_close_r+0x1c>)
 8009854:	2300      	movs	r3, #0
 8009856:	4604      	mov	r4, r0
 8009858:	4608      	mov	r0, r1
 800985a:	602b      	str	r3, [r5, #0]
 800985c:	f7f7 fdd7 	bl	800140e <_close>
 8009860:	1c43      	adds	r3, r0, #1
 8009862:	d102      	bne.n	800986a <_close_r+0x1a>
 8009864:	682b      	ldr	r3, [r5, #0]
 8009866:	b103      	cbz	r3, 800986a <_close_r+0x1a>
 8009868:	6023      	str	r3, [r4, #0]
 800986a:	bd38      	pop	{r3, r4, r5, pc}
 800986c:	20001854 	.word	0x20001854

08009870 <_reclaim_reent>:
 8009870:	4b29      	ldr	r3, [pc, #164]	@ (8009918 <_reclaim_reent+0xa8>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4283      	cmp	r3, r0
 8009876:	b570      	push	{r4, r5, r6, lr}
 8009878:	4604      	mov	r4, r0
 800987a:	d04b      	beq.n	8009914 <_reclaim_reent+0xa4>
 800987c:	69c3      	ldr	r3, [r0, #28]
 800987e:	b1ab      	cbz	r3, 80098ac <_reclaim_reent+0x3c>
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	b16b      	cbz	r3, 80098a0 <_reclaim_reent+0x30>
 8009884:	2500      	movs	r5, #0
 8009886:	69e3      	ldr	r3, [r4, #28]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	5959      	ldr	r1, [r3, r5]
 800988c:	2900      	cmp	r1, #0
 800988e:	d13b      	bne.n	8009908 <_reclaim_reent+0x98>
 8009890:	3504      	adds	r5, #4
 8009892:	2d80      	cmp	r5, #128	@ 0x80
 8009894:	d1f7      	bne.n	8009886 <_reclaim_reent+0x16>
 8009896:	69e3      	ldr	r3, [r4, #28]
 8009898:	4620      	mov	r0, r4
 800989a:	68d9      	ldr	r1, [r3, #12]
 800989c:	f000 f8b0 	bl	8009a00 <_free_r>
 80098a0:	69e3      	ldr	r3, [r4, #28]
 80098a2:	6819      	ldr	r1, [r3, #0]
 80098a4:	b111      	cbz	r1, 80098ac <_reclaim_reent+0x3c>
 80098a6:	4620      	mov	r0, r4
 80098a8:	f000 f8aa 	bl	8009a00 <_free_r>
 80098ac:	6961      	ldr	r1, [r4, #20]
 80098ae:	b111      	cbz	r1, 80098b6 <_reclaim_reent+0x46>
 80098b0:	4620      	mov	r0, r4
 80098b2:	f000 f8a5 	bl	8009a00 <_free_r>
 80098b6:	69e1      	ldr	r1, [r4, #28]
 80098b8:	b111      	cbz	r1, 80098c0 <_reclaim_reent+0x50>
 80098ba:	4620      	mov	r0, r4
 80098bc:	f000 f8a0 	bl	8009a00 <_free_r>
 80098c0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80098c2:	b111      	cbz	r1, 80098ca <_reclaim_reent+0x5a>
 80098c4:	4620      	mov	r0, r4
 80098c6:	f000 f89b 	bl	8009a00 <_free_r>
 80098ca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098cc:	b111      	cbz	r1, 80098d4 <_reclaim_reent+0x64>
 80098ce:	4620      	mov	r0, r4
 80098d0:	f000 f896 	bl	8009a00 <_free_r>
 80098d4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80098d6:	b111      	cbz	r1, 80098de <_reclaim_reent+0x6e>
 80098d8:	4620      	mov	r0, r4
 80098da:	f000 f891 	bl	8009a00 <_free_r>
 80098de:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80098e0:	b111      	cbz	r1, 80098e8 <_reclaim_reent+0x78>
 80098e2:	4620      	mov	r0, r4
 80098e4:	f000 f88c 	bl	8009a00 <_free_r>
 80098e8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80098ea:	b111      	cbz	r1, 80098f2 <_reclaim_reent+0x82>
 80098ec:	4620      	mov	r0, r4
 80098ee:	f000 f887 	bl	8009a00 <_free_r>
 80098f2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80098f4:	b111      	cbz	r1, 80098fc <_reclaim_reent+0x8c>
 80098f6:	4620      	mov	r0, r4
 80098f8:	f000 f882 	bl	8009a00 <_free_r>
 80098fc:	6a23      	ldr	r3, [r4, #32]
 80098fe:	b14b      	cbz	r3, 8009914 <_reclaim_reent+0xa4>
 8009900:	4620      	mov	r0, r4
 8009902:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009906:	4718      	bx	r3
 8009908:	680e      	ldr	r6, [r1, #0]
 800990a:	4620      	mov	r0, r4
 800990c:	f000 f878 	bl	8009a00 <_free_r>
 8009910:	4631      	mov	r1, r6
 8009912:	e7bb      	b.n	800988c <_reclaim_reent+0x1c>
 8009914:	bd70      	pop	{r4, r5, r6, pc}
 8009916:	bf00      	nop
 8009918:	20000028 	.word	0x20000028

0800991c <_lseek_r>:
 800991c:	b538      	push	{r3, r4, r5, lr}
 800991e:	4d07      	ldr	r5, [pc, #28]	@ (800993c <_lseek_r+0x20>)
 8009920:	4604      	mov	r4, r0
 8009922:	4608      	mov	r0, r1
 8009924:	4611      	mov	r1, r2
 8009926:	2200      	movs	r2, #0
 8009928:	602a      	str	r2, [r5, #0]
 800992a:	461a      	mov	r2, r3
 800992c:	f7f7 fd96 	bl	800145c <_lseek>
 8009930:	1c43      	adds	r3, r0, #1
 8009932:	d102      	bne.n	800993a <_lseek_r+0x1e>
 8009934:	682b      	ldr	r3, [r5, #0]
 8009936:	b103      	cbz	r3, 800993a <_lseek_r+0x1e>
 8009938:	6023      	str	r3, [r4, #0]
 800993a:	bd38      	pop	{r3, r4, r5, pc}
 800993c:	20001854 	.word	0x20001854

08009940 <_read_r>:
 8009940:	b538      	push	{r3, r4, r5, lr}
 8009942:	4d07      	ldr	r5, [pc, #28]	@ (8009960 <_read_r+0x20>)
 8009944:	4604      	mov	r4, r0
 8009946:	4608      	mov	r0, r1
 8009948:	4611      	mov	r1, r2
 800994a:	2200      	movs	r2, #0
 800994c:	602a      	str	r2, [r5, #0]
 800994e:	461a      	mov	r2, r3
 8009950:	f7f7 fd24 	bl	800139c <_read>
 8009954:	1c43      	adds	r3, r0, #1
 8009956:	d102      	bne.n	800995e <_read_r+0x1e>
 8009958:	682b      	ldr	r3, [r5, #0]
 800995a:	b103      	cbz	r3, 800995e <_read_r+0x1e>
 800995c:	6023      	str	r3, [r4, #0]
 800995e:	bd38      	pop	{r3, r4, r5, pc}
 8009960:	20001854 	.word	0x20001854

08009964 <_write_r>:
 8009964:	b538      	push	{r3, r4, r5, lr}
 8009966:	4d07      	ldr	r5, [pc, #28]	@ (8009984 <_write_r+0x20>)
 8009968:	4604      	mov	r4, r0
 800996a:	4608      	mov	r0, r1
 800996c:	4611      	mov	r1, r2
 800996e:	2200      	movs	r2, #0
 8009970:	602a      	str	r2, [r5, #0]
 8009972:	461a      	mov	r2, r3
 8009974:	f7f7 fd2f 	bl	80013d6 <_write>
 8009978:	1c43      	adds	r3, r0, #1
 800997a:	d102      	bne.n	8009982 <_write_r+0x1e>
 800997c:	682b      	ldr	r3, [r5, #0]
 800997e:	b103      	cbz	r3, 8009982 <_write_r+0x1e>
 8009980:	6023      	str	r3, [r4, #0]
 8009982:	bd38      	pop	{r3, r4, r5, pc}
 8009984:	20001854 	.word	0x20001854

08009988 <__errno>:
 8009988:	4b01      	ldr	r3, [pc, #4]	@ (8009990 <__errno+0x8>)
 800998a:	6818      	ldr	r0, [r3, #0]
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop
 8009990:	20000028 	.word	0x20000028

08009994 <__libc_init_array>:
 8009994:	b570      	push	{r4, r5, r6, lr}
 8009996:	4d0d      	ldr	r5, [pc, #52]	@ (80099cc <__libc_init_array+0x38>)
 8009998:	4c0d      	ldr	r4, [pc, #52]	@ (80099d0 <__libc_init_array+0x3c>)
 800999a:	1b64      	subs	r4, r4, r5
 800999c:	10a4      	asrs	r4, r4, #2
 800999e:	2600      	movs	r6, #0
 80099a0:	42a6      	cmp	r6, r4
 80099a2:	d109      	bne.n	80099b8 <__libc_init_array+0x24>
 80099a4:	4d0b      	ldr	r5, [pc, #44]	@ (80099d4 <__libc_init_array+0x40>)
 80099a6:	4c0c      	ldr	r4, [pc, #48]	@ (80099d8 <__libc_init_array+0x44>)
 80099a8:	f000 feda 	bl	800a760 <_init>
 80099ac:	1b64      	subs	r4, r4, r5
 80099ae:	10a4      	asrs	r4, r4, #2
 80099b0:	2600      	movs	r6, #0
 80099b2:	42a6      	cmp	r6, r4
 80099b4:	d105      	bne.n	80099c2 <__libc_init_array+0x2e>
 80099b6:	bd70      	pop	{r4, r5, r6, pc}
 80099b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80099bc:	4798      	blx	r3
 80099be:	3601      	adds	r6, #1
 80099c0:	e7ee      	b.n	80099a0 <__libc_init_array+0xc>
 80099c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80099c6:	4798      	blx	r3
 80099c8:	3601      	adds	r6, #1
 80099ca:	e7f2      	b.n	80099b2 <__libc_init_array+0x1e>
 80099cc:	0800ab04 	.word	0x0800ab04
 80099d0:	0800ab04 	.word	0x0800ab04
 80099d4:	0800ab04 	.word	0x0800ab04
 80099d8:	0800ab08 	.word	0x0800ab08

080099dc <__retarget_lock_init_recursive>:
 80099dc:	4770      	bx	lr

080099de <__retarget_lock_acquire_recursive>:
 80099de:	4770      	bx	lr

080099e0 <__retarget_lock_release_recursive>:
 80099e0:	4770      	bx	lr

080099e2 <memcpy>:
 80099e2:	440a      	add	r2, r1
 80099e4:	4291      	cmp	r1, r2
 80099e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80099ea:	d100      	bne.n	80099ee <memcpy+0xc>
 80099ec:	4770      	bx	lr
 80099ee:	b510      	push	{r4, lr}
 80099f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099f8:	4291      	cmp	r1, r2
 80099fa:	d1f9      	bne.n	80099f0 <memcpy+0xe>
 80099fc:	bd10      	pop	{r4, pc}
	...

08009a00 <_free_r>:
 8009a00:	b538      	push	{r3, r4, r5, lr}
 8009a02:	4605      	mov	r5, r0
 8009a04:	2900      	cmp	r1, #0
 8009a06:	d041      	beq.n	8009a8c <_free_r+0x8c>
 8009a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a0c:	1f0c      	subs	r4, r1, #4
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	bfb8      	it	lt
 8009a12:	18e4      	addlt	r4, r4, r3
 8009a14:	f000 f8e0 	bl	8009bd8 <__malloc_lock>
 8009a18:	4a1d      	ldr	r2, [pc, #116]	@ (8009a90 <_free_r+0x90>)
 8009a1a:	6813      	ldr	r3, [r2, #0]
 8009a1c:	b933      	cbnz	r3, 8009a2c <_free_r+0x2c>
 8009a1e:	6063      	str	r3, [r4, #4]
 8009a20:	6014      	str	r4, [r2, #0]
 8009a22:	4628      	mov	r0, r5
 8009a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a28:	f000 b8dc 	b.w	8009be4 <__malloc_unlock>
 8009a2c:	42a3      	cmp	r3, r4
 8009a2e:	d908      	bls.n	8009a42 <_free_r+0x42>
 8009a30:	6820      	ldr	r0, [r4, #0]
 8009a32:	1821      	adds	r1, r4, r0
 8009a34:	428b      	cmp	r3, r1
 8009a36:	bf01      	itttt	eq
 8009a38:	6819      	ldreq	r1, [r3, #0]
 8009a3a:	685b      	ldreq	r3, [r3, #4]
 8009a3c:	1809      	addeq	r1, r1, r0
 8009a3e:	6021      	streq	r1, [r4, #0]
 8009a40:	e7ed      	b.n	8009a1e <_free_r+0x1e>
 8009a42:	461a      	mov	r2, r3
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	b10b      	cbz	r3, 8009a4c <_free_r+0x4c>
 8009a48:	42a3      	cmp	r3, r4
 8009a4a:	d9fa      	bls.n	8009a42 <_free_r+0x42>
 8009a4c:	6811      	ldr	r1, [r2, #0]
 8009a4e:	1850      	adds	r0, r2, r1
 8009a50:	42a0      	cmp	r0, r4
 8009a52:	d10b      	bne.n	8009a6c <_free_r+0x6c>
 8009a54:	6820      	ldr	r0, [r4, #0]
 8009a56:	4401      	add	r1, r0
 8009a58:	1850      	adds	r0, r2, r1
 8009a5a:	4283      	cmp	r3, r0
 8009a5c:	6011      	str	r1, [r2, #0]
 8009a5e:	d1e0      	bne.n	8009a22 <_free_r+0x22>
 8009a60:	6818      	ldr	r0, [r3, #0]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	6053      	str	r3, [r2, #4]
 8009a66:	4408      	add	r0, r1
 8009a68:	6010      	str	r0, [r2, #0]
 8009a6a:	e7da      	b.n	8009a22 <_free_r+0x22>
 8009a6c:	d902      	bls.n	8009a74 <_free_r+0x74>
 8009a6e:	230c      	movs	r3, #12
 8009a70:	602b      	str	r3, [r5, #0]
 8009a72:	e7d6      	b.n	8009a22 <_free_r+0x22>
 8009a74:	6820      	ldr	r0, [r4, #0]
 8009a76:	1821      	adds	r1, r4, r0
 8009a78:	428b      	cmp	r3, r1
 8009a7a:	bf04      	itt	eq
 8009a7c:	6819      	ldreq	r1, [r3, #0]
 8009a7e:	685b      	ldreq	r3, [r3, #4]
 8009a80:	6063      	str	r3, [r4, #4]
 8009a82:	bf04      	itt	eq
 8009a84:	1809      	addeq	r1, r1, r0
 8009a86:	6021      	streq	r1, [r4, #0]
 8009a88:	6054      	str	r4, [r2, #4]
 8009a8a:	e7ca      	b.n	8009a22 <_free_r+0x22>
 8009a8c:	bd38      	pop	{r3, r4, r5, pc}
 8009a8e:	bf00      	nop
 8009a90:	20001860 	.word	0x20001860

08009a94 <sbrk_aligned>:
 8009a94:	b570      	push	{r4, r5, r6, lr}
 8009a96:	4e0f      	ldr	r6, [pc, #60]	@ (8009ad4 <sbrk_aligned+0x40>)
 8009a98:	460c      	mov	r4, r1
 8009a9a:	6831      	ldr	r1, [r6, #0]
 8009a9c:	4605      	mov	r5, r0
 8009a9e:	b911      	cbnz	r1, 8009aa6 <sbrk_aligned+0x12>
 8009aa0:	f000 fe18 	bl	800a6d4 <_sbrk_r>
 8009aa4:	6030      	str	r0, [r6, #0]
 8009aa6:	4621      	mov	r1, r4
 8009aa8:	4628      	mov	r0, r5
 8009aaa:	f000 fe13 	bl	800a6d4 <_sbrk_r>
 8009aae:	1c43      	adds	r3, r0, #1
 8009ab0:	d103      	bne.n	8009aba <sbrk_aligned+0x26>
 8009ab2:	f04f 34ff 	mov.w	r4, #4294967295
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	bd70      	pop	{r4, r5, r6, pc}
 8009aba:	1cc4      	adds	r4, r0, #3
 8009abc:	f024 0403 	bic.w	r4, r4, #3
 8009ac0:	42a0      	cmp	r0, r4
 8009ac2:	d0f8      	beq.n	8009ab6 <sbrk_aligned+0x22>
 8009ac4:	1a21      	subs	r1, r4, r0
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	f000 fe04 	bl	800a6d4 <_sbrk_r>
 8009acc:	3001      	adds	r0, #1
 8009ace:	d1f2      	bne.n	8009ab6 <sbrk_aligned+0x22>
 8009ad0:	e7ef      	b.n	8009ab2 <sbrk_aligned+0x1e>
 8009ad2:	bf00      	nop
 8009ad4:	2000185c 	.word	0x2000185c

08009ad8 <_malloc_r>:
 8009ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009adc:	1ccd      	adds	r5, r1, #3
 8009ade:	f025 0503 	bic.w	r5, r5, #3
 8009ae2:	3508      	adds	r5, #8
 8009ae4:	2d0c      	cmp	r5, #12
 8009ae6:	bf38      	it	cc
 8009ae8:	250c      	movcc	r5, #12
 8009aea:	2d00      	cmp	r5, #0
 8009aec:	4606      	mov	r6, r0
 8009aee:	db01      	blt.n	8009af4 <_malloc_r+0x1c>
 8009af0:	42a9      	cmp	r1, r5
 8009af2:	d904      	bls.n	8009afe <_malloc_r+0x26>
 8009af4:	230c      	movs	r3, #12
 8009af6:	6033      	str	r3, [r6, #0]
 8009af8:	2000      	movs	r0, #0
 8009afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009afe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009bd4 <_malloc_r+0xfc>
 8009b02:	f000 f869 	bl	8009bd8 <__malloc_lock>
 8009b06:	f8d8 3000 	ldr.w	r3, [r8]
 8009b0a:	461c      	mov	r4, r3
 8009b0c:	bb44      	cbnz	r4, 8009b60 <_malloc_r+0x88>
 8009b0e:	4629      	mov	r1, r5
 8009b10:	4630      	mov	r0, r6
 8009b12:	f7ff ffbf 	bl	8009a94 <sbrk_aligned>
 8009b16:	1c43      	adds	r3, r0, #1
 8009b18:	4604      	mov	r4, r0
 8009b1a:	d158      	bne.n	8009bce <_malloc_r+0xf6>
 8009b1c:	f8d8 4000 	ldr.w	r4, [r8]
 8009b20:	4627      	mov	r7, r4
 8009b22:	2f00      	cmp	r7, #0
 8009b24:	d143      	bne.n	8009bae <_malloc_r+0xd6>
 8009b26:	2c00      	cmp	r4, #0
 8009b28:	d04b      	beq.n	8009bc2 <_malloc_r+0xea>
 8009b2a:	6823      	ldr	r3, [r4, #0]
 8009b2c:	4639      	mov	r1, r7
 8009b2e:	4630      	mov	r0, r6
 8009b30:	eb04 0903 	add.w	r9, r4, r3
 8009b34:	f000 fdce 	bl	800a6d4 <_sbrk_r>
 8009b38:	4581      	cmp	r9, r0
 8009b3a:	d142      	bne.n	8009bc2 <_malloc_r+0xea>
 8009b3c:	6821      	ldr	r1, [r4, #0]
 8009b3e:	1a6d      	subs	r5, r5, r1
 8009b40:	4629      	mov	r1, r5
 8009b42:	4630      	mov	r0, r6
 8009b44:	f7ff ffa6 	bl	8009a94 <sbrk_aligned>
 8009b48:	3001      	adds	r0, #1
 8009b4a:	d03a      	beq.n	8009bc2 <_malloc_r+0xea>
 8009b4c:	6823      	ldr	r3, [r4, #0]
 8009b4e:	442b      	add	r3, r5
 8009b50:	6023      	str	r3, [r4, #0]
 8009b52:	f8d8 3000 	ldr.w	r3, [r8]
 8009b56:	685a      	ldr	r2, [r3, #4]
 8009b58:	bb62      	cbnz	r2, 8009bb4 <_malloc_r+0xdc>
 8009b5a:	f8c8 7000 	str.w	r7, [r8]
 8009b5e:	e00f      	b.n	8009b80 <_malloc_r+0xa8>
 8009b60:	6822      	ldr	r2, [r4, #0]
 8009b62:	1b52      	subs	r2, r2, r5
 8009b64:	d420      	bmi.n	8009ba8 <_malloc_r+0xd0>
 8009b66:	2a0b      	cmp	r2, #11
 8009b68:	d917      	bls.n	8009b9a <_malloc_r+0xc2>
 8009b6a:	1961      	adds	r1, r4, r5
 8009b6c:	42a3      	cmp	r3, r4
 8009b6e:	6025      	str	r5, [r4, #0]
 8009b70:	bf18      	it	ne
 8009b72:	6059      	strne	r1, [r3, #4]
 8009b74:	6863      	ldr	r3, [r4, #4]
 8009b76:	bf08      	it	eq
 8009b78:	f8c8 1000 	streq.w	r1, [r8]
 8009b7c:	5162      	str	r2, [r4, r5]
 8009b7e:	604b      	str	r3, [r1, #4]
 8009b80:	4630      	mov	r0, r6
 8009b82:	f000 f82f 	bl	8009be4 <__malloc_unlock>
 8009b86:	f104 000b 	add.w	r0, r4, #11
 8009b8a:	1d23      	adds	r3, r4, #4
 8009b8c:	f020 0007 	bic.w	r0, r0, #7
 8009b90:	1ac2      	subs	r2, r0, r3
 8009b92:	bf1c      	itt	ne
 8009b94:	1a1b      	subne	r3, r3, r0
 8009b96:	50a3      	strne	r3, [r4, r2]
 8009b98:	e7af      	b.n	8009afa <_malloc_r+0x22>
 8009b9a:	6862      	ldr	r2, [r4, #4]
 8009b9c:	42a3      	cmp	r3, r4
 8009b9e:	bf0c      	ite	eq
 8009ba0:	f8c8 2000 	streq.w	r2, [r8]
 8009ba4:	605a      	strne	r2, [r3, #4]
 8009ba6:	e7eb      	b.n	8009b80 <_malloc_r+0xa8>
 8009ba8:	4623      	mov	r3, r4
 8009baa:	6864      	ldr	r4, [r4, #4]
 8009bac:	e7ae      	b.n	8009b0c <_malloc_r+0x34>
 8009bae:	463c      	mov	r4, r7
 8009bb0:	687f      	ldr	r7, [r7, #4]
 8009bb2:	e7b6      	b.n	8009b22 <_malloc_r+0x4a>
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	42a3      	cmp	r3, r4
 8009bba:	d1fb      	bne.n	8009bb4 <_malloc_r+0xdc>
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	6053      	str	r3, [r2, #4]
 8009bc0:	e7de      	b.n	8009b80 <_malloc_r+0xa8>
 8009bc2:	230c      	movs	r3, #12
 8009bc4:	6033      	str	r3, [r6, #0]
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	f000 f80c 	bl	8009be4 <__malloc_unlock>
 8009bcc:	e794      	b.n	8009af8 <_malloc_r+0x20>
 8009bce:	6005      	str	r5, [r0, #0]
 8009bd0:	e7d6      	b.n	8009b80 <_malloc_r+0xa8>
 8009bd2:	bf00      	nop
 8009bd4:	20001860 	.word	0x20001860

08009bd8 <__malloc_lock>:
 8009bd8:	4801      	ldr	r0, [pc, #4]	@ (8009be0 <__malloc_lock+0x8>)
 8009bda:	f7ff bf00 	b.w	80099de <__retarget_lock_acquire_recursive>
 8009bde:	bf00      	nop
 8009be0:	20001858 	.word	0x20001858

08009be4 <__malloc_unlock>:
 8009be4:	4801      	ldr	r0, [pc, #4]	@ (8009bec <__malloc_unlock+0x8>)
 8009be6:	f7ff befb 	b.w	80099e0 <__retarget_lock_release_recursive>
 8009bea:	bf00      	nop
 8009bec:	20001858 	.word	0x20001858

08009bf0 <__ssputs_r>:
 8009bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bf4:	688e      	ldr	r6, [r1, #8]
 8009bf6:	461f      	mov	r7, r3
 8009bf8:	42be      	cmp	r6, r7
 8009bfa:	680b      	ldr	r3, [r1, #0]
 8009bfc:	4682      	mov	sl, r0
 8009bfe:	460c      	mov	r4, r1
 8009c00:	4690      	mov	r8, r2
 8009c02:	d82d      	bhi.n	8009c60 <__ssputs_r+0x70>
 8009c04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009c0c:	d026      	beq.n	8009c5c <__ssputs_r+0x6c>
 8009c0e:	6965      	ldr	r5, [r4, #20]
 8009c10:	6909      	ldr	r1, [r1, #16]
 8009c12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c16:	eba3 0901 	sub.w	r9, r3, r1
 8009c1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c1e:	1c7b      	adds	r3, r7, #1
 8009c20:	444b      	add	r3, r9
 8009c22:	106d      	asrs	r5, r5, #1
 8009c24:	429d      	cmp	r5, r3
 8009c26:	bf38      	it	cc
 8009c28:	461d      	movcc	r5, r3
 8009c2a:	0553      	lsls	r3, r2, #21
 8009c2c:	d527      	bpl.n	8009c7e <__ssputs_r+0x8e>
 8009c2e:	4629      	mov	r1, r5
 8009c30:	f7ff ff52 	bl	8009ad8 <_malloc_r>
 8009c34:	4606      	mov	r6, r0
 8009c36:	b360      	cbz	r0, 8009c92 <__ssputs_r+0xa2>
 8009c38:	6921      	ldr	r1, [r4, #16]
 8009c3a:	464a      	mov	r2, r9
 8009c3c:	f7ff fed1 	bl	80099e2 <memcpy>
 8009c40:	89a3      	ldrh	r3, [r4, #12]
 8009c42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009c46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c4a:	81a3      	strh	r3, [r4, #12]
 8009c4c:	6126      	str	r6, [r4, #16]
 8009c4e:	6165      	str	r5, [r4, #20]
 8009c50:	444e      	add	r6, r9
 8009c52:	eba5 0509 	sub.w	r5, r5, r9
 8009c56:	6026      	str	r6, [r4, #0]
 8009c58:	60a5      	str	r5, [r4, #8]
 8009c5a:	463e      	mov	r6, r7
 8009c5c:	42be      	cmp	r6, r7
 8009c5e:	d900      	bls.n	8009c62 <__ssputs_r+0x72>
 8009c60:	463e      	mov	r6, r7
 8009c62:	6820      	ldr	r0, [r4, #0]
 8009c64:	4632      	mov	r2, r6
 8009c66:	4641      	mov	r1, r8
 8009c68:	f000 fcf8 	bl	800a65c <memmove>
 8009c6c:	68a3      	ldr	r3, [r4, #8]
 8009c6e:	1b9b      	subs	r3, r3, r6
 8009c70:	60a3      	str	r3, [r4, #8]
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	4433      	add	r3, r6
 8009c76:	6023      	str	r3, [r4, #0]
 8009c78:	2000      	movs	r0, #0
 8009c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c7e:	462a      	mov	r2, r5
 8009c80:	f000 fd38 	bl	800a6f4 <_realloc_r>
 8009c84:	4606      	mov	r6, r0
 8009c86:	2800      	cmp	r0, #0
 8009c88:	d1e0      	bne.n	8009c4c <__ssputs_r+0x5c>
 8009c8a:	6921      	ldr	r1, [r4, #16]
 8009c8c:	4650      	mov	r0, sl
 8009c8e:	f7ff feb7 	bl	8009a00 <_free_r>
 8009c92:	230c      	movs	r3, #12
 8009c94:	f8ca 3000 	str.w	r3, [sl]
 8009c98:	89a3      	ldrh	r3, [r4, #12]
 8009c9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c9e:	81a3      	strh	r3, [r4, #12]
 8009ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca4:	e7e9      	b.n	8009c7a <__ssputs_r+0x8a>
	...

08009ca8 <_svfiprintf_r>:
 8009ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cac:	4698      	mov	r8, r3
 8009cae:	898b      	ldrh	r3, [r1, #12]
 8009cb0:	061b      	lsls	r3, r3, #24
 8009cb2:	b09d      	sub	sp, #116	@ 0x74
 8009cb4:	4607      	mov	r7, r0
 8009cb6:	460d      	mov	r5, r1
 8009cb8:	4614      	mov	r4, r2
 8009cba:	d510      	bpl.n	8009cde <_svfiprintf_r+0x36>
 8009cbc:	690b      	ldr	r3, [r1, #16]
 8009cbe:	b973      	cbnz	r3, 8009cde <_svfiprintf_r+0x36>
 8009cc0:	2140      	movs	r1, #64	@ 0x40
 8009cc2:	f7ff ff09 	bl	8009ad8 <_malloc_r>
 8009cc6:	6028      	str	r0, [r5, #0]
 8009cc8:	6128      	str	r0, [r5, #16]
 8009cca:	b930      	cbnz	r0, 8009cda <_svfiprintf_r+0x32>
 8009ccc:	230c      	movs	r3, #12
 8009cce:	603b      	str	r3, [r7, #0]
 8009cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd4:	b01d      	add	sp, #116	@ 0x74
 8009cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cda:	2340      	movs	r3, #64	@ 0x40
 8009cdc:	616b      	str	r3, [r5, #20]
 8009cde:	2300      	movs	r3, #0
 8009ce0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ce2:	2320      	movs	r3, #32
 8009ce4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ce8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cec:	2330      	movs	r3, #48	@ 0x30
 8009cee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009e8c <_svfiprintf_r+0x1e4>
 8009cf2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009cf6:	f04f 0901 	mov.w	r9, #1
 8009cfa:	4623      	mov	r3, r4
 8009cfc:	469a      	mov	sl, r3
 8009cfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d02:	b10a      	cbz	r2, 8009d08 <_svfiprintf_r+0x60>
 8009d04:	2a25      	cmp	r2, #37	@ 0x25
 8009d06:	d1f9      	bne.n	8009cfc <_svfiprintf_r+0x54>
 8009d08:	ebba 0b04 	subs.w	fp, sl, r4
 8009d0c:	d00b      	beq.n	8009d26 <_svfiprintf_r+0x7e>
 8009d0e:	465b      	mov	r3, fp
 8009d10:	4622      	mov	r2, r4
 8009d12:	4629      	mov	r1, r5
 8009d14:	4638      	mov	r0, r7
 8009d16:	f7ff ff6b 	bl	8009bf0 <__ssputs_r>
 8009d1a:	3001      	adds	r0, #1
 8009d1c:	f000 80a7 	beq.w	8009e6e <_svfiprintf_r+0x1c6>
 8009d20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d22:	445a      	add	r2, fp
 8009d24:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d26:	f89a 3000 	ldrb.w	r3, [sl]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	f000 809f 	beq.w	8009e6e <_svfiprintf_r+0x1c6>
 8009d30:	2300      	movs	r3, #0
 8009d32:	f04f 32ff 	mov.w	r2, #4294967295
 8009d36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d3a:	f10a 0a01 	add.w	sl, sl, #1
 8009d3e:	9304      	str	r3, [sp, #16]
 8009d40:	9307      	str	r3, [sp, #28]
 8009d42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d46:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d48:	4654      	mov	r4, sl
 8009d4a:	2205      	movs	r2, #5
 8009d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d50:	484e      	ldr	r0, [pc, #312]	@ (8009e8c <_svfiprintf_r+0x1e4>)
 8009d52:	f7f6 fa3d 	bl	80001d0 <memchr>
 8009d56:	9a04      	ldr	r2, [sp, #16]
 8009d58:	b9d8      	cbnz	r0, 8009d92 <_svfiprintf_r+0xea>
 8009d5a:	06d0      	lsls	r0, r2, #27
 8009d5c:	bf44      	itt	mi
 8009d5e:	2320      	movmi	r3, #32
 8009d60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d64:	0711      	lsls	r1, r2, #28
 8009d66:	bf44      	itt	mi
 8009d68:	232b      	movmi	r3, #43	@ 0x2b
 8009d6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d6e:	f89a 3000 	ldrb.w	r3, [sl]
 8009d72:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d74:	d015      	beq.n	8009da2 <_svfiprintf_r+0xfa>
 8009d76:	9a07      	ldr	r2, [sp, #28]
 8009d78:	4654      	mov	r4, sl
 8009d7a:	2000      	movs	r0, #0
 8009d7c:	f04f 0c0a 	mov.w	ip, #10
 8009d80:	4621      	mov	r1, r4
 8009d82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d86:	3b30      	subs	r3, #48	@ 0x30
 8009d88:	2b09      	cmp	r3, #9
 8009d8a:	d94b      	bls.n	8009e24 <_svfiprintf_r+0x17c>
 8009d8c:	b1b0      	cbz	r0, 8009dbc <_svfiprintf_r+0x114>
 8009d8e:	9207      	str	r2, [sp, #28]
 8009d90:	e014      	b.n	8009dbc <_svfiprintf_r+0x114>
 8009d92:	eba0 0308 	sub.w	r3, r0, r8
 8009d96:	fa09 f303 	lsl.w	r3, r9, r3
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	9304      	str	r3, [sp, #16]
 8009d9e:	46a2      	mov	sl, r4
 8009da0:	e7d2      	b.n	8009d48 <_svfiprintf_r+0xa0>
 8009da2:	9b03      	ldr	r3, [sp, #12]
 8009da4:	1d19      	adds	r1, r3, #4
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	9103      	str	r1, [sp, #12]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	bfbb      	ittet	lt
 8009dae:	425b      	neglt	r3, r3
 8009db0:	f042 0202 	orrlt.w	r2, r2, #2
 8009db4:	9307      	strge	r3, [sp, #28]
 8009db6:	9307      	strlt	r3, [sp, #28]
 8009db8:	bfb8      	it	lt
 8009dba:	9204      	strlt	r2, [sp, #16]
 8009dbc:	7823      	ldrb	r3, [r4, #0]
 8009dbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8009dc0:	d10a      	bne.n	8009dd8 <_svfiprintf_r+0x130>
 8009dc2:	7863      	ldrb	r3, [r4, #1]
 8009dc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dc6:	d132      	bne.n	8009e2e <_svfiprintf_r+0x186>
 8009dc8:	9b03      	ldr	r3, [sp, #12]
 8009dca:	1d1a      	adds	r2, r3, #4
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	9203      	str	r2, [sp, #12]
 8009dd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009dd4:	3402      	adds	r4, #2
 8009dd6:	9305      	str	r3, [sp, #20]
 8009dd8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009e9c <_svfiprintf_r+0x1f4>
 8009ddc:	7821      	ldrb	r1, [r4, #0]
 8009dde:	2203      	movs	r2, #3
 8009de0:	4650      	mov	r0, sl
 8009de2:	f7f6 f9f5 	bl	80001d0 <memchr>
 8009de6:	b138      	cbz	r0, 8009df8 <_svfiprintf_r+0x150>
 8009de8:	9b04      	ldr	r3, [sp, #16]
 8009dea:	eba0 000a 	sub.w	r0, r0, sl
 8009dee:	2240      	movs	r2, #64	@ 0x40
 8009df0:	4082      	lsls	r2, r0
 8009df2:	4313      	orrs	r3, r2
 8009df4:	3401      	adds	r4, #1
 8009df6:	9304      	str	r3, [sp, #16]
 8009df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dfc:	4824      	ldr	r0, [pc, #144]	@ (8009e90 <_svfiprintf_r+0x1e8>)
 8009dfe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e02:	2206      	movs	r2, #6
 8009e04:	f7f6 f9e4 	bl	80001d0 <memchr>
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	d036      	beq.n	8009e7a <_svfiprintf_r+0x1d2>
 8009e0c:	4b21      	ldr	r3, [pc, #132]	@ (8009e94 <_svfiprintf_r+0x1ec>)
 8009e0e:	bb1b      	cbnz	r3, 8009e58 <_svfiprintf_r+0x1b0>
 8009e10:	9b03      	ldr	r3, [sp, #12]
 8009e12:	3307      	adds	r3, #7
 8009e14:	f023 0307 	bic.w	r3, r3, #7
 8009e18:	3308      	adds	r3, #8
 8009e1a:	9303      	str	r3, [sp, #12]
 8009e1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e1e:	4433      	add	r3, r6
 8009e20:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e22:	e76a      	b.n	8009cfa <_svfiprintf_r+0x52>
 8009e24:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e28:	460c      	mov	r4, r1
 8009e2a:	2001      	movs	r0, #1
 8009e2c:	e7a8      	b.n	8009d80 <_svfiprintf_r+0xd8>
 8009e2e:	2300      	movs	r3, #0
 8009e30:	3401      	adds	r4, #1
 8009e32:	9305      	str	r3, [sp, #20]
 8009e34:	4619      	mov	r1, r3
 8009e36:	f04f 0c0a 	mov.w	ip, #10
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e40:	3a30      	subs	r2, #48	@ 0x30
 8009e42:	2a09      	cmp	r2, #9
 8009e44:	d903      	bls.n	8009e4e <_svfiprintf_r+0x1a6>
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d0c6      	beq.n	8009dd8 <_svfiprintf_r+0x130>
 8009e4a:	9105      	str	r1, [sp, #20]
 8009e4c:	e7c4      	b.n	8009dd8 <_svfiprintf_r+0x130>
 8009e4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e52:	4604      	mov	r4, r0
 8009e54:	2301      	movs	r3, #1
 8009e56:	e7f0      	b.n	8009e3a <_svfiprintf_r+0x192>
 8009e58:	ab03      	add	r3, sp, #12
 8009e5a:	9300      	str	r3, [sp, #0]
 8009e5c:	462a      	mov	r2, r5
 8009e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8009e98 <_svfiprintf_r+0x1f0>)
 8009e60:	a904      	add	r1, sp, #16
 8009e62:	4638      	mov	r0, r7
 8009e64:	f3af 8000 	nop.w
 8009e68:	1c42      	adds	r2, r0, #1
 8009e6a:	4606      	mov	r6, r0
 8009e6c:	d1d6      	bne.n	8009e1c <_svfiprintf_r+0x174>
 8009e6e:	89ab      	ldrh	r3, [r5, #12]
 8009e70:	065b      	lsls	r3, r3, #25
 8009e72:	f53f af2d 	bmi.w	8009cd0 <_svfiprintf_r+0x28>
 8009e76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e78:	e72c      	b.n	8009cd4 <_svfiprintf_r+0x2c>
 8009e7a:	ab03      	add	r3, sp, #12
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	462a      	mov	r2, r5
 8009e80:	4b05      	ldr	r3, [pc, #20]	@ (8009e98 <_svfiprintf_r+0x1f0>)
 8009e82:	a904      	add	r1, sp, #16
 8009e84:	4638      	mov	r0, r7
 8009e86:	f000 f9bb 	bl	800a200 <_printf_i>
 8009e8a:	e7ed      	b.n	8009e68 <_svfiprintf_r+0x1c0>
 8009e8c:	0800aac9 	.word	0x0800aac9
 8009e90:	0800aad3 	.word	0x0800aad3
 8009e94:	00000000 	.word	0x00000000
 8009e98:	08009bf1 	.word	0x08009bf1
 8009e9c:	0800aacf 	.word	0x0800aacf

08009ea0 <__sfputc_r>:
 8009ea0:	6893      	ldr	r3, [r2, #8]
 8009ea2:	3b01      	subs	r3, #1
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	b410      	push	{r4}
 8009ea8:	6093      	str	r3, [r2, #8]
 8009eaa:	da08      	bge.n	8009ebe <__sfputc_r+0x1e>
 8009eac:	6994      	ldr	r4, [r2, #24]
 8009eae:	42a3      	cmp	r3, r4
 8009eb0:	db01      	blt.n	8009eb6 <__sfputc_r+0x16>
 8009eb2:	290a      	cmp	r1, #10
 8009eb4:	d103      	bne.n	8009ebe <__sfputc_r+0x1e>
 8009eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009eba:	f7ff bc2c 	b.w	8009716 <__swbuf_r>
 8009ebe:	6813      	ldr	r3, [r2, #0]
 8009ec0:	1c58      	adds	r0, r3, #1
 8009ec2:	6010      	str	r0, [r2, #0]
 8009ec4:	7019      	strb	r1, [r3, #0]
 8009ec6:	4608      	mov	r0, r1
 8009ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ecc:	4770      	bx	lr

08009ece <__sfputs_r>:
 8009ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed0:	4606      	mov	r6, r0
 8009ed2:	460f      	mov	r7, r1
 8009ed4:	4614      	mov	r4, r2
 8009ed6:	18d5      	adds	r5, r2, r3
 8009ed8:	42ac      	cmp	r4, r5
 8009eda:	d101      	bne.n	8009ee0 <__sfputs_r+0x12>
 8009edc:	2000      	movs	r0, #0
 8009ede:	e007      	b.n	8009ef0 <__sfputs_r+0x22>
 8009ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ee4:	463a      	mov	r2, r7
 8009ee6:	4630      	mov	r0, r6
 8009ee8:	f7ff ffda 	bl	8009ea0 <__sfputc_r>
 8009eec:	1c43      	adds	r3, r0, #1
 8009eee:	d1f3      	bne.n	8009ed8 <__sfputs_r+0xa>
 8009ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ef4 <_vfiprintf_r>:
 8009ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef8:	460d      	mov	r5, r1
 8009efa:	b09d      	sub	sp, #116	@ 0x74
 8009efc:	4614      	mov	r4, r2
 8009efe:	4698      	mov	r8, r3
 8009f00:	4606      	mov	r6, r0
 8009f02:	b118      	cbz	r0, 8009f0c <_vfiprintf_r+0x18>
 8009f04:	6a03      	ldr	r3, [r0, #32]
 8009f06:	b90b      	cbnz	r3, 8009f0c <_vfiprintf_r+0x18>
 8009f08:	f7ff fae8 	bl	80094dc <__sinit>
 8009f0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f0e:	07d9      	lsls	r1, r3, #31
 8009f10:	d405      	bmi.n	8009f1e <_vfiprintf_r+0x2a>
 8009f12:	89ab      	ldrh	r3, [r5, #12]
 8009f14:	059a      	lsls	r2, r3, #22
 8009f16:	d402      	bmi.n	8009f1e <_vfiprintf_r+0x2a>
 8009f18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f1a:	f7ff fd60 	bl	80099de <__retarget_lock_acquire_recursive>
 8009f1e:	89ab      	ldrh	r3, [r5, #12]
 8009f20:	071b      	lsls	r3, r3, #28
 8009f22:	d501      	bpl.n	8009f28 <_vfiprintf_r+0x34>
 8009f24:	692b      	ldr	r3, [r5, #16]
 8009f26:	b99b      	cbnz	r3, 8009f50 <_vfiprintf_r+0x5c>
 8009f28:	4629      	mov	r1, r5
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	f7ff fc32 	bl	8009794 <__swsetup_r>
 8009f30:	b170      	cbz	r0, 8009f50 <_vfiprintf_r+0x5c>
 8009f32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f34:	07dc      	lsls	r4, r3, #31
 8009f36:	d504      	bpl.n	8009f42 <_vfiprintf_r+0x4e>
 8009f38:	f04f 30ff 	mov.w	r0, #4294967295
 8009f3c:	b01d      	add	sp, #116	@ 0x74
 8009f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f42:	89ab      	ldrh	r3, [r5, #12]
 8009f44:	0598      	lsls	r0, r3, #22
 8009f46:	d4f7      	bmi.n	8009f38 <_vfiprintf_r+0x44>
 8009f48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f4a:	f7ff fd49 	bl	80099e0 <__retarget_lock_release_recursive>
 8009f4e:	e7f3      	b.n	8009f38 <_vfiprintf_r+0x44>
 8009f50:	2300      	movs	r3, #0
 8009f52:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f54:	2320      	movs	r3, #32
 8009f56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f5e:	2330      	movs	r3, #48	@ 0x30
 8009f60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a110 <_vfiprintf_r+0x21c>
 8009f64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f68:	f04f 0901 	mov.w	r9, #1
 8009f6c:	4623      	mov	r3, r4
 8009f6e:	469a      	mov	sl, r3
 8009f70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f74:	b10a      	cbz	r2, 8009f7a <_vfiprintf_r+0x86>
 8009f76:	2a25      	cmp	r2, #37	@ 0x25
 8009f78:	d1f9      	bne.n	8009f6e <_vfiprintf_r+0x7a>
 8009f7a:	ebba 0b04 	subs.w	fp, sl, r4
 8009f7e:	d00b      	beq.n	8009f98 <_vfiprintf_r+0xa4>
 8009f80:	465b      	mov	r3, fp
 8009f82:	4622      	mov	r2, r4
 8009f84:	4629      	mov	r1, r5
 8009f86:	4630      	mov	r0, r6
 8009f88:	f7ff ffa1 	bl	8009ece <__sfputs_r>
 8009f8c:	3001      	adds	r0, #1
 8009f8e:	f000 80a7 	beq.w	800a0e0 <_vfiprintf_r+0x1ec>
 8009f92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f94:	445a      	add	r2, fp
 8009f96:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f98:	f89a 3000 	ldrb.w	r3, [sl]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	f000 809f 	beq.w	800a0e0 <_vfiprintf_r+0x1ec>
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8009fa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fac:	f10a 0a01 	add.w	sl, sl, #1
 8009fb0:	9304      	str	r3, [sp, #16]
 8009fb2:	9307      	str	r3, [sp, #28]
 8009fb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009fb8:	931a      	str	r3, [sp, #104]	@ 0x68
 8009fba:	4654      	mov	r4, sl
 8009fbc:	2205      	movs	r2, #5
 8009fbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fc2:	4853      	ldr	r0, [pc, #332]	@ (800a110 <_vfiprintf_r+0x21c>)
 8009fc4:	f7f6 f904 	bl	80001d0 <memchr>
 8009fc8:	9a04      	ldr	r2, [sp, #16]
 8009fca:	b9d8      	cbnz	r0, 800a004 <_vfiprintf_r+0x110>
 8009fcc:	06d1      	lsls	r1, r2, #27
 8009fce:	bf44      	itt	mi
 8009fd0:	2320      	movmi	r3, #32
 8009fd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fd6:	0713      	lsls	r3, r2, #28
 8009fd8:	bf44      	itt	mi
 8009fda:	232b      	movmi	r3, #43	@ 0x2b
 8009fdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fe0:	f89a 3000 	ldrb.w	r3, [sl]
 8009fe4:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fe6:	d015      	beq.n	800a014 <_vfiprintf_r+0x120>
 8009fe8:	9a07      	ldr	r2, [sp, #28]
 8009fea:	4654      	mov	r4, sl
 8009fec:	2000      	movs	r0, #0
 8009fee:	f04f 0c0a 	mov.w	ip, #10
 8009ff2:	4621      	mov	r1, r4
 8009ff4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ff8:	3b30      	subs	r3, #48	@ 0x30
 8009ffa:	2b09      	cmp	r3, #9
 8009ffc:	d94b      	bls.n	800a096 <_vfiprintf_r+0x1a2>
 8009ffe:	b1b0      	cbz	r0, 800a02e <_vfiprintf_r+0x13a>
 800a000:	9207      	str	r2, [sp, #28]
 800a002:	e014      	b.n	800a02e <_vfiprintf_r+0x13a>
 800a004:	eba0 0308 	sub.w	r3, r0, r8
 800a008:	fa09 f303 	lsl.w	r3, r9, r3
 800a00c:	4313      	orrs	r3, r2
 800a00e:	9304      	str	r3, [sp, #16]
 800a010:	46a2      	mov	sl, r4
 800a012:	e7d2      	b.n	8009fba <_vfiprintf_r+0xc6>
 800a014:	9b03      	ldr	r3, [sp, #12]
 800a016:	1d19      	adds	r1, r3, #4
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	9103      	str	r1, [sp, #12]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	bfbb      	ittet	lt
 800a020:	425b      	neglt	r3, r3
 800a022:	f042 0202 	orrlt.w	r2, r2, #2
 800a026:	9307      	strge	r3, [sp, #28]
 800a028:	9307      	strlt	r3, [sp, #28]
 800a02a:	bfb8      	it	lt
 800a02c:	9204      	strlt	r2, [sp, #16]
 800a02e:	7823      	ldrb	r3, [r4, #0]
 800a030:	2b2e      	cmp	r3, #46	@ 0x2e
 800a032:	d10a      	bne.n	800a04a <_vfiprintf_r+0x156>
 800a034:	7863      	ldrb	r3, [r4, #1]
 800a036:	2b2a      	cmp	r3, #42	@ 0x2a
 800a038:	d132      	bne.n	800a0a0 <_vfiprintf_r+0x1ac>
 800a03a:	9b03      	ldr	r3, [sp, #12]
 800a03c:	1d1a      	adds	r2, r3, #4
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	9203      	str	r2, [sp, #12]
 800a042:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a046:	3402      	adds	r4, #2
 800a048:	9305      	str	r3, [sp, #20]
 800a04a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a120 <_vfiprintf_r+0x22c>
 800a04e:	7821      	ldrb	r1, [r4, #0]
 800a050:	2203      	movs	r2, #3
 800a052:	4650      	mov	r0, sl
 800a054:	f7f6 f8bc 	bl	80001d0 <memchr>
 800a058:	b138      	cbz	r0, 800a06a <_vfiprintf_r+0x176>
 800a05a:	9b04      	ldr	r3, [sp, #16]
 800a05c:	eba0 000a 	sub.w	r0, r0, sl
 800a060:	2240      	movs	r2, #64	@ 0x40
 800a062:	4082      	lsls	r2, r0
 800a064:	4313      	orrs	r3, r2
 800a066:	3401      	adds	r4, #1
 800a068:	9304      	str	r3, [sp, #16]
 800a06a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a06e:	4829      	ldr	r0, [pc, #164]	@ (800a114 <_vfiprintf_r+0x220>)
 800a070:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a074:	2206      	movs	r2, #6
 800a076:	f7f6 f8ab 	bl	80001d0 <memchr>
 800a07a:	2800      	cmp	r0, #0
 800a07c:	d03f      	beq.n	800a0fe <_vfiprintf_r+0x20a>
 800a07e:	4b26      	ldr	r3, [pc, #152]	@ (800a118 <_vfiprintf_r+0x224>)
 800a080:	bb1b      	cbnz	r3, 800a0ca <_vfiprintf_r+0x1d6>
 800a082:	9b03      	ldr	r3, [sp, #12]
 800a084:	3307      	adds	r3, #7
 800a086:	f023 0307 	bic.w	r3, r3, #7
 800a08a:	3308      	adds	r3, #8
 800a08c:	9303      	str	r3, [sp, #12]
 800a08e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a090:	443b      	add	r3, r7
 800a092:	9309      	str	r3, [sp, #36]	@ 0x24
 800a094:	e76a      	b.n	8009f6c <_vfiprintf_r+0x78>
 800a096:	fb0c 3202 	mla	r2, ip, r2, r3
 800a09a:	460c      	mov	r4, r1
 800a09c:	2001      	movs	r0, #1
 800a09e:	e7a8      	b.n	8009ff2 <_vfiprintf_r+0xfe>
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	3401      	adds	r4, #1
 800a0a4:	9305      	str	r3, [sp, #20]
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	f04f 0c0a 	mov.w	ip, #10
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0b2:	3a30      	subs	r2, #48	@ 0x30
 800a0b4:	2a09      	cmp	r2, #9
 800a0b6:	d903      	bls.n	800a0c0 <_vfiprintf_r+0x1cc>
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d0c6      	beq.n	800a04a <_vfiprintf_r+0x156>
 800a0bc:	9105      	str	r1, [sp, #20]
 800a0be:	e7c4      	b.n	800a04a <_vfiprintf_r+0x156>
 800a0c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0c4:	4604      	mov	r4, r0
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e7f0      	b.n	800a0ac <_vfiprintf_r+0x1b8>
 800a0ca:	ab03      	add	r3, sp, #12
 800a0cc:	9300      	str	r3, [sp, #0]
 800a0ce:	462a      	mov	r2, r5
 800a0d0:	4b12      	ldr	r3, [pc, #72]	@ (800a11c <_vfiprintf_r+0x228>)
 800a0d2:	a904      	add	r1, sp, #16
 800a0d4:	4630      	mov	r0, r6
 800a0d6:	f3af 8000 	nop.w
 800a0da:	4607      	mov	r7, r0
 800a0dc:	1c78      	adds	r0, r7, #1
 800a0de:	d1d6      	bne.n	800a08e <_vfiprintf_r+0x19a>
 800a0e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0e2:	07d9      	lsls	r1, r3, #31
 800a0e4:	d405      	bmi.n	800a0f2 <_vfiprintf_r+0x1fe>
 800a0e6:	89ab      	ldrh	r3, [r5, #12]
 800a0e8:	059a      	lsls	r2, r3, #22
 800a0ea:	d402      	bmi.n	800a0f2 <_vfiprintf_r+0x1fe>
 800a0ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a0ee:	f7ff fc77 	bl	80099e0 <__retarget_lock_release_recursive>
 800a0f2:	89ab      	ldrh	r3, [r5, #12]
 800a0f4:	065b      	lsls	r3, r3, #25
 800a0f6:	f53f af1f 	bmi.w	8009f38 <_vfiprintf_r+0x44>
 800a0fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a0fc:	e71e      	b.n	8009f3c <_vfiprintf_r+0x48>
 800a0fe:	ab03      	add	r3, sp, #12
 800a100:	9300      	str	r3, [sp, #0]
 800a102:	462a      	mov	r2, r5
 800a104:	4b05      	ldr	r3, [pc, #20]	@ (800a11c <_vfiprintf_r+0x228>)
 800a106:	a904      	add	r1, sp, #16
 800a108:	4630      	mov	r0, r6
 800a10a:	f000 f879 	bl	800a200 <_printf_i>
 800a10e:	e7e4      	b.n	800a0da <_vfiprintf_r+0x1e6>
 800a110:	0800aac9 	.word	0x0800aac9
 800a114:	0800aad3 	.word	0x0800aad3
 800a118:	00000000 	.word	0x00000000
 800a11c:	08009ecf 	.word	0x08009ecf
 800a120:	0800aacf 	.word	0x0800aacf

0800a124 <_printf_common>:
 800a124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a128:	4616      	mov	r6, r2
 800a12a:	4698      	mov	r8, r3
 800a12c:	688a      	ldr	r2, [r1, #8]
 800a12e:	690b      	ldr	r3, [r1, #16]
 800a130:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a134:	4293      	cmp	r3, r2
 800a136:	bfb8      	it	lt
 800a138:	4613      	movlt	r3, r2
 800a13a:	6033      	str	r3, [r6, #0]
 800a13c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a140:	4607      	mov	r7, r0
 800a142:	460c      	mov	r4, r1
 800a144:	b10a      	cbz	r2, 800a14a <_printf_common+0x26>
 800a146:	3301      	adds	r3, #1
 800a148:	6033      	str	r3, [r6, #0]
 800a14a:	6823      	ldr	r3, [r4, #0]
 800a14c:	0699      	lsls	r1, r3, #26
 800a14e:	bf42      	ittt	mi
 800a150:	6833      	ldrmi	r3, [r6, #0]
 800a152:	3302      	addmi	r3, #2
 800a154:	6033      	strmi	r3, [r6, #0]
 800a156:	6825      	ldr	r5, [r4, #0]
 800a158:	f015 0506 	ands.w	r5, r5, #6
 800a15c:	d106      	bne.n	800a16c <_printf_common+0x48>
 800a15e:	f104 0a19 	add.w	sl, r4, #25
 800a162:	68e3      	ldr	r3, [r4, #12]
 800a164:	6832      	ldr	r2, [r6, #0]
 800a166:	1a9b      	subs	r3, r3, r2
 800a168:	42ab      	cmp	r3, r5
 800a16a:	dc26      	bgt.n	800a1ba <_printf_common+0x96>
 800a16c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a170:	6822      	ldr	r2, [r4, #0]
 800a172:	3b00      	subs	r3, #0
 800a174:	bf18      	it	ne
 800a176:	2301      	movne	r3, #1
 800a178:	0692      	lsls	r2, r2, #26
 800a17a:	d42b      	bmi.n	800a1d4 <_printf_common+0xb0>
 800a17c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a180:	4641      	mov	r1, r8
 800a182:	4638      	mov	r0, r7
 800a184:	47c8      	blx	r9
 800a186:	3001      	adds	r0, #1
 800a188:	d01e      	beq.n	800a1c8 <_printf_common+0xa4>
 800a18a:	6823      	ldr	r3, [r4, #0]
 800a18c:	6922      	ldr	r2, [r4, #16]
 800a18e:	f003 0306 	and.w	r3, r3, #6
 800a192:	2b04      	cmp	r3, #4
 800a194:	bf02      	ittt	eq
 800a196:	68e5      	ldreq	r5, [r4, #12]
 800a198:	6833      	ldreq	r3, [r6, #0]
 800a19a:	1aed      	subeq	r5, r5, r3
 800a19c:	68a3      	ldr	r3, [r4, #8]
 800a19e:	bf0c      	ite	eq
 800a1a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1a4:	2500      	movne	r5, #0
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	bfc4      	itt	gt
 800a1aa:	1a9b      	subgt	r3, r3, r2
 800a1ac:	18ed      	addgt	r5, r5, r3
 800a1ae:	2600      	movs	r6, #0
 800a1b0:	341a      	adds	r4, #26
 800a1b2:	42b5      	cmp	r5, r6
 800a1b4:	d11a      	bne.n	800a1ec <_printf_common+0xc8>
 800a1b6:	2000      	movs	r0, #0
 800a1b8:	e008      	b.n	800a1cc <_printf_common+0xa8>
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	4652      	mov	r2, sl
 800a1be:	4641      	mov	r1, r8
 800a1c0:	4638      	mov	r0, r7
 800a1c2:	47c8      	blx	r9
 800a1c4:	3001      	adds	r0, #1
 800a1c6:	d103      	bne.n	800a1d0 <_printf_common+0xac>
 800a1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1d0:	3501      	adds	r5, #1
 800a1d2:	e7c6      	b.n	800a162 <_printf_common+0x3e>
 800a1d4:	18e1      	adds	r1, r4, r3
 800a1d6:	1c5a      	adds	r2, r3, #1
 800a1d8:	2030      	movs	r0, #48	@ 0x30
 800a1da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a1de:	4422      	add	r2, r4
 800a1e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a1e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a1e8:	3302      	adds	r3, #2
 800a1ea:	e7c7      	b.n	800a17c <_printf_common+0x58>
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	4622      	mov	r2, r4
 800a1f0:	4641      	mov	r1, r8
 800a1f2:	4638      	mov	r0, r7
 800a1f4:	47c8      	blx	r9
 800a1f6:	3001      	adds	r0, #1
 800a1f8:	d0e6      	beq.n	800a1c8 <_printf_common+0xa4>
 800a1fa:	3601      	adds	r6, #1
 800a1fc:	e7d9      	b.n	800a1b2 <_printf_common+0x8e>
	...

0800a200 <_printf_i>:
 800a200:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a204:	7e0f      	ldrb	r7, [r1, #24]
 800a206:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a208:	2f78      	cmp	r7, #120	@ 0x78
 800a20a:	4691      	mov	r9, r2
 800a20c:	4680      	mov	r8, r0
 800a20e:	460c      	mov	r4, r1
 800a210:	469a      	mov	sl, r3
 800a212:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a216:	d807      	bhi.n	800a228 <_printf_i+0x28>
 800a218:	2f62      	cmp	r7, #98	@ 0x62
 800a21a:	d80a      	bhi.n	800a232 <_printf_i+0x32>
 800a21c:	2f00      	cmp	r7, #0
 800a21e:	f000 80d2 	beq.w	800a3c6 <_printf_i+0x1c6>
 800a222:	2f58      	cmp	r7, #88	@ 0x58
 800a224:	f000 80b9 	beq.w	800a39a <_printf_i+0x19a>
 800a228:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a22c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a230:	e03a      	b.n	800a2a8 <_printf_i+0xa8>
 800a232:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a236:	2b15      	cmp	r3, #21
 800a238:	d8f6      	bhi.n	800a228 <_printf_i+0x28>
 800a23a:	a101      	add	r1, pc, #4	@ (adr r1, 800a240 <_printf_i+0x40>)
 800a23c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a240:	0800a299 	.word	0x0800a299
 800a244:	0800a2ad 	.word	0x0800a2ad
 800a248:	0800a229 	.word	0x0800a229
 800a24c:	0800a229 	.word	0x0800a229
 800a250:	0800a229 	.word	0x0800a229
 800a254:	0800a229 	.word	0x0800a229
 800a258:	0800a2ad 	.word	0x0800a2ad
 800a25c:	0800a229 	.word	0x0800a229
 800a260:	0800a229 	.word	0x0800a229
 800a264:	0800a229 	.word	0x0800a229
 800a268:	0800a229 	.word	0x0800a229
 800a26c:	0800a3ad 	.word	0x0800a3ad
 800a270:	0800a2d7 	.word	0x0800a2d7
 800a274:	0800a367 	.word	0x0800a367
 800a278:	0800a229 	.word	0x0800a229
 800a27c:	0800a229 	.word	0x0800a229
 800a280:	0800a3cf 	.word	0x0800a3cf
 800a284:	0800a229 	.word	0x0800a229
 800a288:	0800a2d7 	.word	0x0800a2d7
 800a28c:	0800a229 	.word	0x0800a229
 800a290:	0800a229 	.word	0x0800a229
 800a294:	0800a36f 	.word	0x0800a36f
 800a298:	6833      	ldr	r3, [r6, #0]
 800a29a:	1d1a      	adds	r2, r3, #4
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	6032      	str	r2, [r6, #0]
 800a2a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	e09d      	b.n	800a3e8 <_printf_i+0x1e8>
 800a2ac:	6833      	ldr	r3, [r6, #0]
 800a2ae:	6820      	ldr	r0, [r4, #0]
 800a2b0:	1d19      	adds	r1, r3, #4
 800a2b2:	6031      	str	r1, [r6, #0]
 800a2b4:	0606      	lsls	r6, r0, #24
 800a2b6:	d501      	bpl.n	800a2bc <_printf_i+0xbc>
 800a2b8:	681d      	ldr	r5, [r3, #0]
 800a2ba:	e003      	b.n	800a2c4 <_printf_i+0xc4>
 800a2bc:	0645      	lsls	r5, r0, #25
 800a2be:	d5fb      	bpl.n	800a2b8 <_printf_i+0xb8>
 800a2c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a2c4:	2d00      	cmp	r5, #0
 800a2c6:	da03      	bge.n	800a2d0 <_printf_i+0xd0>
 800a2c8:	232d      	movs	r3, #45	@ 0x2d
 800a2ca:	426d      	negs	r5, r5
 800a2cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2d0:	4859      	ldr	r0, [pc, #356]	@ (800a438 <_printf_i+0x238>)
 800a2d2:	230a      	movs	r3, #10
 800a2d4:	e011      	b.n	800a2fa <_printf_i+0xfa>
 800a2d6:	6821      	ldr	r1, [r4, #0]
 800a2d8:	6833      	ldr	r3, [r6, #0]
 800a2da:	0608      	lsls	r0, r1, #24
 800a2dc:	f853 5b04 	ldr.w	r5, [r3], #4
 800a2e0:	d402      	bmi.n	800a2e8 <_printf_i+0xe8>
 800a2e2:	0649      	lsls	r1, r1, #25
 800a2e4:	bf48      	it	mi
 800a2e6:	b2ad      	uxthmi	r5, r5
 800a2e8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a2ea:	4853      	ldr	r0, [pc, #332]	@ (800a438 <_printf_i+0x238>)
 800a2ec:	6033      	str	r3, [r6, #0]
 800a2ee:	bf14      	ite	ne
 800a2f0:	230a      	movne	r3, #10
 800a2f2:	2308      	moveq	r3, #8
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a2fa:	6866      	ldr	r6, [r4, #4]
 800a2fc:	60a6      	str	r6, [r4, #8]
 800a2fe:	2e00      	cmp	r6, #0
 800a300:	bfa2      	ittt	ge
 800a302:	6821      	ldrge	r1, [r4, #0]
 800a304:	f021 0104 	bicge.w	r1, r1, #4
 800a308:	6021      	strge	r1, [r4, #0]
 800a30a:	b90d      	cbnz	r5, 800a310 <_printf_i+0x110>
 800a30c:	2e00      	cmp	r6, #0
 800a30e:	d04b      	beq.n	800a3a8 <_printf_i+0x1a8>
 800a310:	4616      	mov	r6, r2
 800a312:	fbb5 f1f3 	udiv	r1, r5, r3
 800a316:	fb03 5711 	mls	r7, r3, r1, r5
 800a31a:	5dc7      	ldrb	r7, [r0, r7]
 800a31c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a320:	462f      	mov	r7, r5
 800a322:	42bb      	cmp	r3, r7
 800a324:	460d      	mov	r5, r1
 800a326:	d9f4      	bls.n	800a312 <_printf_i+0x112>
 800a328:	2b08      	cmp	r3, #8
 800a32a:	d10b      	bne.n	800a344 <_printf_i+0x144>
 800a32c:	6823      	ldr	r3, [r4, #0]
 800a32e:	07df      	lsls	r7, r3, #31
 800a330:	d508      	bpl.n	800a344 <_printf_i+0x144>
 800a332:	6923      	ldr	r3, [r4, #16]
 800a334:	6861      	ldr	r1, [r4, #4]
 800a336:	4299      	cmp	r1, r3
 800a338:	bfde      	ittt	le
 800a33a:	2330      	movle	r3, #48	@ 0x30
 800a33c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a340:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a344:	1b92      	subs	r2, r2, r6
 800a346:	6122      	str	r2, [r4, #16]
 800a348:	f8cd a000 	str.w	sl, [sp]
 800a34c:	464b      	mov	r3, r9
 800a34e:	aa03      	add	r2, sp, #12
 800a350:	4621      	mov	r1, r4
 800a352:	4640      	mov	r0, r8
 800a354:	f7ff fee6 	bl	800a124 <_printf_common>
 800a358:	3001      	adds	r0, #1
 800a35a:	d14a      	bne.n	800a3f2 <_printf_i+0x1f2>
 800a35c:	f04f 30ff 	mov.w	r0, #4294967295
 800a360:	b004      	add	sp, #16
 800a362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a366:	6823      	ldr	r3, [r4, #0]
 800a368:	f043 0320 	orr.w	r3, r3, #32
 800a36c:	6023      	str	r3, [r4, #0]
 800a36e:	4833      	ldr	r0, [pc, #204]	@ (800a43c <_printf_i+0x23c>)
 800a370:	2778      	movs	r7, #120	@ 0x78
 800a372:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a376:	6823      	ldr	r3, [r4, #0]
 800a378:	6831      	ldr	r1, [r6, #0]
 800a37a:	061f      	lsls	r7, r3, #24
 800a37c:	f851 5b04 	ldr.w	r5, [r1], #4
 800a380:	d402      	bmi.n	800a388 <_printf_i+0x188>
 800a382:	065f      	lsls	r7, r3, #25
 800a384:	bf48      	it	mi
 800a386:	b2ad      	uxthmi	r5, r5
 800a388:	6031      	str	r1, [r6, #0]
 800a38a:	07d9      	lsls	r1, r3, #31
 800a38c:	bf44      	itt	mi
 800a38e:	f043 0320 	orrmi.w	r3, r3, #32
 800a392:	6023      	strmi	r3, [r4, #0]
 800a394:	b11d      	cbz	r5, 800a39e <_printf_i+0x19e>
 800a396:	2310      	movs	r3, #16
 800a398:	e7ac      	b.n	800a2f4 <_printf_i+0xf4>
 800a39a:	4827      	ldr	r0, [pc, #156]	@ (800a438 <_printf_i+0x238>)
 800a39c:	e7e9      	b.n	800a372 <_printf_i+0x172>
 800a39e:	6823      	ldr	r3, [r4, #0]
 800a3a0:	f023 0320 	bic.w	r3, r3, #32
 800a3a4:	6023      	str	r3, [r4, #0]
 800a3a6:	e7f6      	b.n	800a396 <_printf_i+0x196>
 800a3a8:	4616      	mov	r6, r2
 800a3aa:	e7bd      	b.n	800a328 <_printf_i+0x128>
 800a3ac:	6833      	ldr	r3, [r6, #0]
 800a3ae:	6825      	ldr	r5, [r4, #0]
 800a3b0:	6961      	ldr	r1, [r4, #20]
 800a3b2:	1d18      	adds	r0, r3, #4
 800a3b4:	6030      	str	r0, [r6, #0]
 800a3b6:	062e      	lsls	r6, r5, #24
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	d501      	bpl.n	800a3c0 <_printf_i+0x1c0>
 800a3bc:	6019      	str	r1, [r3, #0]
 800a3be:	e002      	b.n	800a3c6 <_printf_i+0x1c6>
 800a3c0:	0668      	lsls	r0, r5, #25
 800a3c2:	d5fb      	bpl.n	800a3bc <_printf_i+0x1bc>
 800a3c4:	8019      	strh	r1, [r3, #0]
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	6123      	str	r3, [r4, #16]
 800a3ca:	4616      	mov	r6, r2
 800a3cc:	e7bc      	b.n	800a348 <_printf_i+0x148>
 800a3ce:	6833      	ldr	r3, [r6, #0]
 800a3d0:	1d1a      	adds	r2, r3, #4
 800a3d2:	6032      	str	r2, [r6, #0]
 800a3d4:	681e      	ldr	r6, [r3, #0]
 800a3d6:	6862      	ldr	r2, [r4, #4]
 800a3d8:	2100      	movs	r1, #0
 800a3da:	4630      	mov	r0, r6
 800a3dc:	f7f5 fef8 	bl	80001d0 <memchr>
 800a3e0:	b108      	cbz	r0, 800a3e6 <_printf_i+0x1e6>
 800a3e2:	1b80      	subs	r0, r0, r6
 800a3e4:	6060      	str	r0, [r4, #4]
 800a3e6:	6863      	ldr	r3, [r4, #4]
 800a3e8:	6123      	str	r3, [r4, #16]
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3f0:	e7aa      	b.n	800a348 <_printf_i+0x148>
 800a3f2:	6923      	ldr	r3, [r4, #16]
 800a3f4:	4632      	mov	r2, r6
 800a3f6:	4649      	mov	r1, r9
 800a3f8:	4640      	mov	r0, r8
 800a3fa:	47d0      	blx	sl
 800a3fc:	3001      	adds	r0, #1
 800a3fe:	d0ad      	beq.n	800a35c <_printf_i+0x15c>
 800a400:	6823      	ldr	r3, [r4, #0]
 800a402:	079b      	lsls	r3, r3, #30
 800a404:	d413      	bmi.n	800a42e <_printf_i+0x22e>
 800a406:	68e0      	ldr	r0, [r4, #12]
 800a408:	9b03      	ldr	r3, [sp, #12]
 800a40a:	4298      	cmp	r0, r3
 800a40c:	bfb8      	it	lt
 800a40e:	4618      	movlt	r0, r3
 800a410:	e7a6      	b.n	800a360 <_printf_i+0x160>
 800a412:	2301      	movs	r3, #1
 800a414:	4632      	mov	r2, r6
 800a416:	4649      	mov	r1, r9
 800a418:	4640      	mov	r0, r8
 800a41a:	47d0      	blx	sl
 800a41c:	3001      	adds	r0, #1
 800a41e:	d09d      	beq.n	800a35c <_printf_i+0x15c>
 800a420:	3501      	adds	r5, #1
 800a422:	68e3      	ldr	r3, [r4, #12]
 800a424:	9903      	ldr	r1, [sp, #12]
 800a426:	1a5b      	subs	r3, r3, r1
 800a428:	42ab      	cmp	r3, r5
 800a42a:	dcf2      	bgt.n	800a412 <_printf_i+0x212>
 800a42c:	e7eb      	b.n	800a406 <_printf_i+0x206>
 800a42e:	2500      	movs	r5, #0
 800a430:	f104 0619 	add.w	r6, r4, #25
 800a434:	e7f5      	b.n	800a422 <_printf_i+0x222>
 800a436:	bf00      	nop
 800a438:	0800aada 	.word	0x0800aada
 800a43c:	0800aaeb 	.word	0x0800aaeb

0800a440 <__sflush_r>:
 800a440:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a448:	0716      	lsls	r6, r2, #28
 800a44a:	4605      	mov	r5, r0
 800a44c:	460c      	mov	r4, r1
 800a44e:	d454      	bmi.n	800a4fa <__sflush_r+0xba>
 800a450:	684b      	ldr	r3, [r1, #4]
 800a452:	2b00      	cmp	r3, #0
 800a454:	dc02      	bgt.n	800a45c <__sflush_r+0x1c>
 800a456:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a458:	2b00      	cmp	r3, #0
 800a45a:	dd48      	ble.n	800a4ee <__sflush_r+0xae>
 800a45c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a45e:	2e00      	cmp	r6, #0
 800a460:	d045      	beq.n	800a4ee <__sflush_r+0xae>
 800a462:	2300      	movs	r3, #0
 800a464:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a468:	682f      	ldr	r7, [r5, #0]
 800a46a:	6a21      	ldr	r1, [r4, #32]
 800a46c:	602b      	str	r3, [r5, #0]
 800a46e:	d030      	beq.n	800a4d2 <__sflush_r+0x92>
 800a470:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a472:	89a3      	ldrh	r3, [r4, #12]
 800a474:	0759      	lsls	r1, r3, #29
 800a476:	d505      	bpl.n	800a484 <__sflush_r+0x44>
 800a478:	6863      	ldr	r3, [r4, #4]
 800a47a:	1ad2      	subs	r2, r2, r3
 800a47c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a47e:	b10b      	cbz	r3, 800a484 <__sflush_r+0x44>
 800a480:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a482:	1ad2      	subs	r2, r2, r3
 800a484:	2300      	movs	r3, #0
 800a486:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a488:	6a21      	ldr	r1, [r4, #32]
 800a48a:	4628      	mov	r0, r5
 800a48c:	47b0      	blx	r6
 800a48e:	1c43      	adds	r3, r0, #1
 800a490:	89a3      	ldrh	r3, [r4, #12]
 800a492:	d106      	bne.n	800a4a2 <__sflush_r+0x62>
 800a494:	6829      	ldr	r1, [r5, #0]
 800a496:	291d      	cmp	r1, #29
 800a498:	d82b      	bhi.n	800a4f2 <__sflush_r+0xb2>
 800a49a:	4a2a      	ldr	r2, [pc, #168]	@ (800a544 <__sflush_r+0x104>)
 800a49c:	410a      	asrs	r2, r1
 800a49e:	07d6      	lsls	r6, r2, #31
 800a4a0:	d427      	bmi.n	800a4f2 <__sflush_r+0xb2>
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	6062      	str	r2, [r4, #4]
 800a4a6:	04d9      	lsls	r1, r3, #19
 800a4a8:	6922      	ldr	r2, [r4, #16]
 800a4aa:	6022      	str	r2, [r4, #0]
 800a4ac:	d504      	bpl.n	800a4b8 <__sflush_r+0x78>
 800a4ae:	1c42      	adds	r2, r0, #1
 800a4b0:	d101      	bne.n	800a4b6 <__sflush_r+0x76>
 800a4b2:	682b      	ldr	r3, [r5, #0]
 800a4b4:	b903      	cbnz	r3, 800a4b8 <__sflush_r+0x78>
 800a4b6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a4b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4ba:	602f      	str	r7, [r5, #0]
 800a4bc:	b1b9      	cbz	r1, 800a4ee <__sflush_r+0xae>
 800a4be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4c2:	4299      	cmp	r1, r3
 800a4c4:	d002      	beq.n	800a4cc <__sflush_r+0x8c>
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	f7ff fa9a 	bl	8009a00 <_free_r>
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4d0:	e00d      	b.n	800a4ee <__sflush_r+0xae>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	4628      	mov	r0, r5
 800a4d6:	47b0      	blx	r6
 800a4d8:	4602      	mov	r2, r0
 800a4da:	1c50      	adds	r0, r2, #1
 800a4dc:	d1c9      	bne.n	800a472 <__sflush_r+0x32>
 800a4de:	682b      	ldr	r3, [r5, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d0c6      	beq.n	800a472 <__sflush_r+0x32>
 800a4e4:	2b1d      	cmp	r3, #29
 800a4e6:	d001      	beq.n	800a4ec <__sflush_r+0xac>
 800a4e8:	2b16      	cmp	r3, #22
 800a4ea:	d11e      	bne.n	800a52a <__sflush_r+0xea>
 800a4ec:	602f      	str	r7, [r5, #0]
 800a4ee:	2000      	movs	r0, #0
 800a4f0:	e022      	b.n	800a538 <__sflush_r+0xf8>
 800a4f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4f6:	b21b      	sxth	r3, r3
 800a4f8:	e01b      	b.n	800a532 <__sflush_r+0xf2>
 800a4fa:	690f      	ldr	r7, [r1, #16]
 800a4fc:	2f00      	cmp	r7, #0
 800a4fe:	d0f6      	beq.n	800a4ee <__sflush_r+0xae>
 800a500:	0793      	lsls	r3, r2, #30
 800a502:	680e      	ldr	r6, [r1, #0]
 800a504:	bf08      	it	eq
 800a506:	694b      	ldreq	r3, [r1, #20]
 800a508:	600f      	str	r7, [r1, #0]
 800a50a:	bf18      	it	ne
 800a50c:	2300      	movne	r3, #0
 800a50e:	eba6 0807 	sub.w	r8, r6, r7
 800a512:	608b      	str	r3, [r1, #8]
 800a514:	f1b8 0f00 	cmp.w	r8, #0
 800a518:	dde9      	ble.n	800a4ee <__sflush_r+0xae>
 800a51a:	6a21      	ldr	r1, [r4, #32]
 800a51c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a51e:	4643      	mov	r3, r8
 800a520:	463a      	mov	r2, r7
 800a522:	4628      	mov	r0, r5
 800a524:	47b0      	blx	r6
 800a526:	2800      	cmp	r0, #0
 800a528:	dc08      	bgt.n	800a53c <__sflush_r+0xfc>
 800a52a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a52e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a532:	81a3      	strh	r3, [r4, #12]
 800a534:	f04f 30ff 	mov.w	r0, #4294967295
 800a538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a53c:	4407      	add	r7, r0
 800a53e:	eba8 0800 	sub.w	r8, r8, r0
 800a542:	e7e7      	b.n	800a514 <__sflush_r+0xd4>
 800a544:	dfbffffe 	.word	0xdfbffffe

0800a548 <_fflush_r>:
 800a548:	b538      	push	{r3, r4, r5, lr}
 800a54a:	690b      	ldr	r3, [r1, #16]
 800a54c:	4605      	mov	r5, r0
 800a54e:	460c      	mov	r4, r1
 800a550:	b913      	cbnz	r3, 800a558 <_fflush_r+0x10>
 800a552:	2500      	movs	r5, #0
 800a554:	4628      	mov	r0, r5
 800a556:	bd38      	pop	{r3, r4, r5, pc}
 800a558:	b118      	cbz	r0, 800a562 <_fflush_r+0x1a>
 800a55a:	6a03      	ldr	r3, [r0, #32]
 800a55c:	b90b      	cbnz	r3, 800a562 <_fflush_r+0x1a>
 800a55e:	f7fe ffbd 	bl	80094dc <__sinit>
 800a562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d0f3      	beq.n	800a552 <_fflush_r+0xa>
 800a56a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a56c:	07d0      	lsls	r0, r2, #31
 800a56e:	d404      	bmi.n	800a57a <_fflush_r+0x32>
 800a570:	0599      	lsls	r1, r3, #22
 800a572:	d402      	bmi.n	800a57a <_fflush_r+0x32>
 800a574:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a576:	f7ff fa32 	bl	80099de <__retarget_lock_acquire_recursive>
 800a57a:	4628      	mov	r0, r5
 800a57c:	4621      	mov	r1, r4
 800a57e:	f7ff ff5f 	bl	800a440 <__sflush_r>
 800a582:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a584:	07da      	lsls	r2, r3, #31
 800a586:	4605      	mov	r5, r0
 800a588:	d4e4      	bmi.n	800a554 <_fflush_r+0xc>
 800a58a:	89a3      	ldrh	r3, [r4, #12]
 800a58c:	059b      	lsls	r3, r3, #22
 800a58e:	d4e1      	bmi.n	800a554 <_fflush_r+0xc>
 800a590:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a592:	f7ff fa25 	bl	80099e0 <__retarget_lock_release_recursive>
 800a596:	e7dd      	b.n	800a554 <_fflush_r+0xc>

0800a598 <__swhatbuf_r>:
 800a598:	b570      	push	{r4, r5, r6, lr}
 800a59a:	460c      	mov	r4, r1
 800a59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5a0:	2900      	cmp	r1, #0
 800a5a2:	b096      	sub	sp, #88	@ 0x58
 800a5a4:	4615      	mov	r5, r2
 800a5a6:	461e      	mov	r6, r3
 800a5a8:	da0d      	bge.n	800a5c6 <__swhatbuf_r+0x2e>
 800a5aa:	89a3      	ldrh	r3, [r4, #12]
 800a5ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a5b0:	f04f 0100 	mov.w	r1, #0
 800a5b4:	bf14      	ite	ne
 800a5b6:	2340      	movne	r3, #64	@ 0x40
 800a5b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a5bc:	2000      	movs	r0, #0
 800a5be:	6031      	str	r1, [r6, #0]
 800a5c0:	602b      	str	r3, [r5, #0]
 800a5c2:	b016      	add	sp, #88	@ 0x58
 800a5c4:	bd70      	pop	{r4, r5, r6, pc}
 800a5c6:	466a      	mov	r2, sp
 800a5c8:	f000 f862 	bl	800a690 <_fstat_r>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	dbec      	blt.n	800a5aa <__swhatbuf_r+0x12>
 800a5d0:	9901      	ldr	r1, [sp, #4]
 800a5d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a5d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a5da:	4259      	negs	r1, r3
 800a5dc:	4159      	adcs	r1, r3
 800a5de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5e2:	e7eb      	b.n	800a5bc <__swhatbuf_r+0x24>

0800a5e4 <__smakebuf_r>:
 800a5e4:	898b      	ldrh	r3, [r1, #12]
 800a5e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5e8:	079d      	lsls	r5, r3, #30
 800a5ea:	4606      	mov	r6, r0
 800a5ec:	460c      	mov	r4, r1
 800a5ee:	d507      	bpl.n	800a600 <__smakebuf_r+0x1c>
 800a5f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a5f4:	6023      	str	r3, [r4, #0]
 800a5f6:	6123      	str	r3, [r4, #16]
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	6163      	str	r3, [r4, #20]
 800a5fc:	b003      	add	sp, #12
 800a5fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a600:	ab01      	add	r3, sp, #4
 800a602:	466a      	mov	r2, sp
 800a604:	f7ff ffc8 	bl	800a598 <__swhatbuf_r>
 800a608:	9f00      	ldr	r7, [sp, #0]
 800a60a:	4605      	mov	r5, r0
 800a60c:	4639      	mov	r1, r7
 800a60e:	4630      	mov	r0, r6
 800a610:	f7ff fa62 	bl	8009ad8 <_malloc_r>
 800a614:	b948      	cbnz	r0, 800a62a <__smakebuf_r+0x46>
 800a616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a61a:	059a      	lsls	r2, r3, #22
 800a61c:	d4ee      	bmi.n	800a5fc <__smakebuf_r+0x18>
 800a61e:	f023 0303 	bic.w	r3, r3, #3
 800a622:	f043 0302 	orr.w	r3, r3, #2
 800a626:	81a3      	strh	r3, [r4, #12]
 800a628:	e7e2      	b.n	800a5f0 <__smakebuf_r+0xc>
 800a62a:	89a3      	ldrh	r3, [r4, #12]
 800a62c:	6020      	str	r0, [r4, #0]
 800a62e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a632:	81a3      	strh	r3, [r4, #12]
 800a634:	9b01      	ldr	r3, [sp, #4]
 800a636:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a63a:	b15b      	cbz	r3, 800a654 <__smakebuf_r+0x70>
 800a63c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a640:	4630      	mov	r0, r6
 800a642:	f000 f837 	bl	800a6b4 <_isatty_r>
 800a646:	b128      	cbz	r0, 800a654 <__smakebuf_r+0x70>
 800a648:	89a3      	ldrh	r3, [r4, #12]
 800a64a:	f023 0303 	bic.w	r3, r3, #3
 800a64e:	f043 0301 	orr.w	r3, r3, #1
 800a652:	81a3      	strh	r3, [r4, #12]
 800a654:	89a3      	ldrh	r3, [r4, #12]
 800a656:	431d      	orrs	r5, r3
 800a658:	81a5      	strh	r5, [r4, #12]
 800a65a:	e7cf      	b.n	800a5fc <__smakebuf_r+0x18>

0800a65c <memmove>:
 800a65c:	4288      	cmp	r0, r1
 800a65e:	b510      	push	{r4, lr}
 800a660:	eb01 0402 	add.w	r4, r1, r2
 800a664:	d902      	bls.n	800a66c <memmove+0x10>
 800a666:	4284      	cmp	r4, r0
 800a668:	4623      	mov	r3, r4
 800a66a:	d807      	bhi.n	800a67c <memmove+0x20>
 800a66c:	1e43      	subs	r3, r0, #1
 800a66e:	42a1      	cmp	r1, r4
 800a670:	d008      	beq.n	800a684 <memmove+0x28>
 800a672:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a676:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a67a:	e7f8      	b.n	800a66e <memmove+0x12>
 800a67c:	4402      	add	r2, r0
 800a67e:	4601      	mov	r1, r0
 800a680:	428a      	cmp	r2, r1
 800a682:	d100      	bne.n	800a686 <memmove+0x2a>
 800a684:	bd10      	pop	{r4, pc}
 800a686:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a68a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a68e:	e7f7      	b.n	800a680 <memmove+0x24>

0800a690 <_fstat_r>:
 800a690:	b538      	push	{r3, r4, r5, lr}
 800a692:	4d07      	ldr	r5, [pc, #28]	@ (800a6b0 <_fstat_r+0x20>)
 800a694:	2300      	movs	r3, #0
 800a696:	4604      	mov	r4, r0
 800a698:	4608      	mov	r0, r1
 800a69a:	4611      	mov	r1, r2
 800a69c:	602b      	str	r3, [r5, #0]
 800a69e:	f7f6 fec2 	bl	8001426 <_fstat>
 800a6a2:	1c43      	adds	r3, r0, #1
 800a6a4:	d102      	bne.n	800a6ac <_fstat_r+0x1c>
 800a6a6:	682b      	ldr	r3, [r5, #0]
 800a6a8:	b103      	cbz	r3, 800a6ac <_fstat_r+0x1c>
 800a6aa:	6023      	str	r3, [r4, #0]
 800a6ac:	bd38      	pop	{r3, r4, r5, pc}
 800a6ae:	bf00      	nop
 800a6b0:	20001854 	.word	0x20001854

0800a6b4 <_isatty_r>:
 800a6b4:	b538      	push	{r3, r4, r5, lr}
 800a6b6:	4d06      	ldr	r5, [pc, #24]	@ (800a6d0 <_isatty_r+0x1c>)
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	4604      	mov	r4, r0
 800a6bc:	4608      	mov	r0, r1
 800a6be:	602b      	str	r3, [r5, #0]
 800a6c0:	f7f6 fec1 	bl	8001446 <_isatty>
 800a6c4:	1c43      	adds	r3, r0, #1
 800a6c6:	d102      	bne.n	800a6ce <_isatty_r+0x1a>
 800a6c8:	682b      	ldr	r3, [r5, #0]
 800a6ca:	b103      	cbz	r3, 800a6ce <_isatty_r+0x1a>
 800a6cc:	6023      	str	r3, [r4, #0]
 800a6ce:	bd38      	pop	{r3, r4, r5, pc}
 800a6d0:	20001854 	.word	0x20001854

0800a6d4 <_sbrk_r>:
 800a6d4:	b538      	push	{r3, r4, r5, lr}
 800a6d6:	4d06      	ldr	r5, [pc, #24]	@ (800a6f0 <_sbrk_r+0x1c>)
 800a6d8:	2300      	movs	r3, #0
 800a6da:	4604      	mov	r4, r0
 800a6dc:	4608      	mov	r0, r1
 800a6de:	602b      	str	r3, [r5, #0]
 800a6e0:	f7f6 feca 	bl	8001478 <_sbrk>
 800a6e4:	1c43      	adds	r3, r0, #1
 800a6e6:	d102      	bne.n	800a6ee <_sbrk_r+0x1a>
 800a6e8:	682b      	ldr	r3, [r5, #0]
 800a6ea:	b103      	cbz	r3, 800a6ee <_sbrk_r+0x1a>
 800a6ec:	6023      	str	r3, [r4, #0]
 800a6ee:	bd38      	pop	{r3, r4, r5, pc}
 800a6f0:	20001854 	.word	0x20001854

0800a6f4 <_realloc_r>:
 800a6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6f8:	4680      	mov	r8, r0
 800a6fa:	4615      	mov	r5, r2
 800a6fc:	460c      	mov	r4, r1
 800a6fe:	b921      	cbnz	r1, 800a70a <_realloc_r+0x16>
 800a700:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a704:	4611      	mov	r1, r2
 800a706:	f7ff b9e7 	b.w	8009ad8 <_malloc_r>
 800a70a:	b92a      	cbnz	r2, 800a718 <_realloc_r+0x24>
 800a70c:	f7ff f978 	bl	8009a00 <_free_r>
 800a710:	2400      	movs	r4, #0
 800a712:	4620      	mov	r0, r4
 800a714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a718:	f000 f81a 	bl	800a750 <_malloc_usable_size_r>
 800a71c:	4285      	cmp	r5, r0
 800a71e:	4606      	mov	r6, r0
 800a720:	d802      	bhi.n	800a728 <_realloc_r+0x34>
 800a722:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a726:	d8f4      	bhi.n	800a712 <_realloc_r+0x1e>
 800a728:	4629      	mov	r1, r5
 800a72a:	4640      	mov	r0, r8
 800a72c:	f7ff f9d4 	bl	8009ad8 <_malloc_r>
 800a730:	4607      	mov	r7, r0
 800a732:	2800      	cmp	r0, #0
 800a734:	d0ec      	beq.n	800a710 <_realloc_r+0x1c>
 800a736:	42b5      	cmp	r5, r6
 800a738:	462a      	mov	r2, r5
 800a73a:	4621      	mov	r1, r4
 800a73c:	bf28      	it	cs
 800a73e:	4632      	movcs	r2, r6
 800a740:	f7ff f94f 	bl	80099e2 <memcpy>
 800a744:	4621      	mov	r1, r4
 800a746:	4640      	mov	r0, r8
 800a748:	f7ff f95a 	bl	8009a00 <_free_r>
 800a74c:	463c      	mov	r4, r7
 800a74e:	e7e0      	b.n	800a712 <_realloc_r+0x1e>

0800a750 <_malloc_usable_size_r>:
 800a750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a754:	1f18      	subs	r0, r3, #4
 800a756:	2b00      	cmp	r3, #0
 800a758:	bfbc      	itt	lt
 800a75a:	580b      	ldrlt	r3, [r1, r0]
 800a75c:	18c0      	addlt	r0, r0, r3
 800a75e:	4770      	bx	lr

0800a760 <_init>:
 800a760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a762:	bf00      	nop
 800a764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a766:	bc08      	pop	{r3}
 800a768:	469e      	mov	lr, r3
 800a76a:	4770      	bx	lr

0800a76c <_fini>:
 800a76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76e:	bf00      	nop
 800a770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a772:	bc08      	pop	{r3}
 800a774:	469e      	mov	lr, r3
 800a776:	4770      	bx	lr
