
TP-autoradio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bd4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  08009d64  08009d64  0000ad64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0b4  0800a0b4  0000c078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0b4  0800a0b4  0000b0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0bc  0800a0bc  0000c078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0bc  0800a0bc  0000b0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a0c0  0800a0c0  0000b0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800a0c4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017c0  20000078  0800a13c  0000c078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001838  0800a13c  0000c838  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002245b  00000000  00000000  0000c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f5b  00000000  00000000  0002e503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d00  00000000  00000000  00033460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001684  00000000  00000000  00035160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c43f  00000000  00000000  000367e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000261b4  00000000  00000000  00062c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001050aa  00000000  00000000  00088dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018de81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080e8  00000000  00000000  0018dec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00195fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009d4c 	.word	0x08009d4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08009d4c 	.word	0x08009d4c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000566:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <MX_DMA_Init+0x48>)
 8000568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800056a:	4a0f      	ldr	r2, [pc, #60]	@ (80005a8 <MX_DMA_Init+0x48>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6493      	str	r3, [r2, #72]	@ 0x48
 8000572:	4b0d      	ldr	r3, [pc, #52]	@ (80005a8 <MX_DMA_Init+0x48>)
 8000574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2105      	movs	r1, #5
 8000582:	2010      	movs	r0, #16
 8000584:	f001 f938 	bl	80017f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000588:	2010      	movs	r0, #16
 800058a:	f001 f951 	bl	8001830 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2105      	movs	r1, #5
 8000592:	2011      	movs	r0, #17
 8000594:	f001 f930 	bl	80017f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000598:	2011      	movs	r0, #17
 800059a:	f001 f949 	bl	8001830 <HAL_NVIC_EnableIRQ>

}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40021000 	.word	0x40021000

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000098 	.word	0x20000098
 80005dc:	20000138 	.word	0x20000138

080005e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <MX_FREERTOS_Init+0x30>)
 80005e8:	1d3c      	adds	r4, r7, #4
 80005ea:	461d      	mov	r5, r3
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f006 fd51 	bl	80070a4 <osThreadCreate>
 8000602:	4603      	mov	r3, r0
 8000604:	4a03      	ldr	r2, [pc, #12]	@ (8000614 <MX_FREERTOS_Init+0x34>)
 8000606:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000608:	bf00      	nop
 800060a:	3720      	adds	r7, #32
 800060c:	46bd      	mov	sp, r7
 800060e:	bdb0      	pop	{r4, r5, r7, pc}
 8000610:	08009d70 	.word	0x08009d70
 8000614:	20000094 	.word	0x20000094

08000618 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f006 fd8b 	bl	800713c <osDelay>
 8000626:	e7fb      	b.n	8000620 <StartDefaultTask+0x8>

08000628 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	@ 0x28
 800062c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063e:	4b35      	ldr	r3, [pc, #212]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	4a34      	ldr	r2, [pc, #208]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000644:	f043 0304 	orr.w	r3, r3, #4
 8000648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064a:	4b32      	ldr	r3, [pc, #200]	@ (8000714 <MX_GPIO_Init+0xec>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	f003 0304 	and.w	r3, r3, #4
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000656:	4b2f      	ldr	r3, [pc, #188]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	4a2e      	ldr	r2, [pc, #184]	@ (8000714 <MX_GPIO_Init+0xec>)
 800065c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000662:	4b2c      	ldr	r3, [pc, #176]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b29      	ldr	r3, [pc, #164]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000672:	4a28      	ldr	r2, [pc, #160]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067a:	4b26      	ldr	r3, [pc, #152]	@ (8000714 <MX_GPIO_Init+0xec>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	4b23      	ldr	r3, [pc, #140]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068a:	4a22      	ldr	r2, [pc, #136]	@ (8000714 <MX_GPIO_Init+0xec>)
 800068c:	f043 0302 	orr.w	r3, r3, #2
 8000690:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000692:	4b20      	ldr	r3, [pc, #128]	@ (8000714 <MX_GPIO_Init+0xec>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000696:	f003 0302 	and.w	r3, r3, #2
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2121      	movs	r1, #33	@ 0x21
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a6:	f001 fc61 	bl	8001f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2180      	movs	r1, #128	@ 0x80
 80006ae:	481a      	ldr	r0, [pc, #104]	@ (8000718 <MX_GPIO_Init+0xf0>)
 80006b0:	f001 fc5c 	bl	8001f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	4814      	ldr	r0, [pc, #80]	@ (800071c <MX_GPIO_Init+0xf4>)
 80006cc:	f001 faa4 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 80006d0:	2321      	movs	r3, #33	@ 0x21
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4619      	mov	r1, r3
 80006e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ea:	f001 fa95 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006ee:	2380      	movs	r3, #128	@ 0x80
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2300      	movs	r3, #0
 80006fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	4804      	ldr	r0, [pc, #16]	@ (8000718 <MX_GPIO_Init+0xf0>)
 8000706:	f001 fa87 	bl	8001c18 <HAL_GPIO_Init>

}
 800070a:	bf00      	nop
 800070c:	3728      	adds	r7, #40	@ 0x28
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000
 8000718:	48000400 	.word	0x48000400
 800071c:	48000800 	.word	0x48000800

08000720 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000724:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	@ (8000798 <MX_I2C2_Init+0x78>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800072a:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <MX_I2C2_Init+0x74>)
 800072c:	4a1b      	ldr	r2, [pc, #108]	@ (800079c <MX_I2C2_Init+0x7c>)
 800072e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000738:	2201      	movs	r2, #1
 800073a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <MX_I2C2_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <MX_I2C2_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800075a:	480e      	ldr	r0, [pc, #56]	@ (8000794 <MX_I2C2_Init+0x74>)
 800075c:	f001 fc1e 	bl	8001f9c <HAL_I2C_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000766:	f000 fb09 	bl	8000d7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800076a:	2100      	movs	r1, #0
 800076c:	4809      	ldr	r0, [pc, #36]	@ (8000794 <MX_I2C2_Init+0x74>)
 800076e:	f001 fcb0 	bl	80020d2 <HAL_I2CEx_ConfigAnalogFilter>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000778:	f000 fb00 	bl	8000d7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800077c:	2100      	movs	r1, #0
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000780:	f001 fcf2 	bl	8002168 <HAL_I2CEx_ConfigDigitalFilter>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800078a:	f000 faf7 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000338 	.word	0x20000338
 8000798:	40005800 	.word	0x40005800
 800079c:	10d19ce4 	.word	0x10d19ce4

080007a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b0ac      	sub	sp, #176	@ 0xb0
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	2288      	movs	r2, #136	@ 0x88
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f008 fc75 	bl	80090b0 <memset>
  if(i2cHandle->Instance==I2C2)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a21      	ldr	r2, [pc, #132]	@ (8000850 <HAL_I2C_MspInit+0xb0>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d13b      	bne.n	8000848 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80007d0:	2380      	movs	r3, #128	@ 0x80
 80007d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4618      	mov	r0, r3
 80007de:	f002 fba5 	bl	8002f2c <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80007e8:	f000 fac8 	bl	8000d7c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ec:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 80007ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f0:	4a18      	ldr	r2, [pc, #96]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 80007f2:	f043 0302 	orr.w	r3, r3, #2
 80007f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f8:	4b16      	ldr	r3, [pc, #88]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 80007fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fc:	f003 0302 	and.w	r3, r3, #2
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000804:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000808:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800080c:	2312      	movs	r3, #18
 800080e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800081e:	2304      	movs	r3, #4
 8000820:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000828:	4619      	mov	r1, r3
 800082a:	480b      	ldr	r0, [pc, #44]	@ (8000858 <HAL_I2C_MspInit+0xb8>)
 800082c:	f001 f9f4 	bl	8001c18 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000830:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 8000832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000834:	4a07      	ldr	r2, [pc, #28]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 8000836:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800083a:	6593      	str	r3, [r2, #88]	@ 0x58
 800083c:	4b05      	ldr	r3, [pc, #20]	@ (8000854 <HAL_I2C_MspInit+0xb4>)
 800083e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000840:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000848:	bf00      	nop
 800084a:	37b0      	adds	r7, #176	@ 0xb0
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40005800 	.word	0x40005800
 8000854:	40021000 	.word	0x40021000
 8000858:	48000400 	.word	0x48000400

0800085c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000864:	1d39      	adds	r1, r7, #4
 8000866:	f04f 33ff 	mov.w	r3, #4294967295
 800086a:	2201      	movs	r2, #1
 800086c:	4803      	ldr	r0, [pc, #12]	@ (800087c <__io_putchar+0x20>)
 800086e:	f005 fa65 	bl	8005d3c <HAL_UART_Transmit>

	return ch;
 8000872:	687b      	ldr	r3, [r7, #4]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000954 	.word	0x20000954

08000880 <fonction>:
		shell_uart_receive_irq_cb();	// C'est la fonction qui donne le sémaphore!
	}
}

int fonction(h_shell_t * h_shell, int argc, char ** argv)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
	int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Je suis une fonction bidon\r\n");
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8000892:	4a0a      	ldr	r2, [pc, #40]	@ (80008bc <fonction+0x3c>)
 8000894:	2128      	movs	r1, #40	@ 0x28
 8000896:	4618      	mov	r0, r3
 8000898:	f008 fafe 	bl	8008e98 <sniprintf>
 800089c:	6178      	str	r0, [r7, #20]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 80008a4:	68fa      	ldr	r2, [r7, #12]
 80008a6:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80008aa:	6979      	ldr	r1, [r7, #20]
 80008ac:	b289      	uxth	r1, r1
 80008ae:	4610      	mov	r0, r2
 80008b0:	4798      	blx	r3

	return 0;
 80008b2:	2300      	movs	r3, #0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3718      	adds	r7, #24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	08009d8c 	.word	0x08009d8c

080008c0 <addition>:

int addition(h_shell_t * h_shell, int argc, char ** argv)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	@ 0x28
 80008c4:	af02      	add	r7, sp, #8
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
	if (argc == 3)
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	2b03      	cmp	r3, #3
 80008d0:	d128      	bne.n	8000924 <addition+0x64>
	{
		int a, b;
		a = atoi(argv[1]);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3304      	adds	r3, #4
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f008 f935 	bl	8008b48 <atoi>
 80008de:	61b8      	str	r0, [r7, #24]
		b = atoi(argv[2]);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3308      	adds	r3, #8
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f008 f92e 	bl	8008b48 <atoi>
 80008ec:	6178      	str	r0, [r7, #20]
		int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%d + %d = %d\r\n", a, b, a+b);
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80008f4:	69ba      	ldr	r2, [r7, #24]
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	4413      	add	r3, r2
 80008fa:	9301      	str	r3, [sp, #4]
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	4a15      	ldr	r2, [pc, #84]	@ (8000958 <addition+0x98>)
 8000904:	2128      	movs	r1, #40	@ 0x28
 8000906:	f008 fac7 	bl	8008e98 <sniprintf>
 800090a:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000918:	6939      	ldr	r1, [r7, #16]
 800091a:	b289      	uxth	r1, r1
 800091c:	4610      	mov	r0, r2
 800091e:	4798      	blx	r3

		return 0;
 8000920:	2300      	movs	r3, #0
 8000922:	e014      	b.n	800094e <addition+0x8e>
	}
	else
	{
		int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Erreur, pas le bon nombre d'arguments\r\n");
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800092a:	4a0c      	ldr	r2, [pc, #48]	@ (800095c <addition+0x9c>)
 800092c:	2128      	movs	r1, #40	@ 0x28
 800092e:	4618      	mov	r0, r3
 8000930:	f008 fab2 	bl	8008e98 <sniprintf>
 8000934:	61f8      	str	r0, [r7, #28]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800093c:	68fa      	ldr	r2, [r7, #12]
 800093e:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000942:	69f9      	ldr	r1, [r7, #28]
 8000944:	b289      	uxth	r1, r1
 8000946:	4610      	mov	r0, r2
 8000948:	4798      	blx	r3
		return -1;
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800094e:	4618      	mov	r0, r3
 8000950:	3720      	adds	r7, #32
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	08009dac 	.word	0x08009dac
 800095c:	08009dbc 	.word	0x08009dbc

08000960 <ledToggle>:

int ledToggle(h_shell_t * h_shell, int argc, char ** argv)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
	if (argc == 3)
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	2b03      	cmp	r3, #3
 8000970:	d153      	bne.n	8000a1a <ledToggle+0xba>
	{

		int a = atoi(argv[1]);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3304      	adds	r3, #4
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	f008 f8e5 	bl	8008b48 <atoi>
 800097e:	61b8      	str	r0, [r7, #24]
		int b = atoi(argv[2]);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3308      	adds	r3, #8
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4618      	mov	r0, r3
 8000988:	f008 f8de 	bl	8008b48 <atoi>
 800098c:	6178      	str	r0, [r7, #20]
		if((a>=0 && a<=7)!=0){
 800098e:	69bb      	ldr	r3, [r7, #24]
 8000990:	2b00      	cmp	r3, #0
 8000992:	db04      	blt.n	800099e <ledToggle+0x3e>
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	2b07      	cmp	r3, #7
 8000998:	dc01      	bgt.n	800099e <ledToggle+0x3e>
 800099a:	2301      	movs	r3, #1
 800099c:	e000      	b.n	80009a0 <ledToggle+0x40>
 800099e:	2300      	movs	r3, #0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d038      	beq.n	8000a16 <ledToggle+0xb6>
			if(b==0){
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d10d      	bne.n	80009c6 <ledToggle+0x66>

				h_shell->drv.led(h_shell->led_num = a,0x12);
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	f8d3 3368 	ldr.w	r3, [r3, #872]	@ 0x368
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	b2d1      	uxtb	r1, r2
 80009b4:	68fa      	ldr	r2, [r7, #12]
 80009b6:	f882 1354 	strb.w	r1, [r2, #852]	@ 0x354
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	f892 2354 	ldrb.w	r2, [r2, #852]	@ 0x354
 80009c0:	2112      	movs	r1, #18
 80009c2:	4610      	mov	r0, r2
 80009c4:	4798      	blx	r3
			}
			if(b==1){
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d10e      	bne.n	80009ea <ledToggle+0x8a>

				h_shell->drv.led(h_shell->led_num = a,0x13);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f8d3 3368 	ldr.w	r3, [r3, #872]	@ 0x368
 80009d2:	69ba      	ldr	r2, [r7, #24]
 80009d4:	b2d1      	uxtb	r1, r2
 80009d6:	68fa      	ldr	r2, [r7, #12]
 80009d8:	f882 1354 	strb.w	r1, [r2, #852]	@ 0x354
 80009dc:	68fa      	ldr	r2, [r7, #12]
 80009de:	f892 2354 	ldrb.w	r2, [r2, #852]	@ 0x354
 80009e2:	2113      	movs	r1, #19
 80009e4:	4610      	mov	r0, r2
 80009e6:	4798      	blx	r3
 80009e8:	e015      	b.n	8000a16 <ledToggle+0xb6>
			}
			else{
				int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Erreur, verifier la led ou le gpio\r\n");
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80009f0:	4a16      	ldr	r2, [pc, #88]	@ (8000a4c <ledToggle+0xec>)
 80009f2:	2128      	movs	r1, #40	@ 0x28
 80009f4:	4618      	mov	r0, r3
 80009f6:	f008 fa4f 	bl	8008e98 <sniprintf>
 80009fa:	6138      	str	r0, [r7, #16]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000a08:	6939      	ldr	r1, [r7, #16]
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	4610      	mov	r0, r2
 8000a0e:	4798      	blx	r3
				return -2;
 8000a10:	f06f 0301 	mvn.w	r3, #1
 8000a14:	e016      	b.n	8000a44 <ledToggle+0xe4>
			}
		}

		return 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	e014      	b.n	8000a44 <ledToggle+0xe4>
	}
	else
	{
		int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Erreur, pas le bon nombre d'arguments\r\n");
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8000a20:	4a0b      	ldr	r2, [pc, #44]	@ (8000a50 <ledToggle+0xf0>)
 8000a22:	2128      	movs	r1, #40	@ 0x28
 8000a24:	4618      	mov	r0, r3
 8000a26:	f008 fa37 	bl	8008e98 <sniprintf>
 8000a2a:	61f8      	str	r0, [r7, #28]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000a38:	69f9      	ldr	r1, [r7, #28]
 8000a3a:	b289      	uxth	r1, r1
 8000a3c:	4610      	mov	r0, r2
 8000a3e:	4798      	blx	r3
		return -1;
 8000a40:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3720      	adds	r7, #32
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	08009de4 	.word	0x08009de4
 8000a50:	08009dbc 	.word	0x08009dbc

08000a54 <task_chenillard>:

void task_chenillard(void * params) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	h_shell_t *h_shell = (h_shell_t *)params;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	617b      	str	r3, [r7, #20]
	int current_led_a = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
	int current_led_b = 4;
 8000a64:	2304      	movs	r3, #4
 8000a66:	60fb      	str	r3, [r7, #12]
	while (1) {
		if (chenillard_running) {
 8000a68:	4b10      	ldr	r3, [pc, #64]	@ (8000aac <task_chenillard+0x58>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d017      	beq.n	8000aa2 <task_chenillard+0x4e>
			printf("tache\r\n");
 8000a72:	480f      	ldr	r0, [pc, #60]	@ (8000ab0 <task_chenillard+0x5c>)
 8000a74:	f008 fa08 	bl	8008e88 <puts>
			h_shell->drv.led(h_shell->led_num = current_led_b,0x13);
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	f8d3 3368 	ldr.w	r3, [r3, #872]	@ 0x368
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	b2d1      	uxtb	r1, r2
 8000a82:	697a      	ldr	r2, [r7, #20]
 8000a84:	f882 1354 	strb.w	r1, [r2, #852]	@ 0x354
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	f892 2354 	ldrb.w	r2, [r2, #852]	@ 0x354
 8000a8e:	2113      	movs	r1, #19
 8000a90:	4610      	mov	r0, r2
 8000a92:	4798      	blx	r3
			printf("tache\r\n");
 8000a94:	4806      	ldr	r0, [pc, #24]	@ (8000ab0 <task_chenillard+0x5c>)
 8000a96:	f008 f9f7 	bl	8008e88 <puts>
			osDelay(200); // Délai entre deux LEDs (200 ms)
 8000a9a:	20c8      	movs	r0, #200	@ 0xc8
 8000a9c:	f006 fb4e 	bl	800713c <osDelay>
 8000aa0:	e7e2      	b.n	8000a68 <task_chenillard+0x14>
		} else {
			osDelay(1000); // Petit délai pour éviter une boucle infinie rapide
 8000aa2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aa6:	f006 fb49 	bl	800713c <osDelay>
		if (chenillard_running) {
 8000aaa:	e7dd      	b.n	8000a68 <task_chenillard+0x14>
 8000aac:	20000394 	.word	0x20000394
 8000ab0:	08009e0c 	.word	0x08009e0c

08000ab4 <startchenillard>:
		}
	}
}


int startchenillard(h_shell_t * h_shell, int argc, char ** argv){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af02      	add	r7, sp, #8
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]

	if(chenillard_running == 0){
 8000ac0:	4b19      	ldr	r3, [pc, #100]	@ (8000b28 <startchenillard+0x74>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d111      	bne.n	8000aee <startchenillard+0x3a>
		chenillard_running = 1; // Activer le chenillard
 8000aca:	4b17      	ldr	r3, [pc, #92]	@ (8000b28 <startchenillard+0x74>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	701a      	strb	r2, [r3, #0]
		if (ChenillardTaskHandle == NULL) {
 8000ad0:	4b16      	ldr	r3, [pc, #88]	@ (8000b2c <startchenillard+0x78>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d121      	bne.n	8000b1c <startchenillard+0x68>

			// Créer la tâche si elle n'existe pas
			xTaskCreate(task_chenillard, "ChenillardTask", 128, NULL, 1, &ChenillardTaskHandle);
 8000ad8:	4b14      	ldr	r3, [pc, #80]	@ (8000b2c <startchenillard+0x78>)
 8000ada:	9301      	str	r3, [sp, #4]
 8000adc:	2301      	movs	r3, #1
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	2280      	movs	r2, #128	@ 0x80
 8000ae4:	4912      	ldr	r1, [pc, #72]	@ (8000b30 <startchenillard+0x7c>)
 8000ae6:	4813      	ldr	r0, [pc, #76]	@ (8000b34 <startchenillard+0x80>)
 8000ae8:	f006 fc50 	bl	800738c <xTaskCreate>
 8000aec:	e016      	b.n	8000b1c <startchenillard+0x68>
		}
	}
	else{
		chenillard_running = 0;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <startchenillard+0x74>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
		if (ChenillardTaskHandle != NULL) {
 8000af4:	4b0d      	ldr	r3, [pc, #52]	@ (8000b2c <startchenillard+0x78>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d00f      	beq.n	8000b1c <startchenillard+0x68>
			vTaskDelete(ChenillardTaskHandle); // Supprimer la tâche
 8000afc:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <startchenillard+0x78>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f006 fd93 	bl	800762c <vTaskDelete>
			ChenillardTaskHandle = NULL;
 8000b06:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <startchenillard+0x78>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
			MCP23S17_Write(MCPGPIOA, 0xff);
 8000b0c:	21ff      	movs	r1, #255	@ 0xff
 8000b0e:	2012      	movs	r0, #18
 8000b10:	f007 fdea 	bl	80086e8 <MCP23S17_Write>
			MCP23S17_Write(MCPGPIOB, 0xff);
 8000b14:	21ff      	movs	r1, #255	@ 0xff
 8000b16:	2013      	movs	r0, #19
 8000b18:	f007 fde6 	bl	80086e8 <MCP23S17_Write>
		}
	}


	return 0;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000394 	.word	0x20000394
 8000b2c:	20000390 	.word	0x20000390
 8000b30:	08009e14 	.word	0x08009e14
 8000b34:	08000a55 	.word	0x08000a55

08000b38 <task_shell>:


void task_shell(void * unused)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	shell_init(&h_shell);
 8000b40:	4810      	ldr	r0, [pc, #64]	@ (8000b84 <task_shell+0x4c>)
 8000b42:	f007 fe89 	bl	8008858 <shell_init>
	shell_add(&h_shell, 'f', fonction, "Une fonction inutile");
 8000b46:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <task_shell+0x50>)
 8000b48:	4a10      	ldr	r2, [pc, #64]	@ (8000b8c <task_shell+0x54>)
 8000b4a:	2166      	movs	r1, #102	@ 0x66
 8000b4c:	480d      	ldr	r0, [pc, #52]	@ (8000b84 <task_shell+0x4c>)
 8000b4e:	f007 fec5 	bl	80088dc <shell_add>
	shell_add(&h_shell, 'a', addition, "Effectue une somme");
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <task_shell+0x58>)
 8000b54:	4a0f      	ldr	r2, [pc, #60]	@ (8000b94 <task_shell+0x5c>)
 8000b56:	2161      	movs	r1, #97	@ 0x61
 8000b58:	480a      	ldr	r0, [pc, #40]	@ (8000b84 <task_shell+0x4c>)
 8000b5a:	f007 febf 	bl	80088dc <shell_add>
	shell_add(&h_shell, 'b', ledToggle, "Allumer une led");
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <task_shell+0x60>)
 8000b60:	4a0e      	ldr	r2, [pc, #56]	@ (8000b9c <task_shell+0x64>)
 8000b62:	2162      	movs	r1, #98	@ 0x62
 8000b64:	4807      	ldr	r0, [pc, #28]	@ (8000b84 <task_shell+0x4c>)
 8000b66:	f007 feb9 	bl	80088dc <shell_add>
	shell_add(&h_shell, 'c',startchenillard, "Lancer chenillard/Arreter chenillard");
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba0 <task_shell+0x68>)
 8000b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba4 <task_shell+0x6c>)
 8000b6e:	2163      	movs	r1, #99	@ 0x63
 8000b70:	4804      	ldr	r0, [pc, #16]	@ (8000b84 <task_shell+0x4c>)
 8000b72:	f007 feb3 	bl	80088dc <shell_add>
	shell_run(&h_shell);	// boucle infinie
 8000b76:	4803      	ldr	r0, [pc, #12]	@ (8000b84 <task_shell+0x4c>)
 8000b78:	f007 ff5c 	bl	8008a34 <shell_run>
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000398 	.word	0x20000398
 8000b88:	08009e24 	.word	0x08009e24
 8000b8c:	08000881 	.word	0x08000881
 8000b90:	08009e3c 	.word	0x08009e3c
 8000b94:	080008c1 	.word	0x080008c1
 8000b98:	08009e50 	.word	0x08009e50
 8000b9c:	08000961 	.word	0x08000961
 8000ba0:	08009e60 	.word	0x08009e60
 8000ba4:	08000ab5 	.word	0x08000ab5

08000ba8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bae:	f000 fd2b 	bl	8001608 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000bb2:	f000 f855 	bl	8000c60 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000bb6:	f000 f8a4 	bl	8000d02 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bba:	f7ff fd35 	bl	8000628 <MX_GPIO_Init>
	MX_DMA_Init();
 8000bbe:	f7ff fccf 	bl	8000560 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000bc2:	f000 fc63 	bl	800148c <MX_USART2_UART_Init>
	MX_SPI3_Init();
 8000bc6:	f000 fa23 	bl	8001010 <MX_SPI3_Init>
	MX_I2C2_Init();
 8000bca:	f7ff fda9 	bl	8000720 <MX_I2C2_Init>
	MX_SAI2_Init();
 8000bce:	f000 f8db 	bl	8000d88 <MX_SAI2_Init>
	/* USER CODE BEGIN 2 */

	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8000bd2:	4b19      	ldr	r3, [pc, #100]	@ (8000c38 <main+0x90>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b17      	ldr	r3, [pc, #92]	@ (8000c38 <main+0x90>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000be0:	601a      	str	r2, [r3, #0]

	h_shell.drv.receive = drv_uart2_receive;
 8000be2:	4b16      	ldr	r3, [pc, #88]	@ (8000c3c <main+0x94>)
 8000be4:	4a16      	ldr	r2, [pc, #88]	@ (8000c40 <main+0x98>)
 8000be6:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
	h_shell.drv.transmit = drv_uart2_transmit;
 8000bea:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <main+0x94>)
 8000bec:	4a15      	ldr	r2, [pc, #84]	@ (8000c44 <main+0x9c>)
 8000bee:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
	h_shell.drv.init = MCP23S17_Init;
 8000bf2:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <main+0x94>)
 8000bf4:	4a14      	ldr	r2, [pc, #80]	@ (8000c48 <main+0xa0>)
 8000bf6:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
	h_shell.drv.led = drv_led;
 8000bfa:	4b10      	ldr	r3, [pc, #64]	@ (8000c3c <main+0x94>)
 8000bfc:	4a13      	ldr	r2, [pc, #76]	@ (8000c4c <main+0xa4>)
 8000bfe:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368


	if (xTaskCreate(task_shell, "Shell", TASK_SHELL_STACK_DEPTH, NULL, TASK_SHELL_PRIORITY, &h_task_shell) != pdPASS)
 8000c02:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <main+0xa8>)
 8000c04:	9301      	str	r3, [sp, #4]
 8000c06:	2301      	movs	r3, #1
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c10:	4910      	ldr	r1, [pc, #64]	@ (8000c54 <main+0xac>)
 8000c12:	4811      	ldr	r0, [pc, #68]	@ (8000c58 <main+0xb0>)
 8000c14:	f006 fbba 	bl	800738c <xTaskCreate>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d004      	beq.n	8000c28 <main+0x80>
	{
		printf("Error creating task shell\r\n");
 8000c1e:	480f      	ldr	r0, [pc, #60]	@ (8000c5c <main+0xb4>)
 8000c20:	f008 f932 	bl	8008e88 <puts>
		Error_Handler();
 8000c24:	f000 f8aa 	bl	8000d7c <Error_Handler>
	}

	vTaskStartScheduler();
 8000c28:	f006 fdc6 	bl	80077b8 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 8000c2c:	f7ff fcd8 	bl	80005e0 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8000c30:	f006 fa31 	bl	8007096 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <main+0x8c>
 8000c38:	20000704 	.word	0x20000704
 8000c3c:	20000398 	.word	0x20000398
 8000c40:	08008789 	.word	0x08008789
 8000c44:	080087b1 	.word	0x080087b1
 8000c48:	080086a5 	.word	0x080086a5
 8000c4c:	08008739 	.word	0x08008739
 8000c50:	2000038c 	.word	0x2000038c
 8000c54:	08009e88 	.word	0x08009e88
 8000c58:	08000b39 	.word	0x08000b39
 8000c5c:	08009e90 	.word	0x08009e90

08000c60 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b096      	sub	sp, #88	@ 0x58
 8000c64:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	2244      	movs	r2, #68	@ 0x44
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f008 fa1e 	bl	80090b0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c74:	463b      	mov	r3, r7
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c82:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c86:	f001 fac9 	bl	800221c <HAL_PWREx_ControlVoltageScaling>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000c90:	f000 f874 	bl	8000d7c <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c94:	2302      	movs	r3, #2
 8000c96:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c9c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c9e:	2310      	movs	r3, #16
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000caa:	2301      	movs	r3, #1
 8000cac:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000cae:	230a      	movs	r3, #10
 8000cb0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cb2:	2307      	movs	r3, #7
 8000cb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f001 fb00 	bl	80022c8 <HAL_RCC_OscConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0x72>
	{
		Error_Handler();
 8000cce:	f000 f855 	bl	8000d7c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd2:	230f      	movs	r3, #15
 8000cd4:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	2104      	movs	r1, #4
 8000cea:	4618      	mov	r0, r3
 8000cec:	f001 fec8 	bl	8002a80 <HAL_RCC_ClockConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000cf6:	f000 f841 	bl	8000d7c <Error_Handler>
	}
}
 8000cfa:	bf00      	nop
 8000cfc:	3758      	adds	r7, #88	@ 0x58
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b0a2      	sub	sp, #136	@ 0x88
 8000d06:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d08:	463b      	mov	r3, r7
 8000d0a:	2288      	movs	r2, #136	@ 0x88
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f008 f9ce 	bl	80090b0 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000d14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d18:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	66bb      	str	r3, [r7, #104]	@ 0x68
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d22:	2301      	movs	r3, #1
 8000d24:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 8000d26:	230d      	movs	r3, #13
 8000d28:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8000d2a:	2311      	movs	r3, #17
 8000d2c:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d32:	2302      	movs	r3, #2
 8000d34:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000d36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d3a:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f002 f8f4 	bl	8002f2c <HAL_RCCEx_PeriphCLKConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <PeriphCommonClock_Config+0x4c>
	{
		Error_Handler();
 8000d4a:	f000 f817 	bl	8000d7c <Error_Handler>
	}
}
 8000d4e:	bf00      	nop
 8000d50:	3788      	adds	r7, #136	@ 0x88
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a04      	ldr	r2, [pc, #16]	@ (8000d78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d101      	bne.n	8000d6e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000d6a:	f000 fc6d 	bl	8001648 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40012c00 	.word	0x40012c00

08000d7c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d80:	b672      	cpsid	i
}
 8000d82:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <Error_Handler+0x8>

08000d88 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8000d8c:	4b2a      	ldr	r3, [pc, #168]	@ (8000e38 <MX_SAI2_Init+0xb0>)
 8000d8e:	4a2b      	ldr	r2, [pc, #172]	@ (8000e3c <MX_SAI2_Init+0xb4>)
 8000d90:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000d92:	4b29      	ldr	r3, [pc, #164]	@ (8000e38 <MX_SAI2_Init+0xb0>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d98:	4b27      	ldr	r3, [pc, #156]	@ (8000e38 <MX_SAI2_Init+0xb0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d9e:	4b26      	ldr	r3, [pc, #152]	@ (8000e38 <MX_SAI2_Init+0xb0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000da4:	4b24      	ldr	r3, [pc, #144]	@ (8000e38 <MX_SAI2_Init+0xb0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000daa:	4b23      	ldr	r3, [pc, #140]	@ (8000e38 <MX_SAI2_Init+0xb0>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000db0:	4b21      	ldr	r3, [pc, #132]	@ (8000e38 <MX_SAI2_Init+0xb0>)
 8000db2:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000db6:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000db8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e38 <MX_SAI2_Init+0xb0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8000e38 <MX_SAI2_Init+0xb0>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e38 <MX_SAI2_Init+0xb0>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000dca:	4b1b      	ldr	r3, [pc, #108]	@ (8000e38 <MX_SAI2_Init+0xb0>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4818      	ldr	r0, [pc, #96]	@ (8000e38 <MX_SAI2_Init+0xb0>)
 8000dd8:	f003 fbc2 	bl	8004560 <HAL_SAI_InitProtocol>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 8000de2:	f7ff ffcb 	bl	8000d7c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000de6:	4b16      	ldr	r3, [pc, #88]	@ (8000e40 <MX_SAI2_Init+0xb8>)
 8000de8:	4a16      	ldr	r2, [pc, #88]	@ (8000e44 <MX_SAI2_Init+0xbc>)
 8000dea:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000dec:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <MX_SAI2_Init+0xb8>)
 8000dee:	2203      	movs	r2, #3
 8000df0:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000df2:	4b13      	ldr	r3, [pc, #76]	@ (8000e40 <MX_SAI2_Init+0xb8>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000df8:	4b11      	ldr	r3, [pc, #68]	@ (8000e40 <MX_SAI2_Init+0xb8>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000dfe:	4b10      	ldr	r3, [pc, #64]	@ (8000e40 <MX_SAI2_Init+0xb8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e04:	4b0e      	ldr	r3, [pc, #56]	@ (8000e40 <MX_SAI2_Init+0xb8>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e40 <MX_SAI2_Init+0xb8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e10:	4b0b      	ldr	r3, [pc, #44]	@ (8000e40 <MX_SAI2_Init+0xb8>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e16:	4b0a      	ldr	r3, [pc, #40]	@ (8000e40 <MX_SAI2_Init+0xb8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2100      	movs	r1, #0
 8000e22:	4807      	ldr	r0, [pc, #28]	@ (8000e40 <MX_SAI2_Init+0xb8>)
 8000e24:	f003 fb9c 	bl	8004560 <HAL_SAI_InitProtocol>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8000e2e:	f7ff ffa5 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000704 	.word	0x20000704
 8000e3c:	40015804 	.word	0x40015804
 8000e40:	20000788 	.word	0x20000788
 8000e44:	40015824 	.word	0x40015824

08000e48 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	@ 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a64      	ldr	r2, [pc, #400]	@ (8000fe8 <HAL_SAI_MspInit+0x1a0>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d15e      	bne.n	8000f18 <HAL_SAI_MspInit+0xd0>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8000e5a:	4b64      	ldr	r3, [pc, #400]	@ (8000fec <HAL_SAI_MspInit+0x1a4>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d113      	bne.n	8000e8a <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000e62:	4b63      	ldr	r3, [pc, #396]	@ (8000ff0 <HAL_SAI_MspInit+0x1a8>)
 8000e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e66:	4a62      	ldr	r2, [pc, #392]	@ (8000ff0 <HAL_SAI_MspInit+0x1a8>)
 8000e68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e6e:	4b60      	ldr	r3, [pc, #384]	@ (8000ff0 <HAL_SAI_MspInit+0x1a8>)
 8000e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2105      	movs	r1, #5
 8000e7e:	204b      	movs	r0, #75	@ 0x4b
 8000e80:	f000 fcba 	bl	80017f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000e84:	204b      	movs	r0, #75	@ 0x4b
 8000e86:	f000 fcd3 	bl	8001830 <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8000e8a:	4b58      	ldr	r3, [pc, #352]	@ (8000fec <HAL_SAI_MspInit+0x1a4>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	4a56      	ldr	r2, [pc, #344]	@ (8000fec <HAL_SAI_MspInit+0x1a4>)
 8000e92:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e94:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000ea6:	230d      	movs	r3, #13
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4850      	ldr	r0, [pc, #320]	@ (8000ff4 <HAL_SAI_MspInit+0x1ac>)
 8000eb2:	f000 feb1 	bl	8001c18 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000eb6:	4b50      	ldr	r3, [pc, #320]	@ (8000ff8 <HAL_SAI_MspInit+0x1b0>)
 8000eb8:	4a50      	ldr	r2, [pc, #320]	@ (8000ffc <HAL_SAI_MspInit+0x1b4>)
 8000eba:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000ebc:	4b4e      	ldr	r3, [pc, #312]	@ (8000ff8 <HAL_SAI_MspInit+0x1b0>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ec2:	4b4d      	ldr	r3, [pc, #308]	@ (8000ff8 <HAL_SAI_MspInit+0x1b0>)
 8000ec4:	2210      	movs	r2, #16
 8000ec6:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ec8:	4b4b      	ldr	r3, [pc, #300]	@ (8000ff8 <HAL_SAI_MspInit+0x1b0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000ece:	4b4a      	ldr	r3, [pc, #296]	@ (8000ff8 <HAL_SAI_MspInit+0x1b0>)
 8000ed0:	2280      	movs	r2, #128	@ 0x80
 8000ed2:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ed4:	4b48      	ldr	r3, [pc, #288]	@ (8000ff8 <HAL_SAI_MspInit+0x1b0>)
 8000ed6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eda:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000edc:	4b46      	ldr	r3, [pc, #280]	@ (8000ff8 <HAL_SAI_MspInit+0x1b0>)
 8000ede:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ee2:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000ee4:	4b44      	ldr	r3, [pc, #272]	@ (8000ff8 <HAL_SAI_MspInit+0x1b0>)
 8000ee6:	2220      	movs	r2, #32
 8000ee8:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8000eea:	4b43      	ldr	r3, [pc, #268]	@ (8000ff8 <HAL_SAI_MspInit+0x1b0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000ef0:	4841      	ldr	r0, [pc, #260]	@ (8000ff8 <HAL_SAI_MspInit+0x1b0>)
 8000ef2:	f000 fcab 	bl	800184c <HAL_DMA_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000efc:	f7ff ff3e 	bl	8000d7c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a3d      	ldr	r2, [pc, #244]	@ (8000ff8 <HAL_SAI_MspInit+0x1b0>)
 8000f04:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f06:	4a3c      	ldr	r2, [pc, #240]	@ (8000ff8 <HAL_SAI_MspInit+0x1b0>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a3a      	ldr	r2, [pc, #232]	@ (8000ff8 <HAL_SAI_MspInit+0x1b0>)
 8000f10:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000f12:	4a39      	ldr	r2, [pc, #228]	@ (8000ff8 <HAL_SAI_MspInit+0x1b0>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a38      	ldr	r2, [pc, #224]	@ (8001000 <HAL_SAI_MspInit+0x1b8>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d15e      	bne.n	8000fe0 <HAL_SAI_MspInit+0x198>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8000f22:	4b32      	ldr	r3, [pc, #200]	@ (8000fec <HAL_SAI_MspInit+0x1a4>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d113      	bne.n	8000f52 <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000f2a:	4b31      	ldr	r3, [pc, #196]	@ (8000ff0 <HAL_SAI_MspInit+0x1a8>)
 8000f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f2e:	4a30      	ldr	r2, [pc, #192]	@ (8000ff0 <HAL_SAI_MspInit+0x1a8>)
 8000f30:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f34:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f36:	4b2e      	ldr	r3, [pc, #184]	@ (8000ff0 <HAL_SAI_MspInit+0x1a8>)
 8000f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2105      	movs	r1, #5
 8000f46:	204b      	movs	r0, #75	@ 0x4b
 8000f48:	f000 fc56 	bl	80017f8 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000f4c:	204b      	movs	r0, #75	@ 0x4b
 8000f4e:	f000 fc6f 	bl	8001830 <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8000f52:	4b26      	ldr	r3, [pc, #152]	@ (8000fec <HAL_SAI_MspInit+0x1a4>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	3301      	adds	r3, #1
 8000f58:	4a24      	ldr	r2, [pc, #144]	@ (8000fec <HAL_SAI_MspInit+0x1a4>)
 8000f5a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000f6e:	230d      	movs	r3, #13
 8000f70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	4822      	ldr	r0, [pc, #136]	@ (8001004 <HAL_SAI_MspInit+0x1bc>)
 8000f7a:	f000 fe4d 	bl	8001c18 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8000f7e:	4b22      	ldr	r3, [pc, #136]	@ (8001008 <HAL_SAI_MspInit+0x1c0>)
 8000f80:	4a22      	ldr	r2, [pc, #136]	@ (800100c <HAL_SAI_MspInit+0x1c4>)
 8000f82:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8000f84:	4b20      	ldr	r3, [pc, #128]	@ (8001008 <HAL_SAI_MspInit+0x1c0>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001008 <HAL_SAI_MspInit+0x1c0>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f90:	4b1d      	ldr	r3, [pc, #116]	@ (8001008 <HAL_SAI_MspInit+0x1c0>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	@ (8001008 <HAL_SAI_MspInit+0x1c0>)
 8000f98:	2280      	movs	r2, #128	@ 0x80
 8000f9a:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001008 <HAL_SAI_MspInit+0x1c0>)
 8000f9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fa2:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fa4:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <HAL_SAI_MspInit+0x1c0>)
 8000fa6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000faa:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000fac:	4b16      	ldr	r3, [pc, #88]	@ (8001008 <HAL_SAI_MspInit+0x1c0>)
 8000fae:	2220      	movs	r2, #32
 8000fb0:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8000fb2:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <HAL_SAI_MspInit+0x1c0>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000fb8:	4813      	ldr	r0, [pc, #76]	@ (8001008 <HAL_SAI_MspInit+0x1c0>)
 8000fba:	f000 fc47 	bl	800184c <HAL_DMA_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8000fc4:	f7ff feda 	bl	8000d7c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a0f      	ldr	r2, [pc, #60]	@ (8001008 <HAL_SAI_MspInit+0x1c0>)
 8000fcc:	671a      	str	r2, [r3, #112]	@ 0x70
 8000fce:	4a0e      	ldr	r2, [pc, #56]	@ (8001008 <HAL_SAI_MspInit+0x1c0>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8001008 <HAL_SAI_MspInit+0x1c0>)
 8000fd8:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000fda:	4a0b      	ldr	r2, [pc, #44]	@ (8001008 <HAL_SAI_MspInit+0x1c0>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8000fe0:	bf00      	nop
 8000fe2:	3728      	adds	r7, #40	@ 0x28
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40015804 	.word	0x40015804
 8000fec:	2000089c 	.word	0x2000089c
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	48000400 	.word	0x48000400
 8000ff8:	2000080c 	.word	0x2000080c
 8000ffc:	4002006c 	.word	0x4002006c
 8001000:	40015824 	.word	0x40015824
 8001004:	48000800 	.word	0x48000800
 8001008:	20000854 	.word	0x20000854
 800100c:	40020080 	.word	0x40020080

08001010 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001014:	4b1b      	ldr	r3, [pc, #108]	@ (8001084 <MX_SPI3_Init+0x74>)
 8001016:	4a1c      	ldr	r2, [pc, #112]	@ (8001088 <MX_SPI3_Init+0x78>)
 8001018:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800101a:	4b1a      	ldr	r3, [pc, #104]	@ (8001084 <MX_SPI3_Init+0x74>)
 800101c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001020:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001022:	4b18      	ldr	r3, [pc, #96]	@ (8001084 <MX_SPI3_Init+0x74>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001028:	4b16      	ldr	r3, [pc, #88]	@ (8001084 <MX_SPI3_Init+0x74>)
 800102a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800102e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001030:	4b14      	ldr	r3, [pc, #80]	@ (8001084 <MX_SPI3_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001036:	4b13      	ldr	r3, [pc, #76]	@ (8001084 <MX_SPI3_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800103c:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <MX_SPI3_Init+0x74>)
 800103e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001042:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001044:	4b0f      	ldr	r3, [pc, #60]	@ (8001084 <MX_SPI3_Init+0x74>)
 8001046:	2210      	movs	r2, #16
 8001048:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800104a:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <MX_SPI3_Init+0x74>)
 800104c:	2200      	movs	r2, #0
 800104e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001050:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <MX_SPI3_Init+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001056:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <MX_SPI3_Init+0x74>)
 8001058:	2200      	movs	r2, #0
 800105a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800105c:	4b09      	ldr	r3, [pc, #36]	@ (8001084 <MX_SPI3_Init+0x74>)
 800105e:	2207      	movs	r2, #7
 8001060:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001062:	4b08      	ldr	r3, [pc, #32]	@ (8001084 <MX_SPI3_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <MX_SPI3_Init+0x74>)
 800106a:	2208      	movs	r2, #8
 800106c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800106e:	4805      	ldr	r0, [pc, #20]	@ (8001084 <MX_SPI3_Init+0x74>)
 8001070:	f003 ffd3 	bl	800501a <HAL_SPI_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800107a:	f7ff fe7f 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200008a0 	.word	0x200008a0
 8001088:	40003c00 	.word	0x40003c00

0800108c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	@ 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a25      	ldr	r2, [pc, #148]	@ (8001140 <HAL_SPI_MspInit+0xb4>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d144      	bne.n	8001138 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010ae:	4b25      	ldr	r3, [pc, #148]	@ (8001144 <HAL_SPI_MspInit+0xb8>)
 80010b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b2:	4a24      	ldr	r2, [pc, #144]	@ (8001144 <HAL_SPI_MspInit+0xb8>)
 80010b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ba:	4b22      	ldr	r3, [pc, #136]	@ (8001144 <HAL_SPI_MspInit+0xb8>)
 80010bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001144 <HAL_SPI_MspInit+0xb8>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001144 <HAL_SPI_MspInit+0xb8>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001144 <HAL_SPI_MspInit+0xb8>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	4b19      	ldr	r3, [pc, #100]	@ (8001144 <HAL_SPI_MspInit+0xb8>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e2:	4a18      	ldr	r2, [pc, #96]	@ (8001144 <HAL_SPI_MspInit+0xb8>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ea:	4b16      	ldr	r3, [pc, #88]	@ (8001144 <HAL_SPI_MspInit+0xb8>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010f6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001108:	2306      	movs	r3, #6
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4619      	mov	r1, r3
 8001112:	480d      	ldr	r0, [pc, #52]	@ (8001148 <HAL_SPI_MspInit+0xbc>)
 8001114:	f000 fd80 	bl	8001c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001118:	2320      	movs	r3, #32
 800111a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001128:	2306      	movs	r3, #6
 800112a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	4806      	ldr	r0, [pc, #24]	@ (800114c <HAL_SPI_MspInit+0xc0>)
 8001134:	f000 fd70 	bl	8001c18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001138:	bf00      	nop
 800113a:	3728      	adds	r7, #40	@ 0x28
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40003c00 	.word	0x40003c00
 8001144:	40021000 	.word	0x40021000
 8001148:	48000800 	.word	0x48000800
 800114c:	48000400 	.word	0x48000400

08001150 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	4b11      	ldr	r3, [pc, #68]	@ (800119c <HAL_MspInit+0x4c>)
 8001158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800115a:	4a10      	ldr	r2, [pc, #64]	@ (800119c <HAL_MspInit+0x4c>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6613      	str	r3, [r2, #96]	@ 0x60
 8001162:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <HAL_MspInit+0x4c>)
 8001164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116e:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <HAL_MspInit+0x4c>)
 8001170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001172:	4a0a      	ldr	r2, [pc, #40]	@ (800119c <HAL_MspInit+0x4c>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001178:	6593      	str	r3, [r2, #88]	@ 0x58
 800117a:	4b08      	ldr	r3, [pc, #32]	@ (800119c <HAL_MspInit+0x4c>)
 800117c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800117e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	210f      	movs	r1, #15
 800118a:	f06f 0001 	mvn.w	r0, #1
 800118e:	f000 fb33 	bl	80017f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40021000 	.word	0x40021000

080011a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08c      	sub	sp, #48	@ 0x30
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001268 <HAL_InitTick+0xc8>)
 80011b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001268 <HAL_InitTick+0xc8>)
 80011b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80011ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001268 <HAL_InitTick+0xc8>)
 80011bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011c6:	f107 020c 	add.w	r2, r7, #12
 80011ca:	f107 0310 	add.w	r3, r7, #16
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f001 fe19 	bl	8002e08 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80011d6:	f001 fe01 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 80011da:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011de:	4a23      	ldr	r2, [pc, #140]	@ (800126c <HAL_InitTick+0xcc>)
 80011e0:	fba2 2303 	umull	r2, r3, r2, r3
 80011e4:	0c9b      	lsrs	r3, r3, #18
 80011e6:	3b01      	subs	r3, #1
 80011e8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011ea:	4b21      	ldr	r3, [pc, #132]	@ (8001270 <HAL_InitTick+0xd0>)
 80011ec:	4a21      	ldr	r2, [pc, #132]	@ (8001274 <HAL_InitTick+0xd4>)
 80011ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80011f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001270 <HAL_InitTick+0xd0>)
 80011f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011f6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001270 <HAL_InitTick+0xd0>)
 80011fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001270 <HAL_InitTick+0xd0>)
 8001200:	2200      	movs	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001204:	4b1a      	ldr	r3, [pc, #104]	@ (8001270 <HAL_InitTick+0xd0>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120a:	4b19      	ldr	r3, [pc, #100]	@ (8001270 <HAL_InitTick+0xd0>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001210:	4817      	ldr	r0, [pc, #92]	@ (8001270 <HAL_InitTick+0xd0>)
 8001212:	f004 fa7f 	bl	8005714 <HAL_TIM_Base_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800121c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001220:	2b00      	cmp	r3, #0
 8001222:	d11b      	bne.n	800125c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001224:	4812      	ldr	r0, [pc, #72]	@ (8001270 <HAL_InitTick+0xd0>)
 8001226:	f004 fad7 	bl	80057d8 <HAL_TIM_Base_Start_IT>
 800122a:	4603      	mov	r3, r0
 800122c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001230:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001234:	2b00      	cmp	r3, #0
 8001236:	d111      	bne.n	800125c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001238:	2019      	movs	r0, #25
 800123a:	f000 faf9 	bl	8001830 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b0f      	cmp	r3, #15
 8001242:	d808      	bhi.n	8001256 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001244:	2200      	movs	r2, #0
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	2019      	movs	r0, #25
 800124a:	f000 fad5 	bl	80017f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800124e:	4a0a      	ldr	r2, [pc, #40]	@ (8001278 <HAL_InitTick+0xd8>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	e002      	b.n	800125c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800125c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001260:	4618      	mov	r0, r3
 8001262:	3730      	adds	r7, #48	@ 0x30
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40021000 	.word	0x40021000
 800126c:	431bde83 	.word	0x431bde83
 8001270:	20000904 	.word	0x20000904
 8001274:	40012c00 	.word	0x40012c00
 8001278:	20000004 	.word	0x20000004

0800127c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <NMI_Handler+0x4>

08001284 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <HardFault_Handler+0x4>

0800128c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <MemManage_Handler+0x4>

08001294 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <BusFault_Handler+0x4>

0800129c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <UsageFault_Handler+0x4>

080012a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 80012b8:	4802      	ldr	r0, [pc, #8]	@ (80012c4 <DMA1_Channel6_IRQHandler+0x10>)
 80012ba:	f000 fbfe 	bl	8001aba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2000080c 	.word	0x2000080c

080012c8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80012cc:	4802      	ldr	r0, [pc, #8]	@ (80012d8 <DMA1_Channel7_IRQHandler+0x10>)
 80012ce:	f000 fbf4 	bl	8001aba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000854 	.word	0x20000854

080012dc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012e0:	4802      	ldr	r0, [pc, #8]	@ (80012ec <TIM1_UP_TIM16_IRQHandler+0x10>)
 80012e2:	f004 fae9 	bl	80058b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000904 	.word	0x20000904

080012f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012f4:	4802      	ldr	r0, [pc, #8]	@ (8001300 <USART2_IRQHandler+0x10>)
 80012f6:	f004 fe73 	bl	8005fe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000954 	.word	0x20000954

08001304 <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 8001308:	4803      	ldr	r0, [pc, #12]	@ (8001318 <SAI2_IRQHandler+0x14>)
 800130a:	f003 fb33 	bl	8004974 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 800130e:	4803      	ldr	r0, [pc, #12]	@ (800131c <SAI2_IRQHandler+0x18>)
 8001310:	f003 fb30 	bl	8004974 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000704 	.word	0x20000704
 800131c:	20000788 	.word	0x20000788

08001320 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	e00a      	b.n	8001348 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001332:	f3af 8000 	nop.w
 8001336:	4601      	mov	r1, r0
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	60ba      	str	r2, [r7, #8]
 800133e:	b2ca      	uxtb	r2, r1
 8001340:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	3301      	adds	r3, #1
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	429a      	cmp	r2, r3
 800134e:	dbf0      	blt.n	8001332 <_read+0x12>
  }

  return len;
 8001350:	687b      	ldr	r3, [r7, #4]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	e009      	b.n	8001380 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	60ba      	str	r2, [r7, #8]
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fa71 	bl	800085c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3301      	adds	r3, #1
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	429a      	cmp	r2, r3
 8001386:	dbf1      	blt.n	800136c <_write+0x12>
  }
  return len;
 8001388:	687b      	ldr	r3, [r7, #4]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <_close>:

int _close(int file)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013ba:	605a      	str	r2, [r3, #4]
  return 0;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <_isatty>:

int _isatty(int file)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001404:	4a14      	ldr	r2, [pc, #80]	@ (8001458 <_sbrk+0x5c>)
 8001406:	4b15      	ldr	r3, [pc, #84]	@ (800145c <_sbrk+0x60>)
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001410:	4b13      	ldr	r3, [pc, #76]	@ (8001460 <_sbrk+0x64>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d102      	bne.n	800141e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001418:	4b11      	ldr	r3, [pc, #68]	@ (8001460 <_sbrk+0x64>)
 800141a:	4a12      	ldr	r2, [pc, #72]	@ (8001464 <_sbrk+0x68>)
 800141c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800141e:	4b10      	ldr	r3, [pc, #64]	@ (8001460 <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	429a      	cmp	r2, r3
 800142a:	d207      	bcs.n	800143c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800142c:	f007 fee4 	bl	80091f8 <__errno>
 8001430:	4603      	mov	r3, r0
 8001432:	220c      	movs	r2, #12
 8001434:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	e009      	b.n	8001450 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800143c:	4b08      	ldr	r3, [pc, #32]	@ (8001460 <_sbrk+0x64>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001442:	4b07      	ldr	r3, [pc, #28]	@ (8001460 <_sbrk+0x64>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	4a05      	ldr	r2, [pc, #20]	@ (8001460 <_sbrk+0x64>)
 800144c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800144e:	68fb      	ldr	r3, [r7, #12]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20018000 	.word	0x20018000
 800145c:	00000400 	.word	0x00000400
 8001460:	20000950 	.word	0x20000950
 8001464:	20001838 	.word	0x20001838

08001468 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800146c:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <SystemInit+0x20>)
 800146e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001472:	4a05      	ldr	r2, [pc, #20]	@ (8001488 <SystemInit+0x20>)
 8001474:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001478:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001490:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <MX_USART2_UART_Init+0x58>)
 8001492:	4a15      	ldr	r2, [pc, #84]	@ (80014e8 <MX_USART2_UART_Init+0x5c>)
 8001494:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001496:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <MX_USART2_UART_Init+0x58>)
 8001498:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800149c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <MX_USART2_UART_Init+0x58>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <MX_USART2_UART_Init+0x58>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <MX_USART2_UART_Init+0x58>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <MX_USART2_UART_Init+0x58>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b0b      	ldr	r3, [pc, #44]	@ (80014e4 <MX_USART2_UART_Init+0x58>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <MX_USART2_UART_Init+0x58>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014c2:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <MX_USART2_UART_Init+0x58>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c8:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <MX_USART2_UART_Init+0x58>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ce:	4805      	ldr	r0, [pc, #20]	@ (80014e4 <MX_USART2_UART_Init+0x58>)
 80014d0:	f004 fbe6 	bl	8005ca0 <HAL_UART_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014da:	f7ff fc4f 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000954 	.word	0x20000954
 80014e8:	40004400 	.word	0x40004400

080014ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b0ac      	sub	sp, #176	@ 0xb0
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2288      	movs	r2, #136	@ 0x88
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f007 fdcf 	bl	80090b0 <memset>
  if(uartHandle->Instance==USART2)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a25      	ldr	r2, [pc, #148]	@ (80015ac <HAL_UART_MspInit+0xc0>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d143      	bne.n	80015a4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800151c:	2302      	movs	r3, #2
 800151e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001520:	2300      	movs	r3, #0
 8001522:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	4618      	mov	r0, r3
 800152a:	f001 fcff 	bl	8002f2c <HAL_RCCEx_PeriphCLKConfig>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001534:	f7ff fc22 	bl	8000d7c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001538:	4b1d      	ldr	r3, [pc, #116]	@ (80015b0 <HAL_UART_MspInit+0xc4>)
 800153a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153c:	4a1c      	ldr	r2, [pc, #112]	@ (80015b0 <HAL_UART_MspInit+0xc4>)
 800153e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001542:	6593      	str	r3, [r2, #88]	@ 0x58
 8001544:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <HAL_UART_MspInit+0xc4>)
 8001546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001550:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <HAL_UART_MspInit+0xc4>)
 8001552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001554:	4a16      	ldr	r2, [pc, #88]	@ (80015b0 <HAL_UART_MspInit+0xc4>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800155c:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <HAL_UART_MspInit+0xc4>)
 800155e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001568:	230c      	movs	r3, #12
 800156a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157a:	2303      	movs	r3, #3
 800157c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001580:	2307      	movs	r3, #7
 8001582:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001586:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800158a:	4619      	mov	r1, r3
 800158c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001590:	f000 fb42 	bl	8001c18 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001594:	2200      	movs	r2, #0
 8001596:	2105      	movs	r1, #5
 8001598:	2026      	movs	r0, #38	@ 0x26
 800159a:	f000 f92d 	bl	80017f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800159e:	2026      	movs	r0, #38	@ 0x26
 80015a0:	f000 f946 	bl	8001830 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015a4:	bf00      	nop
 80015a6:	37b0      	adds	r7, #176	@ 0xb0
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40004400 	.word	0x40004400
 80015b0:	40021000 	.word	0x40021000

080015b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015b8:	f7ff ff56 	bl	8001468 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015bc:	480c      	ldr	r0, [pc, #48]	@ (80015f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80015be:	490d      	ldr	r1, [pc, #52]	@ (80015f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015c0:	4a0d      	ldr	r2, [pc, #52]	@ (80015f8 <LoopForever+0xe>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c4:	e002      	b.n	80015cc <LoopCopyDataInit>

080015c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ca:	3304      	adds	r3, #4

080015cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d0:	d3f9      	bcc.n	80015c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d2:	4a0a      	ldr	r2, [pc, #40]	@ (80015fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80015d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001600 <LoopForever+0x16>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d8:	e001      	b.n	80015de <LoopFillZerobss>

080015da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015dc:	3204      	adds	r2, #4

080015de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e0:	d3fb      	bcc.n	80015da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015e2:	f007 fe0f 	bl	8009204 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015e6:	f7ff fadf 	bl	8000ba8 <main>

080015ea <LoopForever>:

LoopForever:
    b LoopForever
 80015ea:	e7fe      	b.n	80015ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80015f8:	0800a0c4 	.word	0x0800a0c4
  ldr r2, =_sbss
 80015fc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001600:	20001838 	.word	0x20001838

08001604 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001604:	e7fe      	b.n	8001604 <ADC1_2_IRQHandler>
	...

08001608 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001612:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <HAL_Init+0x3c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a0b      	ldr	r2, [pc, #44]	@ (8001644 <HAL_Init+0x3c>)
 8001618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800161c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800161e:	2003      	movs	r0, #3
 8001620:	f000 f8df 	bl	80017e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001624:	200f      	movs	r0, #15
 8001626:	f7ff fdbb 	bl	80011a0 <HAL_InitTick>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d002      	beq.n	8001636 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	71fb      	strb	r3, [r7, #7]
 8001634:	e001      	b.n	800163a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001636:	f7ff fd8b 	bl	8001150 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800163a:	79fb      	ldrb	r3, [r7, #7]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40022000 	.word	0x40022000

08001648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800164c:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <HAL_IncTick+0x20>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4b06      	ldr	r3, [pc, #24]	@ (800166c <HAL_IncTick+0x24>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4413      	add	r3, r2
 8001658:	4a04      	ldr	r2, [pc, #16]	@ (800166c <HAL_IncTick+0x24>)
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20000008 	.word	0x20000008
 800166c:	200009dc 	.word	0x200009dc

08001670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return uwTick;
 8001674:	4b03      	ldr	r3, [pc, #12]	@ (8001684 <HAL_GetTick+0x14>)
 8001676:	681b      	ldr	r3, [r3, #0]
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	200009dc 	.word	0x200009dc

08001688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001698:	4b0c      	ldr	r3, [pc, #48]	@ (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016a4:	4013      	ands	r3, r2
 80016a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ba:	4a04      	ldr	r2, [pc, #16]	@ (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	60d3      	str	r3, [r2, #12]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d4:	4b04      	ldr	r3, [pc, #16]	@ (80016e8 <__NVIC_GetPriorityGrouping+0x18>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	f003 0307 	and.w	r3, r3, #7
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	db0b      	blt.n	8001716 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	f003 021f 	and.w	r2, r3, #31
 8001704:	4907      	ldr	r1, [pc, #28]	@ (8001724 <__NVIC_EnableIRQ+0x38>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	2001      	movs	r0, #1
 800170e:	fa00 f202 	lsl.w	r2, r0, r2
 8001712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000e100 	.word	0xe000e100

08001728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	6039      	str	r1, [r7, #0]
 8001732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	2b00      	cmp	r3, #0
 800173a:	db0a      	blt.n	8001752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	490c      	ldr	r1, [pc, #48]	@ (8001774 <__NVIC_SetPriority+0x4c>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	0112      	lsls	r2, r2, #4
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	440b      	add	r3, r1
 800174c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001750:	e00a      	b.n	8001768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4908      	ldr	r1, [pc, #32]	@ (8001778 <__NVIC_SetPriority+0x50>)
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	3b04      	subs	r3, #4
 8001760:	0112      	lsls	r2, r2, #4
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	440b      	add	r3, r1
 8001766:	761a      	strb	r2, [r3, #24]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000e100 	.word	0xe000e100
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800177c:	b480      	push	{r7}
 800177e:	b089      	sub	sp, #36	@ 0x24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f1c3 0307 	rsb	r3, r3, #7
 8001796:	2b04      	cmp	r3, #4
 8001798:	bf28      	it	cs
 800179a:	2304      	movcs	r3, #4
 800179c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3304      	adds	r3, #4
 80017a2:	2b06      	cmp	r3, #6
 80017a4:	d902      	bls.n	80017ac <NVIC_EncodePriority+0x30>
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3b03      	subs	r3, #3
 80017aa:	e000      	b.n	80017ae <NVIC_EncodePriority+0x32>
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	f04f 32ff 	mov.w	r2, #4294967295
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43da      	mvns	r2, r3
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	401a      	ands	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c4:	f04f 31ff 	mov.w	r1, #4294967295
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	43d9      	mvns	r1, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	4313      	orrs	r3, r2
         );
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3724      	adds	r7, #36	@ 0x24
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ff4c 	bl	8001688 <__NVIC_SetPriorityGrouping>
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
 8001804:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800180a:	f7ff ff61 	bl	80016d0 <__NVIC_GetPriorityGrouping>
 800180e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	68b9      	ldr	r1, [r7, #8]
 8001814:	6978      	ldr	r0, [r7, #20]
 8001816:	f7ff ffb1 	bl	800177c <NVIC_EncodePriority>
 800181a:	4602      	mov	r2, r0
 800181c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001820:	4611      	mov	r1, r2
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff ff80 	bl	8001728 <__NVIC_SetPriority>
}
 8001828:	bf00      	nop
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ff54 	bl	80016ec <__NVIC_EnableIRQ>
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e098      	b.n	8001990 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	461a      	mov	r2, r3
 8001864:	4b4d      	ldr	r3, [pc, #308]	@ (800199c <HAL_DMA_Init+0x150>)
 8001866:	429a      	cmp	r2, r3
 8001868:	d80f      	bhi.n	800188a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	4b4b      	ldr	r3, [pc, #300]	@ (80019a0 <HAL_DMA_Init+0x154>)
 8001872:	4413      	add	r3, r2
 8001874:	4a4b      	ldr	r2, [pc, #300]	@ (80019a4 <HAL_DMA_Init+0x158>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	091b      	lsrs	r3, r3, #4
 800187c:	009a      	lsls	r2, r3, #2
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a48      	ldr	r2, [pc, #288]	@ (80019a8 <HAL_DMA_Init+0x15c>)
 8001886:	641a      	str	r2, [r3, #64]	@ 0x40
 8001888:	e00e      	b.n	80018a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	4b46      	ldr	r3, [pc, #280]	@ (80019ac <HAL_DMA_Init+0x160>)
 8001892:	4413      	add	r3, r2
 8001894:	4a43      	ldr	r2, [pc, #268]	@ (80019a4 <HAL_DMA_Init+0x158>)
 8001896:	fba2 2303 	umull	r2, r3, r2, r3
 800189a:	091b      	lsrs	r3, r3, #4
 800189c:	009a      	lsls	r2, r3, #2
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a42      	ldr	r2, [pc, #264]	@ (80019b0 <HAL_DMA_Init+0x164>)
 80018a6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2202      	movs	r2, #2
 80018ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80018be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80018cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001902:	d039      	beq.n	8001978 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001908:	4a27      	ldr	r2, [pc, #156]	@ (80019a8 <HAL_DMA_Init+0x15c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d11a      	bne.n	8001944 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800190e:	4b29      	ldr	r3, [pc, #164]	@ (80019b4 <HAL_DMA_Init+0x168>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001916:	f003 031c 	and.w	r3, r3, #28
 800191a:	210f      	movs	r1, #15
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	4924      	ldr	r1, [pc, #144]	@ (80019b4 <HAL_DMA_Init+0x168>)
 8001924:	4013      	ands	r3, r2
 8001926:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001928:	4b22      	ldr	r3, [pc, #136]	@ (80019b4 <HAL_DMA_Init+0x168>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6859      	ldr	r1, [r3, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001934:	f003 031c 	and.w	r3, r3, #28
 8001938:	fa01 f303 	lsl.w	r3, r1, r3
 800193c:	491d      	ldr	r1, [pc, #116]	@ (80019b4 <HAL_DMA_Init+0x168>)
 800193e:	4313      	orrs	r3, r2
 8001940:	600b      	str	r3, [r1, #0]
 8001942:	e019      	b.n	8001978 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001944:	4b1c      	ldr	r3, [pc, #112]	@ (80019b8 <HAL_DMA_Init+0x16c>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194c:	f003 031c 	and.w	r3, r3, #28
 8001950:	210f      	movs	r1, #15
 8001952:	fa01 f303 	lsl.w	r3, r1, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	4917      	ldr	r1, [pc, #92]	@ (80019b8 <HAL_DMA_Init+0x16c>)
 800195a:	4013      	ands	r3, r2
 800195c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800195e:	4b16      	ldr	r3, [pc, #88]	@ (80019b8 <HAL_DMA_Init+0x16c>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6859      	ldr	r1, [r3, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196a:	f003 031c 	and.w	r3, r3, #28
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	4911      	ldr	r1, [pc, #68]	@ (80019b8 <HAL_DMA_Init+0x16c>)
 8001974:	4313      	orrs	r3, r2
 8001976:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	40020407 	.word	0x40020407
 80019a0:	bffdfff8 	.word	0xbffdfff8
 80019a4:	cccccccd 	.word	0xcccccccd
 80019a8:	40020000 	.word	0x40020000
 80019ac:	bffdfbf8 	.word	0xbffdfbf8
 80019b0:	40020400 	.word	0x40020400
 80019b4:	400200a8 	.word	0x400200a8
 80019b8:	400204a8 	.word	0x400204a8

080019bc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019c4:	2300      	movs	r3, #0
 80019c6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d008      	beq.n	80019e6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2204      	movs	r2, #4
 80019d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e022      	b.n	8001a2c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 020e 	bic.w	r2, r2, #14
 80019f4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0201 	bic.w	r2, r2, #1
 8001a04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0a:	f003 021c 	and.w	r2, r3, #28
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	2101      	movs	r1, #1
 8001a14:	fa01 f202 	lsl.w	r2, r1, r2
 8001a18:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a40:	2300      	movs	r3, #0
 8001a42:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d005      	beq.n	8001a5c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2204      	movs	r2, #4
 8001a54:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	73fb      	strb	r3, [r7, #15]
 8001a5a:	e029      	b.n	8001ab0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 020e 	bic.w	r2, r2, #14
 8001a6a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0201 	bic.w	r2, r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a80:	f003 021c 	and.w	r2, r3, #28
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a88:	2101      	movs	r1, #1
 8001a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	4798      	blx	r3
    }
  }
  return status;
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad6:	f003 031c 	and.w	r3, r3, #28
 8001ada:	2204      	movs	r2, #4
 8001adc:	409a      	lsls	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d026      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x7a>
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d021      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0320 	and.w	r3, r3, #32
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d107      	bne.n	8001b0e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0204 	bic.w	r2, r2, #4
 8001b0c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b12:	f003 021c 	and.w	r2, r3, #28
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	2104      	movs	r1, #4
 8001b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b20:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d071      	beq.n	8001c0e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001b32:	e06c      	b.n	8001c0e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b38:	f003 031c 	and.w	r3, r3, #28
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	409a      	lsls	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4013      	ands	r3, r2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d02e      	beq.n	8001ba6 <HAL_DMA_IRQHandler+0xec>
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d029      	beq.n	8001ba6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0320 	and.w	r3, r3, #32
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10b      	bne.n	8001b78 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 020a 	bic.w	r2, r2, #10
 8001b6e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7c:	f003 021c 	and.w	r2, r3, #28
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b84:	2102      	movs	r1, #2
 8001b86:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d038      	beq.n	8001c0e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001ba4:	e033      	b.n	8001c0e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001baa:	f003 031c 	and.w	r3, r3, #28
 8001bae:	2208      	movs	r2, #8
 8001bb0:	409a      	lsls	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d02a      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x156>
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d025      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 020e 	bic.w	r2, r2, #14
 8001bd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd8:	f003 021c 	and.w	r2, r3, #28
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be0:	2101      	movs	r1, #1
 8001be2:	fa01 f202 	lsl.w	r2, r1, r2
 8001be6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d004      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c0e:	bf00      	nop
 8001c10:	bf00      	nop
}
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c26:	e17f      	b.n	8001f28 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	4013      	ands	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8171 	beq.w	8001f22 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d005      	beq.n	8001c58 <HAL_GPIO_Init+0x40>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d130      	bne.n	8001cba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2203      	movs	r2, #3
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	68da      	ldr	r2, [r3, #12]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c8e:	2201      	movs	r2, #1
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	091b      	lsrs	r3, r3, #4
 8001ca4:	f003 0201 	and.w	r2, r3, #1
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d118      	bne.n	8001cf8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ccc:	2201      	movs	r2, #1
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	08db      	lsrs	r3, r3, #3
 8001ce2:	f003 0201 	and.w	r2, r3, #1
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d017      	beq.n	8001d34 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	2203      	movs	r2, #3
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d123      	bne.n	8001d88 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	08da      	lsrs	r2, r3, #3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3208      	adds	r2, #8
 8001d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	220f      	movs	r2, #15
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	691a      	ldr	r2, [r3, #16]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	08da      	lsrs	r2, r3, #3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3208      	adds	r2, #8
 8001d82:	6939      	ldr	r1, [r7, #16]
 8001d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	2203      	movs	r2, #3
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0203 	and.w	r2, r3, #3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 80ac 	beq.w	8001f22 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dca:	4b5f      	ldr	r3, [pc, #380]	@ (8001f48 <HAL_GPIO_Init+0x330>)
 8001dcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dce:	4a5e      	ldr	r2, [pc, #376]	@ (8001f48 <HAL_GPIO_Init+0x330>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dd6:	4b5c      	ldr	r3, [pc, #368]	@ (8001f48 <HAL_GPIO_Init+0x330>)
 8001dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001de2:	4a5a      	ldr	r2, [pc, #360]	@ (8001f4c <HAL_GPIO_Init+0x334>)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	089b      	lsrs	r3, r3, #2
 8001de8:	3302      	adds	r3, #2
 8001dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	220f      	movs	r2, #15
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e0c:	d025      	beq.n	8001e5a <HAL_GPIO_Init+0x242>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a4f      	ldr	r2, [pc, #316]	@ (8001f50 <HAL_GPIO_Init+0x338>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d01f      	beq.n	8001e56 <HAL_GPIO_Init+0x23e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a4e      	ldr	r2, [pc, #312]	@ (8001f54 <HAL_GPIO_Init+0x33c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d019      	beq.n	8001e52 <HAL_GPIO_Init+0x23a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a4d      	ldr	r2, [pc, #308]	@ (8001f58 <HAL_GPIO_Init+0x340>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d013      	beq.n	8001e4e <HAL_GPIO_Init+0x236>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a4c      	ldr	r2, [pc, #304]	@ (8001f5c <HAL_GPIO_Init+0x344>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d00d      	beq.n	8001e4a <HAL_GPIO_Init+0x232>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a4b      	ldr	r2, [pc, #300]	@ (8001f60 <HAL_GPIO_Init+0x348>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d007      	beq.n	8001e46 <HAL_GPIO_Init+0x22e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a4a      	ldr	r2, [pc, #296]	@ (8001f64 <HAL_GPIO_Init+0x34c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d101      	bne.n	8001e42 <HAL_GPIO_Init+0x22a>
 8001e3e:	2306      	movs	r3, #6
 8001e40:	e00c      	b.n	8001e5c <HAL_GPIO_Init+0x244>
 8001e42:	2307      	movs	r3, #7
 8001e44:	e00a      	b.n	8001e5c <HAL_GPIO_Init+0x244>
 8001e46:	2305      	movs	r3, #5
 8001e48:	e008      	b.n	8001e5c <HAL_GPIO_Init+0x244>
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	e006      	b.n	8001e5c <HAL_GPIO_Init+0x244>
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e004      	b.n	8001e5c <HAL_GPIO_Init+0x244>
 8001e52:	2302      	movs	r3, #2
 8001e54:	e002      	b.n	8001e5c <HAL_GPIO_Init+0x244>
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <HAL_GPIO_Init+0x244>
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	f002 0203 	and.w	r2, r2, #3
 8001e62:	0092      	lsls	r2, r2, #2
 8001e64:	4093      	lsls	r3, r2
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e6c:	4937      	ldr	r1, [pc, #220]	@ (8001f4c <HAL_GPIO_Init+0x334>)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	089b      	lsrs	r3, r3, #2
 8001e72:	3302      	adds	r3, #2
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e7a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f68 <HAL_GPIO_Init+0x350>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	43db      	mvns	r3, r3
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e9e:	4a32      	ldr	r2, [pc, #200]	@ (8001f68 <HAL_GPIO_Init+0x350>)
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ea4:	4b30      	ldr	r3, [pc, #192]	@ (8001f68 <HAL_GPIO_Init+0x350>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ec8:	4a27      	ldr	r2, [pc, #156]	@ (8001f68 <HAL_GPIO_Init+0x350>)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ece:	4b26      	ldr	r3, [pc, #152]	@ (8001f68 <HAL_GPIO_Init+0x350>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4013      	ands	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ef2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f68 <HAL_GPIO_Init+0x350>)
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f68 <HAL_GPIO_Init+0x350>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f1c:	4a12      	ldr	r2, [pc, #72]	@ (8001f68 <HAL_GPIO_Init+0x350>)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	3301      	adds	r3, #1
 8001f26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f47f ae78 	bne.w	8001c28 <HAL_GPIO_Init+0x10>
  }
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	371c      	adds	r7, #28
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40010000 	.word	0x40010000
 8001f50:	48000400 	.word	0x48000400
 8001f54:	48000800 	.word	0x48000800
 8001f58:	48000c00 	.word	0x48000c00
 8001f5c:	48001000 	.word	0x48001000
 8001f60:	48001400 	.word	0x48001400
 8001f64:	48001800 	.word	0x48001800
 8001f68:	40010400 	.word	0x40010400

08001f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	807b      	strh	r3, [r7, #2]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f7c:	787b      	ldrb	r3, [r7, #1]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f82:	887a      	ldrh	r2, [r7, #2]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f88:	e002      	b.n	8001f90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f8a:	887a      	ldrh	r2, [r7, #2]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e08d      	b.n	80020ca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d106      	bne.n	8001fc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7fe fbec 	bl	80007a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2224      	movs	r2, #36	@ 0x24
 8001fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0201 	bic.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ffc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d107      	bne.n	8002016 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	e006      	b.n	8002024 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002022:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	2b02      	cmp	r3, #2
 800202a:	d108      	bne.n	800203e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	e007      	b.n	800204e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800204c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800205c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002060:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002070:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691a      	ldr	r2, [r3, #16]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69d9      	ldr	r1, [r3, #28]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a1a      	ldr	r2, [r3, #32]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0201 	orr.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2220      	movs	r2, #32
 80020b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b20      	cmp	r3, #32
 80020e6:	d138      	bne.n	800215a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e032      	b.n	800215c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2224      	movs	r2, #36	@ 0x24
 8002102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0201 	bic.w	r2, r2, #1
 8002114:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002124:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6819      	ldr	r1, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 0201 	orr.w	r2, r2, #1
 8002144:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2220      	movs	r2, #32
 800214a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	e000      	b.n	800215c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800215a:	2302      	movs	r3, #2
  }
}
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b20      	cmp	r3, #32
 800217c:	d139      	bne.n	80021f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002188:	2302      	movs	r3, #2
 800218a:	e033      	b.n	80021f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2224      	movs	r2, #36	@ 0x24
 8002198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0201 	bic.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80021ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f042 0201 	orr.w	r2, r2, #1
 80021dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2220      	movs	r2, #32
 80021e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	e000      	b.n	80021f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021f2:	2302      	movs	r3, #2
  }
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002204:	4b04      	ldr	r3, [pc, #16]	@ (8002218 <HAL_PWREx_GetVoltageRange+0x18>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40007000 	.word	0x40007000

0800221c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800222a:	d130      	bne.n	800228e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800222c:	4b23      	ldr	r3, [pc, #140]	@ (80022bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002238:	d038      	beq.n	80022ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800223a:	4b20      	ldr	r3, [pc, #128]	@ (80022bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002242:	4a1e      	ldr	r2, [pc, #120]	@ (80022bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002244:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002248:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800224a:	4b1d      	ldr	r3, [pc, #116]	@ (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2232      	movs	r2, #50	@ 0x32
 8002250:	fb02 f303 	mul.w	r3, r2, r3
 8002254:	4a1b      	ldr	r2, [pc, #108]	@ (80022c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	0c9b      	lsrs	r3, r3, #18
 800225c:	3301      	adds	r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002260:	e002      	b.n	8002268 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	3b01      	subs	r3, #1
 8002266:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002268:	4b14      	ldr	r3, [pc, #80]	@ (80022bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002270:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002274:	d102      	bne.n	800227c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1f2      	bne.n	8002262 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800227c:	4b0f      	ldr	r3, [pc, #60]	@ (80022bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002288:	d110      	bne.n	80022ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e00f      	b.n	80022ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800228e:	4b0b      	ldr	r3, [pc, #44]	@ (80022bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800229a:	d007      	beq.n	80022ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800229c:	4b07      	ldr	r3, [pc, #28]	@ (80022bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022a4:	4a05      	ldr	r2, [pc, #20]	@ (80022bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40007000 	.word	0x40007000
 80022c0:	20000000 	.word	0x20000000
 80022c4:	431bde83 	.word	0x431bde83

080022c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e3ca      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022da:	4b97      	ldr	r3, [pc, #604]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022e4:	4b94      	ldr	r3, [pc, #592]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0310 	and.w	r3, r3, #16
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 80e4 	beq.w	80024c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d007      	beq.n	8002312 <HAL_RCC_OscConfig+0x4a>
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	2b0c      	cmp	r3, #12
 8002306:	f040 808b 	bne.w	8002420 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2b01      	cmp	r3, #1
 800230e:	f040 8087 	bne.w	8002420 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002312:	4b89      	ldr	r3, [pc, #548]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d005      	beq.n	800232a <HAL_RCC_OscConfig+0x62>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e3a2      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1a      	ldr	r2, [r3, #32]
 800232e:	4b82      	ldr	r3, [pc, #520]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d004      	beq.n	8002344 <HAL_RCC_OscConfig+0x7c>
 800233a:	4b7f      	ldr	r3, [pc, #508]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002342:	e005      	b.n	8002350 <HAL_RCC_OscConfig+0x88>
 8002344:	4b7c      	ldr	r3, [pc, #496]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 8002346:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800234a:	091b      	lsrs	r3, r3, #4
 800234c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002350:	4293      	cmp	r3, r2
 8002352:	d223      	bcs.n	800239c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	4618      	mov	r0, r3
 800235a:	f000 fd87 	bl	8002e6c <RCC_SetFlashLatencyFromMSIRange>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e383      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002368:	4b73      	ldr	r3, [pc, #460]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a72      	ldr	r2, [pc, #456]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 800236e:	f043 0308 	orr.w	r3, r3, #8
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	4b70      	ldr	r3, [pc, #448]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	496d      	ldr	r1, [pc, #436]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002386:	4b6c      	ldr	r3, [pc, #432]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	4968      	ldr	r1, [pc, #416]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 8002396:	4313      	orrs	r3, r2
 8002398:	604b      	str	r3, [r1, #4]
 800239a:	e025      	b.n	80023e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800239c:	4b66      	ldr	r3, [pc, #408]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a65      	ldr	r2, [pc, #404]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 80023a2:	f043 0308 	orr.w	r3, r3, #8
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	4b63      	ldr	r3, [pc, #396]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	4960      	ldr	r1, [pc, #384]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023ba:	4b5f      	ldr	r3, [pc, #380]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	021b      	lsls	r3, r3, #8
 80023c8:	495b      	ldr	r1, [pc, #364]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d109      	bne.n	80023e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 fd47 	bl	8002e6c <RCC_SetFlashLatencyFromMSIRange>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e343      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023e8:	f000 fc4a 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 80023ec:	4602      	mov	r2, r0
 80023ee:	4b52      	ldr	r3, [pc, #328]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	091b      	lsrs	r3, r3, #4
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	4950      	ldr	r1, [pc, #320]	@ (800253c <HAL_RCC_OscConfig+0x274>)
 80023fa:	5ccb      	ldrb	r3, [r1, r3]
 80023fc:	f003 031f 	and.w	r3, r3, #31
 8002400:	fa22 f303 	lsr.w	r3, r2, r3
 8002404:	4a4e      	ldr	r2, [pc, #312]	@ (8002540 <HAL_RCC_OscConfig+0x278>)
 8002406:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002408:	4b4e      	ldr	r3, [pc, #312]	@ (8002544 <HAL_RCC_OscConfig+0x27c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe fec7 	bl	80011a0 <HAL_InitTick>
 8002412:	4603      	mov	r3, r0
 8002414:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002416:	7bfb      	ldrb	r3, [r7, #15]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d052      	beq.n	80024c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	e327      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d032      	beq.n	800248e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002428:	4b43      	ldr	r3, [pc, #268]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a42      	ldr	r2, [pc, #264]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002434:	f7ff f91c 	bl	8001670 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800243c:	f7ff f918 	bl	8001670 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e310      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800244e:	4b3a      	ldr	r3, [pc, #232]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f0      	beq.n	800243c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800245a:	4b37      	ldr	r3, [pc, #220]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a36      	ldr	r2, [pc, #216]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 8002460:	f043 0308 	orr.w	r3, r3, #8
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	4b34      	ldr	r3, [pc, #208]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	4931      	ldr	r1, [pc, #196]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 8002474:	4313      	orrs	r3, r2
 8002476:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002478:	4b2f      	ldr	r3, [pc, #188]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	021b      	lsls	r3, r3, #8
 8002486:	492c      	ldr	r1, [pc, #176]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 8002488:	4313      	orrs	r3, r2
 800248a:	604b      	str	r3, [r1, #4]
 800248c:	e01a      	b.n	80024c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800248e:	4b2a      	ldr	r3, [pc, #168]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a29      	ldr	r2, [pc, #164]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 8002494:	f023 0301 	bic.w	r3, r3, #1
 8002498:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800249a:	f7ff f8e9 	bl	8001670 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024a2:	f7ff f8e5 	bl	8001670 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e2dd      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024b4:	4b20      	ldr	r3, [pc, #128]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1f0      	bne.n	80024a2 <HAL_RCC_OscConfig+0x1da>
 80024c0:	e000      	b.n	80024c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d074      	beq.n	80025ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d005      	beq.n	80024e2 <HAL_RCC_OscConfig+0x21a>
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	2b0c      	cmp	r3, #12
 80024da:	d10e      	bne.n	80024fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d10b      	bne.n	80024fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e2:	4b15      	ldr	r3, [pc, #84]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d064      	beq.n	80025b8 <HAL_RCC_OscConfig+0x2f0>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d160      	bne.n	80025b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e2ba      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002502:	d106      	bne.n	8002512 <HAL_RCC_OscConfig+0x24a>
 8002504:	4b0c      	ldr	r3, [pc, #48]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0b      	ldr	r2, [pc, #44]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 800250a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	e026      	b.n	8002560 <HAL_RCC_OscConfig+0x298>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800251a:	d115      	bne.n	8002548 <HAL_RCC_OscConfig+0x280>
 800251c:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a05      	ldr	r2, [pc, #20]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 8002522:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b03      	ldr	r3, [pc, #12]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a02      	ldr	r2, [pc, #8]	@ (8002538 <HAL_RCC_OscConfig+0x270>)
 800252e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	e014      	b.n	8002560 <HAL_RCC_OscConfig+0x298>
 8002536:	bf00      	nop
 8002538:	40021000 	.word	0x40021000
 800253c:	08009f38 	.word	0x08009f38
 8002540:	20000000 	.word	0x20000000
 8002544:	20000004 	.word	0x20000004
 8002548:	4ba0      	ldr	r3, [pc, #640]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a9f      	ldr	r2, [pc, #636]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 800254e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	4b9d      	ldr	r3, [pc, #628]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a9c      	ldr	r2, [pc, #624]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 800255a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800255e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d013      	beq.n	8002590 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002568:	f7ff f882 	bl	8001670 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002570:	f7ff f87e 	bl	8001670 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b64      	cmp	r3, #100	@ 0x64
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e276      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002582:	4b92      	ldr	r3, [pc, #584]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f0      	beq.n	8002570 <HAL_RCC_OscConfig+0x2a8>
 800258e:	e014      	b.n	80025ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7ff f86e 	bl	8001670 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002598:	f7ff f86a 	bl	8001670 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b64      	cmp	r3, #100	@ 0x64
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e262      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025aa:	4b88      	ldr	r3, [pc, #544]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x2d0>
 80025b6:	e000      	b.n	80025ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d060      	beq.n	8002688 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d005      	beq.n	80025d8 <HAL_RCC_OscConfig+0x310>
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	2b0c      	cmp	r3, #12
 80025d0:	d119      	bne.n	8002606 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d116      	bne.n	8002606 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025d8:	4b7c      	ldr	r3, [pc, #496]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <HAL_RCC_OscConfig+0x328>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e23f      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f0:	4b76      	ldr	r3, [pc, #472]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	061b      	lsls	r3, r3, #24
 80025fe:	4973      	ldr	r1, [pc, #460]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 8002600:	4313      	orrs	r3, r2
 8002602:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002604:	e040      	b.n	8002688 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d023      	beq.n	8002656 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800260e:	4b6f      	ldr	r3, [pc, #444]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a6e      	ldr	r2, [pc, #440]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 8002614:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002618:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261a:	f7ff f829 	bl	8001670 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002622:	f7ff f825 	bl	8001670 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e21d      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002634:	4b65      	ldr	r3, [pc, #404]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f0      	beq.n	8002622 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002640:	4b62      	ldr	r3, [pc, #392]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	061b      	lsls	r3, r3, #24
 800264e:	495f      	ldr	r1, [pc, #380]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 8002650:	4313      	orrs	r3, r2
 8002652:	604b      	str	r3, [r1, #4]
 8002654:	e018      	b.n	8002688 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002656:	4b5d      	ldr	r3, [pc, #372]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a5c      	ldr	r2, [pc, #368]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 800265c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002662:	f7ff f805 	bl	8001670 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800266a:	f7ff f801 	bl	8001670 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e1f9      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800267c:	4b53      	ldr	r3, [pc, #332]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1f0      	bne.n	800266a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b00      	cmp	r3, #0
 8002692:	d03c      	beq.n	800270e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d01c      	beq.n	80026d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800269c:	4b4b      	ldr	r3, [pc, #300]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 800269e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026a2:	4a4a      	ldr	r2, [pc, #296]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ac:	f7fe ffe0 	bl	8001670 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b4:	f7fe ffdc 	bl	8001670 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e1d4      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026c6:	4b41      	ldr	r3, [pc, #260]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 80026c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0ef      	beq.n	80026b4 <HAL_RCC_OscConfig+0x3ec>
 80026d4:	e01b      	b.n	800270e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d6:	4b3d      	ldr	r3, [pc, #244]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 80026d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026dc:	4a3b      	ldr	r2, [pc, #236]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e6:	f7fe ffc3 	bl	8001670 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ee:	f7fe ffbf 	bl	8001670 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e1b7      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002700:	4b32      	ldr	r3, [pc, #200]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 8002702:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1ef      	bne.n	80026ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 80a6 	beq.w	8002868 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800271c:	2300      	movs	r3, #0
 800271e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002720:	4b2a      	ldr	r3, [pc, #168]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 8002722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10d      	bne.n	8002748 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800272c:	4b27      	ldr	r3, [pc, #156]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002730:	4a26      	ldr	r2, [pc, #152]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 8002732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002736:	6593      	str	r3, [r2, #88]	@ 0x58
 8002738:	4b24      	ldr	r3, [pc, #144]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 800273a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002744:	2301      	movs	r3, #1
 8002746:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002748:	4b21      	ldr	r3, [pc, #132]	@ (80027d0 <HAL_RCC_OscConfig+0x508>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d118      	bne.n	8002786 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002754:	4b1e      	ldr	r3, [pc, #120]	@ (80027d0 <HAL_RCC_OscConfig+0x508>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a1d      	ldr	r2, [pc, #116]	@ (80027d0 <HAL_RCC_OscConfig+0x508>)
 800275a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800275e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002760:	f7fe ff86 	bl	8001670 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002768:	f7fe ff82 	bl	8001670 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e17a      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800277a:	4b15      	ldr	r3, [pc, #84]	@ (80027d0 <HAL_RCC_OscConfig+0x508>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d108      	bne.n	80027a0 <HAL_RCC_OscConfig+0x4d8>
 800278e:	4b0f      	ldr	r3, [pc, #60]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 8002790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002794:	4a0d      	ldr	r2, [pc, #52]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800279e:	e029      	b.n	80027f4 <HAL_RCC_OscConfig+0x52c>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	2b05      	cmp	r3, #5
 80027a6:	d115      	bne.n	80027d4 <HAL_RCC_OscConfig+0x50c>
 80027a8:	4b08      	ldr	r3, [pc, #32]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 80027aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ae:	4a07      	ldr	r2, [pc, #28]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 80027b0:	f043 0304 	orr.w	r3, r3, #4
 80027b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027b8:	4b04      	ldr	r3, [pc, #16]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 80027ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027be:	4a03      	ldr	r2, [pc, #12]	@ (80027cc <HAL_RCC_OscConfig+0x504>)
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027c8:	e014      	b.n	80027f4 <HAL_RCC_OscConfig+0x52c>
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40007000 	.word	0x40007000
 80027d4:	4b9c      	ldr	r3, [pc, #624]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 80027d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027da:	4a9b      	ldr	r2, [pc, #620]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 80027dc:	f023 0301 	bic.w	r3, r3, #1
 80027e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027e4:	4b98      	ldr	r3, [pc, #608]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 80027e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ea:	4a97      	ldr	r2, [pc, #604]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 80027ec:	f023 0304 	bic.w	r3, r3, #4
 80027f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d016      	beq.n	800282a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fc:	f7fe ff38 	bl	8001670 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002802:	e00a      	b.n	800281a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002804:	f7fe ff34 	bl	8001670 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e12a      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800281a:	4b8b      	ldr	r3, [pc, #556]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 800281c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0ed      	beq.n	8002804 <HAL_RCC_OscConfig+0x53c>
 8002828:	e015      	b.n	8002856 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282a:	f7fe ff21 	bl	8001670 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002830:	e00a      	b.n	8002848 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002832:	f7fe ff1d 	bl	8001670 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002840:	4293      	cmp	r3, r2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e113      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002848:	4b7f      	ldr	r3, [pc, #508]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1ed      	bne.n	8002832 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002856:	7ffb      	ldrb	r3, [r7, #31]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d105      	bne.n	8002868 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800285c:	4b7a      	ldr	r3, [pc, #488]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 800285e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002860:	4a79      	ldr	r2, [pc, #484]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 8002862:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002866:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80fe 	beq.w	8002a6e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002876:	2b02      	cmp	r3, #2
 8002878:	f040 80d0 	bne.w	8002a1c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800287c:	4b72      	ldr	r3, [pc, #456]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f003 0203 	and.w	r2, r3, #3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288c:	429a      	cmp	r2, r3
 800288e:	d130      	bne.n	80028f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289a:	3b01      	subs	r3, #1
 800289c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800289e:	429a      	cmp	r2, r3
 80028a0:	d127      	bne.n	80028f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d11f      	bne.n	80028f2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028bc:	2a07      	cmp	r2, #7
 80028be:	bf14      	ite	ne
 80028c0:	2201      	movne	r2, #1
 80028c2:	2200      	moveq	r2, #0
 80028c4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d113      	bne.n	80028f2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028d4:	085b      	lsrs	r3, r3, #1
 80028d6:	3b01      	subs	r3, #1
 80028d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028da:	429a      	cmp	r2, r3
 80028dc:	d109      	bne.n	80028f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	085b      	lsrs	r3, r3, #1
 80028ea:	3b01      	subs	r3, #1
 80028ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d06e      	beq.n	80029d0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	2b0c      	cmp	r3, #12
 80028f6:	d069      	beq.n	80029cc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028f8:	4b53      	ldr	r3, [pc, #332]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d105      	bne.n	8002910 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002904:	4b50      	ldr	r3, [pc, #320]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0ad      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002914:	4b4c      	ldr	r3, [pc, #304]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a4b      	ldr	r2, [pc, #300]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 800291a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800291e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002920:	f7fe fea6 	bl	8001670 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002928:	f7fe fea2 	bl	8001670 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e09a      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800293a:	4b43      	ldr	r3, [pc, #268]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002946:	4b40      	ldr	r3, [pc, #256]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	4b40      	ldr	r3, [pc, #256]	@ (8002a4c <HAL_RCC_OscConfig+0x784>)
 800294c:	4013      	ands	r3, r2
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002956:	3a01      	subs	r2, #1
 8002958:	0112      	lsls	r2, r2, #4
 800295a:	4311      	orrs	r1, r2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002960:	0212      	lsls	r2, r2, #8
 8002962:	4311      	orrs	r1, r2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002968:	0852      	lsrs	r2, r2, #1
 800296a:	3a01      	subs	r2, #1
 800296c:	0552      	lsls	r2, r2, #21
 800296e:	4311      	orrs	r1, r2
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002974:	0852      	lsrs	r2, r2, #1
 8002976:	3a01      	subs	r2, #1
 8002978:	0652      	lsls	r2, r2, #25
 800297a:	4311      	orrs	r1, r2
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002980:	0912      	lsrs	r2, r2, #4
 8002982:	0452      	lsls	r2, r2, #17
 8002984:	430a      	orrs	r2, r1
 8002986:	4930      	ldr	r1, [pc, #192]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 8002988:	4313      	orrs	r3, r2
 800298a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800298c:	4b2e      	ldr	r3, [pc, #184]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a2d      	ldr	r2, [pc, #180]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 8002992:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002996:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002998:	4b2b      	ldr	r3, [pc, #172]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	4a2a      	ldr	r2, [pc, #168]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 800299e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029a4:	f7fe fe64 	bl	8001670 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ac:	f7fe fe60 	bl	8001670 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e058      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029be:	4b22      	ldr	r3, [pc, #136]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f0      	beq.n	80029ac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029ca:	e050      	b.n	8002a6e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e04f      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d148      	bne.n	8002a6e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a19      	ldr	r2, [pc, #100]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 80029e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029e8:	4b17      	ldr	r3, [pc, #92]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4a16      	ldr	r2, [pc, #88]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 80029ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029f4:	f7fe fe3c 	bl	8001670 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fc:	f7fe fe38 	bl	8001670 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e030      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x734>
 8002a1a:	e028      	b.n	8002a6e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	2b0c      	cmp	r3, #12
 8002a20:	d023      	beq.n	8002a6a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a22:	4b09      	ldr	r3, [pc, #36]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a08      	ldr	r2, [pc, #32]	@ (8002a48 <HAL_RCC_OscConfig+0x780>)
 8002a28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2e:	f7fe fe1f 	bl	8001670 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a34:	e00c      	b.n	8002a50 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a36:	f7fe fe1b 	bl	8001670 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d905      	bls.n	8002a50 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e013      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a50:	4b09      	ldr	r3, [pc, #36]	@ (8002a78 <HAL_RCC_OscConfig+0x7b0>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1ec      	bne.n	8002a36 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a5c:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <HAL_RCC_OscConfig+0x7b0>)
 8002a5e:	68da      	ldr	r2, [r3, #12]
 8002a60:	4905      	ldr	r1, [pc, #20]	@ (8002a78 <HAL_RCC_OscConfig+0x7b0>)
 8002a62:	4b06      	ldr	r3, [pc, #24]	@ (8002a7c <HAL_RCC_OscConfig+0x7b4>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	60cb      	str	r3, [r1, #12]
 8002a68:	e001      	b.n	8002a6e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3720      	adds	r7, #32
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	feeefffc 	.word	0xfeeefffc

08002a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0e7      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a94:	4b75      	ldr	r3, [pc, #468]	@ (8002c6c <HAL_RCC_ClockConfig+0x1ec>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d910      	bls.n	8002ac4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa2:	4b72      	ldr	r3, [pc, #456]	@ (8002c6c <HAL_RCC_ClockConfig+0x1ec>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 0207 	bic.w	r2, r3, #7
 8002aaa:	4970      	ldr	r1, [pc, #448]	@ (8002c6c <HAL_RCC_ClockConfig+0x1ec>)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab2:	4b6e      	ldr	r3, [pc, #440]	@ (8002c6c <HAL_RCC_ClockConfig+0x1ec>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0cf      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d010      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	4b66      	ldr	r3, [pc, #408]	@ (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d908      	bls.n	8002af2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae0:	4b63      	ldr	r3, [pc, #396]	@ (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4960      	ldr	r1, [pc, #384]	@ (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d04c      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b06:	4b5a      	ldr	r3, [pc, #360]	@ (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d121      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e0a6      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d107      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b1e:	4b54      	ldr	r3, [pc, #336]	@ (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d115      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e09a      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d107      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b36:	4b4e      	ldr	r3, [pc, #312]	@ (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d109      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e08e      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b46:	4b4a      	ldr	r3, [pc, #296]	@ (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e086      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b56:	4b46      	ldr	r3, [pc, #280]	@ (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f023 0203 	bic.w	r2, r3, #3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	4943      	ldr	r1, [pc, #268]	@ (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b68:	f7fe fd82 	bl	8001670 <HAL_GetTick>
 8002b6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6e:	e00a      	b.n	8002b86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b70:	f7fe fd7e 	bl	8001670 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e06e      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b86:	4b3a      	ldr	r3, [pc, #232]	@ (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 020c 	and.w	r2, r3, #12
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d1eb      	bne.n	8002b70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d010      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	4b31      	ldr	r3, [pc, #196]	@ (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d208      	bcs.n	8002bc6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb4:	4b2e      	ldr	r3, [pc, #184]	@ (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	492b      	ldr	r1, [pc, #172]	@ (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc6:	4b29      	ldr	r3, [pc, #164]	@ (8002c6c <HAL_RCC_ClockConfig+0x1ec>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d210      	bcs.n	8002bf6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd4:	4b25      	ldr	r3, [pc, #148]	@ (8002c6c <HAL_RCC_ClockConfig+0x1ec>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f023 0207 	bic.w	r2, r3, #7
 8002bdc:	4923      	ldr	r1, [pc, #140]	@ (8002c6c <HAL_RCC_ClockConfig+0x1ec>)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be4:	4b21      	ldr	r3, [pc, #132]	@ (8002c6c <HAL_RCC_ClockConfig+0x1ec>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d001      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e036      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d008      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c02:	4b1b      	ldr	r3, [pc, #108]	@ (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	4918      	ldr	r1, [pc, #96]	@ (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d009      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c20:	4b13      	ldr	r3, [pc, #76]	@ (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	4910      	ldr	r1, [pc, #64]	@ (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c34:	f000 f824 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	091b      	lsrs	r3, r3, #4
 8002c40:	f003 030f 	and.w	r3, r3, #15
 8002c44:	490b      	ldr	r1, [pc, #44]	@ (8002c74 <HAL_RCC_ClockConfig+0x1f4>)
 8002c46:	5ccb      	ldrb	r3, [r1, r3]
 8002c48:	f003 031f 	and.w	r3, r3, #31
 8002c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c50:	4a09      	ldr	r2, [pc, #36]	@ (8002c78 <HAL_RCC_ClockConfig+0x1f8>)
 8002c52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c54:	4b09      	ldr	r3, [pc, #36]	@ (8002c7c <HAL_RCC_ClockConfig+0x1fc>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fe faa1 	bl	80011a0 <HAL_InitTick>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c62:	7afb      	ldrb	r3, [r7, #11]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40022000 	.word	0x40022000
 8002c70:	40021000 	.word	0x40021000
 8002c74:	08009f38 	.word	0x08009f38
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	20000004 	.word	0x20000004

08002c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b089      	sub	sp, #36	@ 0x24
 8002c84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61fb      	str	r3, [r7, #28]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c8e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 030c 	and.w	r3, r3, #12
 8002c96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c98:	4b3b      	ldr	r3, [pc, #236]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	2b0c      	cmp	r3, #12
 8002cac:	d121      	bne.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d11e      	bne.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cb4:	4b34      	ldr	r3, [pc, #208]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d107      	bne.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cc0:	4b31      	ldr	r3, [pc, #196]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cc6:	0a1b      	lsrs	r3, r3, #8
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	e005      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	091b      	lsrs	r3, r3, #4
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002cdc:	4a2b      	ldr	r2, [pc, #172]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10d      	bne.n	8002d08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d102      	bne.n	8002cfe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cf8:	4b25      	ldr	r3, [pc, #148]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cfa:	61bb      	str	r3, [r7, #24]
 8002cfc:	e004      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d101      	bne.n	8002d08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d04:	4b23      	ldr	r3, [pc, #140]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	2b0c      	cmp	r3, #12
 8002d0c:	d134      	bne.n	8002d78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d003      	beq.n	8002d26 <HAL_RCC_GetSysClockFreq+0xa6>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d003      	beq.n	8002d2c <HAL_RCC_GetSysClockFreq+0xac>
 8002d24:	e005      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d26:	4b1a      	ldr	r3, [pc, #104]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d28:	617b      	str	r3, [r7, #20]
      break;
 8002d2a:	e005      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d2c:	4b19      	ldr	r3, [pc, #100]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d2e:	617b      	str	r3, [r7, #20]
      break;
 8002d30:	e002      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	617b      	str	r3, [r7, #20]
      break;
 8002d36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d38:	4b13      	ldr	r3, [pc, #76]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	091b      	lsrs	r3, r3, #4
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	3301      	adds	r3, #1
 8002d44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d46:	4b10      	ldr	r3, [pc, #64]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	0a1b      	lsrs	r3, r3, #8
 8002d4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	fb03 f202 	mul.w	r2, r3, r2
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	0e5b      	lsrs	r3, r3, #25
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	3301      	adds	r3, #1
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d78:	69bb      	ldr	r3, [r7, #24]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3724      	adds	r7, #36	@ 0x24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	08009f50 	.word	0x08009f50
 8002d90:	00f42400 	.word	0x00f42400
 8002d94:	007a1200 	.word	0x007a1200

08002d98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d9c:	4b03      	ldr	r3, [pc, #12]	@ (8002dac <HAL_RCC_GetHCLKFreq+0x14>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	20000000 	.word	0x20000000

08002db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002db4:	f7ff fff0 	bl	8002d98 <HAL_RCC_GetHCLKFreq>
 8002db8:	4602      	mov	r2, r0
 8002dba:	4b06      	ldr	r3, [pc, #24]	@ (8002dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	0a1b      	lsrs	r3, r3, #8
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	4904      	ldr	r1, [pc, #16]	@ (8002dd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dc6:	5ccb      	ldrb	r3, [r1, r3]
 8002dc8:	f003 031f 	and.w	r3, r3, #31
 8002dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	08009f48 	.word	0x08009f48

08002ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002de0:	f7ff ffda 	bl	8002d98 <HAL_RCC_GetHCLKFreq>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	0adb      	lsrs	r3, r3, #11
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	4904      	ldr	r1, [pc, #16]	@ (8002e04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002df2:	5ccb      	ldrb	r3, [r1, r3]
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40021000 	.word	0x40021000
 8002e04:	08009f48 	.word	0x08009f48

08002e08 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	220f      	movs	r2, #15
 8002e16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002e18:	4b12      	ldr	r3, [pc, #72]	@ (8002e64 <HAL_RCC_GetClockConfig+0x5c>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 0203 	and.w	r2, r3, #3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002e24:	4b0f      	ldr	r3, [pc, #60]	@ (8002e64 <HAL_RCC_GetClockConfig+0x5c>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002e30:	4b0c      	ldr	r3, [pc, #48]	@ (8002e64 <HAL_RCC_GetClockConfig+0x5c>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002e3c:	4b09      	ldr	r3, [pc, #36]	@ (8002e64 <HAL_RCC_GetClockConfig+0x5c>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	08db      	lsrs	r3, r3, #3
 8002e42:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002e4a:	4b07      	ldr	r3, [pc, #28]	@ (8002e68 <HAL_RCC_GetClockConfig+0x60>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0207 	and.w	r2, r3, #7
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	601a      	str	r2, [r3, #0]
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40021000 	.word	0x40021000
 8002e68:	40022000 	.word	0x40022000

08002e6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e74:	2300      	movs	r3, #0
 8002e76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e78:	4b2a      	ldr	r3, [pc, #168]	@ (8002f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e84:	f7ff f9bc 	bl	8002200 <HAL_PWREx_GetVoltageRange>
 8002e88:	6178      	str	r0, [r7, #20]
 8002e8a:	e014      	b.n	8002eb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e8c:	4b25      	ldr	r3, [pc, #148]	@ (8002f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e90:	4a24      	ldr	r2, [pc, #144]	@ (8002f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e96:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e98:	4b22      	ldr	r3, [pc, #136]	@ (8002f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ea4:	f7ff f9ac 	bl	8002200 <HAL_PWREx_GetVoltageRange>
 8002ea8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8002f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eae:	4a1d      	ldr	r2, [pc, #116]	@ (8002f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eb4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ebc:	d10b      	bne.n	8002ed6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b80      	cmp	r3, #128	@ 0x80
 8002ec2:	d919      	bls.n	8002ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2ba0      	cmp	r3, #160	@ 0xa0
 8002ec8:	d902      	bls.n	8002ed0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002eca:	2302      	movs	r3, #2
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	e013      	b.n	8002ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	613b      	str	r3, [r7, #16]
 8002ed4:	e010      	b.n	8002ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b80      	cmp	r3, #128	@ 0x80
 8002eda:	d902      	bls.n	8002ee2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002edc:	2303      	movs	r3, #3
 8002ede:	613b      	str	r3, [r7, #16]
 8002ee0:	e00a      	b.n	8002ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b80      	cmp	r3, #128	@ 0x80
 8002ee6:	d102      	bne.n	8002eee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ee8:	2302      	movs	r3, #2
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	e004      	b.n	8002ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b70      	cmp	r3, #112	@ 0x70
 8002ef2:	d101      	bne.n	8002ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f023 0207 	bic.w	r2, r3, #7
 8002f00:	4909      	ldr	r1, [pc, #36]	@ (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f08:	4b07      	ldr	r3, [pc, #28]	@ (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d001      	beq.n	8002f1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40021000 	.word	0x40021000
 8002f28:	40022000 	.word	0x40022000

08002f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f34:	2300      	movs	r3, #0
 8002f36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f38:	2300      	movs	r3, #0
 8002f3a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d041      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f4c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f50:	d02a      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002f52:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f56:	d824      	bhi.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f5c:	d008      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f62:	d81e      	bhi.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00a      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f6c:	d010      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f6e:	e018      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f70:	4b86      	ldr	r3, [pc, #536]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	4a85      	ldr	r2, [pc, #532]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f7a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f7c:	e015      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3304      	adds	r3, #4
 8002f82:	2100      	movs	r1, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f001 f829 	bl	8003fdc <RCCEx_PLLSAI1_Config>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f8e:	e00c      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3320      	adds	r3, #32
 8002f94:	2100      	movs	r1, #0
 8002f96:	4618      	mov	r0, r3
 8002f98:	f001 f914 	bl	80041c4 <RCCEx_PLLSAI2_Config>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fa0:	e003      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	74fb      	strb	r3, [r7, #19]
      break;
 8002fa6:	e000      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002fa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002faa:	7cfb      	ldrb	r3, [r7, #19]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10b      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fb0:	4b76      	ldr	r3, [pc, #472]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fbe:	4973      	ldr	r1, [pc, #460]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002fc6:	e001      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc8:	7cfb      	ldrb	r3, [r7, #19]
 8002fca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d041      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fdc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002fe0:	d02a      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002fe2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002fe6:	d824      	bhi.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002fe8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fec:	d008      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002fee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ff2:	d81e      	bhi.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00a      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ff8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ffc:	d010      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ffe:	e018      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003000:	4b62      	ldr	r3, [pc, #392]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	4a61      	ldr	r2, [pc, #388]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003006:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800300a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800300c:	e015      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3304      	adds	r3, #4
 8003012:	2100      	movs	r1, #0
 8003014:	4618      	mov	r0, r3
 8003016:	f000 ffe1 	bl	8003fdc <RCCEx_PLLSAI1_Config>
 800301a:	4603      	mov	r3, r0
 800301c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800301e:	e00c      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3320      	adds	r3, #32
 8003024:	2100      	movs	r1, #0
 8003026:	4618      	mov	r0, r3
 8003028:	f001 f8cc 	bl	80041c4 <RCCEx_PLLSAI2_Config>
 800302c:	4603      	mov	r3, r0
 800302e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003030:	e003      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	74fb      	strb	r3, [r7, #19]
      break;
 8003036:	e000      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003038:	bf00      	nop
    }

    if(ret == HAL_OK)
 800303a:	7cfb      	ldrb	r3, [r7, #19]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10b      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003040:	4b52      	ldr	r3, [pc, #328]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003046:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800304e:	494f      	ldr	r1, [pc, #316]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003056:	e001      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003058:	7cfb      	ldrb	r3, [r7, #19]
 800305a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 80a0 	beq.w	80031aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306a:	2300      	movs	r3, #0
 800306c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800306e:	4b47      	ldr	r3, [pc, #284]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800307e:	2300      	movs	r3, #0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00d      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003084:	4b41      	ldr	r3, [pc, #260]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003088:	4a40      	ldr	r2, [pc, #256]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800308e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003090:	4b3e      	ldr	r3, [pc, #248]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800309c:	2301      	movs	r3, #1
 800309e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a3a      	ldr	r2, [pc, #232]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030ac:	f7fe fae0 	bl	8001670 <HAL_GetTick>
 80030b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030b2:	e009      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b4:	f7fe fadc 	bl	8001670 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d902      	bls.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	74fb      	strb	r3, [r7, #19]
        break;
 80030c6:	e005      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030c8:	4b31      	ldr	r3, [pc, #196]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0ef      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80030d4:	7cfb      	ldrb	r3, [r7, #19]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d15c      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030da:	4b2c      	ldr	r3, [pc, #176]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d01f      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d019      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030f8:	4b24      	ldr	r3, [pc, #144]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003102:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003104:	4b21      	ldr	r3, [pc, #132]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800310a:	4a20      	ldr	r2, [pc, #128]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800310c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003110:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003114:	4b1d      	ldr	r3, [pc, #116]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800311a:	4a1c      	ldr	r2, [pc, #112]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003120:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003124:	4a19      	ldr	r2, [pc, #100]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d016      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003136:	f7fe fa9b 	bl	8001670 <HAL_GetTick>
 800313a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800313c:	e00b      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800313e:	f7fe fa97 	bl	8001670 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	f241 3288 	movw	r2, #5000	@ 0x1388
 800314c:	4293      	cmp	r3, r2
 800314e:	d902      	bls.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	74fb      	strb	r3, [r7, #19]
            break;
 8003154:	e006      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003156:	4b0d      	ldr	r3, [pc, #52]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ec      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003164:	7cfb      	ldrb	r3, [r7, #19]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10c      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800316a:	4b08      	ldr	r3, [pc, #32]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003170:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800317a:	4904      	ldr	r1, [pc, #16]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003182:	e009      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003184:	7cfb      	ldrb	r3, [r7, #19]
 8003186:	74bb      	strb	r3, [r7, #18]
 8003188:	e006      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800318a:	bf00      	nop
 800318c:	40021000 	.word	0x40021000
 8003190:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003194:	7cfb      	ldrb	r3, [r7, #19]
 8003196:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003198:	7c7b      	ldrb	r3, [r7, #17]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d105      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800319e:	4b9e      	ldr	r3, [pc, #632]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a2:	4a9d      	ldr	r2, [pc, #628]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031a8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031b6:	4b98      	ldr	r3, [pc, #608]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031bc:	f023 0203 	bic.w	r2, r3, #3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c4:	4994      	ldr	r1, [pc, #592]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031d8:	4b8f      	ldr	r3, [pc, #572]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031de:	f023 020c 	bic.w	r2, r3, #12
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e6:	498c      	ldr	r1, [pc, #560]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031fa:	4b87      	ldr	r3, [pc, #540]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003200:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	4983      	ldr	r1, [pc, #524]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800321c:	4b7e      	ldr	r3, [pc, #504]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003222:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322a:	497b      	ldr	r1, [pc, #492]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0310 	and.w	r3, r3, #16
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800323e:	4b76      	ldr	r3, [pc, #472]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003244:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800324c:	4972      	ldr	r1, [pc, #456]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003260:	4b6d      	ldr	r3, [pc, #436]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003266:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800326e:	496a      	ldr	r1, [pc, #424]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003282:	4b65      	ldr	r3, [pc, #404]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003288:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003290:	4961      	ldr	r1, [pc, #388]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00a      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032a4:	4b5c      	ldr	r3, [pc, #368]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b2:	4959      	ldr	r1, [pc, #356]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032c6:	4b54      	ldr	r3, [pc, #336]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032cc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032d4:	4950      	ldr	r1, [pc, #320]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00a      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032e8:	4b4b      	ldr	r3, [pc, #300]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f6:	4948      	ldr	r1, [pc, #288]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800330a:	4b43      	ldr	r3, [pc, #268]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003310:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003318:	493f      	ldr	r1, [pc, #252]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d028      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800332c:	4b3a      	ldr	r3, [pc, #232]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003332:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800333a:	4937      	ldr	r1, [pc, #220]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003346:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800334a:	d106      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800334c:	4b32      	ldr	r3, [pc, #200]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	4a31      	ldr	r2, [pc, #196]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003352:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003356:	60d3      	str	r3, [r2, #12]
 8003358:	e011      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800335e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003362:	d10c      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3304      	adds	r3, #4
 8003368:	2101      	movs	r1, #1
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fe36 	bl	8003fdc <RCCEx_PLLSAI1_Config>
 8003370:	4603      	mov	r3, r0
 8003372:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003374:	7cfb      	ldrb	r3, [r7, #19]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800337a:	7cfb      	ldrb	r3, [r7, #19]
 800337c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d028      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800338a:	4b23      	ldr	r3, [pc, #140]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003390:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003398:	491f      	ldr	r1, [pc, #124]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033a8:	d106      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033b4:	60d3      	str	r3, [r2, #12]
 80033b6:	e011      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033c0:	d10c      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3304      	adds	r3, #4
 80033c6:	2101      	movs	r1, #1
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 fe07 	bl	8003fdc <RCCEx_PLLSAI1_Config>
 80033ce:	4603      	mov	r3, r0
 80033d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033d2:	7cfb      	ldrb	r3, [r7, #19]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80033d8:	7cfb      	ldrb	r3, [r7, #19]
 80033da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d02b      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033f6:	4908      	ldr	r1, [pc, #32]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003402:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003406:	d109      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003408:	4b03      	ldr	r3, [pc, #12]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	4a02      	ldr	r2, [pc, #8]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003412:	60d3      	str	r3, [r2, #12]
 8003414:	e014      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003420:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003424:	d10c      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3304      	adds	r3, #4
 800342a:	2101      	movs	r1, #1
 800342c:	4618      	mov	r0, r3
 800342e:	f000 fdd5 	bl	8003fdc <RCCEx_PLLSAI1_Config>
 8003432:	4603      	mov	r3, r0
 8003434:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003436:	7cfb      	ldrb	r3, [r7, #19]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800343c:	7cfb      	ldrb	r3, [r7, #19]
 800343e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d02f      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800344c:	4b2b      	ldr	r3, [pc, #172]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800344e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003452:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800345a:	4928      	ldr	r1, [pc, #160]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003466:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800346a:	d10d      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3304      	adds	r3, #4
 8003470:	2102      	movs	r1, #2
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fdb2 	bl	8003fdc <RCCEx_PLLSAI1_Config>
 8003478:	4603      	mov	r3, r0
 800347a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800347c:	7cfb      	ldrb	r3, [r7, #19]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d014      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003482:	7cfb      	ldrb	r3, [r7, #19]
 8003484:	74bb      	strb	r3, [r7, #18]
 8003486:	e011      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800348c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003490:	d10c      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3320      	adds	r3, #32
 8003496:	2102      	movs	r1, #2
 8003498:	4618      	mov	r0, r3
 800349a:	f000 fe93 	bl	80041c4 <RCCEx_PLLSAI2_Config>
 800349e:	4603      	mov	r3, r0
 80034a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034a2:	7cfb      	ldrb	r3, [r7, #19]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034a8:	7cfb      	ldrb	r3, [r7, #19]
 80034aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00a      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034b8:	4b10      	ldr	r3, [pc, #64]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034be:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034c6:	490d      	ldr	r1, [pc, #52]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00b      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034da:	4b08      	ldr	r3, [pc, #32]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034ea:	4904      	ldr	r1, [pc, #16]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40021000 	.word	0x40021000

08003500 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003512:	d13e      	bne.n	8003592 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003514:	4bb2      	ldr	r3, [pc, #712]	@ (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800351a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800351e:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003526:	d028      	beq.n	800357a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800352e:	f200 8542 	bhi.w	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003538:	d005      	beq.n	8003546 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003540:	d00e      	beq.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003542:	f000 bd38 	b.w	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003546:	4ba6      	ldr	r3, [pc, #664]	@ (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b02      	cmp	r3, #2
 8003552:	f040 8532 	bne.w	8003fba <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8003556:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800355a:	61fb      	str	r3, [r7, #28]
      break;
 800355c:	f000 bd2d 	b.w	8003fba <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003560:	4b9f      	ldr	r3, [pc, #636]	@ (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003562:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b02      	cmp	r3, #2
 800356c:	f040 8527 	bne.w	8003fbe <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8003570:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003574:	61fb      	str	r3, [r7, #28]
      break;
 8003576:	f000 bd22 	b.w	8003fbe <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800357a:	4b99      	ldr	r3, [pc, #612]	@ (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003582:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003586:	f040 851c 	bne.w	8003fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 800358a:	4b96      	ldr	r3, [pc, #600]	@ (80037e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800358c:	61fb      	str	r3, [r7, #28]
      break;
 800358e:	f000 bd18 	b.w	8003fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003592:	4b93      	ldr	r3, [pc, #588]	@ (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d036      	beq.n	8003610 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2b03      	cmp	r3, #3
 80035a6:	d840      	bhi.n	800362a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d003      	beq.n	80035b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d020      	beq.n	80035f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80035b4:	e039      	b.n	800362a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80035b6:	4b8a      	ldr	r3, [pc, #552]	@ (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d116      	bne.n	80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80035c2:	4b87      	ldr	r3, [pc, #540]	@ (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80035ce:	4b84      	ldr	r3, [pc, #528]	@ (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	091b      	lsrs	r3, r3, #4
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	e005      	b.n	80035e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80035da:	4b81      	ldr	r3, [pc, #516]	@ (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80035dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035e0:	0a1b      	lsrs	r3, r3, #8
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	4a80      	ldr	r2, [pc, #512]	@ (80037e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80035e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80035ee:	e01f      	b.n	8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61bb      	str	r3, [r7, #24]
      break;
 80035f4:	e01c      	b.n	8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80035f6:	4b7a      	ldr	r3, [pc, #488]	@ (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003602:	d102      	bne.n	800360a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8003604:	4b79      	ldr	r3, [pc, #484]	@ (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003606:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003608:	e012      	b.n	8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800360a:	2300      	movs	r3, #0
 800360c:	61bb      	str	r3, [r7, #24]
      break;
 800360e:	e00f      	b.n	8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003610:	4b73      	ldr	r3, [pc, #460]	@ (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003618:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800361c:	d102      	bne.n	8003624 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800361e:	4b74      	ldr	r3, [pc, #464]	@ (80037f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003620:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003622:	e005      	b.n	8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003624:	2300      	movs	r3, #0
 8003626:	61bb      	str	r3, [r7, #24]
      break;
 8003628:	e002      	b.n	8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	61bb      	str	r3, [r7, #24]
      break;
 800362e:	bf00      	nop
    }

    switch(PeriphClk)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003636:	f000 80dd 	beq.w	80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003640:	f200 84c1 	bhi.w	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800364a:	f000 80d3 	beq.w	80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003654:	f200 84b7 	bhi.w	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800365e:	f000 835f 	beq.w	8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003668:	f200 84ad 	bhi.w	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003672:	f000 847e 	beq.w	8003f72 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800367c:	f200 84a3 	bhi.w	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003686:	f000 82cd 	beq.w	8003c24 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003690:	f200 8499 	bhi.w	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800369a:	f000 80ab 	beq.w	80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036a4:	f200 848f 	bhi.w	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ae:	f000 8090 	beq.w	80037d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036b8:	f200 8485 	bhi.w	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036c2:	d07f      	beq.n	80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036ca:	f200 847c 	bhi.w	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036d4:	f000 8403 	beq.w	8003ede <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036de:	f200 8472 	bhi.w	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036e8:	f000 83af 	beq.w	8003e4a <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036f2:	f200 8468 	bhi.w	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036fc:	f000 8379 	beq.w	8003df2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003706:	f200 845e 	bhi.w	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b80      	cmp	r3, #128	@ 0x80
 800370e:	f000 8344 	beq.w	8003d9a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b80      	cmp	r3, #128	@ 0x80
 8003716:	f200 8456 	bhi.w	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b20      	cmp	r3, #32
 800371e:	d84b      	bhi.n	80037b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 844f 	beq.w	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3b01      	subs	r3, #1
 800372c:	2b1f      	cmp	r3, #31
 800372e:	f200 844a 	bhi.w	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003732:	a201      	add	r2, pc, #4	@ (adr r2, 8003738 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8003734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003738:	08003921 	.word	0x08003921
 800373c:	0800398f 	.word	0x0800398f
 8003740:	08003fc7 	.word	0x08003fc7
 8003744:	08003a23 	.word	0x08003a23
 8003748:	08003fc7 	.word	0x08003fc7
 800374c:	08003fc7 	.word	0x08003fc7
 8003750:	08003fc7 	.word	0x08003fc7
 8003754:	08003aa9 	.word	0x08003aa9
 8003758:	08003fc7 	.word	0x08003fc7
 800375c:	08003fc7 	.word	0x08003fc7
 8003760:	08003fc7 	.word	0x08003fc7
 8003764:	08003fc7 	.word	0x08003fc7
 8003768:	08003fc7 	.word	0x08003fc7
 800376c:	08003fc7 	.word	0x08003fc7
 8003770:	08003fc7 	.word	0x08003fc7
 8003774:	08003b21 	.word	0x08003b21
 8003778:	08003fc7 	.word	0x08003fc7
 800377c:	08003fc7 	.word	0x08003fc7
 8003780:	08003fc7 	.word	0x08003fc7
 8003784:	08003fc7 	.word	0x08003fc7
 8003788:	08003fc7 	.word	0x08003fc7
 800378c:	08003fc7 	.word	0x08003fc7
 8003790:	08003fc7 	.word	0x08003fc7
 8003794:	08003fc7 	.word	0x08003fc7
 8003798:	08003fc7 	.word	0x08003fc7
 800379c:	08003fc7 	.word	0x08003fc7
 80037a0:	08003fc7 	.word	0x08003fc7
 80037a4:	08003fc7 	.word	0x08003fc7
 80037a8:	08003fc7 	.word	0x08003fc7
 80037ac:	08003fc7 	.word	0x08003fc7
 80037b0:	08003fc7 	.word	0x08003fc7
 80037b4:	08003ba3 	.word	0x08003ba3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b40      	cmp	r3, #64	@ 0x40
 80037bc:	f000 82c1 	beq.w	8003d42 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80037c0:	f000 bc01 	b.w	8003fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80037c4:	69b9      	ldr	r1, [r7, #24]
 80037c6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80037ca:	f000 fdd9 	bl	8004380 <RCCEx_GetSAIxPeriphCLKFreq>
 80037ce:	61f8      	str	r0, [r7, #28]
      break;
 80037d0:	e3fa      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80037d2:	69b9      	ldr	r1, [r7, #24]
 80037d4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80037d8:	f000 fdd2 	bl	8004380 <RCCEx_GetSAIxPeriphCLKFreq>
 80037dc:	61f8      	str	r0, [r7, #28]
      break;
 80037de:	e3f3      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80037e0:	40021000 	.word	0x40021000
 80037e4:	0003d090 	.word	0x0003d090
 80037e8:	08009f50 	.word	0x08009f50
 80037ec:	00f42400 	.word	0x00f42400
 80037f0:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80037f4:	4ba9      	ldr	r3, [pc, #676]	@ (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80037f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037fa:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003806:	d00c      	beq.n	8003822 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800380e:	d87f      	bhi.n	8003910 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003816:	d04e      	beq.n	80038b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800381e:	d01d      	beq.n	800385c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8003820:	e076      	b.n	8003910 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003822:	4b9e      	ldr	r3, [pc, #632]	@ (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b02      	cmp	r3, #2
 800382c:	d172      	bne.n	8003914 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800382e:	4b9b      	ldr	r3, [pc, #620]	@ (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 800383a:	4b98      	ldr	r3, [pc, #608]	@ (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	091b      	lsrs	r3, r3, #4
 8003840:	f003 030f 	and.w	r3, r3, #15
 8003844:	e005      	b.n	8003852 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8003846:	4b95      	ldr	r3, [pc, #596]	@ (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003848:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800384c:	0a1b      	lsrs	r3, r3, #8
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	4a93      	ldr	r2, [pc, #588]	@ (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8003854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003858:	61fb      	str	r3, [r7, #28]
          break;
 800385a:	e05b      	b.n	8003914 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800385c:	4b8f      	ldr	r3, [pc, #572]	@ (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003864:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003868:	d156      	bne.n	8003918 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800386a:	4b8c      	ldr	r3, [pc, #560]	@ (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003872:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003876:	d14f      	bne.n	8003918 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003878:	4b88      	ldr	r3, [pc, #544]	@ (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	0a1b      	lsrs	r3, r3, #8
 800387e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003882:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	fb03 f202 	mul.w	r2, r3, r2
 800388c:	4b83      	ldr	r3, [pc, #524]	@ (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	091b      	lsrs	r3, r3, #4
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	3301      	adds	r3, #1
 8003898:	fbb2 f3f3 	udiv	r3, r2, r3
 800389c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800389e:	4b7f      	ldr	r3, [pc, #508]	@ (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	0d5b      	lsrs	r3, r3, #21
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	3301      	adds	r3, #1
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b2:	61fb      	str	r3, [r7, #28]
          break;
 80038b4:	e030      	b.n	8003918 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80038b6:	4b79      	ldr	r3, [pc, #484]	@ (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038c2:	d12b      	bne.n	800391c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80038c4:	4b75      	ldr	r3, [pc, #468]	@ (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038d0:	d124      	bne.n	800391c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80038d2:	4b72      	ldr	r3, [pc, #456]	@ (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	0a1b      	lsrs	r3, r3, #8
 80038d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038dc:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	fb03 f202 	mul.w	r2, r3, r2
 80038e6:	4b6d      	ldr	r3, [pc, #436]	@ (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	091b      	lsrs	r3, r3, #4
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	3301      	adds	r3, #1
 80038f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80038f8:	4b68      	ldr	r3, [pc, #416]	@ (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	0d5b      	lsrs	r3, r3, #21
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	3301      	adds	r3, #1
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	fbb2 f3f3 	udiv	r3, r2, r3
 800390c:	61fb      	str	r3, [r7, #28]
          break;
 800390e:	e005      	b.n	800391c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8003910:	bf00      	nop
 8003912:	e359      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003914:	bf00      	nop
 8003916:	e357      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003918:	bf00      	nop
 800391a:	e355      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800391c:	bf00      	nop
        break;
 800391e:	e353      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003920:	4b5e      	ldr	r3, [pc, #376]	@ (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	613b      	str	r3, [r7, #16]
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	2b03      	cmp	r3, #3
 8003930:	d827      	bhi.n	8003982 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8003932:	a201      	add	r2, pc, #4	@ (adr r2, 8003938 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8003934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003938:	08003949 	.word	0x08003949
 800393c:	08003951 	.word	0x08003951
 8003940:	08003959 	.word	0x08003959
 8003944:	0800396d 	.word	0x0800396d
          frequency = HAL_RCC_GetPCLK2Freq();
 8003948:	f7ff fa48 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 800394c:	61f8      	str	r0, [r7, #28]
          break;
 800394e:	e01d      	b.n	800398c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8003950:	f7ff f996 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8003954:	61f8      	str	r0, [r7, #28]
          break;
 8003956:	e019      	b.n	800398c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003958:	4b50      	ldr	r3, [pc, #320]	@ (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003964:	d10f      	bne.n	8003986 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8003966:	4b4f      	ldr	r3, [pc, #316]	@ (8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003968:	61fb      	str	r3, [r7, #28]
          break;
 800396a:	e00c      	b.n	8003986 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800396c:	4b4b      	ldr	r3, [pc, #300]	@ (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800396e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b02      	cmp	r3, #2
 8003978:	d107      	bne.n	800398a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 800397a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800397e:	61fb      	str	r3, [r7, #28]
          break;
 8003980:	e003      	b.n	800398a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8003982:	bf00      	nop
 8003984:	e320      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003986:	bf00      	nop
 8003988:	e31e      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800398a:	bf00      	nop
        break;
 800398c:	e31c      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800398e:	4b43      	ldr	r3, [pc, #268]	@ (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003994:	f003 030c 	and.w	r3, r3, #12
 8003998:	613b      	str	r3, [r7, #16]
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	2b0c      	cmp	r3, #12
 800399e:	d83a      	bhi.n	8003a16 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80039a0:	a201      	add	r2, pc, #4	@ (adr r2, 80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 80039a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a6:	bf00      	nop
 80039a8:	080039dd 	.word	0x080039dd
 80039ac:	08003a17 	.word	0x08003a17
 80039b0:	08003a17 	.word	0x08003a17
 80039b4:	08003a17 	.word	0x08003a17
 80039b8:	080039e5 	.word	0x080039e5
 80039bc:	08003a17 	.word	0x08003a17
 80039c0:	08003a17 	.word	0x08003a17
 80039c4:	08003a17 	.word	0x08003a17
 80039c8:	080039ed 	.word	0x080039ed
 80039cc:	08003a17 	.word	0x08003a17
 80039d0:	08003a17 	.word	0x08003a17
 80039d4:	08003a17 	.word	0x08003a17
 80039d8:	08003a01 	.word	0x08003a01
          frequency = HAL_RCC_GetPCLK1Freq();
 80039dc:	f7ff f9e8 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 80039e0:	61f8      	str	r0, [r7, #28]
          break;
 80039e2:	e01d      	b.n	8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 80039e4:	f7ff f94c 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 80039e8:	61f8      	str	r0, [r7, #28]
          break;
 80039ea:	e019      	b.n	8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80039ec:	4b2b      	ldr	r3, [pc, #172]	@ (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039f8:	d10f      	bne.n	8003a1a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 80039fa:	4b2a      	ldr	r3, [pc, #168]	@ (8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80039fc:	61fb      	str	r3, [r7, #28]
          break;
 80039fe:	e00c      	b.n	8003a1a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003a00:	4b26      	ldr	r3, [pc, #152]	@ (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d107      	bne.n	8003a1e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8003a0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a12:	61fb      	str	r3, [r7, #28]
          break;
 8003a14:	e003      	b.n	8003a1e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8003a16:	bf00      	nop
 8003a18:	e2d6      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003a1a:	bf00      	nop
 8003a1c:	e2d4      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003a1e:	bf00      	nop
        break;
 8003a20:	e2d2      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003a22:	4b1e      	ldr	r3, [pc, #120]	@ (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a28:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	2b30      	cmp	r3, #48	@ 0x30
 8003a32:	d021      	beq.n	8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	2b30      	cmp	r3, #48	@ 0x30
 8003a38:	d829      	bhi.n	8003a8e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d011      	beq.n	8003a64 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	d823      	bhi.n	8003a8e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	2b10      	cmp	r3, #16
 8003a50:	d004      	beq.n	8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8003a52:	e01c      	b.n	8003a8e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003a54:	f7ff f9ac 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8003a58:	61f8      	str	r0, [r7, #28]
          break;
 8003a5a:	e01d      	b.n	8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8003a5c:	f7ff f910 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8003a60:	61f8      	str	r0, [r7, #28]
          break;
 8003a62:	e019      	b.n	8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003a64:	4b0d      	ldr	r3, [pc, #52]	@ (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a70:	d10f      	bne.n	8003a92 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8003a72:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003a74:	61fb      	str	r3, [r7, #28]
          break;
 8003a76:	e00c      	b.n	8003a92 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003a78:	4b08      	ldr	r3, [pc, #32]	@ (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d107      	bne.n	8003a96 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8003a86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a8a:	61fb      	str	r3, [r7, #28]
          break;
 8003a8c:	e003      	b.n	8003a96 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8003a8e:	bf00      	nop
 8003a90:	e29a      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003a92:	bf00      	nop
 8003a94:	e298      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003a96:	bf00      	nop
        break;
 8003a98:	e296      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003a9a:	bf00      	nop
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	08009f50 	.word	0x08009f50
 8003aa4:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003aa8:	4b9b      	ldr	r3, [pc, #620]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ab2:	613b      	str	r3, [r7, #16]
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ab8:	d021      	beq.n	8003afe <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	2bc0      	cmp	r3, #192	@ 0xc0
 8003abe:	d829      	bhi.n	8003b14 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	2b80      	cmp	r3, #128	@ 0x80
 8003ac4:	d011      	beq.n	8003aea <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	2b80      	cmp	r3, #128	@ 0x80
 8003aca:	d823      	bhi.n	8003b14 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	2b40      	cmp	r3, #64	@ 0x40
 8003ad6:	d004      	beq.n	8003ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8003ad8:	e01c      	b.n	8003b14 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003ada:	f7ff f969 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8003ade:	61f8      	str	r0, [r7, #28]
          break;
 8003ae0:	e01d      	b.n	8003b1e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8003ae2:	f7ff f8cd 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8003ae6:	61f8      	str	r0, [r7, #28]
          break;
 8003ae8:	e019      	b.n	8003b1e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003aea:	4b8b      	ldr	r3, [pc, #556]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003af2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003af6:	d10f      	bne.n	8003b18 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8003af8:	4b88      	ldr	r3, [pc, #544]	@ (8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003afa:	61fb      	str	r3, [r7, #28]
          break;
 8003afc:	e00c      	b.n	8003b18 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003afe:	4b86      	ldr	r3, [pc, #536]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d107      	bne.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8003b0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b10:	61fb      	str	r3, [r7, #28]
          break;
 8003b12:	e003      	b.n	8003b1c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8003b14:	bf00      	nop
 8003b16:	e257      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003b18:	bf00      	nop
 8003b1a:	e255      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003b1c:	bf00      	nop
        break;
 8003b1e:	e253      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003b20:	4b7d      	ldr	r3, [pc, #500]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b2a:	613b      	str	r3, [r7, #16]
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b32:	d025      	beq.n	8003b80 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b3a:	d82c      	bhi.n	8003b96 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b42:	d013      	beq.n	8003b6c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b4a:	d824      	bhi.n	8003b96 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d004      	beq.n	8003b5c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b58:	d004      	beq.n	8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8003b5a:	e01c      	b.n	8003b96 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003b5c:	f7ff f928 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8003b60:	61f8      	str	r0, [r7, #28]
          break;
 8003b62:	e01d      	b.n	8003ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003b64:	f7ff f88c 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8003b68:	61f8      	str	r0, [r7, #28]
          break;
 8003b6a:	e019      	b.n	8003ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003b6c:	4b6a      	ldr	r3, [pc, #424]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b78:	d10f      	bne.n	8003b9a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8003b7a:	4b68      	ldr	r3, [pc, #416]	@ (8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003b7c:	61fb      	str	r3, [r7, #28]
          break;
 8003b7e:	e00c      	b.n	8003b9a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003b80:	4b65      	ldr	r3, [pc, #404]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d107      	bne.n	8003b9e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8003b8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b92:	61fb      	str	r3, [r7, #28]
          break;
 8003b94:	e003      	b.n	8003b9e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8003b96:	bf00      	nop
 8003b98:	e216      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003b9a:	bf00      	nop
 8003b9c:	e214      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003b9e:	bf00      	nop
        break;
 8003ba0:	e212      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003ba2:	4b5d      	ldr	r3, [pc, #372]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ba8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bb4:	d025      	beq.n	8003c02 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bbc:	d82c      	bhi.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bc4:	d013      	beq.n	8003bee <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bcc:	d824      	bhi.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d004      	beq.n	8003bde <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bda:	d004      	beq.n	8003be6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8003bdc:	e01c      	b.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003bde:	f7ff f8e7 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8003be2:	61f8      	str	r0, [r7, #28]
          break;
 8003be4:	e01d      	b.n	8003c22 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8003be6:	f7ff f84b 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8003bea:	61f8      	str	r0, [r7, #28]
          break;
 8003bec:	e019      	b.n	8003c22 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003bee:	4b4a      	ldr	r3, [pc, #296]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bfa:	d10f      	bne.n	8003c1c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8003bfc:	4b47      	ldr	r3, [pc, #284]	@ (8003d1c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003bfe:	61fb      	str	r3, [r7, #28]
          break;
 8003c00:	e00c      	b.n	8003c1c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003c02:	4b45      	ldr	r3, [pc, #276]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d107      	bne.n	8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8003c10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c14:	61fb      	str	r3, [r7, #28]
          break;
 8003c16:	e003      	b.n	8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8003c18:	bf00      	nop
 8003c1a:	e1d5      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003c1c:	bf00      	nop
 8003c1e:	e1d3      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003c20:	bf00      	nop
        break;
 8003c22:	e1d1      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8003c24:	4b3c      	ldr	r3, [pc, #240]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c2e:	613b      	str	r3, [r7, #16]
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c36:	d00c      	beq.n	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c3e:	d864      	bhi.n	8003d0a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c46:	d008      	beq.n	8003c5a <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c4e:	d030      	beq.n	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8003c50:	e05b      	b.n	8003d0a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8003c52:	f7ff f815 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8003c56:	61f8      	str	r0, [r7, #28]
          break;
 8003c58:	e05c      	b.n	8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8003c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c66:	d152      	bne.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8003c68:	4b2b      	ldr	r3, [pc, #172]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d04c      	beq.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003c74:	4b28      	ldr	r3, [pc, #160]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	0a1b      	lsrs	r3, r3, #8
 8003c7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c7e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	fb03 f202 	mul.w	r2, r3, r2
 8003c88:	4b23      	ldr	r3, [pc, #140]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	091b      	lsrs	r3, r3, #4
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	3301      	adds	r3, #1
 8003c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c98:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8003c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	0e5b      	lsrs	r3, r3, #25
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cae:	61fb      	str	r3, [r7, #28]
          break;
 8003cb0:	e02d      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8003cb2:	4b19      	ldr	r3, [pc, #100]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cbe:	d128      	bne.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8003cc0:	4b15      	ldr	r3, [pc, #84]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d022      	beq.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8003ccc:	4b12      	ldr	r3, [pc, #72]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	0a1b      	lsrs	r3, r3, #8
 8003cd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cd6:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	fb03 f202 	mul.w	r2, r3, r2
 8003ce0:	4b0d      	ldr	r3, [pc, #52]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	091b      	lsrs	r3, r3, #4
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	3301      	adds	r3, #1
 8003cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8003cf2:	4b09      	ldr	r3, [pc, #36]	@ (8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	0e5b      	lsrs	r3, r3, #25
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d06:	61fb      	str	r3, [r7, #28]
          break;
 8003d08:	e003      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8003d0a:	bf00      	nop
 8003d0c:	e15c      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003d0e:	bf00      	nop
 8003d10:	e15a      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003d12:	bf00      	nop
        break;
 8003d14:	e158      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003d16:	bf00      	nop
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8003d20:	4b9d      	ldr	r3, [pc, #628]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d2a:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d103      	bne.n	8003d3a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8003d32:	f7ff f853 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 8003d36:	61f8      	str	r0, [r7, #28]
        break;
 8003d38:	e146      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8003d3a:	f7fe ffa1 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8003d3e:	61f8      	str	r0, [r7, #28]
        break;
 8003d40:	e142      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003d42:	4b95      	ldr	r3, [pc, #596]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d48:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d54:	d013      	beq.n	8003d7e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d5c:	d819      	bhi.n	8003d92 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d004      	beq.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d6a:	d004      	beq.n	8003d76 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8003d6c:	e011      	b.n	8003d92 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003d6e:	f7ff f81f 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8003d72:	61f8      	str	r0, [r7, #28]
          break;
 8003d74:	e010      	b.n	8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8003d76:	f7fe ff83 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8003d7a:	61f8      	str	r0, [r7, #28]
          break;
 8003d7c:	e00c      	b.n	8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003d7e:	4b86      	ldr	r3, [pc, #536]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d8a:	d104      	bne.n	8003d96 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8003d8c:	4b83      	ldr	r3, [pc, #524]	@ (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003d8e:	61fb      	str	r3, [r7, #28]
          break;
 8003d90:	e001      	b.n	8003d96 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8003d92:	bf00      	nop
 8003d94:	e118      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003d96:	bf00      	nop
        break;
 8003d98:	e116      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003d9a:	4b7f      	ldr	r3, [pc, #508]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dac:	d013      	beq.n	8003dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003db4:	d819      	bhi.n	8003dea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d004      	beq.n	8003dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dc2:	d004      	beq.n	8003dce <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8003dc4:	e011      	b.n	8003dea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003dc6:	f7fe fff3 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8003dca:	61f8      	str	r0, [r7, #28]
          break;
 8003dcc:	e010      	b.n	8003df0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003dce:	f7fe ff57 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8003dd2:	61f8      	str	r0, [r7, #28]
          break;
 8003dd4:	e00c      	b.n	8003df0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003dd6:	4b70      	ldr	r3, [pc, #448]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003de2:	d104      	bne.n	8003dee <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8003de4:	4b6d      	ldr	r3, [pc, #436]	@ (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003de6:	61fb      	str	r3, [r7, #28]
          break;
 8003de8:	e001      	b.n	8003dee <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8003dea:	bf00      	nop
 8003dec:	e0ec      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003dee:	bf00      	nop
        break;
 8003df0:	e0ea      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8003df2:	4b69      	ldr	r3, [pc, #420]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e04:	d013      	beq.n	8003e2e <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e0c:	d819      	bhi.n	8003e42 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d004      	beq.n	8003e1e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e1a:	d004      	beq.n	8003e26 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8003e1c:	e011      	b.n	8003e42 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003e1e:	f7fe ffc7 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8003e22:	61f8      	str	r0, [r7, #28]
          break;
 8003e24:	e010      	b.n	8003e48 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8003e26:	f7fe ff2b 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8003e2a:	61f8      	str	r0, [r7, #28]
          break;
 8003e2c:	e00c      	b.n	8003e48 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003e2e:	4b5a      	ldr	r3, [pc, #360]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e3a:	d104      	bne.n	8003e46 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8003e3c:	4b57      	ldr	r3, [pc, #348]	@ (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003e3e:	61fb      	str	r3, [r7, #28]
          break;
 8003e40:	e001      	b.n	8003e46 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8003e42:	bf00      	nop
 8003e44:	e0c0      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003e46:	bf00      	nop
        break;
 8003e48:	e0be      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003e4a:	4b53      	ldr	r3, [pc, #332]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e50:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003e54:	613b      	str	r3, [r7, #16]
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003e5c:	d02c      	beq.n	8003eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003e64:	d833      	bhi.n	8003ece <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e6c:	d01a      	beq.n	8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e74:	d82b      	bhi.n	8003ece <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d004      	beq.n	8003e86 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e82:	d004      	beq.n	8003e8e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8003e84:	e023      	b.n	8003ece <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003e86:	f7fe ff93 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8003e8a:	61f8      	str	r0, [r7, #28]
          break;
 8003e8c:	e026      	b.n	8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003e8e:	4b42      	ldr	r3, [pc, #264]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d11a      	bne.n	8003ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8003e9c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003ea0:	61fb      	str	r3, [r7, #28]
          break;
 8003ea2:	e016      	b.n	8003ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003ea4:	4b3c      	ldr	r3, [pc, #240]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eb0:	d111      	bne.n	8003ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8003eb2:	4b3a      	ldr	r3, [pc, #232]	@ (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003eb4:	61fb      	str	r3, [r7, #28]
          break;
 8003eb6:	e00e      	b.n	8003ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003eb8:	4b37      	ldr	r3, [pc, #220]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d109      	bne.n	8003eda <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8003ec6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eca:	61fb      	str	r3, [r7, #28]
          break;
 8003ecc:	e005      	b.n	8003eda <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8003ece:	bf00      	nop
 8003ed0:	e07a      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003ed2:	bf00      	nop
 8003ed4:	e078      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003ed6:	bf00      	nop
 8003ed8:	e076      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003eda:	bf00      	nop
        break;
 8003edc:	e074      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003ede:	4b2e      	ldr	r3, [pc, #184]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003ee8:	613b      	str	r3, [r7, #16]
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ef0:	d02c      	beq.n	8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ef8:	d833      	bhi.n	8003f62 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f00:	d01a      	beq.n	8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f08:	d82b      	bhi.n	8003f62 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d004      	beq.n	8003f1a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f16:	d004      	beq.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8003f18:	e023      	b.n	8003f62 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003f1a:	f7fe ff49 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8003f1e:	61f8      	str	r0, [r7, #28]
          break;
 8003f20:	e026      	b.n	8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003f22:	4b1d      	ldr	r3, [pc, #116]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003f24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d11a      	bne.n	8003f66 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8003f30:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003f34:	61fb      	str	r3, [r7, #28]
          break;
 8003f36:	e016      	b.n	8003f66 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f38:	4b17      	ldr	r3, [pc, #92]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f44:	d111      	bne.n	8003f6a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8003f46:	4b15      	ldr	r3, [pc, #84]	@ (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003f48:	61fb      	str	r3, [r7, #28]
          break;
 8003f4a:	e00e      	b.n	8003f6a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003f4c:	4b12      	ldr	r3, [pc, #72]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d109      	bne.n	8003f6e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8003f5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f5e:	61fb      	str	r3, [r7, #28]
          break;
 8003f60:	e005      	b.n	8003f6e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8003f62:	bf00      	nop
 8003f64:	e030      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003f66:	bf00      	nop
 8003f68:	e02e      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003f6a:	bf00      	nop
 8003f6c:	e02c      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003f6e:	bf00      	nop
        break;
 8003f70:	e02a      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8003f72:	4b09      	ldr	r3, [pc, #36]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f78:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003f7c:	613b      	str	r3, [r7, #16]
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d004      	beq.n	8003f8e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f8a:	d009      	beq.n	8003fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8003f8c:	e012      	b.n	8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003f8e:	f7fe ff0f 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8003f92:	61f8      	str	r0, [r7, #28]
          break;
 8003f94:	e00e      	b.n	8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8003f96:	bf00      	nop
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fac:	d101      	bne.n	8003fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8003fae:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8003fb0:	61fb      	str	r3, [r7, #28]
          break;
 8003fb2:	bf00      	nop
        break;
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003fb6:	bf00      	nop
 8003fb8:	e006      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003fba:	bf00      	nop
 8003fbc:	e004      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003fbe:	bf00      	nop
 8003fc0:	e002      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003fc2:	bf00      	nop
 8003fc4:	e000      	b.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003fc6:	bf00      	nop
    }
  }

  return(frequency);
 8003fc8:	69fb      	ldr	r3, [r7, #28]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3720      	adds	r7, #32
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	00f42400 	.word	0x00f42400

08003fdc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003fea:	4b75      	ldr	r3, [pc, #468]	@ (80041c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d018      	beq.n	8004028 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ff6:	4b72      	ldr	r3, [pc, #456]	@ (80041c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f003 0203 	and.w	r2, r3, #3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	429a      	cmp	r2, r3
 8004004:	d10d      	bne.n	8004022 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
       ||
 800400a:	2b00      	cmp	r3, #0
 800400c:	d009      	beq.n	8004022 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800400e:	4b6c      	ldr	r3, [pc, #432]	@ (80041c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	091b      	lsrs	r3, r3, #4
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
       ||
 800401e:	429a      	cmp	r2, r3
 8004020:	d047      	beq.n	80040b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	73fb      	strb	r3, [r7, #15]
 8004026:	e044      	b.n	80040b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b03      	cmp	r3, #3
 800402e:	d018      	beq.n	8004062 <RCCEx_PLLSAI1_Config+0x86>
 8004030:	2b03      	cmp	r3, #3
 8004032:	d825      	bhi.n	8004080 <RCCEx_PLLSAI1_Config+0xa4>
 8004034:	2b01      	cmp	r3, #1
 8004036:	d002      	beq.n	800403e <RCCEx_PLLSAI1_Config+0x62>
 8004038:	2b02      	cmp	r3, #2
 800403a:	d009      	beq.n	8004050 <RCCEx_PLLSAI1_Config+0x74>
 800403c:	e020      	b.n	8004080 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800403e:	4b60      	ldr	r3, [pc, #384]	@ (80041c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d11d      	bne.n	8004086 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800404e:	e01a      	b.n	8004086 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004050:	4b5b      	ldr	r3, [pc, #364]	@ (80041c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004058:	2b00      	cmp	r3, #0
 800405a:	d116      	bne.n	800408a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004060:	e013      	b.n	800408a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004062:	4b57      	ldr	r3, [pc, #348]	@ (80041c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10f      	bne.n	800408e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800406e:	4b54      	ldr	r3, [pc, #336]	@ (80041c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d109      	bne.n	800408e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800407e:	e006      	b.n	800408e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	73fb      	strb	r3, [r7, #15]
      break;
 8004084:	e004      	b.n	8004090 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004086:	bf00      	nop
 8004088:	e002      	b.n	8004090 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800408a:	bf00      	nop
 800408c:	e000      	b.n	8004090 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800408e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10d      	bne.n	80040b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004096:	4b4a      	ldr	r3, [pc, #296]	@ (80041c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6819      	ldr	r1, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	430b      	orrs	r3, r1
 80040ac:	4944      	ldr	r1, [pc, #272]	@ (80041c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d17d      	bne.n	80041b4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80040b8:	4b41      	ldr	r3, [pc, #260]	@ (80041c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a40      	ldr	r2, [pc, #256]	@ (80041c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80040c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040c4:	f7fd fad4 	bl	8001670 <HAL_GetTick>
 80040c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040ca:	e009      	b.n	80040e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040cc:	f7fd fad0 	bl	8001670 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d902      	bls.n	80040e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	73fb      	strb	r3, [r7, #15]
        break;
 80040de:	e005      	b.n	80040ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040e0:	4b37      	ldr	r3, [pc, #220]	@ (80041c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1ef      	bne.n	80040cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d160      	bne.n	80041b4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d111      	bne.n	800411c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040f8:	4b31      	ldr	r3, [pc, #196]	@ (80041c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004100:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6892      	ldr	r2, [r2, #8]
 8004108:	0211      	lsls	r1, r2, #8
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	68d2      	ldr	r2, [r2, #12]
 800410e:	0912      	lsrs	r2, r2, #4
 8004110:	0452      	lsls	r2, r2, #17
 8004112:	430a      	orrs	r2, r1
 8004114:	492a      	ldr	r1, [pc, #168]	@ (80041c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004116:	4313      	orrs	r3, r2
 8004118:	610b      	str	r3, [r1, #16]
 800411a:	e027      	b.n	800416c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d112      	bne.n	8004148 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004122:	4b27      	ldr	r3, [pc, #156]	@ (80041c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800412a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	6892      	ldr	r2, [r2, #8]
 8004132:	0211      	lsls	r1, r2, #8
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6912      	ldr	r2, [r2, #16]
 8004138:	0852      	lsrs	r2, r2, #1
 800413a:	3a01      	subs	r2, #1
 800413c:	0552      	lsls	r2, r2, #21
 800413e:	430a      	orrs	r2, r1
 8004140:	491f      	ldr	r1, [pc, #124]	@ (80041c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004142:	4313      	orrs	r3, r2
 8004144:	610b      	str	r3, [r1, #16]
 8004146:	e011      	b.n	800416c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004148:	4b1d      	ldr	r3, [pc, #116]	@ (80041c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004150:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6892      	ldr	r2, [r2, #8]
 8004158:	0211      	lsls	r1, r2, #8
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6952      	ldr	r2, [r2, #20]
 800415e:	0852      	lsrs	r2, r2, #1
 8004160:	3a01      	subs	r2, #1
 8004162:	0652      	lsls	r2, r2, #25
 8004164:	430a      	orrs	r2, r1
 8004166:	4916      	ldr	r1, [pc, #88]	@ (80041c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004168:	4313      	orrs	r3, r2
 800416a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800416c:	4b14      	ldr	r3, [pc, #80]	@ (80041c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a13      	ldr	r2, [pc, #76]	@ (80041c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004172:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004176:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004178:	f7fd fa7a 	bl	8001670 <HAL_GetTick>
 800417c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800417e:	e009      	b.n	8004194 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004180:	f7fd fa76 	bl	8001670 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d902      	bls.n	8004194 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	73fb      	strb	r3, [r7, #15]
          break;
 8004192:	e005      	b.n	80041a0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004194:	4b0a      	ldr	r3, [pc, #40]	@ (80041c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0ef      	beq.n	8004180 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d106      	bne.n	80041b4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80041a6:	4b06      	ldr	r3, [pc, #24]	@ (80041c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a8:	691a      	ldr	r2, [r3, #16]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	4904      	ldr	r1, [pc, #16]	@ (80041c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	40021000 	.word	0x40021000

080041c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041d2:	4b6a      	ldr	r3, [pc, #424]	@ (800437c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d018      	beq.n	8004210 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80041de:	4b67      	ldr	r3, [pc, #412]	@ (800437c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f003 0203 	and.w	r2, r3, #3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d10d      	bne.n	800420a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
       ||
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d009      	beq.n	800420a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80041f6:	4b61      	ldr	r3, [pc, #388]	@ (800437c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	091b      	lsrs	r3, r3, #4
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
       ||
 8004206:	429a      	cmp	r2, r3
 8004208:	d047      	beq.n	800429a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	73fb      	strb	r3, [r7, #15]
 800420e:	e044      	b.n	800429a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b03      	cmp	r3, #3
 8004216:	d018      	beq.n	800424a <RCCEx_PLLSAI2_Config+0x86>
 8004218:	2b03      	cmp	r3, #3
 800421a:	d825      	bhi.n	8004268 <RCCEx_PLLSAI2_Config+0xa4>
 800421c:	2b01      	cmp	r3, #1
 800421e:	d002      	beq.n	8004226 <RCCEx_PLLSAI2_Config+0x62>
 8004220:	2b02      	cmp	r3, #2
 8004222:	d009      	beq.n	8004238 <RCCEx_PLLSAI2_Config+0x74>
 8004224:	e020      	b.n	8004268 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004226:	4b55      	ldr	r3, [pc, #340]	@ (800437c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d11d      	bne.n	800426e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004236:	e01a      	b.n	800426e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004238:	4b50      	ldr	r3, [pc, #320]	@ (800437c <RCCEx_PLLSAI2_Config+0x1b8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004240:	2b00      	cmp	r3, #0
 8004242:	d116      	bne.n	8004272 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004248:	e013      	b.n	8004272 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800424a:	4b4c      	ldr	r3, [pc, #304]	@ (800437c <RCCEx_PLLSAI2_Config+0x1b8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10f      	bne.n	8004276 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004256:	4b49      	ldr	r3, [pc, #292]	@ (800437c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d109      	bne.n	8004276 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004266:	e006      	b.n	8004276 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	73fb      	strb	r3, [r7, #15]
      break;
 800426c:	e004      	b.n	8004278 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800426e:	bf00      	nop
 8004270:	e002      	b.n	8004278 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004272:	bf00      	nop
 8004274:	e000      	b.n	8004278 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004276:	bf00      	nop
    }

    if(status == HAL_OK)
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10d      	bne.n	800429a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800427e:	4b3f      	ldr	r3, [pc, #252]	@ (800437c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6819      	ldr	r1, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	3b01      	subs	r3, #1
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	430b      	orrs	r3, r1
 8004294:	4939      	ldr	r1, [pc, #228]	@ (800437c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004296:	4313      	orrs	r3, r2
 8004298:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800429a:	7bfb      	ldrb	r3, [r7, #15]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d167      	bne.n	8004370 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80042a0:	4b36      	ldr	r3, [pc, #216]	@ (800437c <RCCEx_PLLSAI2_Config+0x1b8>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a35      	ldr	r2, [pc, #212]	@ (800437c <RCCEx_PLLSAI2_Config+0x1b8>)
 80042a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ac:	f7fd f9e0 	bl	8001670 <HAL_GetTick>
 80042b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042b2:	e009      	b.n	80042c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042b4:	f7fd f9dc 	bl	8001670 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d902      	bls.n	80042c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	73fb      	strb	r3, [r7, #15]
        break;
 80042c6:	e005      	b.n	80042d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042c8:	4b2c      	ldr	r3, [pc, #176]	@ (800437c <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1ef      	bne.n	80042b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d14a      	bne.n	8004370 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d111      	bne.n	8004304 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042e0:	4b26      	ldr	r3, [pc, #152]	@ (800437c <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80042e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6892      	ldr	r2, [r2, #8]
 80042f0:	0211      	lsls	r1, r2, #8
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	68d2      	ldr	r2, [r2, #12]
 80042f6:	0912      	lsrs	r2, r2, #4
 80042f8:	0452      	lsls	r2, r2, #17
 80042fa:	430a      	orrs	r2, r1
 80042fc:	491f      	ldr	r1, [pc, #124]	@ (800437c <RCCEx_PLLSAI2_Config+0x1b8>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	614b      	str	r3, [r1, #20]
 8004302:	e011      	b.n	8004328 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004304:	4b1d      	ldr	r3, [pc, #116]	@ (800437c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800430c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6892      	ldr	r2, [r2, #8]
 8004314:	0211      	lsls	r1, r2, #8
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6912      	ldr	r2, [r2, #16]
 800431a:	0852      	lsrs	r2, r2, #1
 800431c:	3a01      	subs	r2, #1
 800431e:	0652      	lsls	r2, r2, #25
 8004320:	430a      	orrs	r2, r1
 8004322:	4916      	ldr	r1, [pc, #88]	@ (800437c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004324:	4313      	orrs	r3, r2
 8004326:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004328:	4b14      	ldr	r3, [pc, #80]	@ (800437c <RCCEx_PLLSAI2_Config+0x1b8>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a13      	ldr	r2, [pc, #76]	@ (800437c <RCCEx_PLLSAI2_Config+0x1b8>)
 800432e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004332:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004334:	f7fd f99c 	bl	8001670 <HAL_GetTick>
 8004338:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800433a:	e009      	b.n	8004350 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800433c:	f7fd f998 	bl	8001670 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d902      	bls.n	8004350 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	73fb      	strb	r3, [r7, #15]
          break;
 800434e:	e005      	b.n	800435c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004350:	4b0a      	ldr	r3, [pc, #40]	@ (800437c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0ef      	beq.n	800433c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004362:	4b06      	ldr	r3, [pc, #24]	@ (800437c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004364:	695a      	ldr	r2, [r3, #20]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	4904      	ldr	r1, [pc, #16]	@ (800437c <RCCEx_PLLSAI2_Config+0x1b8>)
 800436c:	4313      	orrs	r3, r2
 800436e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004370:	7bfb      	ldrb	r3, [r7, #15]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40021000 	.word	0x40021000

08004380 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004380:	b480      	push	{r7}
 8004382:	b089      	sub	sp, #36	@ 0x24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800438e:	2300      	movs	r3, #0
 8004390:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800439c:	d10c      	bne.n	80043b8 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800439e:	4b6e      	ldr	r3, [pc, #440]	@ (8004558 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80043a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80043a8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80043b0:	d112      	bne.n	80043d8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80043b2:	4b6a      	ldr	r3, [pc, #424]	@ (800455c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80043b4:	61fb      	str	r3, [r7, #28]
 80043b6:	e00f      	b.n	80043d8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043be:	d10b      	bne.n	80043d8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80043c0:	4b65      	ldr	r3, [pc, #404]	@ (8004558 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80043c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c6:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80043ca:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80043d2:	d101      	bne.n	80043d8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80043d4:	4b61      	ldr	r3, [pc, #388]	@ (800455c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80043d6:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f040 80b4 	bne.w	8004548 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80043ea:	d003      	beq.n	80043f4 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043f2:	d135      	bne.n	8004460 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80043f4:	4b58      	ldr	r3, [pc, #352]	@ (8004558 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004400:	f040 80a1 	bne.w	8004546 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8004404:	4b54      	ldr	r3, [pc, #336]	@ (8004558 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 809a 	beq.w	8004546 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004412:	4b51      	ldr	r3, [pc, #324]	@ (8004558 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	091b      	lsrs	r3, r3, #4
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	3301      	adds	r3, #1
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	fbb2 f3f3 	udiv	r3, r2, r3
 8004424:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004426:	4b4c      	ldr	r3, [pc, #304]	@ (8004558 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	0a1b      	lsrs	r3, r3, #8
 800442c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004430:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10a      	bne.n	800444e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004438:	4b47      	ldr	r3, [pc, #284]	@ (8004558 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8004444:	2311      	movs	r3, #17
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	e001      	b.n	800444e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 800444a:	2307      	movs	r3, #7
 800444c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	fb03 f202 	mul.w	r2, r3, r2
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	fbb2 f3f3 	udiv	r3, r2, r3
 800445c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800445e:	e072      	b.n	8004546 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d133      	bne.n	80044ce <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004466:	4b3c      	ldr	r3, [pc, #240]	@ (8004558 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800446e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004472:	d169      	bne.n	8004548 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004474:	4b38      	ldr	r3, [pc, #224]	@ (8004558 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d063      	beq.n	8004548 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004480:	4b35      	ldr	r3, [pc, #212]	@ (8004558 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	091b      	lsrs	r3, r3, #4
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	3301      	adds	r3, #1
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004492:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004494:	4b30      	ldr	r3, [pc, #192]	@ (8004558 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	0a1b      	lsrs	r3, r3, #8
 800449a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800449e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10a      	bne.n	80044bc <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80044a6:	4b2c      	ldr	r3, [pc, #176]	@ (8004558 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 80044b2:	2311      	movs	r3, #17
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	e001      	b.n	80044bc <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 80044b8:	2307      	movs	r3, #7
 80044ba:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	fb03 f202 	mul.w	r2, r3, r2
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ca:	61fb      	str	r3, [r7, #28]
 80044cc:	e03c      	b.n	8004548 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044d4:	d003      	beq.n	80044de <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044dc:	d134      	bne.n	8004548 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80044de:	4b1e      	ldr	r3, [pc, #120]	@ (8004558 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044ea:	d12d      	bne.n	8004548 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80044ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004558 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d027      	beq.n	8004548 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80044f8:	4b17      	ldr	r3, [pc, #92]	@ (8004558 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	091b      	lsrs	r3, r3, #4
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	3301      	adds	r3, #1
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	fbb2 f3f3 	udiv	r3, r2, r3
 800450a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800450c:	4b12      	ldr	r3, [pc, #72]	@ (8004558 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	0a1b      	lsrs	r3, r3, #8
 8004512:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004516:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10a      	bne.n	8004534 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800451e:	4b0e      	ldr	r3, [pc, #56]	@ (8004558 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 800452a:	2311      	movs	r3, #17
 800452c:	617b      	str	r3, [r7, #20]
 800452e:	e001      	b.n	8004534 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8004530:	2307      	movs	r3, #7
 8004532:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	fb03 f202 	mul.w	r2, r3, r2
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004542:	61fb      	str	r3, [r7, #28]
 8004544:	e000      	b.n	8004548 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004546:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004548:	69fb      	ldr	r3, [r7, #28]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3724      	adds	r7, #36	@ 0x24
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	40021000 	.word	0x40021000
 800455c:	001fff68 	.word	0x001fff68

08004560 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2b02      	cmp	r3, #2
 8004572:	d904      	bls.n	800457e <HAL_SAI_InitProtocol+0x1e>
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	3b03      	subs	r3, #3
 8004578:	2b01      	cmp	r3, #1
 800457a:	d812      	bhi.n	80045a2 <HAL_SAI_InitProtocol+0x42>
 800457c:	e008      	b.n	8004590 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	68b9      	ldr	r1, [r7, #8]
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 fba3 	bl	8004cd0 <SAI_InitI2S>
 800458a:	4603      	mov	r3, r0
 800458c:	75fb      	strb	r3, [r7, #23]
      break;
 800458e:	e00b      	b.n	80045a8 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	68b9      	ldr	r1, [r7, #8]
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 fc4c 	bl	8004e34 <SAI_InitPCM>
 800459c:	4603      	mov	r3, r0
 800459e:	75fb      	strb	r3, [r7, #23]
      break;
 80045a0:	e002      	b.n	80045a8 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	75fb      	strb	r3, [r7, #23]
      break;
 80045a6:	bf00      	nop
  }

  if (status == HAL_OK)
 80045a8:	7dfb      	ldrb	r3, [r7, #23]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d104      	bne.n	80045b8 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 f808 	bl	80045c4 <HAL_SAI_Init>
 80045b4:	4603      	mov	r3, r0
 80045b6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80045b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
	...

080045c4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e155      	b.n	8004882 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fc fc2c 	bl	8000e48 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fca1 	bl	8004f38 <SAI_Disable>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e140      	b.n	8004882 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	2b02      	cmp	r3, #2
 800460e:	d00c      	beq.n	800462a <HAL_SAI_Init+0x66>
 8004610:	2b02      	cmp	r3, #2
 8004612:	d80d      	bhi.n	8004630 <HAL_SAI_Init+0x6c>
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <HAL_SAI_Init+0x5a>
 8004618:	2b01      	cmp	r3, #1
 800461a:	d003      	beq.n	8004624 <HAL_SAI_Init+0x60>
 800461c:	e008      	b.n	8004630 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800461e:	2300      	movs	r3, #0
 8004620:	61fb      	str	r3, [r7, #28]
      break;
 8004622:	e008      	b.n	8004636 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004624:	2310      	movs	r3, #16
 8004626:	61fb      	str	r3, [r7, #28]
      break;
 8004628:	e005      	b.n	8004636 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800462a:	2320      	movs	r3, #32
 800462c:	61fb      	str	r3, [r7, #28]
      break;
 800462e:	e002      	b.n	8004636 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8004630:	2300      	movs	r3, #0
 8004632:	61fb      	str	r3, [r7, #28]
      break;
 8004634:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	2b03      	cmp	r3, #3
 800463c:	d81d      	bhi.n	800467a <HAL_SAI_Init+0xb6>
 800463e:	a201      	add	r2, pc, #4	@ (adr r2, 8004644 <HAL_SAI_Init+0x80>)
 8004640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004644:	08004655 	.word	0x08004655
 8004648:	0800465b 	.word	0x0800465b
 800464c:	08004663 	.word	0x08004663
 8004650:	0800466b 	.word	0x0800466b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004654:	2300      	movs	r3, #0
 8004656:	617b      	str	r3, [r7, #20]
      break;
 8004658:	e012      	b.n	8004680 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800465a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800465e:	617b      	str	r3, [r7, #20]
      break;
 8004660:	e00e      	b.n	8004680 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004662:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004666:	617b      	str	r3, [r7, #20]
      break;
 8004668:	e00a      	b.n	8004680 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800466a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800466e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	f043 0301 	orr.w	r3, r3, #1
 8004676:	61fb      	str	r3, [r7, #28]
      break;
 8004678:	e002      	b.n	8004680 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]
      break;
 800467e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a81      	ldr	r2, [pc, #516]	@ (800488c <HAL_SAI_Init+0x2c8>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d004      	beq.n	8004694 <HAL_SAI_Init+0xd0>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a80      	ldr	r2, [pc, #512]	@ (8004890 <HAL_SAI_Init+0x2cc>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d103      	bne.n	800469c <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8004694:	4a7f      	ldr	r2, [pc, #508]	@ (8004894 <HAL_SAI_Init+0x2d0>)
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	e002      	b.n	80046a2 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800469c:	4a7e      	ldr	r2, [pc, #504]	@ (8004898 <HAL_SAI_Init+0x2d4>)
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d041      	beq.n	800472e <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a77      	ldr	r2, [pc, #476]	@ (800488c <HAL_SAI_Init+0x2c8>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d004      	beq.n	80046be <HAL_SAI_Init+0xfa>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a75      	ldr	r2, [pc, #468]	@ (8004890 <HAL_SAI_Init+0x2cc>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d105      	bne.n	80046ca <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80046be:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80046c2:	f7fe ff1d 	bl	8003500 <HAL_RCCEx_GetPeriphCLKFreq>
 80046c6:	6138      	str	r0, [r7, #16]
 80046c8:	e004      	b.n	80046d4 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80046ca:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80046ce:	f7fe ff17 	bl	8003500 <HAL_RCCEx_GetPeriphCLKFreq>
 80046d2:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	4613      	mov	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	461a      	mov	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	025b      	lsls	r3, r3, #9
 80046e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ea:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4a6b      	ldr	r2, [pc, #428]	@ (800489c <HAL_SAI_Init+0x2d8>)
 80046f0:	fba2 2303 	umull	r2, r3, r2, r3
 80046f4:	08da      	lsrs	r2, r3, #3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80046fa:	68f9      	ldr	r1, [r7, #12]
 80046fc:	4b67      	ldr	r3, [pc, #412]	@ (800489c <HAL_SAI_Init+0x2d8>)
 80046fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004702:	08da      	lsrs	r2, r3, #3
 8004704:	4613      	mov	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	1aca      	subs	r2, r1, r3
 800470e:	2a08      	cmp	r2, #8
 8004710:	d904      	bls.n	800471c <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004720:	2b04      	cmp	r3, #4
 8004722:	d104      	bne.n	800472e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	085a      	lsrs	r2, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_SAI_Init+0x17a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d109      	bne.n	8004752 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004742:	2b01      	cmp	r3, #1
 8004744:	d101      	bne.n	800474a <HAL_SAI_Init+0x186>
 8004746:	2300      	movs	r3, #0
 8004748:	e001      	b.n	800474e <HAL_SAI_Init+0x18a>
 800474a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800474e:	61bb      	str	r3, [r7, #24]
 8004750:	e008      	b.n	8004764 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004756:	2b01      	cmp	r3, #1
 8004758:	d102      	bne.n	8004760 <HAL_SAI_Init+0x19c>
 800475a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800475e:	e000      	b.n	8004762 <HAL_SAI_Init+0x19e>
 8004760:	2300      	movs	r3, #0
 8004762:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6819      	ldr	r1, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	4b4c      	ldr	r3, [pc, #304]	@ (80048a0 <HAL_SAI_Init+0x2dc>)
 8004770:	400b      	ands	r3, r1
 8004772:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6819      	ldr	r1, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004782:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004788:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800478e:	431a      	orrs	r2, r3
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 800479c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80047a8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	051b      	lsls	r3, r3, #20
 80047b0:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6812      	ldr	r2, [r2, #0]
 80047c4:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80047c8:	f023 030f 	bic.w	r3, r3, #15
 80047cc:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6859      	ldr	r1, [r3, #4]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	699a      	ldr	r2, [r3, #24]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047dc:	431a      	orrs	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6899      	ldr	r1, [r3, #8]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4b2b      	ldr	r3, [pc, #172]	@ (80048a4 <HAL_SAI_Init+0x2e0>)
 80047f8:	400b      	ands	r3, r1
 80047fa:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6899      	ldr	r1, [r3, #8]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004806:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800480c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8004812:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8004818:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481e:	3b01      	subs	r3, #1
 8004820:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004822:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68d9      	ldr	r1, [r3, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800483a:	400b      	ands	r3, r1
 800483c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68d9      	ldr	r1, [r3, #12]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800484c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004852:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004854:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800485a:	3b01      	subs	r3, #1
 800485c:	021b      	lsls	r3, r3, #8
 800485e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3720      	adds	r7, #32
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	40015404 	.word	0x40015404
 8004890:	40015424 	.word	0x40015424
 8004894:	40015400 	.word	0x40015400
 8004898:	40015800 	.word	0x40015800
 800489c:	cccccccd 	.word	0xcccccccd
 80048a0:	ff05c010 	.word	0xff05c010
 80048a4:	fff88000 	.word	0xfff88000

080048a8 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d101      	bne.n	80048c2 <HAL_SAI_Abort+0x1a>
 80048be:	2302      	movs	r3, #2
 80048c0:	e053      	b.n	800496a <HAL_SAI_Abort+0xc2>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fb34 	bl	8004f38 <SAI_Disable>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048e8:	d125      	bne.n	8004936 <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80048f8:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b12      	cmp	r3, #18
 8004904:	d108      	bne.n	8004918 <HAL_SAI_Abort+0x70>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800490a:	2b00      	cmp	r3, #0
 800490c:	d004      	beq.n	8004918 <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004912:	4618      	mov	r0, r3
 8004914:	f7fd f852 	bl	80019bc <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b22      	cmp	r3, #34	@ 0x22
 8004922:	d108      	bne.n	8004936 <HAL_SAI_Abort+0x8e>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004928:	2b00      	cmp	r3, #0
 800492a:	d004      	beq.n	8004936 <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004930:	4618      	mov	r0, r3
 8004932:	f7fd f843 	bl	80019bc <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2200      	movs	r2, #0
 800493c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f04f 32ff 	mov.w	r2, #4294967295
 8004946:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0208 	orr.w	r2, r2, #8
 8004956:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8004968:	7bfb      	ldrb	r3, [r7, #15]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
	...

08004974 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 8192 	beq.w	8004cae <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d009      	beq.n	80049c0 <HAL_SAI_IRQHandler+0x4c>
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d004      	beq.n	80049c0 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	4798      	blx	r3
 80049be:	e176      	b.n	8004cae <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d01e      	beq.n	8004a08 <HAL_SAI_IRQHandler+0x94>
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d019      	beq.n	8004a08 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2201      	movs	r2, #1
 80049da:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b22      	cmp	r3, #34	@ 0x22
 80049e6:	d101      	bne.n	80049ec <HAL_SAI_IRQHandler+0x78>
 80049e8:	2301      	movs	r3, #1
 80049ea:	e000      	b.n	80049ee <HAL_SAI_IRQHandler+0x7a>
 80049ec:	2302      	movs	r3, #2
 80049ee:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	431a      	orrs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f95b 	bl	8004cbc <HAL_SAI_ErrorCallback>
 8004a06:	e152      	b.n	8004cae <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d011      	beq.n	8004a36 <HAL_SAI_IRQHandler+0xc2>
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00c      	beq.n	8004a36 <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2202      	movs	r2, #2
 8004a22:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 8140 	beq.w	8004cae <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a32:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 8004a34:	e13b      	b.n	8004cae <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f003 0320 	and.w	r3, r3, #32
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d055      	beq.n	8004aec <HAL_SAI_IRQHandler+0x178>
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f003 0320 	and.w	r3, r3, #32
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d050      	beq.n	8004aec <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a58:	f043 0204 	orr.w	r2, r3, #4
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d038      	beq.n	8004ade <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d016      	beq.n	8004aa2 <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a78:	4a8f      	ldr	r2, [pc, #572]	@ (8004cb8 <HAL_SAI_IRQHandler+0x344>)
 8004a7a:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fc ffd9 	bl	8001a38 <HAL_DMA_Abort_IT>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a92:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f90d 	bl	8004cbc <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 80fc 	beq.w	8004ca4 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab0:	4a81      	ldr	r2, [pc, #516]	@ (8004cb8 <HAL_SAI_IRQHandler+0x344>)
 8004ab2:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fc ffbd 	bl	8001a38 <HAL_DMA_Abort_IT>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 80ef 	beq.w	8004ca4 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004acc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f8f0 	bl	8004cbc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004adc:	e0e2      	b.n	8004ca4 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff fee2 	bl	80048a8 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f8e9 	bl	8004cbc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004aea:	e0db      	b.n	8004ca4 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d055      	beq.n	8004ba2 <HAL_SAI_IRQHandler+0x22e>
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d050      	beq.n	8004ba2 <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2240      	movs	r2, #64	@ 0x40
 8004b06:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b0e:	f043 0208 	orr.w	r2, r3, #8
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d038      	beq.n	8004b94 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d016      	beq.n	8004b58 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b2e:	4a62      	ldr	r2, [pc, #392]	@ (8004cb8 <HAL_SAI_IRQHandler+0x344>)
 8004b30:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fc ff7e 	bl	8001a38 <HAL_DMA_Abort_IT>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00a      	beq.n	8004b58 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b48:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f8b2 	bl	8004cbc <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 80a3 	beq.w	8004ca8 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b66:	4a54      	ldr	r2, [pc, #336]	@ (8004cb8 <HAL_SAI_IRQHandler+0x344>)
 8004b68:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fc ff62 	bl	8001a38 <HAL_DMA_Abort_IT>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f000 8096 	beq.w	8004ca8 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b82:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f895 	bl	8004cbc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004b92:	e089      	b.n	8004ca8 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7ff fe87 	bl	80048a8 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f88e 	bl	8004cbc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004ba0:	e082      	b.n	8004ca8 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d061      	beq.n	8004c70 <HAL_SAI_IRQHandler+0x2fc>
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f003 0304 	and.w	r3, r3, #4
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d05c      	beq.n	8004c70 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2204      	movs	r2, #4
 8004bbc:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bc4:	f043 0220 	orr.w	r2, r3, #32
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d036      	beq.n	8004c46 <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d016      	beq.n	8004c0e <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004be4:	4a34      	ldr	r2, [pc, #208]	@ (8004cb8 <HAL_SAI_IRQHandler+0x344>)
 8004be6:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fc ff23 	bl	8001a38 <HAL_DMA_Abort_IT>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00a      	beq.n	8004c0e <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bfe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f857 	bl	8004cbc <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d04a      	beq.n	8004cac <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c1a:	4a27      	ldr	r2, [pc, #156]	@ (8004cb8 <HAL_SAI_IRQHandler+0x344>)
 8004c1c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fc ff08 	bl	8001a38 <HAL_DMA_Abort_IT>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d03e      	beq.n	8004cac <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c34:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f83c 	bl	8004cbc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004c44:	e032      	b.n	8004cac <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f04f 32ff 	mov.w	r2, #4294967295
 8004c56:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f827 	bl	8004cbc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004c6e:	e01d      	b.n	8004cac <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d019      	beq.n	8004cae <HAL_SAI_IRQHandler+0x33a>
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f003 0310 	and.w	r3, r3, #16
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d014      	beq.n	8004cae <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2210      	movs	r2, #16
 8004c8a:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c92:	f043 0210 	orr.w	r2, r3, #16
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f80d 	bl	8004cbc <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8004ca2:	e004      	b.n	8004cae <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004ca4:	bf00      	nop
 8004ca6:	e002      	b.n	8004cae <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004ca8:	bf00      	nop
 8004caa:	e000      	b.n	8004cae <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004cac:	bf00      	nop
}
 8004cae:	bf00      	nop
 8004cb0:	3718      	adds	r7, #24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	08004fad 	.word	0x08004fad

08004cbc <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b087      	sub	sp, #28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
 8004cdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <SAI_InitI2S+0x2e>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d103      	bne.n	8004d06 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004d04:	e002      	b.n	8004d0c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004d12:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d1a:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e077      	b.n	8004e26 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d107      	bne.n	8004d4c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004d48:	651a      	str	r2, [r3, #80]	@ 0x50
 8004d4a:	e006      	b.n	8004d5a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004d52:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b03      	cmp	r3, #3
 8004d5e:	d84f      	bhi.n	8004e00 <SAI_InitI2S+0x130>
 8004d60:	a201      	add	r2, pc, #4	@ (adr r2, 8004d68 <SAI_InitI2S+0x98>)
 8004d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d66:	bf00      	nop
 8004d68:	08004d79 	.word	0x08004d79
 8004d6c:	08004d9b 	.word	0x08004d9b
 8004d70:	08004dbd 	.word	0x08004dbd
 8004d74:	08004ddf 	.word	0x08004ddf
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2280      	movs	r2, #128	@ 0x80
 8004d7c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	085b      	lsrs	r3, r3, #1
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	085b      	lsrs	r3, r3, #1
 8004d8c:	011a      	lsls	r2, r3, #4
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2240      	movs	r2, #64	@ 0x40
 8004d96:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004d98:	e035      	b.n	8004e06 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2280      	movs	r2, #128	@ 0x80
 8004d9e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	085b      	lsrs	r3, r3, #1
 8004da4:	019a      	lsls	r2, r3, #6
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	085b      	lsrs	r3, r3, #1
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2280      	movs	r2, #128	@ 0x80
 8004db8:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004dba:	e024      	b.n	8004e06 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	22c0      	movs	r2, #192	@ 0xc0
 8004dc0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	085b      	lsrs	r3, r3, #1
 8004dc6:	019a      	lsls	r2, r3, #6
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	085b      	lsrs	r3, r3, #1
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2280      	movs	r2, #128	@ 0x80
 8004dda:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004ddc:	e013      	b.n	8004e06 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	22e0      	movs	r2, #224	@ 0xe0
 8004de2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	085b      	lsrs	r3, r3, #1
 8004de8:	019a      	lsls	r2, r3, #6
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	085b      	lsrs	r3, r3, #1
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2280      	movs	r2, #128	@ 0x80
 8004dfc:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004dfe:	e002      	b.n	8004e06 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	75fb      	strb	r3, [r7, #23]
      break;
 8004e04:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d10b      	bne.n	8004e24 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d102      	bne.n	8004e18 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2210      	movs	r2, #16
 8004e16:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d102      	bne.n	8004e24 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2208      	movs	r2, #8
 8004e22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 8004e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	371c      	adds	r7, #28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop

08004e34 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e42:	2300      	movs	r3, #0
 8004e44:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <SAI_InitPCM+0x2e>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d103      	bne.n	8004e6a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2201      	movs	r2, #1
 8004e66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004e68:	e002      	b.n	8004e70 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004e7c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004e84:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e98:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d103      	bne.n	8004ea8 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	645a      	str	r2, [r3, #68]	@ 0x44
 8004ea6:	e002      	b.n	8004eae <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	220d      	movs	r2, #13
 8004eac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d837      	bhi.n	8004f24 <SAI_InitPCM+0xf0>
 8004eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8004ebc <SAI_InitPCM+0x88>)
 8004eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eba:	bf00      	nop
 8004ebc:	08004ecd 	.word	0x08004ecd
 8004ec0:	08004ee3 	.word	0x08004ee3
 8004ec4:	08004ef9 	.word	0x08004ef9
 8004ec8:	08004f0f 	.word	0x08004f0f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2280      	movs	r2, #128	@ 0x80
 8004ed0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	011a      	lsls	r2, r3, #4
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2240      	movs	r2, #64	@ 0x40
 8004ede:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004ee0:	e023      	b.n	8004f2a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2280      	movs	r2, #128	@ 0x80
 8004ee6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2280      	movs	r2, #128	@ 0x80
 8004ef4:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004ef6:	e018      	b.n	8004f2a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	22c0      	movs	r2, #192	@ 0xc0
 8004efc:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2280      	movs	r2, #128	@ 0x80
 8004f0a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004f0c:	e00d      	b.n	8004f2a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	22e0      	movs	r2, #224	@ 0xe0
 8004f12:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2280      	movs	r2, #128	@ 0x80
 8004f20:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8004f22:	e002      	b.n	8004f2a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	75fb      	strb	r3, [r7, #23]
      break;
 8004f28:	bf00      	nop
  }

  return status;
 8004f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	371c      	adds	r7, #28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004f40:	4b18      	ldr	r3, [pc, #96]	@ (8004fa4 <SAI_Disable+0x6c>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a18      	ldr	r2, [pc, #96]	@ (8004fa8 <SAI_Disable+0x70>)
 8004f46:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4a:	0b1b      	lsrs	r3, r3, #12
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004f50:	2300      	movs	r3, #0
 8004f52:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004f62:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10a      	bne.n	8004f80 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f70:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	72fb      	strb	r3, [r7, #11]
      break;
 8004f7e:	e009      	b.n	8004f94 <SAI_Disable+0x5c>
    }
    count--;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1e7      	bne.n	8004f64 <SAI_Disable+0x2c>

  return status;
 8004f94:	7afb      	ldrb	r3, [r7, #11]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	20000000 	.word	0x20000000
 8004fa8:	95cbec1b 	.word	0x95cbec1b

08004fac <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004fc8:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8004fda:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	d00a      	beq.n	8004ffc <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f7ff ffa6 	bl	8004f38 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0208 	orr.w	r2, r2, #8
 8004ffa:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f7ff fe55 	bl	8004cbc <HAL_SAI_ErrorCallback>
#endif
}
 8005012:	bf00      	nop
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b084      	sub	sp, #16
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e095      	b.n	8005158 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005030:	2b00      	cmp	r3, #0
 8005032:	d108      	bne.n	8005046 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800503c:	d009      	beq.n	8005052 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	61da      	str	r2, [r3, #28]
 8005044:	e005      	b.n	8005052 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d106      	bne.n	8005072 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7fc f80d 	bl	800108c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2202      	movs	r2, #2
 8005076:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005088:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005092:	d902      	bls.n	800509a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005094:	2300      	movs	r3, #0
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	e002      	b.n	80050a0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800509a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800509e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80050a8:	d007      	beq.n	80050ba <HAL_SPI_Init+0xa0>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80050b2:	d002      	beq.n	80050ba <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	431a      	orrs	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050e8:	431a      	orrs	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050f2:	431a      	orrs	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050fc:	ea42 0103 	orr.w	r1, r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005104:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	430a      	orrs	r2, r1
 800510e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	0c1b      	lsrs	r3, r3, #16
 8005116:	f003 0204 	and.w	r2, r3, #4
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511e:	f003 0310 	and.w	r3, r3, #16
 8005122:	431a      	orrs	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005128:	f003 0308 	and.w	r3, r3, #8
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005136:	ea42 0103 	orr.w	r1, r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b088      	sub	sp, #32
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	603b      	str	r3, [r7, #0]
 800516c:	4613      	mov	r3, r2
 800516e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005170:	f7fc fa7e 	bl	8001670 <HAL_GetTick>
 8005174:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005176:	88fb      	ldrh	r3, [r7, #6]
 8005178:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b01      	cmp	r3, #1
 8005184:	d001      	beq.n	800518a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005186:	2302      	movs	r3, #2
 8005188:	e15c      	b.n	8005444 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d002      	beq.n	8005196 <HAL_SPI_Transmit+0x36>
 8005190:	88fb      	ldrh	r3, [r7, #6]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e154      	b.n	8005444 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d101      	bne.n	80051a8 <HAL_SPI_Transmit+0x48>
 80051a4:	2302      	movs	r3, #2
 80051a6:	e14d      	b.n	8005444 <HAL_SPI_Transmit+0x2e4>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2203      	movs	r2, #3
 80051b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	88fa      	ldrh	r2, [r7, #6]
 80051c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	88fa      	ldrh	r2, [r7, #6]
 80051ce:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051fa:	d10f      	bne.n	800521c <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800520a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800521a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005226:	2b40      	cmp	r3, #64	@ 0x40
 8005228:	d007      	beq.n	800523a <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005238:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005242:	d952      	bls.n	80052ea <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <HAL_SPI_Transmit+0xf2>
 800524c:	8b7b      	ldrh	r3, [r7, #26]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d145      	bne.n	80052de <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005256:	881a      	ldrh	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005262:	1c9a      	adds	r2, r3, #2
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800526c:	b29b      	uxth	r3, r3
 800526e:	3b01      	subs	r3, #1
 8005270:	b29a      	uxth	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005276:	e032      	b.n	80052de <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b02      	cmp	r3, #2
 8005284:	d112      	bne.n	80052ac <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800528a:	881a      	ldrh	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005296:	1c9a      	adds	r2, r3, #2
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80052aa:	e018      	b.n	80052de <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052ac:	f7fc f9e0 	bl	8001670 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d803      	bhi.n	80052c4 <HAL_SPI_Transmit+0x164>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c2:	d102      	bne.n	80052ca <HAL_SPI_Transmit+0x16a>
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d109      	bne.n	80052de <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e0b2      	b.n	8005444 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1c7      	bne.n	8005278 <HAL_SPI_Transmit+0x118>
 80052e8:	e083      	b.n	80053f2 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d002      	beq.n	80052f8 <HAL_SPI_Transmit+0x198>
 80052f2:	8b7b      	ldrh	r3, [r7, #26]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d177      	bne.n	80053e8 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d912      	bls.n	8005328 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005306:	881a      	ldrh	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005312:	1c9a      	adds	r2, r3, #2
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800531c:	b29b      	uxth	r3, r3
 800531e:	3b02      	subs	r3, #2
 8005320:	b29a      	uxth	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005326:	e05f      	b.n	80053e8 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	330c      	adds	r3, #12
 8005332:	7812      	ldrb	r2, [r2, #0]
 8005334:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800533a:	1c5a      	adds	r2, r3, #1
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005344:	b29b      	uxth	r3, r3
 8005346:	3b01      	subs	r3, #1
 8005348:	b29a      	uxth	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800534e:	e04b      	b.n	80053e8 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b02      	cmp	r3, #2
 800535c:	d12b      	bne.n	80053b6 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005362:	b29b      	uxth	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	d912      	bls.n	800538e <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800536c:	881a      	ldrh	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005378:	1c9a      	adds	r2, r3, #2
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005382:	b29b      	uxth	r3, r3
 8005384:	3b02      	subs	r3, #2
 8005386:	b29a      	uxth	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800538c:	e02c      	b.n	80053e8 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	330c      	adds	r3, #12
 8005398:	7812      	ldrb	r2, [r2, #0]
 800539a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80053b4:	e018      	b.n	80053e8 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053b6:	f7fc f95b 	bl	8001670 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d803      	bhi.n	80053ce <HAL_SPI_Transmit+0x26e>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053cc:	d102      	bne.n	80053d4 <HAL_SPI_Transmit+0x274>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d109      	bne.n	80053e8 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e02d      	b.n	8005444 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1ae      	bne.n	8005350 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053f2:	69fa      	ldr	r2, [r7, #28]
 80053f4:	6839      	ldr	r1, [r7, #0]
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f000 f946 	bl	8005688 <SPI_EndRxTxTransaction>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d002      	beq.n	8005408 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2220      	movs	r2, #32
 8005406:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10a      	bne.n	8005426 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005410:	2300      	movs	r3, #0
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	617b      	str	r3, [r7, #20]
 8005424:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e000      	b.n	8005444 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005442:	2300      	movs	r3, #0
  }
}
 8005444:	4618      	mov	r0, r3
 8005446:	3720      	adds	r7, #32
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	603b      	str	r3, [r7, #0]
 8005458:	4613      	mov	r3, r2
 800545a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800545c:	f7fc f908 	bl	8001670 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005464:	1a9b      	subs	r3, r3, r2
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	4413      	add	r3, r2
 800546a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800546c:	f7fc f900 	bl	8001670 <HAL_GetTick>
 8005470:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005472:	4b39      	ldr	r3, [pc, #228]	@ (8005558 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	015b      	lsls	r3, r3, #5
 8005478:	0d1b      	lsrs	r3, r3, #20
 800547a:	69fa      	ldr	r2, [r7, #28]
 800547c:	fb02 f303 	mul.w	r3, r2, r3
 8005480:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005482:	e054      	b.n	800552e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548a:	d050      	beq.n	800552e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800548c:	f7fc f8f0 	bl	8001670 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	69fa      	ldr	r2, [r7, #28]
 8005498:	429a      	cmp	r2, r3
 800549a:	d902      	bls.n	80054a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d13d      	bne.n	800551e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80054b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054ba:	d111      	bne.n	80054e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054c4:	d004      	beq.n	80054d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ce:	d107      	bne.n	80054e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054e8:	d10f      	bne.n	800550a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005508:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e017      	b.n	800554e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	3b01      	subs	r3, #1
 800552c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	4013      	ands	r3, r2
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	429a      	cmp	r2, r3
 800553c:	bf0c      	ite	eq
 800553e:	2301      	moveq	r3, #1
 8005540:	2300      	movne	r3, #0
 8005542:	b2db      	uxtb	r3, r3
 8005544:	461a      	mov	r2, r3
 8005546:	79fb      	ldrb	r3, [r7, #7]
 8005548:	429a      	cmp	r2, r3
 800554a:	d19b      	bne.n	8005484 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3720      	adds	r7, #32
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	20000000 	.word	0x20000000

0800555c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b08a      	sub	sp, #40	@ 0x28
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
 8005568:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800556a:	2300      	movs	r3, #0
 800556c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800556e:	f7fc f87f 	bl	8001670 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005576:	1a9b      	subs	r3, r3, r2
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	4413      	add	r3, r2
 800557c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800557e:	f7fc f877 	bl	8001670 <HAL_GetTick>
 8005582:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	330c      	adds	r3, #12
 800558a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800558c:	4b3d      	ldr	r3, [pc, #244]	@ (8005684 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	4613      	mov	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	00da      	lsls	r2, r3, #3
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	0d1b      	lsrs	r3, r3, #20
 800559c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800559e:	fb02 f303 	mul.w	r3, r2, r3
 80055a2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80055a4:	e060      	b.n	8005668 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80055ac:	d107      	bne.n	80055be <SPI_WaitFifoStateUntilTimeout+0x62>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d104      	bne.n	80055be <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80055bc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c4:	d050      	beq.n	8005668 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055c6:	f7fc f853 	bl	8001670 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d902      	bls.n	80055dc <SPI_WaitFifoStateUntilTimeout+0x80>
 80055d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d13d      	bne.n	8005658 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80055ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055f4:	d111      	bne.n	800561a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055fe:	d004      	beq.n	800560a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005608:	d107      	bne.n	800561a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005618:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800561e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005622:	d10f      	bne.n	8005644 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005642:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e010      	b.n	800567a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	3b01      	subs	r3, #1
 8005666:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	4013      	ands	r3, r2
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	429a      	cmp	r2, r3
 8005676:	d196      	bne.n	80055a6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3728      	adds	r7, #40	@ 0x28
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20000000 	.word	0x20000000

08005688 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af02      	add	r7, sp, #8
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2200      	movs	r2, #0
 800569c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f7ff ff5b 	bl	800555c <SPI_WaitFifoStateUntilTimeout>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d007      	beq.n	80056bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056b0:	f043 0220 	orr.w	r2, r3, #32
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e027      	b.n	800570c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2200      	movs	r2, #0
 80056c4:	2180      	movs	r1, #128	@ 0x80
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f7ff fec0 	bl	800544c <SPI_WaitFlagStateUntilTimeout>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d007      	beq.n	80056e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056d6:	f043 0220 	orr.w	r2, r3, #32
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e014      	b.n	800570c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f7ff ff34 	bl	800555c <SPI_WaitFifoStateUntilTimeout>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d007      	beq.n	800570a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056fe:	f043 0220 	orr.w	r2, r3, #32
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e000      	b.n	800570c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e049      	b.n	80057ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d106      	bne.n	8005740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f841 	bl	80057c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3304      	adds	r3, #4
 8005750:	4619      	mov	r1, r3
 8005752:	4610      	mov	r0, r2
 8005754:	f000 f9e0 	bl	8005b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
	...

080057d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d001      	beq.n	80057f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e04f      	b.n	8005890 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0201 	orr.w	r2, r2, #1
 8005806:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a23      	ldr	r2, [pc, #140]	@ (800589c <HAL_TIM_Base_Start_IT+0xc4>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d01d      	beq.n	800584e <HAL_TIM_Base_Start_IT+0x76>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800581a:	d018      	beq.n	800584e <HAL_TIM_Base_Start_IT+0x76>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a1f      	ldr	r2, [pc, #124]	@ (80058a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d013      	beq.n	800584e <HAL_TIM_Base_Start_IT+0x76>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a1e      	ldr	r2, [pc, #120]	@ (80058a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00e      	beq.n	800584e <HAL_TIM_Base_Start_IT+0x76>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a1c      	ldr	r2, [pc, #112]	@ (80058a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d009      	beq.n	800584e <HAL_TIM_Base_Start_IT+0x76>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a1b      	ldr	r2, [pc, #108]	@ (80058ac <HAL_TIM_Base_Start_IT+0xd4>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d004      	beq.n	800584e <HAL_TIM_Base_Start_IT+0x76>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a19      	ldr	r2, [pc, #100]	@ (80058b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d115      	bne.n	800587a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	4b17      	ldr	r3, [pc, #92]	@ (80058b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005856:	4013      	ands	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b06      	cmp	r3, #6
 800585e:	d015      	beq.n	800588c <HAL_TIM_Base_Start_IT+0xb4>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005866:	d011      	beq.n	800588c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0201 	orr.w	r2, r2, #1
 8005876:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005878:	e008      	b.n	800588c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0201 	orr.w	r2, r2, #1
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	e000      	b.n	800588e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	40012c00 	.word	0x40012c00
 80058a0:	40000400 	.word	0x40000400
 80058a4:	40000800 	.word	0x40000800
 80058a8:	40000c00 	.word	0x40000c00
 80058ac:	40013400 	.word	0x40013400
 80058b0:	40014000 	.word	0x40014000
 80058b4:	00010007 	.word	0x00010007

080058b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d020      	beq.n	800591c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d01b      	beq.n	800591c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f06f 0202 	mvn.w	r2, #2
 80058ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f8e9 	bl	8005ada <HAL_TIM_IC_CaptureCallback>
 8005908:	e005      	b.n	8005916 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f8db 	bl	8005ac6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f8ec 	bl	8005aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f003 0304 	and.w	r3, r3, #4
 8005922:	2b00      	cmp	r3, #0
 8005924:	d020      	beq.n	8005968 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01b      	beq.n	8005968 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f06f 0204 	mvn.w	r2, #4
 8005938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2202      	movs	r2, #2
 800593e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f8c3 	bl	8005ada <HAL_TIM_IC_CaptureCallback>
 8005954:	e005      	b.n	8005962 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f8b5 	bl	8005ac6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f8c6 	bl	8005aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f003 0308 	and.w	r3, r3, #8
 800596e:	2b00      	cmp	r3, #0
 8005970:	d020      	beq.n	80059b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f003 0308 	and.w	r3, r3, #8
 8005978:	2b00      	cmp	r3, #0
 800597a:	d01b      	beq.n	80059b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f06f 0208 	mvn.w	r2, #8
 8005984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2204      	movs	r2, #4
 800598a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	f003 0303 	and.w	r3, r3, #3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f89d 	bl	8005ada <HAL_TIM_IC_CaptureCallback>
 80059a0:	e005      	b.n	80059ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f88f 	bl	8005ac6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f8a0 	bl	8005aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f003 0310 	and.w	r3, r3, #16
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d020      	beq.n	8005a00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f003 0310 	and.w	r3, r3, #16
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d01b      	beq.n	8005a00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f06f 0210 	mvn.w	r2, #16
 80059d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2208      	movs	r2, #8
 80059d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f877 	bl	8005ada <HAL_TIM_IC_CaptureCallback>
 80059ec:	e005      	b.n	80059fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f869 	bl	8005ac6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f87a 	bl	8005aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00c      	beq.n	8005a24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d007      	beq.n	8005a24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f06f 0201 	mvn.w	r2, #1
 8005a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7fb f99a 	bl	8000d58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d104      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00c      	beq.n	8005a52 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d007      	beq.n	8005a52 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f913 	bl	8005c78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00c      	beq.n	8005a76 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d007      	beq.n	8005a76 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f90b 	bl	8005c8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00c      	beq.n	8005a9a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d007      	beq.n	8005a9a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f834 	bl	8005b02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	f003 0320 	and.w	r3, r3, #32
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00c      	beq.n	8005abe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f003 0320 	and.w	r3, r3, #32
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d007      	beq.n	8005abe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f06f 0220 	mvn.w	r2, #32
 8005ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f8d3 	bl	8005c64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005abe:	bf00      	nop
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ae2:	bf00      	nop
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005af6:	bf00      	nop
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b0a:	bf00      	nop
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
	...

08005b18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a46      	ldr	r2, [pc, #280]	@ (8005c44 <TIM_Base_SetConfig+0x12c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d013      	beq.n	8005b58 <TIM_Base_SetConfig+0x40>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b36:	d00f      	beq.n	8005b58 <TIM_Base_SetConfig+0x40>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a43      	ldr	r2, [pc, #268]	@ (8005c48 <TIM_Base_SetConfig+0x130>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d00b      	beq.n	8005b58 <TIM_Base_SetConfig+0x40>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a42      	ldr	r2, [pc, #264]	@ (8005c4c <TIM_Base_SetConfig+0x134>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d007      	beq.n	8005b58 <TIM_Base_SetConfig+0x40>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a41      	ldr	r2, [pc, #260]	@ (8005c50 <TIM_Base_SetConfig+0x138>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d003      	beq.n	8005b58 <TIM_Base_SetConfig+0x40>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a40      	ldr	r2, [pc, #256]	@ (8005c54 <TIM_Base_SetConfig+0x13c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d108      	bne.n	8005b6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a35      	ldr	r2, [pc, #212]	@ (8005c44 <TIM_Base_SetConfig+0x12c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d01f      	beq.n	8005bb2 <TIM_Base_SetConfig+0x9a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b78:	d01b      	beq.n	8005bb2 <TIM_Base_SetConfig+0x9a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a32      	ldr	r2, [pc, #200]	@ (8005c48 <TIM_Base_SetConfig+0x130>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d017      	beq.n	8005bb2 <TIM_Base_SetConfig+0x9a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a31      	ldr	r2, [pc, #196]	@ (8005c4c <TIM_Base_SetConfig+0x134>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d013      	beq.n	8005bb2 <TIM_Base_SetConfig+0x9a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a30      	ldr	r2, [pc, #192]	@ (8005c50 <TIM_Base_SetConfig+0x138>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00f      	beq.n	8005bb2 <TIM_Base_SetConfig+0x9a>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a2f      	ldr	r2, [pc, #188]	@ (8005c54 <TIM_Base_SetConfig+0x13c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00b      	beq.n	8005bb2 <TIM_Base_SetConfig+0x9a>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a2e      	ldr	r2, [pc, #184]	@ (8005c58 <TIM_Base_SetConfig+0x140>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d007      	beq.n	8005bb2 <TIM_Base_SetConfig+0x9a>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a2d      	ldr	r2, [pc, #180]	@ (8005c5c <TIM_Base_SetConfig+0x144>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d003      	beq.n	8005bb2 <TIM_Base_SetConfig+0x9a>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a2c      	ldr	r2, [pc, #176]	@ (8005c60 <TIM_Base_SetConfig+0x148>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d108      	bne.n	8005bc4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a16      	ldr	r2, [pc, #88]	@ (8005c44 <TIM_Base_SetConfig+0x12c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d00f      	beq.n	8005c10 <TIM_Base_SetConfig+0xf8>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a18      	ldr	r2, [pc, #96]	@ (8005c54 <TIM_Base_SetConfig+0x13c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d00b      	beq.n	8005c10 <TIM_Base_SetConfig+0xf8>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a17      	ldr	r2, [pc, #92]	@ (8005c58 <TIM_Base_SetConfig+0x140>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d007      	beq.n	8005c10 <TIM_Base_SetConfig+0xf8>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a16      	ldr	r2, [pc, #88]	@ (8005c5c <TIM_Base_SetConfig+0x144>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d003      	beq.n	8005c10 <TIM_Base_SetConfig+0xf8>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a15      	ldr	r2, [pc, #84]	@ (8005c60 <TIM_Base_SetConfig+0x148>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d103      	bne.n	8005c18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	691a      	ldr	r2, [r3, #16]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d105      	bne.n	8005c36 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f023 0201 	bic.w	r2, r3, #1
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	611a      	str	r2, [r3, #16]
  }
}
 8005c36:	bf00      	nop
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	40012c00 	.word	0x40012c00
 8005c48:	40000400 	.word	0x40000400
 8005c4c:	40000800 	.word	0x40000800
 8005c50:	40000c00 	.word	0x40000c00
 8005c54:	40013400 	.word	0x40013400
 8005c58:	40014000 	.word	0x40014000
 8005c5c:	40014400 	.word	0x40014400
 8005c60:	40014800 	.word	0x40014800

08005c64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e040      	b.n	8005d34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d106      	bne.n	8005cc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7fb fc12 	bl	80014ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2224      	movs	r2, #36	@ 0x24
 8005ccc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0201 	bic.w	r2, r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d002      	beq.n	8005cec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 ff58 	bl	8006b9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fc9d 	bl	800662c <UART_SetConfig>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d101      	bne.n	8005cfc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e01b      	b.n	8005d34 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689a      	ldr	r2, [r3, #8]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0201 	orr.w	r2, r2, #1
 8005d2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 ffd7 	bl	8006ce0 <UART_CheckIdleState>
 8005d32:	4603      	mov	r3, r0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3708      	adds	r7, #8
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b08a      	sub	sp, #40	@ 0x28
 8005d40:	af02      	add	r7, sp, #8
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	603b      	str	r3, [r7, #0]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d50:	2b20      	cmp	r3, #32
 8005d52:	d177      	bne.n	8005e44 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d002      	beq.n	8005d60 <HAL_UART_Transmit+0x24>
 8005d5a:	88fb      	ldrh	r3, [r7, #6]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e070      	b.n	8005e46 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2221      	movs	r2, #33	@ 0x21
 8005d70:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d72:	f7fb fc7d 	bl	8001670 <HAL_GetTick>
 8005d76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	88fa      	ldrh	r2, [r7, #6]
 8005d7c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	88fa      	ldrh	r2, [r7, #6]
 8005d84:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d90:	d108      	bne.n	8005da4 <HAL_UART_Transmit+0x68>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d104      	bne.n	8005da4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	61bb      	str	r3, [r7, #24]
 8005da2:	e003      	b.n	8005dac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005da8:	2300      	movs	r3, #0
 8005daa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005dac:	e02f      	b.n	8005e0e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	2200      	movs	r2, #0
 8005db6:	2180      	movs	r1, #128	@ 0x80
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f001 f839 	bl	8006e30 <UART_WaitOnFlagUntilTimeout>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d004      	beq.n	8005dce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e03b      	b.n	8005e46 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10b      	bne.n	8005dec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	881a      	ldrh	r2, [r3, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005de0:	b292      	uxth	r2, r2
 8005de2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	3302      	adds	r3, #2
 8005de8:	61bb      	str	r3, [r7, #24]
 8005dea:	e007      	b.n	8005dfc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	781a      	ldrb	r2, [r3, #0]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	3b01      	subs	r3, #1
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1c9      	bne.n	8005dae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	2200      	movs	r2, #0
 8005e22:	2140      	movs	r1, #64	@ 0x40
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f001 f803 	bl	8006e30 <UART_WaitOnFlagUntilTimeout>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d004      	beq.n	8005e3a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2220      	movs	r2, #32
 8005e34:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e005      	b.n	8005e46 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005e40:	2300      	movs	r3, #0
 8005e42:	e000      	b.n	8005e46 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005e44:	2302      	movs	r3, #2
  }
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3720      	adds	r7, #32
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b08a      	sub	sp, #40	@ 0x28
 8005e52:	af02      	add	r7, sp, #8
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	603b      	str	r3, [r7, #0]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e64:	2b20      	cmp	r3, #32
 8005e66:	f040 80b6 	bne.w	8005fd6 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d002      	beq.n	8005e76 <HAL_UART_Receive+0x28>
 8005e70:	88fb      	ldrh	r3, [r7, #6]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e0ae      	b.n	8005fd8 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2222      	movs	r2, #34	@ 0x22
 8005e86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e90:	f7fb fbee 	bl	8001670 <HAL_GetTick>
 8005e94:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	88fa      	ldrh	r2, [r7, #6]
 8005e9a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	88fa      	ldrh	r2, [r7, #6]
 8005ea2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eae:	d10e      	bne.n	8005ece <HAL_UART_Receive+0x80>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d105      	bne.n	8005ec4 <HAL_UART_Receive+0x76>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005ebe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ec2:	e02d      	b.n	8005f20 <HAL_UART_Receive+0xd2>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	22ff      	movs	r2, #255	@ 0xff
 8005ec8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ecc:	e028      	b.n	8005f20 <HAL_UART_Receive+0xd2>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10d      	bne.n	8005ef2 <HAL_UART_Receive+0xa4>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d104      	bne.n	8005ee8 <HAL_UART_Receive+0x9a>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	22ff      	movs	r2, #255	@ 0xff
 8005ee2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ee6:	e01b      	b.n	8005f20 <HAL_UART_Receive+0xd2>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	227f      	movs	r2, #127	@ 0x7f
 8005eec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ef0:	e016      	b.n	8005f20 <HAL_UART_Receive+0xd2>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005efa:	d10d      	bne.n	8005f18 <HAL_UART_Receive+0xca>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d104      	bne.n	8005f0e <HAL_UART_Receive+0xc0>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	227f      	movs	r2, #127	@ 0x7f
 8005f08:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f0c:	e008      	b.n	8005f20 <HAL_UART_Receive+0xd2>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	223f      	movs	r2, #63	@ 0x3f
 8005f12:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f16:	e003      	b.n	8005f20 <HAL_UART_Receive+0xd2>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005f26:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f30:	d108      	bne.n	8005f44 <HAL_UART_Receive+0xf6>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d104      	bne.n	8005f44 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	61bb      	str	r3, [r7, #24]
 8005f42:	e003      	b.n	8005f4c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005f4c:	e037      	b.n	8005fbe <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2200      	movs	r2, #0
 8005f56:	2120      	movs	r1, #32
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 ff69 	bl	8006e30 <UART_WaitOnFlagUntilTimeout>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d005      	beq.n	8005f70 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2220      	movs	r2, #32
 8005f68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e033      	b.n	8005fd8 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10c      	bne.n	8005f90 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	8a7b      	ldrh	r3, [r7, #18]
 8005f80:	4013      	ands	r3, r2
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	3302      	adds	r3, #2
 8005f8c:	61bb      	str	r3, [r7, #24]
 8005f8e:	e00d      	b.n	8005fac <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	8a7b      	ldrh	r3, [r7, #18]
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1c1      	bne.n	8005f4e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2220      	movs	r2, #32
 8005fce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	e000      	b.n	8005fd8 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005fd6:	2302      	movs	r3, #2
  }
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3720      	adds	r7, #32
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b0ba      	sub	sp, #232	@ 0xe8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006006:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800600a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800600e:	4013      	ands	r3, r2
 8006010:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006014:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006018:	2b00      	cmp	r3, #0
 800601a:	d115      	bne.n	8006048 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800601c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006020:	f003 0320 	and.w	r3, r3, #32
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00f      	beq.n	8006048 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800602c:	f003 0320 	and.w	r3, r3, #32
 8006030:	2b00      	cmp	r3, #0
 8006032:	d009      	beq.n	8006048 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 82ca 	beq.w	80065d2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	4798      	blx	r3
      }
      return;
 8006046:	e2c4      	b.n	80065d2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006048:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 8117 	beq.w	8006280 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d106      	bne.n	800606c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800605e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006062:	4b85      	ldr	r3, [pc, #532]	@ (8006278 <HAL_UART_IRQHandler+0x298>)
 8006064:	4013      	ands	r3, r2
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 810a 	beq.w	8006280 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800606c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b00      	cmp	r3, #0
 8006076:	d011      	beq.n	800609c <HAL_UART_IRQHandler+0xbc>
 8006078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800607c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00b      	beq.n	800609c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2201      	movs	r2, #1
 800608a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006092:	f043 0201 	orr.w	r2, r3, #1
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800609c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d011      	beq.n	80060cc <HAL_UART_IRQHandler+0xec>
 80060a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00b      	beq.n	80060cc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2202      	movs	r2, #2
 80060ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060c2:	f043 0204 	orr.w	r2, r3, #4
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060d0:	f003 0304 	and.w	r3, r3, #4
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d011      	beq.n	80060fc <HAL_UART_IRQHandler+0x11c>
 80060d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00b      	beq.n	80060fc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2204      	movs	r2, #4
 80060ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060f2:	f043 0202 	orr.w	r2, r3, #2
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80060fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006100:	f003 0308 	and.w	r3, r3, #8
 8006104:	2b00      	cmp	r3, #0
 8006106:	d017      	beq.n	8006138 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800610c:	f003 0320 	and.w	r3, r3, #32
 8006110:	2b00      	cmp	r3, #0
 8006112:	d105      	bne.n	8006120 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006118:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00b      	beq.n	8006138 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2208      	movs	r2, #8
 8006126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800612e:	f043 0208 	orr.w	r2, r3, #8
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800613c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006140:	2b00      	cmp	r3, #0
 8006142:	d012      	beq.n	800616a <HAL_UART_IRQHandler+0x18a>
 8006144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006148:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00c      	beq.n	800616a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006158:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006160:	f043 0220 	orr.w	r2, r3, #32
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 8230 	beq.w	80065d6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800617a:	f003 0320 	and.w	r3, r3, #32
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00d      	beq.n	800619e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006186:	f003 0320 	and.w	r3, r3, #32
 800618a:	2b00      	cmp	r3, #0
 800618c:	d007      	beq.n	800619e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b2:	2b40      	cmp	r3, #64	@ 0x40
 80061b4:	d005      	beq.n	80061c2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80061b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d04f      	beq.n	8006262 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 fea1 	bl	8006f0a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061d2:	2b40      	cmp	r3, #64	@ 0x40
 80061d4:	d141      	bne.n	800625a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	3308      	adds	r3, #8
 80061dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061e4:	e853 3f00 	ldrex	r3, [r3]
 80061e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80061ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3308      	adds	r3, #8
 80061fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006202:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006206:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800620e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006212:	e841 2300 	strex	r3, r2, [r1]
 8006216:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800621a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1d9      	bne.n	80061d6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006226:	2b00      	cmp	r3, #0
 8006228:	d013      	beq.n	8006252 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800622e:	4a13      	ldr	r2, [pc, #76]	@ (800627c <HAL_UART_IRQHandler+0x29c>)
 8006230:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006236:	4618      	mov	r0, r3
 8006238:	f7fb fbfe 	bl	8001a38 <HAL_DMA_Abort_IT>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d017      	beq.n	8006272 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800624c:	4610      	mov	r0, r2
 800624e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006250:	e00f      	b.n	8006272 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f9d4 	bl	8006600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006258:	e00b      	b.n	8006272 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f9d0 	bl	8006600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006260:	e007      	b.n	8006272 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f9cc 	bl	8006600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006270:	e1b1      	b.n	80065d6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006272:	bf00      	nop
    return;
 8006274:	e1af      	b.n	80065d6 <HAL_UART_IRQHandler+0x5f6>
 8006276:	bf00      	nop
 8006278:	04000120 	.word	0x04000120
 800627c:	08006fd3 	.word	0x08006fd3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006284:	2b01      	cmp	r3, #1
 8006286:	f040 816a 	bne.w	800655e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800628a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800628e:	f003 0310 	and.w	r3, r3, #16
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 8163 	beq.w	800655e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800629c:	f003 0310 	and.w	r3, r3, #16
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 815c 	beq.w	800655e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2210      	movs	r2, #16
 80062ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b8:	2b40      	cmp	r3, #64	@ 0x40
 80062ba:	f040 80d4 	bne.w	8006466 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062ca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 80ad 	beq.w	800642e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80062da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062de:	429a      	cmp	r2, r3
 80062e0:	f080 80a5 	bcs.w	800642e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0320 	and.w	r3, r3, #32
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f040 8086 	bne.w	800640c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006308:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800630c:	e853 3f00 	ldrex	r3, [r3]
 8006310:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006314:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006318:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800631c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	461a      	mov	r2, r3
 8006326:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800632a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800632e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006332:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006336:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800633a:	e841 2300 	strex	r3, r2, [r1]
 800633e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006342:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1da      	bne.n	8006300 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3308      	adds	r3, #8
 8006350:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006352:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006354:	e853 3f00 	ldrex	r3, [r3]
 8006358:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800635a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800635c:	f023 0301 	bic.w	r3, r3, #1
 8006360:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3308      	adds	r3, #8
 800636a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800636e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006372:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006374:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006376:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800637a:	e841 2300 	strex	r3, r2, [r1]
 800637e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006380:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1e1      	bne.n	800634a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3308      	adds	r3, #8
 800638c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006390:	e853 3f00 	ldrex	r3, [r3]
 8006394:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006396:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006398:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800639c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3308      	adds	r3, #8
 80063a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80063aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80063ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80063b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80063b2:	e841 2300 	strex	r3, r2, [r1]
 80063b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80063b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1e3      	bne.n	8006386 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2220      	movs	r2, #32
 80063c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063d4:	e853 3f00 	ldrex	r3, [r3]
 80063d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80063da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063dc:	f023 0310 	bic.w	r3, r3, #16
 80063e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	461a      	mov	r2, r3
 80063ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80063f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80063f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80063f6:	e841 2300 	strex	r3, r2, [r1]
 80063fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80063fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1e4      	bne.n	80063cc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006406:	4618      	mov	r0, r3
 8006408:	f7fb fad8 	bl	80019bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800641e:	b29b      	uxth	r3, r3
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	b29b      	uxth	r3, r3
 8006424:	4619      	mov	r1, r3
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f8f4 	bl	8006614 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800642c:	e0d5      	b.n	80065da <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006434:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006438:	429a      	cmp	r2, r3
 800643a:	f040 80ce 	bne.w	80065da <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0320 	and.w	r3, r3, #32
 800644a:	2b20      	cmp	r3, #32
 800644c:	f040 80c5 	bne.w	80065da <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2202      	movs	r2, #2
 8006454:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800645c:	4619      	mov	r1, r3
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f8d8 	bl	8006614 <HAL_UARTEx_RxEventCallback>
      return;
 8006464:	e0b9      	b.n	80065da <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006472:	b29b      	uxth	r3, r3
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006480:	b29b      	uxth	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	f000 80ab 	beq.w	80065de <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006488:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 80a6 	beq.w	80065de <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800649a:	e853 3f00 	ldrex	r3, [r3]
 800649e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	461a      	mov	r2, r3
 80064b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80064b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80064b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064bc:	e841 2300 	strex	r3, r2, [r1]
 80064c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1e4      	bne.n	8006492 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3308      	adds	r3, #8
 80064ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d2:	e853 3f00 	ldrex	r3, [r3]
 80064d6:	623b      	str	r3, [r7, #32]
   return(result);
 80064d8:	6a3b      	ldr	r3, [r7, #32]
 80064da:	f023 0301 	bic.w	r3, r3, #1
 80064de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3308      	adds	r3, #8
 80064e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80064ec:	633a      	str	r2, [r7, #48]	@ 0x30
 80064ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064f4:	e841 2300 	strex	r3, r2, [r1]
 80064f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1e3      	bne.n	80064c8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2220      	movs	r2, #32
 8006504:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	e853 3f00 	ldrex	r3, [r3]
 8006520:	60fb      	str	r3, [r7, #12]
   return(result);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f023 0310 	bic.w	r3, r3, #16
 8006528:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	461a      	mov	r2, r3
 8006532:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006536:	61fb      	str	r3, [r7, #28]
 8006538:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653a:	69b9      	ldr	r1, [r7, #24]
 800653c:	69fa      	ldr	r2, [r7, #28]
 800653e:	e841 2300 	strex	r3, r2, [r1]
 8006542:	617b      	str	r3, [r7, #20]
   return(result);
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1e4      	bne.n	8006514 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2202      	movs	r2, #2
 800654e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006550:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006554:	4619      	mov	r1, r3
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f85c 	bl	8006614 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800655c:	e03f      	b.n	80065de <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800655e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006562:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00e      	beq.n	8006588 <HAL_UART_IRQHandler+0x5a8>
 800656a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800656e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d008      	beq.n	8006588 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800657e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fd66 	bl	8007052 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006586:	e02d      	b.n	80065e4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800658c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00e      	beq.n	80065b2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800659c:	2b00      	cmp	r3, #0
 800659e:	d008      	beq.n	80065b2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d01c      	beq.n	80065e2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	4798      	blx	r3
    }
    return;
 80065b0:	e017      	b.n	80065e2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80065b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d012      	beq.n	80065e4 <HAL_UART_IRQHandler+0x604>
 80065be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00c      	beq.n	80065e4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 fd17 	bl	8006ffe <UART_EndTransmit_IT>
    return;
 80065d0:	e008      	b.n	80065e4 <HAL_UART_IRQHandler+0x604>
      return;
 80065d2:	bf00      	nop
 80065d4:	e006      	b.n	80065e4 <HAL_UART_IRQHandler+0x604>
    return;
 80065d6:	bf00      	nop
 80065d8:	e004      	b.n	80065e4 <HAL_UART_IRQHandler+0x604>
      return;
 80065da:	bf00      	nop
 80065dc:	e002      	b.n	80065e4 <HAL_UART_IRQHandler+0x604>
      return;
 80065de:	bf00      	nop
 80065e0:	e000      	b.n	80065e4 <HAL_UART_IRQHandler+0x604>
    return;
 80065e2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80065e4:	37e8      	adds	r7, #232	@ 0xe8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop

080065ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	460b      	mov	r3, r1
 800661e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800662c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006630:	b08a      	sub	sp, #40	@ 0x28
 8006632:	af00      	add	r7, sp, #0
 8006634:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	431a      	orrs	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	431a      	orrs	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	69db      	ldr	r3, [r3, #28]
 8006650:	4313      	orrs	r3, r2
 8006652:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	4ba4      	ldr	r3, [pc, #656]	@ (80068ec <UART_SetConfig+0x2c0>)
 800665c:	4013      	ands	r3, r2
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	6812      	ldr	r2, [r2, #0]
 8006662:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006664:	430b      	orrs	r3, r1
 8006666:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	68da      	ldr	r2, [r3, #12]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	430a      	orrs	r2, r1
 800667c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a99      	ldr	r2, [pc, #612]	@ (80068f0 <UART_SetConfig+0x2c4>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d004      	beq.n	8006698 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006694:	4313      	orrs	r3, r2
 8006696:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066a8:	430a      	orrs	r2, r1
 80066aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a90      	ldr	r2, [pc, #576]	@ (80068f4 <UART_SetConfig+0x2c8>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d126      	bne.n	8006704 <UART_SetConfig+0xd8>
 80066b6:	4b90      	ldr	r3, [pc, #576]	@ (80068f8 <UART_SetConfig+0x2cc>)
 80066b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066bc:	f003 0303 	and.w	r3, r3, #3
 80066c0:	2b03      	cmp	r3, #3
 80066c2:	d81b      	bhi.n	80066fc <UART_SetConfig+0xd0>
 80066c4:	a201      	add	r2, pc, #4	@ (adr r2, 80066cc <UART_SetConfig+0xa0>)
 80066c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ca:	bf00      	nop
 80066cc:	080066dd 	.word	0x080066dd
 80066d0:	080066ed 	.word	0x080066ed
 80066d4:	080066e5 	.word	0x080066e5
 80066d8:	080066f5 	.word	0x080066f5
 80066dc:	2301      	movs	r3, #1
 80066de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066e2:	e116      	b.n	8006912 <UART_SetConfig+0x2e6>
 80066e4:	2302      	movs	r3, #2
 80066e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ea:	e112      	b.n	8006912 <UART_SetConfig+0x2e6>
 80066ec:	2304      	movs	r3, #4
 80066ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066f2:	e10e      	b.n	8006912 <UART_SetConfig+0x2e6>
 80066f4:	2308      	movs	r3, #8
 80066f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066fa:	e10a      	b.n	8006912 <UART_SetConfig+0x2e6>
 80066fc:	2310      	movs	r3, #16
 80066fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006702:	e106      	b.n	8006912 <UART_SetConfig+0x2e6>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a7c      	ldr	r2, [pc, #496]	@ (80068fc <UART_SetConfig+0x2d0>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d138      	bne.n	8006780 <UART_SetConfig+0x154>
 800670e:	4b7a      	ldr	r3, [pc, #488]	@ (80068f8 <UART_SetConfig+0x2cc>)
 8006710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006714:	f003 030c 	and.w	r3, r3, #12
 8006718:	2b0c      	cmp	r3, #12
 800671a:	d82d      	bhi.n	8006778 <UART_SetConfig+0x14c>
 800671c:	a201      	add	r2, pc, #4	@ (adr r2, 8006724 <UART_SetConfig+0xf8>)
 800671e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006722:	bf00      	nop
 8006724:	08006759 	.word	0x08006759
 8006728:	08006779 	.word	0x08006779
 800672c:	08006779 	.word	0x08006779
 8006730:	08006779 	.word	0x08006779
 8006734:	08006769 	.word	0x08006769
 8006738:	08006779 	.word	0x08006779
 800673c:	08006779 	.word	0x08006779
 8006740:	08006779 	.word	0x08006779
 8006744:	08006761 	.word	0x08006761
 8006748:	08006779 	.word	0x08006779
 800674c:	08006779 	.word	0x08006779
 8006750:	08006779 	.word	0x08006779
 8006754:	08006771 	.word	0x08006771
 8006758:	2300      	movs	r3, #0
 800675a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800675e:	e0d8      	b.n	8006912 <UART_SetConfig+0x2e6>
 8006760:	2302      	movs	r3, #2
 8006762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006766:	e0d4      	b.n	8006912 <UART_SetConfig+0x2e6>
 8006768:	2304      	movs	r3, #4
 800676a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800676e:	e0d0      	b.n	8006912 <UART_SetConfig+0x2e6>
 8006770:	2308      	movs	r3, #8
 8006772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006776:	e0cc      	b.n	8006912 <UART_SetConfig+0x2e6>
 8006778:	2310      	movs	r3, #16
 800677a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800677e:	e0c8      	b.n	8006912 <UART_SetConfig+0x2e6>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a5e      	ldr	r2, [pc, #376]	@ (8006900 <UART_SetConfig+0x2d4>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d125      	bne.n	80067d6 <UART_SetConfig+0x1aa>
 800678a:	4b5b      	ldr	r3, [pc, #364]	@ (80068f8 <UART_SetConfig+0x2cc>)
 800678c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006790:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006794:	2b30      	cmp	r3, #48	@ 0x30
 8006796:	d016      	beq.n	80067c6 <UART_SetConfig+0x19a>
 8006798:	2b30      	cmp	r3, #48	@ 0x30
 800679a:	d818      	bhi.n	80067ce <UART_SetConfig+0x1a2>
 800679c:	2b20      	cmp	r3, #32
 800679e:	d00a      	beq.n	80067b6 <UART_SetConfig+0x18a>
 80067a0:	2b20      	cmp	r3, #32
 80067a2:	d814      	bhi.n	80067ce <UART_SetConfig+0x1a2>
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d002      	beq.n	80067ae <UART_SetConfig+0x182>
 80067a8:	2b10      	cmp	r3, #16
 80067aa:	d008      	beq.n	80067be <UART_SetConfig+0x192>
 80067ac:	e00f      	b.n	80067ce <UART_SetConfig+0x1a2>
 80067ae:	2300      	movs	r3, #0
 80067b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067b4:	e0ad      	b.n	8006912 <UART_SetConfig+0x2e6>
 80067b6:	2302      	movs	r3, #2
 80067b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067bc:	e0a9      	b.n	8006912 <UART_SetConfig+0x2e6>
 80067be:	2304      	movs	r3, #4
 80067c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067c4:	e0a5      	b.n	8006912 <UART_SetConfig+0x2e6>
 80067c6:	2308      	movs	r3, #8
 80067c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067cc:	e0a1      	b.n	8006912 <UART_SetConfig+0x2e6>
 80067ce:	2310      	movs	r3, #16
 80067d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067d4:	e09d      	b.n	8006912 <UART_SetConfig+0x2e6>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a4a      	ldr	r2, [pc, #296]	@ (8006904 <UART_SetConfig+0x2d8>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d125      	bne.n	800682c <UART_SetConfig+0x200>
 80067e0:	4b45      	ldr	r3, [pc, #276]	@ (80068f8 <UART_SetConfig+0x2cc>)
 80067e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80067ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80067ec:	d016      	beq.n	800681c <UART_SetConfig+0x1f0>
 80067ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80067f0:	d818      	bhi.n	8006824 <UART_SetConfig+0x1f8>
 80067f2:	2b80      	cmp	r3, #128	@ 0x80
 80067f4:	d00a      	beq.n	800680c <UART_SetConfig+0x1e0>
 80067f6:	2b80      	cmp	r3, #128	@ 0x80
 80067f8:	d814      	bhi.n	8006824 <UART_SetConfig+0x1f8>
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d002      	beq.n	8006804 <UART_SetConfig+0x1d8>
 80067fe:	2b40      	cmp	r3, #64	@ 0x40
 8006800:	d008      	beq.n	8006814 <UART_SetConfig+0x1e8>
 8006802:	e00f      	b.n	8006824 <UART_SetConfig+0x1f8>
 8006804:	2300      	movs	r3, #0
 8006806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800680a:	e082      	b.n	8006912 <UART_SetConfig+0x2e6>
 800680c:	2302      	movs	r3, #2
 800680e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006812:	e07e      	b.n	8006912 <UART_SetConfig+0x2e6>
 8006814:	2304      	movs	r3, #4
 8006816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800681a:	e07a      	b.n	8006912 <UART_SetConfig+0x2e6>
 800681c:	2308      	movs	r3, #8
 800681e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006822:	e076      	b.n	8006912 <UART_SetConfig+0x2e6>
 8006824:	2310      	movs	r3, #16
 8006826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800682a:	e072      	b.n	8006912 <UART_SetConfig+0x2e6>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a35      	ldr	r2, [pc, #212]	@ (8006908 <UART_SetConfig+0x2dc>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d12a      	bne.n	800688c <UART_SetConfig+0x260>
 8006836:	4b30      	ldr	r3, [pc, #192]	@ (80068f8 <UART_SetConfig+0x2cc>)
 8006838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800683c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006840:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006844:	d01a      	beq.n	800687c <UART_SetConfig+0x250>
 8006846:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800684a:	d81b      	bhi.n	8006884 <UART_SetConfig+0x258>
 800684c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006850:	d00c      	beq.n	800686c <UART_SetConfig+0x240>
 8006852:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006856:	d815      	bhi.n	8006884 <UART_SetConfig+0x258>
 8006858:	2b00      	cmp	r3, #0
 800685a:	d003      	beq.n	8006864 <UART_SetConfig+0x238>
 800685c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006860:	d008      	beq.n	8006874 <UART_SetConfig+0x248>
 8006862:	e00f      	b.n	8006884 <UART_SetConfig+0x258>
 8006864:	2300      	movs	r3, #0
 8006866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800686a:	e052      	b.n	8006912 <UART_SetConfig+0x2e6>
 800686c:	2302      	movs	r3, #2
 800686e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006872:	e04e      	b.n	8006912 <UART_SetConfig+0x2e6>
 8006874:	2304      	movs	r3, #4
 8006876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800687a:	e04a      	b.n	8006912 <UART_SetConfig+0x2e6>
 800687c:	2308      	movs	r3, #8
 800687e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006882:	e046      	b.n	8006912 <UART_SetConfig+0x2e6>
 8006884:	2310      	movs	r3, #16
 8006886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800688a:	e042      	b.n	8006912 <UART_SetConfig+0x2e6>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a17      	ldr	r2, [pc, #92]	@ (80068f0 <UART_SetConfig+0x2c4>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d13a      	bne.n	800690c <UART_SetConfig+0x2e0>
 8006896:	4b18      	ldr	r3, [pc, #96]	@ (80068f8 <UART_SetConfig+0x2cc>)
 8006898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800689c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80068a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068a4:	d01a      	beq.n	80068dc <UART_SetConfig+0x2b0>
 80068a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068aa:	d81b      	bhi.n	80068e4 <UART_SetConfig+0x2b8>
 80068ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068b0:	d00c      	beq.n	80068cc <UART_SetConfig+0x2a0>
 80068b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068b6:	d815      	bhi.n	80068e4 <UART_SetConfig+0x2b8>
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d003      	beq.n	80068c4 <UART_SetConfig+0x298>
 80068bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068c0:	d008      	beq.n	80068d4 <UART_SetConfig+0x2a8>
 80068c2:	e00f      	b.n	80068e4 <UART_SetConfig+0x2b8>
 80068c4:	2300      	movs	r3, #0
 80068c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068ca:	e022      	b.n	8006912 <UART_SetConfig+0x2e6>
 80068cc:	2302      	movs	r3, #2
 80068ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068d2:	e01e      	b.n	8006912 <UART_SetConfig+0x2e6>
 80068d4:	2304      	movs	r3, #4
 80068d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068da:	e01a      	b.n	8006912 <UART_SetConfig+0x2e6>
 80068dc:	2308      	movs	r3, #8
 80068de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068e2:	e016      	b.n	8006912 <UART_SetConfig+0x2e6>
 80068e4:	2310      	movs	r3, #16
 80068e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068ea:	e012      	b.n	8006912 <UART_SetConfig+0x2e6>
 80068ec:	efff69f3 	.word	0xefff69f3
 80068f0:	40008000 	.word	0x40008000
 80068f4:	40013800 	.word	0x40013800
 80068f8:	40021000 	.word	0x40021000
 80068fc:	40004400 	.word	0x40004400
 8006900:	40004800 	.word	0x40004800
 8006904:	40004c00 	.word	0x40004c00
 8006908:	40005000 	.word	0x40005000
 800690c:	2310      	movs	r3, #16
 800690e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a9f      	ldr	r2, [pc, #636]	@ (8006b94 <UART_SetConfig+0x568>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d17a      	bne.n	8006a12 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800691c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006920:	2b08      	cmp	r3, #8
 8006922:	d824      	bhi.n	800696e <UART_SetConfig+0x342>
 8006924:	a201      	add	r2, pc, #4	@ (adr r2, 800692c <UART_SetConfig+0x300>)
 8006926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692a:	bf00      	nop
 800692c:	08006951 	.word	0x08006951
 8006930:	0800696f 	.word	0x0800696f
 8006934:	08006959 	.word	0x08006959
 8006938:	0800696f 	.word	0x0800696f
 800693c:	0800695f 	.word	0x0800695f
 8006940:	0800696f 	.word	0x0800696f
 8006944:	0800696f 	.word	0x0800696f
 8006948:	0800696f 	.word	0x0800696f
 800694c:	08006967 	.word	0x08006967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006950:	f7fc fa2e 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8006954:	61f8      	str	r0, [r7, #28]
        break;
 8006956:	e010      	b.n	800697a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006958:	4b8f      	ldr	r3, [pc, #572]	@ (8006b98 <UART_SetConfig+0x56c>)
 800695a:	61fb      	str	r3, [r7, #28]
        break;
 800695c:	e00d      	b.n	800697a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800695e:	f7fc f98f 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8006962:	61f8      	str	r0, [r7, #28]
        break;
 8006964:	e009      	b.n	800697a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006966:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800696a:	61fb      	str	r3, [r7, #28]
        break;
 800696c:	e005      	b.n	800697a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800696e:	2300      	movs	r3, #0
 8006970:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006978:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	2b00      	cmp	r3, #0
 800697e:	f000 80fb 	beq.w	8006b78 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	685a      	ldr	r2, [r3, #4]
 8006986:	4613      	mov	r3, r2
 8006988:	005b      	lsls	r3, r3, #1
 800698a:	4413      	add	r3, r2
 800698c:	69fa      	ldr	r2, [r7, #28]
 800698e:	429a      	cmp	r2, r3
 8006990:	d305      	bcc.n	800699e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006998:	69fa      	ldr	r2, [r7, #28]
 800699a:	429a      	cmp	r2, r3
 800699c:	d903      	bls.n	80069a6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80069a4:	e0e8      	b.n	8006b78 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	2200      	movs	r2, #0
 80069aa:	461c      	mov	r4, r3
 80069ac:	4615      	mov	r5, r2
 80069ae:	f04f 0200 	mov.w	r2, #0
 80069b2:	f04f 0300 	mov.w	r3, #0
 80069b6:	022b      	lsls	r3, r5, #8
 80069b8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80069bc:	0222      	lsls	r2, r4, #8
 80069be:	68f9      	ldr	r1, [r7, #12]
 80069c0:	6849      	ldr	r1, [r1, #4]
 80069c2:	0849      	lsrs	r1, r1, #1
 80069c4:	2000      	movs	r0, #0
 80069c6:	4688      	mov	r8, r1
 80069c8:	4681      	mov	r9, r0
 80069ca:	eb12 0a08 	adds.w	sl, r2, r8
 80069ce:	eb43 0b09 	adc.w	fp, r3, r9
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	603b      	str	r3, [r7, #0]
 80069da:	607a      	str	r2, [r7, #4]
 80069dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069e0:	4650      	mov	r0, sl
 80069e2:	4659      	mov	r1, fp
 80069e4:	f7f9 fc44 	bl	8000270 <__aeabi_uldivmod>
 80069e8:	4602      	mov	r2, r0
 80069ea:	460b      	mov	r3, r1
 80069ec:	4613      	mov	r3, r2
 80069ee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069f6:	d308      	bcc.n	8006a0a <UART_SetConfig+0x3de>
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069fe:	d204      	bcs.n	8006a0a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	69ba      	ldr	r2, [r7, #24]
 8006a06:	60da      	str	r2, [r3, #12]
 8006a08:	e0b6      	b.n	8006b78 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006a10:	e0b2      	b.n	8006b78 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	69db      	ldr	r3, [r3, #28]
 8006a16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a1a:	d15e      	bne.n	8006ada <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006a1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d828      	bhi.n	8006a76 <UART_SetConfig+0x44a>
 8006a24:	a201      	add	r2, pc, #4	@ (adr r2, 8006a2c <UART_SetConfig+0x400>)
 8006a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2a:	bf00      	nop
 8006a2c:	08006a51 	.word	0x08006a51
 8006a30:	08006a59 	.word	0x08006a59
 8006a34:	08006a61 	.word	0x08006a61
 8006a38:	08006a77 	.word	0x08006a77
 8006a3c:	08006a67 	.word	0x08006a67
 8006a40:	08006a77 	.word	0x08006a77
 8006a44:	08006a77 	.word	0x08006a77
 8006a48:	08006a77 	.word	0x08006a77
 8006a4c:	08006a6f 	.word	0x08006a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a50:	f7fc f9ae 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8006a54:	61f8      	str	r0, [r7, #28]
        break;
 8006a56:	e014      	b.n	8006a82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a58:	f7fc f9c0 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 8006a5c:	61f8      	str	r0, [r7, #28]
        break;
 8006a5e:	e010      	b.n	8006a82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a60:	4b4d      	ldr	r3, [pc, #308]	@ (8006b98 <UART_SetConfig+0x56c>)
 8006a62:	61fb      	str	r3, [r7, #28]
        break;
 8006a64:	e00d      	b.n	8006a82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a66:	f7fc f90b 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8006a6a:	61f8      	str	r0, [r7, #28]
        break;
 8006a6c:	e009      	b.n	8006a82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a72:	61fb      	str	r3, [r7, #28]
        break;
 8006a74:	e005      	b.n	8006a82 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006a76:	2300      	movs	r3, #0
 8006a78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006a80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d077      	beq.n	8006b78 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	005a      	lsls	r2, r3, #1
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	085b      	lsrs	r3, r3, #1
 8006a92:	441a      	add	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a9c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	2b0f      	cmp	r3, #15
 8006aa2:	d916      	bls.n	8006ad2 <UART_SetConfig+0x4a6>
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006aaa:	d212      	bcs.n	8006ad2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	f023 030f 	bic.w	r3, r3, #15
 8006ab4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	085b      	lsrs	r3, r3, #1
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	f003 0307 	and.w	r3, r3, #7
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	8afb      	ldrh	r3, [r7, #22]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	8afa      	ldrh	r2, [r7, #22]
 8006ace:	60da      	str	r2, [r3, #12]
 8006ad0:	e052      	b.n	8006b78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006ad8:	e04e      	b.n	8006b78 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ada:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006ade:	2b08      	cmp	r3, #8
 8006ae0:	d827      	bhi.n	8006b32 <UART_SetConfig+0x506>
 8006ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ae8 <UART_SetConfig+0x4bc>)
 8006ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae8:	08006b0d 	.word	0x08006b0d
 8006aec:	08006b15 	.word	0x08006b15
 8006af0:	08006b1d 	.word	0x08006b1d
 8006af4:	08006b33 	.word	0x08006b33
 8006af8:	08006b23 	.word	0x08006b23
 8006afc:	08006b33 	.word	0x08006b33
 8006b00:	08006b33 	.word	0x08006b33
 8006b04:	08006b33 	.word	0x08006b33
 8006b08:	08006b2b 	.word	0x08006b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b0c:	f7fc f950 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8006b10:	61f8      	str	r0, [r7, #28]
        break;
 8006b12:	e014      	b.n	8006b3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b14:	f7fc f962 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 8006b18:	61f8      	str	r0, [r7, #28]
        break;
 8006b1a:	e010      	b.n	8006b3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8006b98 <UART_SetConfig+0x56c>)
 8006b1e:	61fb      	str	r3, [r7, #28]
        break;
 8006b20:	e00d      	b.n	8006b3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b22:	f7fc f8ad 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8006b26:	61f8      	str	r0, [r7, #28]
        break;
 8006b28:	e009      	b.n	8006b3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b2e:	61fb      	str	r3, [r7, #28]
        break;
 8006b30:	e005      	b.n	8006b3e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006b32:	2300      	movs	r3, #0
 8006b34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006b3c:	bf00      	nop
    }

    if (pclk != 0U)
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d019      	beq.n	8006b78 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	085a      	lsrs	r2, r3, #1
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	441a      	add	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b56:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	2b0f      	cmp	r3, #15
 8006b5c:	d909      	bls.n	8006b72 <UART_SetConfig+0x546>
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b64:	d205      	bcs.n	8006b72 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	60da      	str	r2, [r3, #12]
 8006b70:	e002      	b.n	8006b78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006b84:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3728      	adds	r7, #40	@ 0x28
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b92:	bf00      	nop
 8006b94:	40008000 	.word	0x40008000
 8006b98:	00f42400 	.word	0x00f42400

08006b9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba8:	f003 0308 	and.w	r3, r3, #8
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00a      	beq.n	8006bc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00a      	beq.n	8006be8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	430a      	orrs	r2, r1
 8006be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00a      	beq.n	8006c0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c0e:	f003 0304 	and.w	r3, r3, #4
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00a      	beq.n	8006c2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c30:	f003 0310 	and.w	r3, r3, #16
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00a      	beq.n	8006c4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	430a      	orrs	r2, r1
 8006c4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c52:	f003 0320 	and.w	r3, r3, #32
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00a      	beq.n	8006c70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d01a      	beq.n	8006cb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c9a:	d10a      	bne.n	8006cb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00a      	beq.n	8006cd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	605a      	str	r2, [r3, #4]
  }
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b098      	sub	sp, #96	@ 0x60
 8006ce4:	af02      	add	r7, sp, #8
 8006ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cf0:	f7fa fcbe 	bl	8001670 <HAL_GetTick>
 8006cf4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0308 	and.w	r3, r3, #8
 8006d00:	2b08      	cmp	r3, #8
 8006d02:	d12e      	bne.n	8006d62 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d08:	9300      	str	r3, [sp, #0]
 8006d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f88c 	bl	8006e30 <UART_WaitOnFlagUntilTimeout>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d021      	beq.n	8006d62 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d26:	e853 3f00 	ldrex	r3, [r3]
 8006d2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d32:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	461a      	mov	r2, r3
 8006d3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d3e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d44:	e841 2300 	strex	r3, r2, [r1]
 8006d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1e6      	bne.n	8006d1e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2220      	movs	r2, #32
 8006d54:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e062      	b.n	8006e28 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	2b04      	cmp	r3, #4
 8006d6e:	d149      	bne.n	8006e04 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f856 	bl	8006e30 <UART_WaitOnFlagUntilTimeout>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d03c      	beq.n	8006e04 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d92:	e853 3f00 	ldrex	r3, [r3]
 8006d96:	623b      	str	r3, [r7, #32]
   return(result);
 8006d98:	6a3b      	ldr	r3, [r7, #32]
 8006d9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	461a      	mov	r2, r3
 8006da6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006da8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006daa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006db0:	e841 2300 	strex	r3, r2, [r1]
 8006db4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1e6      	bne.n	8006d8a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3308      	adds	r3, #8
 8006dc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	e853 3f00 	ldrex	r3, [r3]
 8006dca:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f023 0301 	bic.w	r3, r3, #1
 8006dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	3308      	adds	r3, #8
 8006dda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ddc:	61fa      	str	r2, [r7, #28]
 8006dde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de0:	69b9      	ldr	r1, [r7, #24]
 8006de2:	69fa      	ldr	r2, [r7, #28]
 8006de4:	e841 2300 	strex	r3, r2, [r1]
 8006de8:	617b      	str	r3, [r7, #20]
   return(result);
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1e5      	bne.n	8006dbc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e011      	b.n	8006e28 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2220      	movs	r2, #32
 8006e08:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2220      	movs	r2, #32
 8006e0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3758      	adds	r7, #88	@ 0x58
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	603b      	str	r3, [r7, #0]
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e40:	e04f      	b.n	8006ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e48:	d04b      	beq.n	8006ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e4a:	f7fa fc11 	bl	8001670 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	69ba      	ldr	r2, [r7, #24]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d302      	bcc.n	8006e60 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d101      	bne.n	8006e64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e04e      	b.n	8006f02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0304 	and.w	r3, r3, #4
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d037      	beq.n	8006ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	2b80      	cmp	r3, #128	@ 0x80
 8006e76:	d034      	beq.n	8006ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2b40      	cmp	r3, #64	@ 0x40
 8006e7c:	d031      	beq.n	8006ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	69db      	ldr	r3, [r3, #28]
 8006e84:	f003 0308 	and.w	r3, r3, #8
 8006e88:	2b08      	cmp	r3, #8
 8006e8a:	d110      	bne.n	8006eae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2208      	movs	r2, #8
 8006e92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 f838 	bl	8006f0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2208      	movs	r2, #8
 8006e9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e029      	b.n	8006f02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	69db      	ldr	r3, [r3, #28]
 8006eb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006eb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ebc:	d111      	bne.n	8006ee2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ec6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 f81e 	bl	8006f0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2220      	movs	r2, #32
 8006ed2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e00f      	b.n	8006f02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	69da      	ldr	r2, [r3, #28]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	4013      	ands	r3, r2
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	bf0c      	ite	eq
 8006ef2:	2301      	moveq	r3, #1
 8006ef4:	2300      	movne	r3, #0
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	461a      	mov	r2, r3
 8006efa:	79fb      	ldrb	r3, [r7, #7]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d0a0      	beq.n	8006e42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b095      	sub	sp, #84	@ 0x54
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f1a:	e853 3f00 	ldrex	r3, [r3]
 8006f1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f30:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f32:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f38:	e841 2300 	strex	r3, r2, [r1]
 8006f3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1e6      	bne.n	8006f12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	3308      	adds	r3, #8
 8006f4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4c:	6a3b      	ldr	r3, [r7, #32]
 8006f4e:	e853 3f00 	ldrex	r3, [r3]
 8006f52:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	f023 0301 	bic.w	r3, r3, #1
 8006f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	3308      	adds	r3, #8
 8006f62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f6c:	e841 2300 	strex	r3, r2, [r1]
 8006f70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1e5      	bne.n	8006f44 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d118      	bne.n	8006fb2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	e853 3f00 	ldrex	r3, [r3]
 8006f8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	f023 0310 	bic.w	r3, r3, #16
 8006f94:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f9e:	61bb      	str	r3, [r7, #24]
 8006fa0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa2:	6979      	ldr	r1, [r7, #20]
 8006fa4:	69ba      	ldr	r2, [r7, #24]
 8006fa6:	e841 2300 	strex	r3, r2, [r1]
 8006faa:	613b      	str	r3, [r7, #16]
   return(result);
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1e6      	bne.n	8006f80 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006fc6:	bf00      	nop
 8006fc8:	3754      	adds	r7, #84	@ 0x54
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b084      	sub	sp, #16
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fde:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f7ff fb05 	bl	8006600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ff6:	bf00      	nop
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b088      	sub	sp, #32
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	e853 3f00 	ldrex	r3, [r3]
 8007012:	60bb      	str	r3, [r7, #8]
   return(result);
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800701a:	61fb      	str	r3, [r7, #28]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	461a      	mov	r2, r3
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	61bb      	str	r3, [r7, #24]
 8007026:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	6979      	ldr	r1, [r7, #20]
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	613b      	str	r3, [r7, #16]
   return(result);
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e6      	bne.n	8007006 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2220      	movs	r2, #32
 800703c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7ff fad1 	bl	80065ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800704a:	bf00      	nop
 800704c:	3720      	adds	r7, #32
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007052:	b480      	push	{r7}
 8007054:	b083      	sub	sp, #12
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800705a:	bf00      	nop
 800705c:	370c      	adds	r7, #12
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007066:	b480      	push	{r7}
 8007068:	b085      	sub	sp, #20
 800706a:	af00      	add	r7, sp, #0
 800706c:	4603      	mov	r3, r0
 800706e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007070:	2300      	movs	r3, #0
 8007072:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007074:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007078:	2b84      	cmp	r3, #132	@ 0x84
 800707a:	d005      	beq.n	8007088 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800707c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4413      	add	r3, r2
 8007084:	3303      	adds	r3, #3
 8007086:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007088:	68fb      	ldr	r3, [r7, #12]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3714      	adds	r7, #20
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800709a:	f000 fb8d 	bl	80077b8 <vTaskStartScheduler>
  
  return osOK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80070a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070a6:	b089      	sub	sp, #36	@ 0x24
 80070a8:	af04      	add	r7, sp, #16
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d020      	beq.n	80070f8 <osThreadCreate+0x54>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d01c      	beq.n	80070f8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685c      	ldr	r4, [r3, #4]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	691e      	ldr	r6, [r3, #16]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7ff ffc8 	bl	8007066 <makeFreeRtosPriority>
 80070d6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	695b      	ldr	r3, [r3, #20]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070e0:	9202      	str	r2, [sp, #8]
 80070e2:	9301      	str	r3, [sp, #4]
 80070e4:	9100      	str	r1, [sp, #0]
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	4632      	mov	r2, r6
 80070ea:	4629      	mov	r1, r5
 80070ec:	4620      	mov	r0, r4
 80070ee:	f000 f8ed 	bl	80072cc <xTaskCreateStatic>
 80070f2:	4603      	mov	r3, r0
 80070f4:	60fb      	str	r3, [r7, #12]
 80070f6:	e01c      	b.n	8007132 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685c      	ldr	r4, [r3, #4]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007104:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800710c:	4618      	mov	r0, r3
 800710e:	f7ff ffaa 	bl	8007066 <makeFreeRtosPriority>
 8007112:	4602      	mov	r2, r0
 8007114:	f107 030c 	add.w	r3, r7, #12
 8007118:	9301      	str	r3, [sp, #4]
 800711a:	9200      	str	r2, [sp, #0]
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	4632      	mov	r2, r6
 8007120:	4629      	mov	r1, r5
 8007122:	4620      	mov	r0, r4
 8007124:	f000 f932 	bl	800738c <xTaskCreate>
 8007128:	4603      	mov	r3, r0
 800712a:	2b01      	cmp	r3, #1
 800712c:	d001      	beq.n	8007132 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800712e:	2300      	movs	r3, #0
 8007130:	e000      	b.n	8007134 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007132:	68fb      	ldr	r3, [r7, #12]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800713c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d001      	beq.n	8007152 <osDelay+0x16>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	e000      	b.n	8007154 <osDelay+0x18>
 8007152:	2301      	movs	r3, #1
 8007154:	4618      	mov	r0, r3
 8007156:	f000 faf9 	bl	800774c <vTaskDelay>
  
  return osOK;
 800715a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f103 0208 	add.w	r2, r3, #8
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f04f 32ff 	mov.w	r2, #4294967295
 800717c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f103 0208 	add.w	r2, r3, #8
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f103 0208 	add.w	r2, r3, #8
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007198:	bf00      	nop
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071b2:	bf00      	nop
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071be:	b480      	push	{r7}
 80071c0:	b085      	sub	sp, #20
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	689a      	ldr	r2, [r3, #8]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	683a      	ldr	r2, [r7, #0]
 80071e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	683a      	ldr	r2, [r7, #0]
 80071e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	1c5a      	adds	r2, r3, #1
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	601a      	str	r2, [r3, #0]
}
 80071fa:	bf00      	nop
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007206:	b480      	push	{r7}
 8007208:	b085      	sub	sp, #20
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721c:	d103      	bne.n	8007226 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	e00c      	b.n	8007240 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	3308      	adds	r3, #8
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	e002      	b.n	8007234 <vListInsert+0x2e>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	60fb      	str	r3, [r7, #12]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	429a      	cmp	r2, r3
 800723e:	d2f6      	bcs.n	800722e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	683a      	ldr	r2, [r7, #0]
 800724e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	601a      	str	r2, [r3, #0]
}
 800726c:	bf00      	nop
 800726e:	3714      	adds	r7, #20
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	6892      	ldr	r2, [r2, #8]
 800728e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	6852      	ldr	r2, [r2, #4]
 8007298:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d103      	bne.n	80072ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	1e5a      	subs	r2, r3, #1
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3714      	adds	r7, #20
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b08e      	sub	sp, #56	@ 0x38
 80072d0:	af04      	add	r7, sp, #16
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
 80072d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80072da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10b      	bne.n	80072f8 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80072f2:	bf00      	nop
 80072f4:	bf00      	nop
 80072f6:	e7fd      	b.n	80072f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80072f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10b      	bne.n	8007316 <xTaskCreateStatic+0x4a>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	61fb      	str	r3, [r7, #28]
}
 8007310:	bf00      	nop
 8007312:	bf00      	nop
 8007314:	e7fd      	b.n	8007312 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007316:	23a0      	movs	r3, #160	@ 0xa0
 8007318:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	2ba0      	cmp	r3, #160	@ 0xa0
 800731e:	d00b      	beq.n	8007338 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	61bb      	str	r3, [r7, #24]
}
 8007332:	bf00      	nop
 8007334:	bf00      	nop
 8007336:	e7fd      	b.n	8007334 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007338:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800733a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800733c:	2b00      	cmp	r3, #0
 800733e:	d01e      	beq.n	800737e <xTaskCreateStatic+0xb2>
 8007340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007342:	2b00      	cmp	r3, #0
 8007344:	d01b      	beq.n	800737e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007348:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800734a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800734e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007352:	2202      	movs	r2, #2
 8007354:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007358:	2300      	movs	r3, #0
 800735a:	9303      	str	r3, [sp, #12]
 800735c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735e:	9302      	str	r3, [sp, #8]
 8007360:	f107 0314 	add.w	r3, r7, #20
 8007364:	9301      	str	r3, [sp, #4]
 8007366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	68b9      	ldr	r1, [r7, #8]
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 f851 	bl	8007418 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007376:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007378:	f000 f8ee 	bl	8007558 <prvAddNewTaskToReadyList>
 800737c:	e001      	b.n	8007382 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800737e:	2300      	movs	r3, #0
 8007380:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007382:	697b      	ldr	r3, [r7, #20]
	}
 8007384:	4618      	mov	r0, r3
 8007386:	3728      	adds	r7, #40	@ 0x28
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800738c:	b580      	push	{r7, lr}
 800738e:	b08c      	sub	sp, #48	@ 0x30
 8007390:	af04      	add	r7, sp, #16
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	603b      	str	r3, [r7, #0]
 8007398:	4613      	mov	r3, r2
 800739a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800739c:	88fb      	ldrh	r3, [r7, #6]
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4618      	mov	r0, r3
 80073a2:	f000 ff91 	bl	80082c8 <pvPortMalloc>
 80073a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00e      	beq.n	80073cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80073ae:	20a0      	movs	r0, #160	@ 0xa0
 80073b0:	f000 ff8a 	bl	80082c8 <pvPortMalloc>
 80073b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d003      	beq.n	80073c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80073c2:	e005      	b.n	80073d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073c4:	6978      	ldr	r0, [r7, #20]
 80073c6:	f001 f84d 	bl	8008464 <vPortFree>
 80073ca:	e001      	b.n	80073d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80073cc:	2300      	movs	r3, #0
 80073ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d017      	beq.n	8007406 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073de:	88fa      	ldrh	r2, [r7, #6]
 80073e0:	2300      	movs	r3, #0
 80073e2:	9303      	str	r3, [sp, #12]
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	9302      	str	r3, [sp, #8]
 80073e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ea:	9301      	str	r3, [sp, #4]
 80073ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	68b9      	ldr	r1, [r7, #8]
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f000 f80f 	bl	8007418 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073fa:	69f8      	ldr	r0, [r7, #28]
 80073fc:	f000 f8ac 	bl	8007558 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007400:	2301      	movs	r3, #1
 8007402:	61bb      	str	r3, [r7, #24]
 8007404:	e002      	b.n	800740c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007406:	f04f 33ff 	mov.w	r3, #4294967295
 800740a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800740c:	69bb      	ldr	r3, [r7, #24]
	}
 800740e:	4618      	mov	r0, r3
 8007410:	3720      	adds	r7, #32
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
	...

08007418 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b088      	sub	sp, #32
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
 8007424:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007428:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007430:	3b01      	subs	r3, #1
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4413      	add	r3, r2
 8007436:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	f023 0307 	bic.w	r3, r3, #7
 800743e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	f003 0307 	and.w	r3, r3, #7
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00b      	beq.n	8007462 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800744a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744e:	f383 8811 	msr	BASEPRI, r3
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	617b      	str	r3, [r7, #20]
}
 800745c:	bf00      	nop
 800745e:	bf00      	nop
 8007460:	e7fd      	b.n	800745e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d01f      	beq.n	80074a8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007468:	2300      	movs	r3, #0
 800746a:	61fb      	str	r3, [r7, #28]
 800746c:	e012      	b.n	8007494 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	4413      	add	r3, r2
 8007474:	7819      	ldrb	r1, [r3, #0]
 8007476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	4413      	add	r3, r2
 800747c:	3334      	adds	r3, #52	@ 0x34
 800747e:	460a      	mov	r2, r1
 8007480:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	4413      	add	r3, r2
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d006      	beq.n	800749c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	3301      	adds	r3, #1
 8007492:	61fb      	str	r3, [r7, #28]
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	2b0f      	cmp	r3, #15
 8007498:	d9e9      	bls.n	800746e <prvInitialiseNewTask+0x56>
 800749a:	e000      	b.n	800749e <prvInitialiseNewTask+0x86>
			{
				break;
 800749c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800749e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80074a6:	e003      	b.n	80074b0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80074a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b2:	2b06      	cmp	r3, #6
 80074b4:	d901      	bls.n	80074ba <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074b6:	2306      	movs	r3, #6
 80074b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074be:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074c4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80074c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c8:	2200      	movs	r2, #0
 80074ca:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ce:	3304      	adds	r3, #4
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7ff fe67 	bl	80071a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d8:	3318      	adds	r3, #24
 80074da:	4618      	mov	r0, r3
 80074dc:	f7ff fe62 	bl	80071a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e8:	f1c3 0207 	rsb	r2, r3, #7
 80074ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80074f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074f4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80074f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f8:	2200      	movs	r2, #0
 80074fa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007500:	2200      	movs	r2, #0
 8007502:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007508:	334c      	adds	r3, #76	@ 0x4c
 800750a:	224c      	movs	r2, #76	@ 0x4c
 800750c:	2100      	movs	r1, #0
 800750e:	4618      	mov	r0, r3
 8007510:	f001 fdce 	bl	80090b0 <memset>
 8007514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007516:	4a0d      	ldr	r2, [pc, #52]	@ (800754c <prvInitialiseNewTask+0x134>)
 8007518:	651a      	str	r2, [r3, #80]	@ 0x50
 800751a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751c:	4a0c      	ldr	r2, [pc, #48]	@ (8007550 <prvInitialiseNewTask+0x138>)
 800751e:	655a      	str	r2, [r3, #84]	@ 0x54
 8007520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007522:	4a0c      	ldr	r2, [pc, #48]	@ (8007554 <prvInitialiseNewTask+0x13c>)
 8007524:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007526:	683a      	ldr	r2, [r7, #0]
 8007528:	68f9      	ldr	r1, [r7, #12]
 800752a:	69b8      	ldr	r0, [r7, #24]
 800752c:	f000 fcba 	bl	8007ea4 <pxPortInitialiseStack>
 8007530:	4602      	mov	r2, r0
 8007532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007534:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007538:	2b00      	cmp	r3, #0
 800753a:	d002      	beq.n	8007542 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800753c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800753e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007540:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007542:	bf00      	nop
 8007544:	3720      	adds	r7, #32
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	200016ec 	.word	0x200016ec
 8007550:	20001754 	.word	0x20001754
 8007554:	200017bc 	.word	0x200017bc

08007558 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007560:	f000 fdd2 	bl	8008108 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007564:	4b2a      	ldr	r3, [pc, #168]	@ (8007610 <prvAddNewTaskToReadyList+0xb8>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	3301      	adds	r3, #1
 800756a:	4a29      	ldr	r2, [pc, #164]	@ (8007610 <prvAddNewTaskToReadyList+0xb8>)
 800756c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800756e:	4b29      	ldr	r3, [pc, #164]	@ (8007614 <prvAddNewTaskToReadyList+0xbc>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d109      	bne.n	800758a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007576:	4a27      	ldr	r2, [pc, #156]	@ (8007614 <prvAddNewTaskToReadyList+0xbc>)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800757c:	4b24      	ldr	r3, [pc, #144]	@ (8007610 <prvAddNewTaskToReadyList+0xb8>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d110      	bne.n	80075a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007584:	f000 fb64 	bl	8007c50 <prvInitialiseTaskLists>
 8007588:	e00d      	b.n	80075a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800758a:	4b23      	ldr	r3, [pc, #140]	@ (8007618 <prvAddNewTaskToReadyList+0xc0>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d109      	bne.n	80075a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007592:	4b20      	ldr	r3, [pc, #128]	@ (8007614 <prvAddNewTaskToReadyList+0xbc>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759c:	429a      	cmp	r2, r3
 800759e:	d802      	bhi.n	80075a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80075a0:	4a1c      	ldr	r2, [pc, #112]	@ (8007614 <prvAddNewTaskToReadyList+0xbc>)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80075a6:	4b1d      	ldr	r3, [pc, #116]	@ (800761c <prvAddNewTaskToReadyList+0xc4>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	3301      	adds	r3, #1
 80075ac:	4a1b      	ldr	r2, [pc, #108]	@ (800761c <prvAddNewTaskToReadyList+0xc4>)
 80075ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b4:	2201      	movs	r2, #1
 80075b6:	409a      	lsls	r2, r3
 80075b8:	4b19      	ldr	r3, [pc, #100]	@ (8007620 <prvAddNewTaskToReadyList+0xc8>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4313      	orrs	r3, r2
 80075be:	4a18      	ldr	r2, [pc, #96]	@ (8007620 <prvAddNewTaskToReadyList+0xc8>)
 80075c0:	6013      	str	r3, [r2, #0]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075c6:	4613      	mov	r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4413      	add	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4a15      	ldr	r2, [pc, #84]	@ (8007624 <prvAddNewTaskToReadyList+0xcc>)
 80075d0:	441a      	add	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	3304      	adds	r3, #4
 80075d6:	4619      	mov	r1, r3
 80075d8:	4610      	mov	r0, r2
 80075da:	f7ff fdf0 	bl	80071be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80075de:	f000 fdc5 	bl	800816c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80075e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007618 <prvAddNewTaskToReadyList+0xc0>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00e      	beq.n	8007608 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80075ea:	4b0a      	ldr	r3, [pc, #40]	@ (8007614 <prvAddNewTaskToReadyList+0xbc>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d207      	bcs.n	8007608 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80075f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007628 <prvAddNewTaskToReadyList+0xd0>)
 80075fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007608:	bf00      	nop
 800760a:	3708      	adds	r7, #8
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	20000ae0 	.word	0x20000ae0
 8007614:	200009e0 	.word	0x200009e0
 8007618:	20000aec 	.word	0x20000aec
 800761c:	20000afc 	.word	0x20000afc
 8007620:	20000ae8 	.word	0x20000ae8
 8007624:	200009e4 	.word	0x200009e4
 8007628:	e000ed04 	.word	0xe000ed04

0800762c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007634:	f000 fd68 	bl	8008108 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d102      	bne.n	8007644 <vTaskDelete+0x18>
 800763e:	4b39      	ldr	r3, [pc, #228]	@ (8007724 <vTaskDelete+0xf8>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	e000      	b.n	8007646 <vTaskDelete+0x1a>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	3304      	adds	r3, #4
 800764c:	4618      	mov	r0, r3
 800764e:	f7ff fe13 	bl	8007278 <uxListRemove>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d115      	bne.n	8007684 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800765c:	4932      	ldr	r1, [pc, #200]	@ (8007728 <vTaskDelete+0xfc>)
 800765e:	4613      	mov	r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	440b      	add	r3, r1
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10a      	bne.n	8007684 <vTaskDelete+0x58>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007672:	2201      	movs	r2, #1
 8007674:	fa02 f303 	lsl.w	r3, r2, r3
 8007678:	43da      	mvns	r2, r3
 800767a:	4b2c      	ldr	r3, [pc, #176]	@ (800772c <vTaskDelete+0x100>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4013      	ands	r3, r2
 8007680:	4a2a      	ldr	r2, [pc, #168]	@ (800772c <vTaskDelete+0x100>)
 8007682:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007688:	2b00      	cmp	r3, #0
 800768a:	d004      	beq.n	8007696 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	3318      	adds	r3, #24
 8007690:	4618      	mov	r0, r3
 8007692:	f7ff fdf1 	bl	8007278 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007696:	4b26      	ldr	r3, [pc, #152]	@ (8007730 <vTaskDelete+0x104>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	3301      	adds	r3, #1
 800769c:	4a24      	ldr	r2, [pc, #144]	@ (8007730 <vTaskDelete+0x104>)
 800769e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80076a0:	4b20      	ldr	r3, [pc, #128]	@ (8007724 <vTaskDelete+0xf8>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d10b      	bne.n	80076c2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3304      	adds	r3, #4
 80076ae:	4619      	mov	r1, r3
 80076b0:	4820      	ldr	r0, [pc, #128]	@ (8007734 <vTaskDelete+0x108>)
 80076b2:	f7ff fd84 	bl	80071be <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80076b6:	4b20      	ldr	r3, [pc, #128]	@ (8007738 <vTaskDelete+0x10c>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	3301      	adds	r3, #1
 80076bc:	4a1e      	ldr	r2, [pc, #120]	@ (8007738 <vTaskDelete+0x10c>)
 80076be:	6013      	str	r3, [r2, #0]
 80076c0:	e009      	b.n	80076d6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80076c2:	4b1e      	ldr	r3, [pc, #120]	@ (800773c <vTaskDelete+0x110>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	3b01      	subs	r3, #1
 80076c8:	4a1c      	ldr	r2, [pc, #112]	@ (800773c <vTaskDelete+0x110>)
 80076ca:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 fb2d 	bl	8007d2c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80076d2:	f000 fb61 	bl	8007d98 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80076d6:	f000 fd49 	bl	800816c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80076da:	4b19      	ldr	r3, [pc, #100]	@ (8007740 <vTaskDelete+0x114>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d01c      	beq.n	800771c <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 80076e2:	4b10      	ldr	r3, [pc, #64]	@ (8007724 <vTaskDelete+0xf8>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d117      	bne.n	800771c <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80076ec:	4b15      	ldr	r3, [pc, #84]	@ (8007744 <vTaskDelete+0x118>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00b      	beq.n	800770c <vTaskDelete+0xe0>
	__asm volatile
 80076f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f8:	f383 8811 	msr	BASEPRI, r3
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	f3bf 8f4f 	dsb	sy
 8007704:	60bb      	str	r3, [r7, #8]
}
 8007706:	bf00      	nop
 8007708:	bf00      	nop
 800770a:	e7fd      	b.n	8007708 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800770c:	4b0e      	ldr	r3, [pc, #56]	@ (8007748 <vTaskDelete+0x11c>)
 800770e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007712:	601a      	str	r2, [r3, #0]
 8007714:	f3bf 8f4f 	dsb	sy
 8007718:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800771c:	bf00      	nop
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	200009e0 	.word	0x200009e0
 8007728:	200009e4 	.word	0x200009e4
 800772c:	20000ae8 	.word	0x20000ae8
 8007730:	20000afc 	.word	0x20000afc
 8007734:	20000ab4 	.word	0x20000ab4
 8007738:	20000ac8 	.word	0x20000ac8
 800773c:	20000ae0 	.word	0x20000ae0
 8007740:	20000aec 	.word	0x20000aec
 8007744:	20000b08 	.word	0x20000b08
 8007748:	e000ed04 	.word	0xe000ed04

0800774c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007754:	2300      	movs	r3, #0
 8007756:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d018      	beq.n	8007790 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800775e:	4b14      	ldr	r3, [pc, #80]	@ (80077b0 <vTaskDelay+0x64>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00b      	beq.n	800777e <vTaskDelay+0x32>
	__asm volatile
 8007766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776a:	f383 8811 	msr	BASEPRI, r3
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	60bb      	str	r3, [r7, #8]
}
 8007778:	bf00      	nop
 800777a:	bf00      	nop
 800777c:	e7fd      	b.n	800777a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800777e:	f000 f885 	bl	800788c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007782:	2100      	movs	r1, #0
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 fb27 	bl	8007dd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800778a:	f000 f88d 	bl	80078a8 <xTaskResumeAll>
 800778e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d107      	bne.n	80077a6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007796:	4b07      	ldr	r3, [pc, #28]	@ (80077b4 <vTaskDelay+0x68>)
 8007798:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077a6:	bf00      	nop
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	20000b08 	.word	0x20000b08
 80077b4:	e000ed04 	.word	0xe000ed04

080077b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b08a      	sub	sp, #40	@ 0x28
 80077bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80077be:	2300      	movs	r3, #0
 80077c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80077c2:	2300      	movs	r3, #0
 80077c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80077c6:	463a      	mov	r2, r7
 80077c8:	1d39      	adds	r1, r7, #4
 80077ca:	f107 0308 	add.w	r3, r7, #8
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7f8 feec 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	9202      	str	r2, [sp, #8]
 80077dc:	9301      	str	r3, [sp, #4]
 80077de:	2300      	movs	r3, #0
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	2300      	movs	r3, #0
 80077e4:	460a      	mov	r2, r1
 80077e6:	4921      	ldr	r1, [pc, #132]	@ (800786c <vTaskStartScheduler+0xb4>)
 80077e8:	4821      	ldr	r0, [pc, #132]	@ (8007870 <vTaskStartScheduler+0xb8>)
 80077ea:	f7ff fd6f 	bl	80072cc <xTaskCreateStatic>
 80077ee:	4603      	mov	r3, r0
 80077f0:	4a20      	ldr	r2, [pc, #128]	@ (8007874 <vTaskStartScheduler+0xbc>)
 80077f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80077f4:	4b1f      	ldr	r3, [pc, #124]	@ (8007874 <vTaskStartScheduler+0xbc>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d002      	beq.n	8007802 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80077fc:	2301      	movs	r3, #1
 80077fe:	617b      	str	r3, [r7, #20]
 8007800:	e001      	b.n	8007806 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007802:	2300      	movs	r3, #0
 8007804:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d11b      	bne.n	8007844 <vTaskStartScheduler+0x8c>
	__asm volatile
 800780c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	613b      	str	r3, [r7, #16]
}
 800781e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007820:	4b15      	ldr	r3, [pc, #84]	@ (8007878 <vTaskStartScheduler+0xc0>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	334c      	adds	r3, #76	@ 0x4c
 8007826:	4a15      	ldr	r2, [pc, #84]	@ (800787c <vTaskStartScheduler+0xc4>)
 8007828:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800782a:	4b15      	ldr	r3, [pc, #84]	@ (8007880 <vTaskStartScheduler+0xc8>)
 800782c:	f04f 32ff 	mov.w	r2, #4294967295
 8007830:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007832:	4b14      	ldr	r3, [pc, #80]	@ (8007884 <vTaskStartScheduler+0xcc>)
 8007834:	2201      	movs	r2, #1
 8007836:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007838:	4b13      	ldr	r3, [pc, #76]	@ (8007888 <vTaskStartScheduler+0xd0>)
 800783a:	2200      	movs	r2, #0
 800783c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800783e:	f000 fbbf 	bl	8007fc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007842:	e00f      	b.n	8007864 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784a:	d10b      	bne.n	8007864 <vTaskStartScheduler+0xac>
	__asm volatile
 800784c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007850:	f383 8811 	msr	BASEPRI, r3
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	60fb      	str	r3, [r7, #12]
}
 800785e:	bf00      	nop
 8007860:	bf00      	nop
 8007862:	e7fd      	b.n	8007860 <vTaskStartScheduler+0xa8>
}
 8007864:	bf00      	nop
 8007866:	3718      	adds	r7, #24
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	08009eac 	.word	0x08009eac
 8007870:	08007c21 	.word	0x08007c21
 8007874:	20000b04 	.word	0x20000b04
 8007878:	200009e0 	.word	0x200009e0
 800787c:	20000028 	.word	0x20000028
 8007880:	20000b00 	.word	0x20000b00
 8007884:	20000aec 	.word	0x20000aec
 8007888:	20000ae4 	.word	0x20000ae4

0800788c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800788c:	b480      	push	{r7}
 800788e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007890:	4b04      	ldr	r3, [pc, #16]	@ (80078a4 <vTaskSuspendAll+0x18>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3301      	adds	r3, #1
 8007896:	4a03      	ldr	r2, [pc, #12]	@ (80078a4 <vTaskSuspendAll+0x18>)
 8007898:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800789a:	bf00      	nop
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr
 80078a4:	20000b08 	.word	0x20000b08

080078a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80078ae:	2300      	movs	r3, #0
 80078b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80078b2:	2300      	movs	r3, #0
 80078b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80078b6:	4b42      	ldr	r3, [pc, #264]	@ (80079c0 <xTaskResumeAll+0x118>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10b      	bne.n	80078d6 <xTaskResumeAll+0x2e>
	__asm volatile
 80078be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	603b      	str	r3, [r7, #0]
}
 80078d0:	bf00      	nop
 80078d2:	bf00      	nop
 80078d4:	e7fd      	b.n	80078d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80078d6:	f000 fc17 	bl	8008108 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80078da:	4b39      	ldr	r3, [pc, #228]	@ (80079c0 <xTaskResumeAll+0x118>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3b01      	subs	r3, #1
 80078e0:	4a37      	ldr	r2, [pc, #220]	@ (80079c0 <xTaskResumeAll+0x118>)
 80078e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078e4:	4b36      	ldr	r3, [pc, #216]	@ (80079c0 <xTaskResumeAll+0x118>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d161      	bne.n	80079b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80078ec:	4b35      	ldr	r3, [pc, #212]	@ (80079c4 <xTaskResumeAll+0x11c>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d05d      	beq.n	80079b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078f4:	e02e      	b.n	8007954 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078f6:	4b34      	ldr	r3, [pc, #208]	@ (80079c8 <xTaskResumeAll+0x120>)
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	3318      	adds	r3, #24
 8007902:	4618      	mov	r0, r3
 8007904:	f7ff fcb8 	bl	8007278 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	3304      	adds	r3, #4
 800790c:	4618      	mov	r0, r3
 800790e:	f7ff fcb3 	bl	8007278 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007916:	2201      	movs	r2, #1
 8007918:	409a      	lsls	r2, r3
 800791a:	4b2c      	ldr	r3, [pc, #176]	@ (80079cc <xTaskResumeAll+0x124>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4313      	orrs	r3, r2
 8007920:	4a2a      	ldr	r2, [pc, #168]	@ (80079cc <xTaskResumeAll+0x124>)
 8007922:	6013      	str	r3, [r2, #0]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007928:	4613      	mov	r3, r2
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	4413      	add	r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	4a27      	ldr	r2, [pc, #156]	@ (80079d0 <xTaskResumeAll+0x128>)
 8007932:	441a      	add	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	3304      	adds	r3, #4
 8007938:	4619      	mov	r1, r3
 800793a:	4610      	mov	r0, r2
 800793c:	f7ff fc3f 	bl	80071be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007944:	4b23      	ldr	r3, [pc, #140]	@ (80079d4 <xTaskResumeAll+0x12c>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800794a:	429a      	cmp	r2, r3
 800794c:	d302      	bcc.n	8007954 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800794e:	4b22      	ldr	r3, [pc, #136]	@ (80079d8 <xTaskResumeAll+0x130>)
 8007950:	2201      	movs	r2, #1
 8007952:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007954:	4b1c      	ldr	r3, [pc, #112]	@ (80079c8 <xTaskResumeAll+0x120>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1cc      	bne.n	80078f6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007962:	f000 fa19 	bl	8007d98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007966:	4b1d      	ldr	r3, [pc, #116]	@ (80079dc <xTaskResumeAll+0x134>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d010      	beq.n	8007994 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007972:	f000 f837 	bl	80079e4 <xTaskIncrementTick>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800797c:	4b16      	ldr	r3, [pc, #88]	@ (80079d8 <xTaskResumeAll+0x130>)
 800797e:	2201      	movs	r2, #1
 8007980:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	3b01      	subs	r3, #1
 8007986:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1f1      	bne.n	8007972 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800798e:	4b13      	ldr	r3, [pc, #76]	@ (80079dc <xTaskResumeAll+0x134>)
 8007990:	2200      	movs	r2, #0
 8007992:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007994:	4b10      	ldr	r3, [pc, #64]	@ (80079d8 <xTaskResumeAll+0x130>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d009      	beq.n	80079b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800799c:	2301      	movs	r3, #1
 800799e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80079a0:	4b0f      	ldr	r3, [pc, #60]	@ (80079e0 <xTaskResumeAll+0x138>)
 80079a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079a6:	601a      	str	r2, [r3, #0]
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079b0:	f000 fbdc 	bl	800816c <vPortExitCritical>

	return xAlreadyYielded;
 80079b4:	68bb      	ldr	r3, [r7, #8]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	20000b08 	.word	0x20000b08
 80079c4:	20000ae0 	.word	0x20000ae0
 80079c8:	20000aa0 	.word	0x20000aa0
 80079cc:	20000ae8 	.word	0x20000ae8
 80079d0:	200009e4 	.word	0x200009e4
 80079d4:	200009e0 	.word	0x200009e0
 80079d8:	20000af4 	.word	0x20000af4
 80079dc:	20000af0 	.word	0x20000af0
 80079e0:	e000ed04 	.word	0xe000ed04

080079e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80079ea:	2300      	movs	r3, #0
 80079ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079ee:	4b4f      	ldr	r3, [pc, #316]	@ (8007b2c <xTaskIncrementTick+0x148>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	f040 808f 	bne.w	8007b16 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80079f8:	4b4d      	ldr	r3, [pc, #308]	@ (8007b30 <xTaskIncrementTick+0x14c>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3301      	adds	r3, #1
 80079fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a00:	4a4b      	ldr	r2, [pc, #300]	@ (8007b30 <xTaskIncrementTick+0x14c>)
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d121      	bne.n	8007a50 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a0c:	4b49      	ldr	r3, [pc, #292]	@ (8007b34 <xTaskIncrementTick+0x150>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00b      	beq.n	8007a2e <xTaskIncrementTick+0x4a>
	__asm volatile
 8007a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1a:	f383 8811 	msr	BASEPRI, r3
 8007a1e:	f3bf 8f6f 	isb	sy
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	603b      	str	r3, [r7, #0]
}
 8007a28:	bf00      	nop
 8007a2a:	bf00      	nop
 8007a2c:	e7fd      	b.n	8007a2a <xTaskIncrementTick+0x46>
 8007a2e:	4b41      	ldr	r3, [pc, #260]	@ (8007b34 <xTaskIncrementTick+0x150>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	60fb      	str	r3, [r7, #12]
 8007a34:	4b40      	ldr	r3, [pc, #256]	@ (8007b38 <xTaskIncrementTick+0x154>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a3e      	ldr	r2, [pc, #248]	@ (8007b34 <xTaskIncrementTick+0x150>)
 8007a3a:	6013      	str	r3, [r2, #0]
 8007a3c:	4a3e      	ldr	r2, [pc, #248]	@ (8007b38 <xTaskIncrementTick+0x154>)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6013      	str	r3, [r2, #0]
 8007a42:	4b3e      	ldr	r3, [pc, #248]	@ (8007b3c <xTaskIncrementTick+0x158>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	3301      	adds	r3, #1
 8007a48:	4a3c      	ldr	r2, [pc, #240]	@ (8007b3c <xTaskIncrementTick+0x158>)
 8007a4a:	6013      	str	r3, [r2, #0]
 8007a4c:	f000 f9a4 	bl	8007d98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a50:	4b3b      	ldr	r3, [pc, #236]	@ (8007b40 <xTaskIncrementTick+0x15c>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	693a      	ldr	r2, [r7, #16]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d348      	bcc.n	8007aec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a5a:	4b36      	ldr	r3, [pc, #216]	@ (8007b34 <xTaskIncrementTick+0x150>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d104      	bne.n	8007a6e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a64:	4b36      	ldr	r3, [pc, #216]	@ (8007b40 <xTaskIncrementTick+0x15c>)
 8007a66:	f04f 32ff 	mov.w	r2, #4294967295
 8007a6a:	601a      	str	r2, [r3, #0]
					break;
 8007a6c:	e03e      	b.n	8007aec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a6e:	4b31      	ldr	r3, [pc, #196]	@ (8007b34 <xTaskIncrementTick+0x150>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d203      	bcs.n	8007a8e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a86:	4a2e      	ldr	r2, [pc, #184]	@ (8007b40 <xTaskIncrementTick+0x15c>)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a8c:	e02e      	b.n	8007aec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	3304      	adds	r3, #4
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7ff fbf0 	bl	8007278 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d004      	beq.n	8007aaa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	3318      	adds	r3, #24
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7ff fbe7 	bl	8007278 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aae:	2201      	movs	r2, #1
 8007ab0:	409a      	lsls	r2, r3
 8007ab2:	4b24      	ldr	r3, [pc, #144]	@ (8007b44 <xTaskIncrementTick+0x160>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	4a22      	ldr	r2, [pc, #136]	@ (8007b44 <xTaskIncrementTick+0x160>)
 8007aba:	6013      	str	r3, [r2, #0]
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	4413      	add	r3, r2
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4a1f      	ldr	r2, [pc, #124]	@ (8007b48 <xTaskIncrementTick+0x164>)
 8007aca:	441a      	add	r2, r3
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	3304      	adds	r3, #4
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	4610      	mov	r0, r2
 8007ad4:	f7ff fb73 	bl	80071be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007adc:	4b1b      	ldr	r3, [pc, #108]	@ (8007b4c <xTaskIncrementTick+0x168>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d3b9      	bcc.n	8007a5a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007aea:	e7b6      	b.n	8007a5a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007aec:	4b17      	ldr	r3, [pc, #92]	@ (8007b4c <xTaskIncrementTick+0x168>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007af2:	4915      	ldr	r1, [pc, #84]	@ (8007b48 <xTaskIncrementTick+0x164>)
 8007af4:	4613      	mov	r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	4413      	add	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	440b      	add	r3, r1
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d901      	bls.n	8007b08 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007b04:	2301      	movs	r3, #1
 8007b06:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b08:	4b11      	ldr	r3, [pc, #68]	@ (8007b50 <xTaskIncrementTick+0x16c>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d007      	beq.n	8007b20 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007b10:	2301      	movs	r3, #1
 8007b12:	617b      	str	r3, [r7, #20]
 8007b14:	e004      	b.n	8007b20 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b16:	4b0f      	ldr	r3, [pc, #60]	@ (8007b54 <xTaskIncrementTick+0x170>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8007b54 <xTaskIncrementTick+0x170>)
 8007b1e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b20:	697b      	ldr	r3, [r7, #20]
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3718      	adds	r7, #24
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	20000b08 	.word	0x20000b08
 8007b30:	20000ae4 	.word	0x20000ae4
 8007b34:	20000a98 	.word	0x20000a98
 8007b38:	20000a9c 	.word	0x20000a9c
 8007b3c:	20000af8 	.word	0x20000af8
 8007b40:	20000b00 	.word	0x20000b00
 8007b44:	20000ae8 	.word	0x20000ae8
 8007b48:	200009e4 	.word	0x200009e4
 8007b4c:	200009e0 	.word	0x200009e0
 8007b50:	20000af4 	.word	0x20000af4
 8007b54:	20000af0 	.word	0x20000af0

08007b58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b087      	sub	sp, #28
 8007b5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b5e:	4b2a      	ldr	r3, [pc, #168]	@ (8007c08 <vTaskSwitchContext+0xb0>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d003      	beq.n	8007b6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b66:	4b29      	ldr	r3, [pc, #164]	@ (8007c0c <vTaskSwitchContext+0xb4>)
 8007b68:	2201      	movs	r2, #1
 8007b6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b6c:	e045      	b.n	8007bfa <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8007b6e:	4b27      	ldr	r3, [pc, #156]	@ (8007c0c <vTaskSwitchContext+0xb4>)
 8007b70:	2200      	movs	r2, #0
 8007b72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b74:	4b26      	ldr	r3, [pc, #152]	@ (8007c10 <vTaskSwitchContext+0xb8>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	fab3 f383 	clz	r3, r3
 8007b80:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007b82:	7afb      	ldrb	r3, [r7, #11]
 8007b84:	f1c3 031f 	rsb	r3, r3, #31
 8007b88:	617b      	str	r3, [r7, #20]
 8007b8a:	4922      	ldr	r1, [pc, #136]	@ (8007c14 <vTaskSwitchContext+0xbc>)
 8007b8c:	697a      	ldr	r2, [r7, #20]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	4413      	add	r3, r2
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	440b      	add	r3, r1
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10b      	bne.n	8007bb6 <vTaskSwitchContext+0x5e>
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	607b      	str	r3, [r7, #4]
}
 8007bb0:	bf00      	nop
 8007bb2:	bf00      	nop
 8007bb4:	e7fd      	b.n	8007bb2 <vTaskSwitchContext+0x5a>
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	4413      	add	r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4a14      	ldr	r2, [pc, #80]	@ (8007c14 <vTaskSwitchContext+0xbc>)
 8007bc2:	4413      	add	r3, r2
 8007bc4:	613b      	str	r3, [r7, #16]
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	605a      	str	r2, [r3, #4]
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	3308      	adds	r3, #8
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d104      	bne.n	8007be6 <vTaskSwitchContext+0x8e>
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	685a      	ldr	r2, [r3, #4]
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	605a      	str	r2, [r3, #4]
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	4a0a      	ldr	r2, [pc, #40]	@ (8007c18 <vTaskSwitchContext+0xc0>)
 8007bee:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007bf0:	4b09      	ldr	r3, [pc, #36]	@ (8007c18 <vTaskSwitchContext+0xc0>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	334c      	adds	r3, #76	@ 0x4c
 8007bf6:	4a09      	ldr	r2, [pc, #36]	@ (8007c1c <vTaskSwitchContext+0xc4>)
 8007bf8:	6013      	str	r3, [r2, #0]
}
 8007bfa:	bf00      	nop
 8007bfc:	371c      	adds	r7, #28
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	20000b08 	.word	0x20000b08
 8007c0c:	20000af4 	.word	0x20000af4
 8007c10:	20000ae8 	.word	0x20000ae8
 8007c14:	200009e4 	.word	0x200009e4
 8007c18:	200009e0 	.word	0x200009e0
 8007c1c:	20000028 	.word	0x20000028

08007c20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007c28:	f000 f852 	bl	8007cd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c2c:	4b06      	ldr	r3, [pc, #24]	@ (8007c48 <prvIdleTask+0x28>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d9f9      	bls.n	8007c28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007c34:	4b05      	ldr	r3, [pc, #20]	@ (8007c4c <prvIdleTask+0x2c>)
 8007c36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c3a:	601a      	str	r2, [r3, #0]
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007c44:	e7f0      	b.n	8007c28 <prvIdleTask+0x8>
 8007c46:	bf00      	nop
 8007c48:	200009e4 	.word	0x200009e4
 8007c4c:	e000ed04 	.word	0xe000ed04

08007c50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c56:	2300      	movs	r3, #0
 8007c58:	607b      	str	r3, [r7, #4]
 8007c5a:	e00c      	b.n	8007c76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	4413      	add	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4a12      	ldr	r2, [pc, #72]	@ (8007cb0 <prvInitialiseTaskLists+0x60>)
 8007c68:	4413      	add	r3, r2
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7ff fa7a 	bl	8007164 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	3301      	adds	r3, #1
 8007c74:	607b      	str	r3, [r7, #4]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2b06      	cmp	r3, #6
 8007c7a:	d9ef      	bls.n	8007c5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c7c:	480d      	ldr	r0, [pc, #52]	@ (8007cb4 <prvInitialiseTaskLists+0x64>)
 8007c7e:	f7ff fa71 	bl	8007164 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c82:	480d      	ldr	r0, [pc, #52]	@ (8007cb8 <prvInitialiseTaskLists+0x68>)
 8007c84:	f7ff fa6e 	bl	8007164 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c88:	480c      	ldr	r0, [pc, #48]	@ (8007cbc <prvInitialiseTaskLists+0x6c>)
 8007c8a:	f7ff fa6b 	bl	8007164 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c8e:	480c      	ldr	r0, [pc, #48]	@ (8007cc0 <prvInitialiseTaskLists+0x70>)
 8007c90:	f7ff fa68 	bl	8007164 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c94:	480b      	ldr	r0, [pc, #44]	@ (8007cc4 <prvInitialiseTaskLists+0x74>)
 8007c96:	f7ff fa65 	bl	8007164 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8007cc8 <prvInitialiseTaskLists+0x78>)
 8007c9c:	4a05      	ldr	r2, [pc, #20]	@ (8007cb4 <prvInitialiseTaskLists+0x64>)
 8007c9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8007ccc <prvInitialiseTaskLists+0x7c>)
 8007ca2:	4a05      	ldr	r2, [pc, #20]	@ (8007cb8 <prvInitialiseTaskLists+0x68>)
 8007ca4:	601a      	str	r2, [r3, #0]
}
 8007ca6:	bf00      	nop
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	200009e4 	.word	0x200009e4
 8007cb4:	20000a70 	.word	0x20000a70
 8007cb8:	20000a84 	.word	0x20000a84
 8007cbc:	20000aa0 	.word	0x20000aa0
 8007cc0:	20000ab4 	.word	0x20000ab4
 8007cc4:	20000acc 	.word	0x20000acc
 8007cc8:	20000a98 	.word	0x20000a98
 8007ccc:	20000a9c 	.word	0x20000a9c

08007cd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007cd6:	e019      	b.n	8007d0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007cd8:	f000 fa16 	bl	8008108 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cdc:	4b10      	ldr	r3, [pc, #64]	@ (8007d20 <prvCheckTasksWaitingTermination+0x50>)
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7ff fac5 	bl	8007278 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007cee:	4b0d      	ldr	r3, [pc, #52]	@ (8007d24 <prvCheckTasksWaitingTermination+0x54>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	4a0b      	ldr	r2, [pc, #44]	@ (8007d24 <prvCheckTasksWaitingTermination+0x54>)
 8007cf6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8007d28 <prvCheckTasksWaitingTermination+0x58>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8007d28 <prvCheckTasksWaitingTermination+0x58>)
 8007d00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d02:	f000 fa33 	bl	800816c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f810 	bl	8007d2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d0c:	4b06      	ldr	r3, [pc, #24]	@ (8007d28 <prvCheckTasksWaitingTermination+0x58>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1e1      	bne.n	8007cd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007d14:	bf00      	nop
 8007d16:	bf00      	nop
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	20000ab4 	.word	0x20000ab4
 8007d24:	20000ae0 	.word	0x20000ae0
 8007d28:	20000ac8 	.word	0x20000ac8

08007d2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	334c      	adds	r3, #76	@ 0x4c
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f001 f9d1 	bl	80090e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d108      	bne.n	8007d5a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f000 fb89 	bl	8008464 <vPortFree>
				vPortFree( pxTCB );
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fb86 	bl	8008464 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d58:	e019      	b.n	8007d8e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d103      	bne.n	8007d6c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fb7d 	bl	8008464 <vPortFree>
	}
 8007d6a:	e010      	b.n	8007d8e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d00b      	beq.n	8007d8e <prvDeleteTCB+0x62>
	__asm volatile
 8007d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d7a:	f383 8811 	msr	BASEPRI, r3
 8007d7e:	f3bf 8f6f 	isb	sy
 8007d82:	f3bf 8f4f 	dsb	sy
 8007d86:	60fb      	str	r3, [r7, #12]
}
 8007d88:	bf00      	nop
 8007d8a:	bf00      	nop
 8007d8c:	e7fd      	b.n	8007d8a <prvDeleteTCB+0x5e>
	}
 8007d8e:	bf00      	nop
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
	...

08007d98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8007dd0 <prvResetNextTaskUnblockTime+0x38>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d104      	bne.n	8007db2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007da8:	4b0a      	ldr	r3, [pc, #40]	@ (8007dd4 <prvResetNextTaskUnblockTime+0x3c>)
 8007daa:	f04f 32ff 	mov.w	r2, #4294967295
 8007dae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007db0:	e008      	b.n	8007dc4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007db2:	4b07      	ldr	r3, [pc, #28]	@ (8007dd0 <prvResetNextTaskUnblockTime+0x38>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	4a04      	ldr	r2, [pc, #16]	@ (8007dd4 <prvResetNextTaskUnblockTime+0x3c>)
 8007dc2:	6013      	str	r3, [r2, #0]
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr
 8007dd0:	20000a98 	.word	0x20000a98
 8007dd4:	20000b00 	.word	0x20000b00

08007dd8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007de2:	4b29      	ldr	r3, [pc, #164]	@ (8007e88 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007de8:	4b28      	ldr	r3, [pc, #160]	@ (8007e8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	3304      	adds	r3, #4
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7ff fa42 	bl	8007278 <uxListRemove>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10b      	bne.n	8007e12 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007dfa:	4b24      	ldr	r3, [pc, #144]	@ (8007e8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e00:	2201      	movs	r2, #1
 8007e02:	fa02 f303 	lsl.w	r3, r2, r3
 8007e06:	43da      	mvns	r2, r3
 8007e08:	4b21      	ldr	r3, [pc, #132]	@ (8007e90 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	4a20      	ldr	r2, [pc, #128]	@ (8007e90 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007e10:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e18:	d10a      	bne.n	8007e30 <prvAddCurrentTaskToDelayedList+0x58>
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d007      	beq.n	8007e30 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e20:	4b1a      	ldr	r3, [pc, #104]	@ (8007e8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3304      	adds	r3, #4
 8007e26:	4619      	mov	r1, r3
 8007e28:	481a      	ldr	r0, [pc, #104]	@ (8007e94 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007e2a:	f7ff f9c8 	bl	80071be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e2e:	e026      	b.n	8007e7e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4413      	add	r3, r2
 8007e36:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e38:	4b14      	ldr	r3, [pc, #80]	@ (8007e8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e40:	68ba      	ldr	r2, [r7, #8]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d209      	bcs.n	8007e5c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e48:	4b13      	ldr	r3, [pc, #76]	@ (8007e98 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8007e8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	3304      	adds	r3, #4
 8007e52:	4619      	mov	r1, r3
 8007e54:	4610      	mov	r0, r2
 8007e56:	f7ff f9d6 	bl	8007206 <vListInsert>
}
 8007e5a:	e010      	b.n	8007e7e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8007e9c <prvAddCurrentTaskToDelayedList+0xc4>)
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	4b0a      	ldr	r3, [pc, #40]	@ (8007e8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3304      	adds	r3, #4
 8007e66:	4619      	mov	r1, r3
 8007e68:	4610      	mov	r0, r2
 8007e6a:	f7ff f9cc 	bl	8007206 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8007ea0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d202      	bcs.n	8007e7e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007e78:	4a09      	ldr	r2, [pc, #36]	@ (8007ea0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	6013      	str	r3, [r2, #0]
}
 8007e7e:	bf00      	nop
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	20000ae4 	.word	0x20000ae4
 8007e8c:	200009e0 	.word	0x200009e0
 8007e90:	20000ae8 	.word	0x20000ae8
 8007e94:	20000acc 	.word	0x20000acc
 8007e98:	20000a9c 	.word	0x20000a9c
 8007e9c:	20000a98 	.word	0x20000a98
 8007ea0:	20000b00 	.word	0x20000b00

08007ea4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	3b04      	subs	r3, #4
 8007eb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007ebc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	3b04      	subs	r3, #4
 8007ec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	f023 0201 	bic.w	r2, r3, #1
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	3b04      	subs	r3, #4
 8007ed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ed4:	4a0c      	ldr	r2, [pc, #48]	@ (8007f08 <pxPortInitialiseStack+0x64>)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	3b14      	subs	r3, #20
 8007ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	3b04      	subs	r3, #4
 8007eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f06f 0202 	mvn.w	r2, #2
 8007ef2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	3b20      	subs	r3, #32
 8007ef8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007efa:	68fb      	ldr	r3, [r7, #12]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3714      	adds	r7, #20
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr
 8007f08:	08007f0d 	.word	0x08007f0d

08007f0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f12:	2300      	movs	r3, #0
 8007f14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f16:	4b13      	ldr	r3, [pc, #76]	@ (8007f64 <prvTaskExitError+0x58>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1e:	d00b      	beq.n	8007f38 <prvTaskExitError+0x2c>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	60fb      	str	r3, [r7, #12]
}
 8007f32:	bf00      	nop
 8007f34:	bf00      	nop
 8007f36:	e7fd      	b.n	8007f34 <prvTaskExitError+0x28>
	__asm volatile
 8007f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f3c:	f383 8811 	msr	BASEPRI, r3
 8007f40:	f3bf 8f6f 	isb	sy
 8007f44:	f3bf 8f4f 	dsb	sy
 8007f48:	60bb      	str	r3, [r7, #8]
}
 8007f4a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f4c:	bf00      	nop
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d0fc      	beq.n	8007f4e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	2000000c 	.word	0x2000000c
	...

08007f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f70:	4b07      	ldr	r3, [pc, #28]	@ (8007f90 <pxCurrentTCBConst2>)
 8007f72:	6819      	ldr	r1, [r3, #0]
 8007f74:	6808      	ldr	r0, [r1, #0]
 8007f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7a:	f380 8809 	msr	PSP, r0
 8007f7e:	f3bf 8f6f 	isb	sy
 8007f82:	f04f 0000 	mov.w	r0, #0
 8007f86:	f380 8811 	msr	BASEPRI, r0
 8007f8a:	4770      	bx	lr
 8007f8c:	f3af 8000 	nop.w

08007f90 <pxCurrentTCBConst2>:
 8007f90:	200009e0 	.word	0x200009e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f94:	bf00      	nop
 8007f96:	bf00      	nop

08007f98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f98:	4808      	ldr	r0, [pc, #32]	@ (8007fbc <prvPortStartFirstTask+0x24>)
 8007f9a:	6800      	ldr	r0, [r0, #0]
 8007f9c:	6800      	ldr	r0, [r0, #0]
 8007f9e:	f380 8808 	msr	MSP, r0
 8007fa2:	f04f 0000 	mov.w	r0, #0
 8007fa6:	f380 8814 	msr	CONTROL, r0
 8007faa:	b662      	cpsie	i
 8007fac:	b661      	cpsie	f
 8007fae:	f3bf 8f4f 	dsb	sy
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	df00      	svc	0
 8007fb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007fba:	bf00      	nop
 8007fbc:	e000ed08 	.word	0xe000ed08

08007fc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007fc6:	4b47      	ldr	r3, [pc, #284]	@ (80080e4 <xPortStartScheduler+0x124>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a47      	ldr	r2, [pc, #284]	@ (80080e8 <xPortStartScheduler+0x128>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d10b      	bne.n	8007fe8 <xPortStartScheduler+0x28>
	__asm volatile
 8007fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	613b      	str	r3, [r7, #16]
}
 8007fe2:	bf00      	nop
 8007fe4:	bf00      	nop
 8007fe6:	e7fd      	b.n	8007fe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007fe8:	4b3e      	ldr	r3, [pc, #248]	@ (80080e4 <xPortStartScheduler+0x124>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a3f      	ldr	r2, [pc, #252]	@ (80080ec <xPortStartScheduler+0x12c>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d10b      	bne.n	800800a <xPortStartScheduler+0x4a>
	__asm volatile
 8007ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff6:	f383 8811 	msr	BASEPRI, r3
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	60fb      	str	r3, [r7, #12]
}
 8008004:	bf00      	nop
 8008006:	bf00      	nop
 8008008:	e7fd      	b.n	8008006 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800800a:	4b39      	ldr	r3, [pc, #228]	@ (80080f0 <xPortStartScheduler+0x130>)
 800800c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	b2db      	uxtb	r3, r3
 8008014:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	22ff      	movs	r2, #255	@ 0xff
 800801a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	b2db      	uxtb	r3, r3
 8008022:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008024:	78fb      	ldrb	r3, [r7, #3]
 8008026:	b2db      	uxtb	r3, r3
 8008028:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800802c:	b2da      	uxtb	r2, r3
 800802e:	4b31      	ldr	r3, [pc, #196]	@ (80080f4 <xPortStartScheduler+0x134>)
 8008030:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008032:	4b31      	ldr	r3, [pc, #196]	@ (80080f8 <xPortStartScheduler+0x138>)
 8008034:	2207      	movs	r2, #7
 8008036:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008038:	e009      	b.n	800804e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800803a:	4b2f      	ldr	r3, [pc, #188]	@ (80080f8 <xPortStartScheduler+0x138>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	3b01      	subs	r3, #1
 8008040:	4a2d      	ldr	r2, [pc, #180]	@ (80080f8 <xPortStartScheduler+0x138>)
 8008042:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008044:	78fb      	ldrb	r3, [r7, #3]
 8008046:	b2db      	uxtb	r3, r3
 8008048:	005b      	lsls	r3, r3, #1
 800804a:	b2db      	uxtb	r3, r3
 800804c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800804e:	78fb      	ldrb	r3, [r7, #3]
 8008050:	b2db      	uxtb	r3, r3
 8008052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008056:	2b80      	cmp	r3, #128	@ 0x80
 8008058:	d0ef      	beq.n	800803a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800805a:	4b27      	ldr	r3, [pc, #156]	@ (80080f8 <xPortStartScheduler+0x138>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f1c3 0307 	rsb	r3, r3, #7
 8008062:	2b04      	cmp	r3, #4
 8008064:	d00b      	beq.n	800807e <xPortStartScheduler+0xbe>
	__asm volatile
 8008066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800806a:	f383 8811 	msr	BASEPRI, r3
 800806e:	f3bf 8f6f 	isb	sy
 8008072:	f3bf 8f4f 	dsb	sy
 8008076:	60bb      	str	r3, [r7, #8]
}
 8008078:	bf00      	nop
 800807a:	bf00      	nop
 800807c:	e7fd      	b.n	800807a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800807e:	4b1e      	ldr	r3, [pc, #120]	@ (80080f8 <xPortStartScheduler+0x138>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	021b      	lsls	r3, r3, #8
 8008084:	4a1c      	ldr	r2, [pc, #112]	@ (80080f8 <xPortStartScheduler+0x138>)
 8008086:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008088:	4b1b      	ldr	r3, [pc, #108]	@ (80080f8 <xPortStartScheduler+0x138>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008090:	4a19      	ldr	r2, [pc, #100]	@ (80080f8 <xPortStartScheduler+0x138>)
 8008092:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	b2da      	uxtb	r2, r3
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800809c:	4b17      	ldr	r3, [pc, #92]	@ (80080fc <xPortStartScheduler+0x13c>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a16      	ldr	r2, [pc, #88]	@ (80080fc <xPortStartScheduler+0x13c>)
 80080a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80080a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80080a8:	4b14      	ldr	r3, [pc, #80]	@ (80080fc <xPortStartScheduler+0x13c>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a13      	ldr	r2, [pc, #76]	@ (80080fc <xPortStartScheduler+0x13c>)
 80080ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80080b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80080b4:	f000 f8da 	bl	800826c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80080b8:	4b11      	ldr	r3, [pc, #68]	@ (8008100 <xPortStartScheduler+0x140>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80080be:	f000 f8f9 	bl	80082b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80080c2:	4b10      	ldr	r3, [pc, #64]	@ (8008104 <xPortStartScheduler+0x144>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a0f      	ldr	r2, [pc, #60]	@ (8008104 <xPortStartScheduler+0x144>)
 80080c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80080cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80080ce:	f7ff ff63 	bl	8007f98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80080d2:	f7ff fd41 	bl	8007b58 <vTaskSwitchContext>
	prvTaskExitError();
 80080d6:	f7ff ff19 	bl	8007f0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3718      	adds	r7, #24
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	e000ed00 	.word	0xe000ed00
 80080e8:	410fc271 	.word	0x410fc271
 80080ec:	410fc270 	.word	0x410fc270
 80080f0:	e000e400 	.word	0xe000e400
 80080f4:	20000b0c 	.word	0x20000b0c
 80080f8:	20000b10 	.word	0x20000b10
 80080fc:	e000ed20 	.word	0xe000ed20
 8008100:	2000000c 	.word	0x2000000c
 8008104:	e000ef34 	.word	0xe000ef34

08008108 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
	__asm volatile
 800810e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008112:	f383 8811 	msr	BASEPRI, r3
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	607b      	str	r3, [r7, #4]
}
 8008120:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008122:	4b10      	ldr	r3, [pc, #64]	@ (8008164 <vPortEnterCritical+0x5c>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	3301      	adds	r3, #1
 8008128:	4a0e      	ldr	r2, [pc, #56]	@ (8008164 <vPortEnterCritical+0x5c>)
 800812a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800812c:	4b0d      	ldr	r3, [pc, #52]	@ (8008164 <vPortEnterCritical+0x5c>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b01      	cmp	r3, #1
 8008132:	d110      	bne.n	8008156 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008134:	4b0c      	ldr	r3, [pc, #48]	@ (8008168 <vPortEnterCritical+0x60>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00b      	beq.n	8008156 <vPortEnterCritical+0x4e>
	__asm volatile
 800813e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	603b      	str	r3, [r7, #0]
}
 8008150:	bf00      	nop
 8008152:	bf00      	nop
 8008154:	e7fd      	b.n	8008152 <vPortEnterCritical+0x4a>
	}
}
 8008156:	bf00      	nop
 8008158:	370c      	adds	r7, #12
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	2000000c 	.word	0x2000000c
 8008168:	e000ed04 	.word	0xe000ed04

0800816c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008172:	4b12      	ldr	r3, [pc, #72]	@ (80081bc <vPortExitCritical+0x50>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10b      	bne.n	8008192 <vPortExitCritical+0x26>
	__asm volatile
 800817a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800817e:	f383 8811 	msr	BASEPRI, r3
 8008182:	f3bf 8f6f 	isb	sy
 8008186:	f3bf 8f4f 	dsb	sy
 800818a:	607b      	str	r3, [r7, #4]
}
 800818c:	bf00      	nop
 800818e:	bf00      	nop
 8008190:	e7fd      	b.n	800818e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008192:	4b0a      	ldr	r3, [pc, #40]	@ (80081bc <vPortExitCritical+0x50>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	3b01      	subs	r3, #1
 8008198:	4a08      	ldr	r2, [pc, #32]	@ (80081bc <vPortExitCritical+0x50>)
 800819a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800819c:	4b07      	ldr	r3, [pc, #28]	@ (80081bc <vPortExitCritical+0x50>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d105      	bne.n	80081b0 <vPortExitCritical+0x44>
 80081a4:	2300      	movs	r3, #0
 80081a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80081ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	2000000c 	.word	0x2000000c

080081c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80081c0:	f3ef 8009 	mrs	r0, PSP
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	4b15      	ldr	r3, [pc, #84]	@ (8008220 <pxCurrentTCBConst>)
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	f01e 0f10 	tst.w	lr, #16
 80081d0:	bf08      	it	eq
 80081d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081da:	6010      	str	r0, [r2, #0]
 80081dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80081e4:	f380 8811 	msr	BASEPRI, r0
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f7ff fcb2 	bl	8007b58 <vTaskSwitchContext>
 80081f4:	f04f 0000 	mov.w	r0, #0
 80081f8:	f380 8811 	msr	BASEPRI, r0
 80081fc:	bc09      	pop	{r0, r3}
 80081fe:	6819      	ldr	r1, [r3, #0]
 8008200:	6808      	ldr	r0, [r1, #0]
 8008202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008206:	f01e 0f10 	tst.w	lr, #16
 800820a:	bf08      	it	eq
 800820c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008210:	f380 8809 	msr	PSP, r0
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	f3af 8000 	nop.w

08008220 <pxCurrentTCBConst>:
 8008220:	200009e0 	.word	0x200009e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008224:	bf00      	nop
 8008226:	bf00      	nop

08008228 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
	__asm volatile
 800822e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	607b      	str	r3, [r7, #4]
}
 8008240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008242:	f7ff fbcf 	bl	80079e4 <xTaskIncrementTick>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d003      	beq.n	8008254 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800824c:	4b06      	ldr	r3, [pc, #24]	@ (8008268 <SysTick_Handler+0x40>)
 800824e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	2300      	movs	r3, #0
 8008256:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	f383 8811 	msr	BASEPRI, r3
}
 800825e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008260:	bf00      	nop
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	e000ed04 	.word	0xe000ed04

0800826c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800826c:	b480      	push	{r7}
 800826e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008270:	4b0b      	ldr	r3, [pc, #44]	@ (80082a0 <vPortSetupTimerInterrupt+0x34>)
 8008272:	2200      	movs	r2, #0
 8008274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008276:	4b0b      	ldr	r3, [pc, #44]	@ (80082a4 <vPortSetupTimerInterrupt+0x38>)
 8008278:	2200      	movs	r2, #0
 800827a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800827c:	4b0a      	ldr	r3, [pc, #40]	@ (80082a8 <vPortSetupTimerInterrupt+0x3c>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a0a      	ldr	r2, [pc, #40]	@ (80082ac <vPortSetupTimerInterrupt+0x40>)
 8008282:	fba2 2303 	umull	r2, r3, r2, r3
 8008286:	099b      	lsrs	r3, r3, #6
 8008288:	4a09      	ldr	r2, [pc, #36]	@ (80082b0 <vPortSetupTimerInterrupt+0x44>)
 800828a:	3b01      	subs	r3, #1
 800828c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800828e:	4b04      	ldr	r3, [pc, #16]	@ (80082a0 <vPortSetupTimerInterrupt+0x34>)
 8008290:	2207      	movs	r2, #7
 8008292:	601a      	str	r2, [r3, #0]
}
 8008294:	bf00      	nop
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	e000e010 	.word	0xe000e010
 80082a4:	e000e018 	.word	0xe000e018
 80082a8:	20000000 	.word	0x20000000
 80082ac:	10624dd3 	.word	0x10624dd3
 80082b0:	e000e014 	.word	0xe000e014

080082b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80082b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80082c4 <vPortEnableVFP+0x10>
 80082b8:	6801      	ldr	r1, [r0, #0]
 80082ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80082be:	6001      	str	r1, [r0, #0]
 80082c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80082c2:	bf00      	nop
 80082c4:	e000ed88 	.word	0xe000ed88

080082c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b08a      	sub	sp, #40	@ 0x28
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80082d0:	2300      	movs	r3, #0
 80082d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80082d4:	f7ff fada 	bl	800788c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80082d8:	4b5c      	ldr	r3, [pc, #368]	@ (800844c <pvPortMalloc+0x184>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d101      	bne.n	80082e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80082e0:	f000 f924 	bl	800852c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80082e4:	4b5a      	ldr	r3, [pc, #360]	@ (8008450 <pvPortMalloc+0x188>)
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4013      	ands	r3, r2
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f040 8095 	bne.w	800841c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d01e      	beq.n	8008336 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80082f8:	2208      	movs	r2, #8
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4413      	add	r3, r2
 80082fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f003 0307 	and.w	r3, r3, #7
 8008306:	2b00      	cmp	r3, #0
 8008308:	d015      	beq.n	8008336 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f023 0307 	bic.w	r3, r3, #7
 8008310:	3308      	adds	r3, #8
 8008312:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f003 0307 	and.w	r3, r3, #7
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00b      	beq.n	8008336 <pvPortMalloc+0x6e>
	__asm volatile
 800831e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	617b      	str	r3, [r7, #20]
}
 8008330:	bf00      	nop
 8008332:	bf00      	nop
 8008334:	e7fd      	b.n	8008332 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d06f      	beq.n	800841c <pvPortMalloc+0x154>
 800833c:	4b45      	ldr	r3, [pc, #276]	@ (8008454 <pvPortMalloc+0x18c>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	429a      	cmp	r2, r3
 8008344:	d86a      	bhi.n	800841c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008346:	4b44      	ldr	r3, [pc, #272]	@ (8008458 <pvPortMalloc+0x190>)
 8008348:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800834a:	4b43      	ldr	r3, [pc, #268]	@ (8008458 <pvPortMalloc+0x190>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008350:	e004      	b.n	800835c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008354:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800835c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	429a      	cmp	r2, r3
 8008364:	d903      	bls.n	800836e <pvPortMalloc+0xa6>
 8008366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1f1      	bne.n	8008352 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800836e:	4b37      	ldr	r3, [pc, #220]	@ (800844c <pvPortMalloc+0x184>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008374:	429a      	cmp	r2, r3
 8008376:	d051      	beq.n	800841c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008378:	6a3b      	ldr	r3, [r7, #32]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2208      	movs	r2, #8
 800837e:	4413      	add	r3, r2
 8008380:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	6a3b      	ldr	r3, [r7, #32]
 8008388:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800838a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838c:	685a      	ldr	r2, [r3, #4]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	1ad2      	subs	r2, r2, r3
 8008392:	2308      	movs	r3, #8
 8008394:	005b      	lsls	r3, r3, #1
 8008396:	429a      	cmp	r2, r3
 8008398:	d920      	bls.n	80083dc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800839a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4413      	add	r3, r2
 80083a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	f003 0307 	and.w	r3, r3, #7
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00b      	beq.n	80083c4 <pvPortMalloc+0xfc>
	__asm volatile
 80083ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b0:	f383 8811 	msr	BASEPRI, r3
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	613b      	str	r3, [r7, #16]
}
 80083be:	bf00      	nop
 80083c0:	bf00      	nop
 80083c2:	e7fd      	b.n	80083c0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80083c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c6:	685a      	ldr	r2, [r3, #4]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	1ad2      	subs	r2, r2, r3
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80083d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80083d6:	69b8      	ldr	r0, [r7, #24]
 80083d8:	f000 f90a 	bl	80085f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80083dc:	4b1d      	ldr	r3, [pc, #116]	@ (8008454 <pvPortMalloc+0x18c>)
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	4a1b      	ldr	r2, [pc, #108]	@ (8008454 <pvPortMalloc+0x18c>)
 80083e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80083ea:	4b1a      	ldr	r3, [pc, #104]	@ (8008454 <pvPortMalloc+0x18c>)
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	4b1b      	ldr	r3, [pc, #108]	@ (800845c <pvPortMalloc+0x194>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d203      	bcs.n	80083fe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80083f6:	4b17      	ldr	r3, [pc, #92]	@ (8008454 <pvPortMalloc+0x18c>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a18      	ldr	r2, [pc, #96]	@ (800845c <pvPortMalloc+0x194>)
 80083fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80083fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	4b13      	ldr	r3, [pc, #76]	@ (8008450 <pvPortMalloc+0x188>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	431a      	orrs	r2, r3
 8008408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800840c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840e:	2200      	movs	r2, #0
 8008410:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008412:	4b13      	ldr	r3, [pc, #76]	@ (8008460 <pvPortMalloc+0x198>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3301      	adds	r3, #1
 8008418:	4a11      	ldr	r2, [pc, #68]	@ (8008460 <pvPortMalloc+0x198>)
 800841a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800841c:	f7ff fa44 	bl	80078a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	f003 0307 	and.w	r3, r3, #7
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00b      	beq.n	8008442 <pvPortMalloc+0x17a>
	__asm volatile
 800842a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842e:	f383 8811 	msr	BASEPRI, r3
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	f3bf 8f4f 	dsb	sy
 800843a:	60fb      	str	r3, [r7, #12]
}
 800843c:	bf00      	nop
 800843e:	bf00      	nop
 8008440:	e7fd      	b.n	800843e <pvPortMalloc+0x176>
	return pvReturn;
 8008442:	69fb      	ldr	r3, [r7, #28]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3728      	adds	r7, #40	@ 0x28
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	200016d4 	.word	0x200016d4
 8008450:	200016e8 	.word	0x200016e8
 8008454:	200016d8 	.word	0x200016d8
 8008458:	200016cc 	.word	0x200016cc
 800845c:	200016dc 	.word	0x200016dc
 8008460:	200016e0 	.word	0x200016e0

08008464 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d04f      	beq.n	8008516 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008476:	2308      	movs	r3, #8
 8008478:	425b      	negs	r3, r3
 800847a:	697a      	ldr	r2, [r7, #20]
 800847c:	4413      	add	r3, r2
 800847e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	685a      	ldr	r2, [r3, #4]
 8008488:	4b25      	ldr	r3, [pc, #148]	@ (8008520 <vPortFree+0xbc>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4013      	ands	r3, r2
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10b      	bne.n	80084aa <vPortFree+0x46>
	__asm volatile
 8008492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008496:	f383 8811 	msr	BASEPRI, r3
 800849a:	f3bf 8f6f 	isb	sy
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	60fb      	str	r3, [r7, #12]
}
 80084a4:	bf00      	nop
 80084a6:	bf00      	nop
 80084a8:	e7fd      	b.n	80084a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00b      	beq.n	80084ca <vPortFree+0x66>
	__asm volatile
 80084b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b6:	f383 8811 	msr	BASEPRI, r3
 80084ba:	f3bf 8f6f 	isb	sy
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	60bb      	str	r3, [r7, #8]
}
 80084c4:	bf00      	nop
 80084c6:	bf00      	nop
 80084c8:	e7fd      	b.n	80084c6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	685a      	ldr	r2, [r3, #4]
 80084ce:	4b14      	ldr	r3, [pc, #80]	@ (8008520 <vPortFree+0xbc>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4013      	ands	r3, r2
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d01e      	beq.n	8008516 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d11a      	bne.n	8008516 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	685a      	ldr	r2, [r3, #4]
 80084e4:	4b0e      	ldr	r3, [pc, #56]	@ (8008520 <vPortFree+0xbc>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	43db      	mvns	r3, r3
 80084ea:	401a      	ands	r2, r3
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80084f0:	f7ff f9cc 	bl	800788c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	685a      	ldr	r2, [r3, #4]
 80084f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008524 <vPortFree+0xc0>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4413      	add	r3, r2
 80084fe:	4a09      	ldr	r2, [pc, #36]	@ (8008524 <vPortFree+0xc0>)
 8008500:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008502:	6938      	ldr	r0, [r7, #16]
 8008504:	f000 f874 	bl	80085f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008508:	4b07      	ldr	r3, [pc, #28]	@ (8008528 <vPortFree+0xc4>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	3301      	adds	r3, #1
 800850e:	4a06      	ldr	r2, [pc, #24]	@ (8008528 <vPortFree+0xc4>)
 8008510:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008512:	f7ff f9c9 	bl	80078a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008516:	bf00      	nop
 8008518:	3718      	adds	r7, #24
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	200016e8 	.word	0x200016e8
 8008524:	200016d8 	.word	0x200016d8
 8008528:	200016e4 	.word	0x200016e4

0800852c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008532:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8008536:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008538:	4b27      	ldr	r3, [pc, #156]	@ (80085d8 <prvHeapInit+0xac>)
 800853a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f003 0307 	and.w	r3, r3, #7
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00c      	beq.n	8008560 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	3307      	adds	r3, #7
 800854a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f023 0307 	bic.w	r3, r3, #7
 8008552:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	4a1f      	ldr	r2, [pc, #124]	@ (80085d8 <prvHeapInit+0xac>)
 800855c:	4413      	add	r3, r2
 800855e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008564:	4a1d      	ldr	r2, [pc, #116]	@ (80085dc <prvHeapInit+0xb0>)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800856a:	4b1c      	ldr	r3, [pc, #112]	@ (80085dc <prvHeapInit+0xb0>)
 800856c:	2200      	movs	r2, #0
 800856e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	4413      	add	r3, r2
 8008576:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008578:	2208      	movs	r2, #8
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	1a9b      	subs	r3, r3, r2
 800857e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f023 0307 	bic.w	r3, r3, #7
 8008586:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	4a15      	ldr	r2, [pc, #84]	@ (80085e0 <prvHeapInit+0xb4>)
 800858c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800858e:	4b14      	ldr	r3, [pc, #80]	@ (80085e0 <prvHeapInit+0xb4>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2200      	movs	r2, #0
 8008594:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008596:	4b12      	ldr	r3, [pc, #72]	@ (80085e0 <prvHeapInit+0xb4>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2200      	movs	r2, #0
 800859c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	1ad2      	subs	r2, r2, r3
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80085ac:	4b0c      	ldr	r3, [pc, #48]	@ (80085e0 <prvHeapInit+0xb4>)
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	4a0a      	ldr	r2, [pc, #40]	@ (80085e4 <prvHeapInit+0xb8>)
 80085ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	4a09      	ldr	r2, [pc, #36]	@ (80085e8 <prvHeapInit+0xbc>)
 80085c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80085c4:	4b09      	ldr	r3, [pc, #36]	@ (80085ec <prvHeapInit+0xc0>)
 80085c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80085ca:	601a      	str	r2, [r3, #0]
}
 80085cc:	bf00      	nop
 80085ce:	3714      	adds	r7, #20
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr
 80085d8:	20000b14 	.word	0x20000b14
 80085dc:	200016cc 	.word	0x200016cc
 80085e0:	200016d4 	.word	0x200016d4
 80085e4:	200016dc 	.word	0x200016dc
 80085e8:	200016d8 	.word	0x200016d8
 80085ec:	200016e8 	.word	0x200016e8

080085f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80085f8:	4b28      	ldr	r3, [pc, #160]	@ (800869c <prvInsertBlockIntoFreeList+0xac>)
 80085fa:	60fb      	str	r3, [r7, #12]
 80085fc:	e002      	b.n	8008604 <prvInsertBlockIntoFreeList+0x14>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	60fb      	str	r3, [r7, #12]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	429a      	cmp	r2, r3
 800860c:	d8f7      	bhi.n	80085fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	4413      	add	r3, r2
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	429a      	cmp	r2, r3
 800861e:	d108      	bne.n	8008632 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	685a      	ldr	r2, [r3, #4]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	441a      	add	r2, r3
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	68ba      	ldr	r2, [r7, #8]
 800863c:	441a      	add	r2, r3
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	429a      	cmp	r2, r3
 8008644:	d118      	bne.n	8008678 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	4b15      	ldr	r3, [pc, #84]	@ (80086a0 <prvInsertBlockIntoFreeList+0xb0>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	429a      	cmp	r2, r3
 8008650:	d00d      	beq.n	800866e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	685a      	ldr	r2, [r3, #4]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	441a      	add	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	601a      	str	r2, [r3, #0]
 800866c:	e008      	b.n	8008680 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800866e:	4b0c      	ldr	r3, [pc, #48]	@ (80086a0 <prvInsertBlockIntoFreeList+0xb0>)
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	601a      	str	r2, [r3, #0]
 8008676:	e003      	b.n	8008680 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	429a      	cmp	r2, r3
 8008686:	d002      	beq.n	800868e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800868e:	bf00      	nop
 8008690:	3714      	adds	r7, #20
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	200016cc 	.word	0x200016cc
 80086a0:	200016d4 	.word	0x200016d4

080086a4 <MCP23S17_Init>:
#include "drv_led.h"
#include "spi.h"

uint8_t etat_des_LEDs = 0xff;

void MCP23S17_Init( void){
 80086a4:	b580      	push	{r7, lr}
 80086a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); //reset High
 80086a8:	2201      	movs	r2, #1
 80086aa:	2101      	movs	r1, #1
 80086ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80086b0:	f7f9 fc5c 	bl	8001f6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);	//CS High
 80086b4:	2201      	movs	r2, #1
 80086b6:	2180      	movs	r1, #128	@ 0x80
 80086b8:	480a      	ldr	r0, [pc, #40]	@ (80086e4 <MCP23S17_Init+0x40>)
 80086ba:	f7f9 fc57 	bl	8001f6c <HAL_GPIO_WritePin>

	// Configurer tous les GPIO comme sorties
	MCP23S17_Write(IODIRA, 0x00);
 80086be:	2100      	movs	r1, #0
 80086c0:	2000      	movs	r0, #0
 80086c2:	f000 f811 	bl	80086e8 <MCP23S17_Write>
	MCP23S17_Write(IODIRB, 0x00);
 80086c6:	2100      	movs	r1, #0
 80086c8:	2001      	movs	r0, #1
 80086ca:	f000 f80d 	bl	80086e8 <MCP23S17_Write>

	// Eteindre toutes les led
	MCP23S17_Write(MCPGPIOA, 0xff);
 80086ce:	21ff      	movs	r1, #255	@ 0xff
 80086d0:	2012      	movs	r0, #18
 80086d2:	f000 f809 	bl	80086e8 <MCP23S17_Write>
	MCP23S17_Write(MCPGPIOB, 0xff);
 80086d6:	21ff      	movs	r1, #255	@ 0xff
 80086d8:	2013      	movs	r0, #19
 80086da:	f000 f805 	bl	80086e8 <MCP23S17_Write>
}
 80086de:	bf00      	nop
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	48000400 	.word	0x48000400

080086e8 <MCP23S17_Write>:

// Fonction pour écrire dans un registre du MCP23S17
void MCP23S17_Write( uint8_t reg, uint8_t value) {
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	4603      	mov	r3, r0
 80086f0:	460a      	mov	r2, r1
 80086f2:	71fb      	strb	r3, [r7, #7]
 80086f4:	4613      	mov	r3, r2
 80086f6:	71bb      	strb	r3, [r7, #6]
	uint8_t data[3] = {MCP23S17_ADDR_WRITE, reg, value};
 80086f8:	2340      	movs	r3, #64	@ 0x40
 80086fa:	733b      	strb	r3, [r7, #12]
 80086fc:	79fb      	ldrb	r3, [r7, #7]
 80086fe:	737b      	strb	r3, [r7, #13]
 8008700:	79bb      	ldrb	r3, [r7, #6]
 8008702:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // CS Low
 8008704:	2200      	movs	r2, #0
 8008706:	2180      	movs	r1, #128	@ 0x80
 8008708:	4809      	ldr	r0, [pc, #36]	@ (8008730 <MCP23S17_Write+0x48>)
 800870a:	f7f9 fc2f 	bl	8001f6c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, data, 3, HAL_MAX_DELAY);
 800870e:	f107 010c 	add.w	r1, r7, #12
 8008712:	f04f 33ff 	mov.w	r3, #4294967295
 8008716:	2203      	movs	r2, #3
 8008718:	4806      	ldr	r0, [pc, #24]	@ (8008734 <MCP23S17_Write+0x4c>)
 800871a:	f7fc fd21 	bl	8005160 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);   // CS High
 800871e:	2201      	movs	r2, #1
 8008720:	2180      	movs	r1, #128	@ 0x80
 8008722:	4803      	ldr	r0, [pc, #12]	@ (8008730 <MCP23S17_Write+0x48>)
 8008724:	f7f9 fc22 	bl	8001f6c <HAL_GPIO_WritePin>
}
 8008728:	bf00      	nop
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	48000400 	.word	0x48000400
 8008734:	200008a0 	.word	0x200008a0

08008738 <drv_led>:

uint8_t drv_led(uint8_t led_num, uint8_t gpio)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	4603      	mov	r3, r0
 8008740:	460a      	mov	r2, r1
 8008742:	71fb      	strb	r3, [r7, #7]
 8008744:	4613      	mov	r3, r2
 8008746:	71bb      	strb	r3, [r7, #6]
	MCP23S17_Init();
 8008748:	f7ff ffac 	bl	80086a4 <MCP23S17_Init>

	if((led_num>=0 && led_num<=7)!=0){
 800874c:	79fb      	ldrb	r3, [r7, #7]
 800874e:	2b07      	cmp	r3, #7
 8008750:	d80c      	bhi.n	800876c <drv_led+0x34>
		etat_des_LEDs ^= (1 << led_num);
 8008752:	79fb      	ldrb	r3, [r7, #7]
 8008754:	2201      	movs	r2, #1
 8008756:	fa02 f303 	lsl.w	r3, r2, r3
 800875a:	b25a      	sxtb	r2, r3
 800875c:	4b09      	ldr	r3, [pc, #36]	@ (8008784 <drv_led+0x4c>)
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	b25b      	sxtb	r3, r3
 8008762:	4053      	eors	r3, r2
 8008764:	b25b      	sxtb	r3, r3
 8008766:	b2da      	uxtb	r2, r3
 8008768:	4b06      	ldr	r3, [pc, #24]	@ (8008784 <drv_led+0x4c>)
 800876a:	701a      	strb	r2, [r3, #0]
	}
	// Allumer la LED (GPB0 à HIGH)
	MCP23S17_Write(gpio, etat_des_LEDs);
 800876c:	4b05      	ldr	r3, [pc, #20]	@ (8008784 <drv_led+0x4c>)
 800876e:	781a      	ldrb	r2, [r3, #0]
 8008770:	79bb      	ldrb	r3, [r7, #6]
 8008772:	4611      	mov	r1, r2
 8008774:	4618      	mov	r0, r3
 8008776:	f7ff ffb7 	bl	80086e8 <MCP23S17_Write>
	return 0;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	20000010 	.word	0x20000010

08008788 <drv_uart2_receive>:
#include "main.h"
#include "drv_uart2.h"
#include "usart.h"

uint8_t drv_uart2_receive(char * pData, uint16_t size)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	460b      	mov	r3, r1
 8008792:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&huart2, (uint8_t*)(pData), size, HAL_MAX_DELAY);
 8008794:	887a      	ldrh	r2, [r7, #2]
 8008796:	f04f 33ff 	mov.w	r3, #4294967295
 800879a:	6879      	ldr	r1, [r7, #4]
 800879c:	4803      	ldr	r0, [pc, #12]	@ (80087ac <drv_uart2_receive+0x24>)
 800879e:	f7fd fb56 	bl	8005e4e <HAL_UART_Receive>

	return 0;	// Life's too short for error management
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3708      	adds	r7, #8
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	20000954 	.word	0x20000954

080087b0 <drv_uart2_transmit>:

uint8_t drv_uart2_transmit(const char * pData, uint16_t size)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	460b      	mov	r3, r1
 80087ba:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, size, HAL_MAX_DELAY);
 80087bc:	887a      	ldrh	r2, [r7, #2]
 80087be:	f04f 33ff 	mov.w	r3, #4294967295
 80087c2:	6879      	ldr	r1, [r7, #4]
 80087c4:	4803      	ldr	r0, [pc, #12]	@ (80087d4 <drv_uart2_transmit+0x24>)
 80087c6:	f7fd fab9 	bl	8005d3c <HAL_UART_Transmit>

	return 0;	// Srsly, don't do that kids
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3708      	adds	r7, #8
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	20000954 	.word	0x20000954

080087d8 <sh_help>:
static int uart_write(char * s, uint16_t size) {
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
	return size;
}

static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 80087d8:	b590      	push	{r4, r7, lr}
 80087da:	b089      	sub	sp, #36	@ 0x24
 80087dc:	af02      	add	r7, sp, #8
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 80087e4:	2300      	movs	r3, #0
 80087e6:	617b      	str	r3, [r7, #20]
 80087e8:	e029      	b.n	800883e <sh_help+0x66>
		int size;
		size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->func_list[i].c, h_shell->func_list[i].description);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80087f0:	68f9      	ldr	r1, [r7, #12]
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	4613      	mov	r3, r2
 80087f6:	005b      	lsls	r3, r3, #1
 80087f8:	4413      	add	r3, r2
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	440b      	add	r3, r1
 80087fe:	3304      	adds	r3, #4
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	461c      	mov	r4, r3
 8008804:	68f9      	ldr	r1, [r7, #12]
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	4613      	mov	r3, r2
 800880a:	005b      	lsls	r3, r3, #1
 800880c:	4413      	add	r3, r2
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	440b      	add	r3, r1
 8008812:	330c      	adds	r3, #12
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	9300      	str	r3, [sp, #0]
 8008818:	4623      	mov	r3, r4
 800881a:	4a0e      	ldr	r2, [pc, #56]	@ (8008854 <sh_help+0x7c>)
 800881c:	2128      	movs	r1, #40	@ 0x28
 800881e:	f000 fb3b 	bl	8008e98 <sniprintf>
 8008822:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8008830:	6939      	ldr	r1, [r7, #16]
 8008832:	b289      	uxth	r1, r1
 8008834:	4610      	mov	r0, r2
 8008836:	4798      	blx	r3
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	3301      	adds	r3, #1
 800883c:	617b      	str	r3, [r7, #20]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	429a      	cmp	r2, r3
 8008846:	dbd0      	blt.n	80087ea <sh_help+0x12>
	}

	return 0;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	371c      	adds	r7, #28
 800884e:	46bd      	mov	sp, r7
 8008850:	bd90      	pop	{r4, r7, pc}
 8008852:	bf00      	nop
 8008854:	08009eb4 	.word	0x08009eb4

08008858 <shell_init>:

void shell_init(h_shell_t * h_shell) {
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
	int size = 0;
 8008860:	2300      	movs	r3, #0
 8008862:	60fb      	str	r3, [r7, #12]

	h_shell->func_list_size = 0;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	601a      	str	r2, [r3, #0]

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8008870:	4a16      	ldr	r2, [pc, #88]	@ (80088cc <shell_init+0x74>)
 8008872:	2128      	movs	r1, #40	@ 0x28
 8008874:	4618      	mov	r0, r3
 8008876:	f000 fb0f 	bl	8008e98 <sniprintf>
 800887a:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8008888:	68f9      	ldr	r1, [r7, #12]
 800888a:	b289      	uxth	r1, r1
 800888c:	4610      	mov	r0, r2
 800888e:	4798      	blx	r3

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Correction TD (v0.2.1 du coup?)\r\n");
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8008896:	4a0e      	ldr	r2, [pc, #56]	@ (80088d0 <shell_init+0x78>)
 8008898:	2128      	movs	r1, #40	@ 0x28
 800889a:	4618      	mov	r0, r3
 800889c:	f000 fafc 	bl	8008e98 <sniprintf>
 80088a0:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80088ae:	68f9      	ldr	r1, [r7, #12]
 80088b0:	b289      	uxth	r1, r1
 80088b2:	4610      	mov	r0, r2
 80088b4:	4798      	blx	r3

	shell_add(h_shell, 'h', sh_help, "Help");
 80088b6:	4b07      	ldr	r3, [pc, #28]	@ (80088d4 <shell_init+0x7c>)
 80088b8:	4a07      	ldr	r2, [pc, #28]	@ (80088d8 <shell_init+0x80>)
 80088ba:	2168      	movs	r1, #104	@ 0x68
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f80d 	bl	80088dc <shell_add>
}
 80088c2:	bf00      	nop
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	08009ec0 	.word	0x08009ec0
 80088d0:	08009ee8 	.word	0x08009ee8
 80088d4:	08009f0c 	.word	0x08009f0c
 80088d8:	080087d9 	.word	0x080087d9

080088dc <shell_add>:

int shell_add(h_shell_t * h_shell, char c, shell_func_pointer_t pfunc, char * description) {
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	607a      	str	r2, [r7, #4]
 80088e6:	603b      	str	r3, [r7, #0]
 80088e8:	460b      	mov	r3, r1
 80088ea:	72fb      	strb	r3, [r7, #11]
	if (h_shell->func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2b3f      	cmp	r3, #63	@ 0x3f
 80088f2:	dc27      	bgt.n	8008944 <shell_add+0x68>
		h_shell->func_list[h_shell->func_list_size].c = c;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	68f9      	ldr	r1, [r7, #12]
 80088fa:	4613      	mov	r3, r2
 80088fc:	005b      	lsls	r3, r3, #1
 80088fe:	4413      	add	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	440b      	add	r3, r1
 8008904:	3304      	adds	r3, #4
 8008906:	7afa      	ldrb	r2, [r7, #11]
 8008908:	701a      	strb	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].func = pfunc;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	68f9      	ldr	r1, [r7, #12]
 8008910:	4613      	mov	r3, r2
 8008912:	005b      	lsls	r3, r3, #1
 8008914:	4413      	add	r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	440b      	add	r3, r1
 800891a:	3308      	adds	r3, #8
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	601a      	str	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].description = description;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	68f9      	ldr	r1, [r7, #12]
 8008926:	4613      	mov	r3, r2
 8008928:	005b      	lsls	r3, r3, #1
 800892a:	4413      	add	r3, r2
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	440b      	add	r3, r1
 8008930:	330c      	adds	r3, #12
 8008932:	683a      	ldr	r2, [r7, #0]
 8008934:	601a      	str	r2, [r3, #0]
		h_shell->func_list_size++;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	1c5a      	adds	r2, r3, #1
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	601a      	str	r2, [r3, #0]
		return 0;
 8008940:	2300      	movs	r3, #0
 8008942:	e001      	b.n	8008948 <shell_add+0x6c>
	}

	return -1;
 8008944:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008948:	4618      	mov	r0, r3
 800894a:	3714      	adds	r7, #20
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 8008954:	b580      	push	{r7, lr}
 8008956:	b090      	sub	sp, #64	@ 0x40
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
	int i;

	char c = buf[0];
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8008966:	2300      	movs	r3, #0
 8008968:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800896a:	e041      	b.n	80089f0 <shell_exec+0x9c>
		if (h_shell->func_list[i].c == c) {
 800896c:	6879      	ldr	r1, [r7, #4]
 800896e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008970:	4613      	mov	r3, r2
 8008972:	005b      	lsls	r3, r3, #1
 8008974:	4413      	add	r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	440b      	add	r3, r1
 800897a:	3304      	adds	r3, #4
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8008982:	429a      	cmp	r2, r3
 8008984:	d131      	bne.n	80089ea <shell_exec+0x96>
			argc = 1;
 8008986:	2301      	movs	r3, #1
 8008988:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	637b      	str	r3, [r7, #52]	@ 0x34
 8008992:	e013      	b.n	80089bc <shell_exec+0x68>
				if(*p == ' ') {
 8008994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	2b20      	cmp	r3, #32
 800899a:	d10c      	bne.n	80089b6 <shell_exec+0x62>
					*p = '\0';
 800899c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800899e:	2200      	movs	r2, #0
 80089a0:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 80089a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a4:	1c5a      	adds	r2, r3, #1
 80089a6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80089a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089aa:	3201      	adds	r2, #1
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	3340      	adds	r3, #64	@ 0x40
 80089b0:	443b      	add	r3, r7
 80089b2:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80089b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089b8:	3301      	adds	r3, #1
 80089ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80089bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d002      	beq.n	80089ca <shell_exec+0x76>
 80089c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c6:	2b07      	cmp	r3, #7
 80089c8:	dde4      	ble.n	8008994 <shell_exec+0x40>
				}
			}

			return h_shell->func_list[i].func(h_shell, argc, argv);
 80089ca:	6879      	ldr	r1, [r7, #4]
 80089cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80089ce:	4613      	mov	r3, r2
 80089d0:	005b      	lsls	r3, r3, #1
 80089d2:	4413      	add	r3, r2
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	440b      	add	r3, r1
 80089d8:	3308      	adds	r3, #8
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f107 020c 	add.w	r2, r7, #12
 80089e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	4798      	blx	r3
 80089e6:	4603      	mov	r3, r0
 80089e8:	e01d      	b.n	8008a26 <shell_exec+0xd2>
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 80089ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089ec:	3301      	adds	r3, #1
 80089ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80089f6:	429a      	cmp	r2, r3
 80089f8:	dbb8      	blt.n	800896c <shell_exec+0x18>
		}
	}

	int size;
	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8008a00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008a04:	4a0a      	ldr	r2, [pc, #40]	@ (8008a30 <shell_exec+0xdc>)
 8008a06:	2128      	movs	r1, #40	@ 0x28
 8008a08:	f000 fa46 	bl	8008e98 <sniprintf>
 8008a0c:	62f8      	str	r0, [r7, #44]	@ 0x2c
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8008a1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a1c:	b289      	uxth	r1, r1
 8008a1e:	4610      	mov	r0, r2
 8008a20:	4798      	blx	r3
	return -1;
 8008a22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3740      	adds	r7, #64	@ 0x40
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	08009f14 	.word	0x08009f14

08008a34 <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run(h_shell_t * h_shell) {
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b086      	sub	sp, #24
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	617b      	str	r3, [r7, #20]
	int pos = 0;
 8008a40:	2300      	movs	r3, #0
 8008a42:	613b      	str	r3, [r7, #16]

	while (1) {
		h_shell->drv.transmit(prompt, 2);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8008a4a:	2102      	movs	r1, #2
 8008a4c:	483a      	ldr	r0, [pc, #232]	@ (8008b38 <shell_run+0x104>)
 8008a4e:	4798      	blx	r3
		reading = 1;
 8008a50:	2301      	movs	r3, #1
 8008a52:	617b      	str	r3, [r7, #20]

		while(reading) {
 8008a54:	e064      	b.n	8008b20 <shell_run+0xec>
			char c;
			h_shell->drv.receive(&c, 1);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 335c 	ldr.w	r3, [r3, #860]	@ 0x35c
 8008a5c:	f107 020b 	add.w	r2, r7, #11
 8008a60:	2101      	movs	r1, #1
 8008a62:	4610      	mov	r0, r2
 8008a64:	4798      	blx	r3
			int size;

			switch (c) {
 8008a66:	7afb      	ldrb	r3, [r7, #11]
 8008a68:	2b08      	cmp	r3, #8
 8008a6a:	d036      	beq.n	8008ada <shell_run+0xa6>
 8008a6c:	2b0d      	cmp	r3, #13
 8008a6e:	d141      	bne.n	8008af4 <shell_run+0xc0>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8008a76:	4a31      	ldr	r2, [pc, #196]	@ (8008b3c <shell_run+0x108>)
 8008a78:	2128      	movs	r1, #40	@ 0x28
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f000 fa0c 	bl	8008e98 <sniprintf>
 8008a80:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8008a8e:	68f9      	ldr	r1, [r7, #12]
 8008a90:	b289      	uxth	r1, r1
 8008a92:	4610      	mov	r0, r2
 8008a94:	4798      	blx	r3
				h_shell->cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	1c5a      	adds	r2, r3, #1
 8008a9a:	613a      	str	r2, [r7, #16]
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, ":%s\r\n", h_shell->cmd_buffer);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8008ab2:	4a23      	ldr	r2, [pc, #140]	@ (8008b40 <shell_run+0x10c>)
 8008ab4:	2128      	movs	r1, #40	@ 0x28
 8008ab6:	f000 f9ef 	bl	8008e98 <sniprintf>
 8008aba:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8008ac8:	68f9      	ldr	r1, [r7, #12]
 8008aca:	b289      	uxth	r1, r1
 8008acc:	4610      	mov	r0, r2
 8008ace:	4798      	blx	r3
				reading = 0;        //exit read loop
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	617b      	str	r3, [r7, #20]
				pos = 0;            //reset buffer
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	613b      	str	r3, [r7, #16]
				break;
 8008ad8:	e022      	b.n	8008b20 <shell_run+0xec>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	dd1e      	ble.n	8008b1e <shell_run+0xea>
					pos--;          //remove it in buffer
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	613b      	str	r3, [r7, #16]

					h_shell->drv.transmit(backspace, 3);	// delete the char on the terminal
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8008aec:	2103      	movs	r1, #3
 8008aee:	4815      	ldr	r0, [pc, #84]	@ (8008b44 <shell_run+0x110>)
 8008af0:	4798      	blx	r3
				}
				break;
 8008af2:	e014      	b.n	8008b1e <shell_run+0xea>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	2b27      	cmp	r3, #39	@ 0x27
 8008af8:	dc12      	bgt.n	8008b20 <shell_run+0xec>
					h_shell->drv.transmit(&c, 1);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8008b00:	f107 020b 	add.w	r2, r7, #11
 8008b04:	2101      	movs	r1, #1
 8008b06:	4610      	mov	r0, r2
 8008b08:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c; //store
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	1c5a      	adds	r2, r3, #1
 8008b0e:	613a      	str	r2, [r7, #16]
 8008b10:	7af9      	ldrb	r1, [r7, #11]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	4413      	add	r3, r2
 8008b16:	460a      	mov	r2, r1
 8008b18:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
 8008b1c:	e000      	b.n	8008b20 <shell_run+0xec>
				break;
 8008b1e:	bf00      	nop
		while(reading) {
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d197      	bne.n	8008a56 <shell_run+0x22>
				}
			}
		}
		shell_exec(h_shell, h_shell->cmd_buffer);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f7ff ff10 	bl	8008954 <shell_exec>
		h_shell->drv.transmit(prompt, 2);
 8008b34:	e786      	b.n	8008a44 <shell_run+0x10>
 8008b36:	bf00      	nop
 8008b38:	20000018 	.word	0x20000018
 8008b3c:	08009f2c 	.word	0x08009f2c
 8008b40:	08009f30 	.word	0x08009f30
 8008b44:	20000014 	.word	0x20000014

08008b48 <atoi>:
 8008b48:	220a      	movs	r2, #10
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	f000 b87a 	b.w	8008c44 <strtol>

08008b50 <_strtol_l.constprop.0>:
 8008b50:	2b24      	cmp	r3, #36	@ 0x24
 8008b52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b56:	4686      	mov	lr, r0
 8008b58:	4690      	mov	r8, r2
 8008b5a:	d801      	bhi.n	8008b60 <_strtol_l.constprop.0+0x10>
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d106      	bne.n	8008b6e <_strtol_l.constprop.0+0x1e>
 8008b60:	f000 fb4a 	bl	80091f8 <__errno>
 8008b64:	2316      	movs	r3, #22
 8008b66:	6003      	str	r3, [r0, #0]
 8008b68:	2000      	movs	r0, #0
 8008b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b6e:	4834      	ldr	r0, [pc, #208]	@ (8008c40 <_strtol_l.constprop.0+0xf0>)
 8008b70:	460d      	mov	r5, r1
 8008b72:	462a      	mov	r2, r5
 8008b74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b78:	5d06      	ldrb	r6, [r0, r4]
 8008b7a:	f016 0608 	ands.w	r6, r6, #8
 8008b7e:	d1f8      	bne.n	8008b72 <_strtol_l.constprop.0+0x22>
 8008b80:	2c2d      	cmp	r4, #45	@ 0x2d
 8008b82:	d12d      	bne.n	8008be0 <_strtol_l.constprop.0+0x90>
 8008b84:	782c      	ldrb	r4, [r5, #0]
 8008b86:	2601      	movs	r6, #1
 8008b88:	1c95      	adds	r5, r2, #2
 8008b8a:	f033 0210 	bics.w	r2, r3, #16
 8008b8e:	d109      	bne.n	8008ba4 <_strtol_l.constprop.0+0x54>
 8008b90:	2c30      	cmp	r4, #48	@ 0x30
 8008b92:	d12a      	bne.n	8008bea <_strtol_l.constprop.0+0x9a>
 8008b94:	782a      	ldrb	r2, [r5, #0]
 8008b96:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008b9a:	2a58      	cmp	r2, #88	@ 0x58
 8008b9c:	d125      	bne.n	8008bea <_strtol_l.constprop.0+0x9a>
 8008b9e:	786c      	ldrb	r4, [r5, #1]
 8008ba0:	2310      	movs	r3, #16
 8008ba2:	3502      	adds	r5, #2
 8008ba4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008ba8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008bac:	2200      	movs	r2, #0
 8008bae:	fbbc f9f3 	udiv	r9, ip, r3
 8008bb2:	4610      	mov	r0, r2
 8008bb4:	fb03 ca19 	mls	sl, r3, r9, ip
 8008bb8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008bbc:	2f09      	cmp	r7, #9
 8008bbe:	d81b      	bhi.n	8008bf8 <_strtol_l.constprop.0+0xa8>
 8008bc0:	463c      	mov	r4, r7
 8008bc2:	42a3      	cmp	r3, r4
 8008bc4:	dd27      	ble.n	8008c16 <_strtol_l.constprop.0+0xc6>
 8008bc6:	1c57      	adds	r7, r2, #1
 8008bc8:	d007      	beq.n	8008bda <_strtol_l.constprop.0+0x8a>
 8008bca:	4581      	cmp	r9, r0
 8008bcc:	d320      	bcc.n	8008c10 <_strtol_l.constprop.0+0xc0>
 8008bce:	d101      	bne.n	8008bd4 <_strtol_l.constprop.0+0x84>
 8008bd0:	45a2      	cmp	sl, r4
 8008bd2:	db1d      	blt.n	8008c10 <_strtol_l.constprop.0+0xc0>
 8008bd4:	fb00 4003 	mla	r0, r0, r3, r4
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bde:	e7eb      	b.n	8008bb8 <_strtol_l.constprop.0+0x68>
 8008be0:	2c2b      	cmp	r4, #43	@ 0x2b
 8008be2:	bf04      	itt	eq
 8008be4:	782c      	ldrbeq	r4, [r5, #0]
 8008be6:	1c95      	addeq	r5, r2, #2
 8008be8:	e7cf      	b.n	8008b8a <_strtol_l.constprop.0+0x3a>
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1da      	bne.n	8008ba4 <_strtol_l.constprop.0+0x54>
 8008bee:	2c30      	cmp	r4, #48	@ 0x30
 8008bf0:	bf0c      	ite	eq
 8008bf2:	2308      	moveq	r3, #8
 8008bf4:	230a      	movne	r3, #10
 8008bf6:	e7d5      	b.n	8008ba4 <_strtol_l.constprop.0+0x54>
 8008bf8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008bfc:	2f19      	cmp	r7, #25
 8008bfe:	d801      	bhi.n	8008c04 <_strtol_l.constprop.0+0xb4>
 8008c00:	3c37      	subs	r4, #55	@ 0x37
 8008c02:	e7de      	b.n	8008bc2 <_strtol_l.constprop.0+0x72>
 8008c04:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008c08:	2f19      	cmp	r7, #25
 8008c0a:	d804      	bhi.n	8008c16 <_strtol_l.constprop.0+0xc6>
 8008c0c:	3c57      	subs	r4, #87	@ 0x57
 8008c0e:	e7d8      	b.n	8008bc2 <_strtol_l.constprop.0+0x72>
 8008c10:	f04f 32ff 	mov.w	r2, #4294967295
 8008c14:	e7e1      	b.n	8008bda <_strtol_l.constprop.0+0x8a>
 8008c16:	1c53      	adds	r3, r2, #1
 8008c18:	d108      	bne.n	8008c2c <_strtol_l.constprop.0+0xdc>
 8008c1a:	2322      	movs	r3, #34	@ 0x22
 8008c1c:	f8ce 3000 	str.w	r3, [lr]
 8008c20:	4660      	mov	r0, ip
 8008c22:	f1b8 0f00 	cmp.w	r8, #0
 8008c26:	d0a0      	beq.n	8008b6a <_strtol_l.constprop.0+0x1a>
 8008c28:	1e69      	subs	r1, r5, #1
 8008c2a:	e006      	b.n	8008c3a <_strtol_l.constprop.0+0xea>
 8008c2c:	b106      	cbz	r6, 8008c30 <_strtol_l.constprop.0+0xe0>
 8008c2e:	4240      	negs	r0, r0
 8008c30:	f1b8 0f00 	cmp.w	r8, #0
 8008c34:	d099      	beq.n	8008b6a <_strtol_l.constprop.0+0x1a>
 8008c36:	2a00      	cmp	r2, #0
 8008c38:	d1f6      	bne.n	8008c28 <_strtol_l.constprop.0+0xd8>
 8008c3a:	f8c8 1000 	str.w	r1, [r8]
 8008c3e:	e794      	b.n	8008b6a <_strtol_l.constprop.0+0x1a>
 8008c40:	08009f81 	.word	0x08009f81

08008c44 <strtol>:
 8008c44:	4613      	mov	r3, r2
 8008c46:	460a      	mov	r2, r1
 8008c48:	4601      	mov	r1, r0
 8008c4a:	4802      	ldr	r0, [pc, #8]	@ (8008c54 <strtol+0x10>)
 8008c4c:	6800      	ldr	r0, [r0, #0]
 8008c4e:	f7ff bf7f 	b.w	8008b50 <_strtol_l.constprop.0>
 8008c52:	bf00      	nop
 8008c54:	20000028 	.word	0x20000028

08008c58 <std>:
 8008c58:	2300      	movs	r3, #0
 8008c5a:	b510      	push	{r4, lr}
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	e9c0 3300 	strd	r3, r3, [r0]
 8008c62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c66:	6083      	str	r3, [r0, #8]
 8008c68:	8181      	strh	r1, [r0, #12]
 8008c6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008c6c:	81c2      	strh	r2, [r0, #14]
 8008c6e:	6183      	str	r3, [r0, #24]
 8008c70:	4619      	mov	r1, r3
 8008c72:	2208      	movs	r2, #8
 8008c74:	305c      	adds	r0, #92	@ 0x5c
 8008c76:	f000 fa1b 	bl	80090b0 <memset>
 8008c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8008cb0 <std+0x58>)
 8008c7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8008cb4 <std+0x5c>)
 8008c80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008c82:	4b0d      	ldr	r3, [pc, #52]	@ (8008cb8 <std+0x60>)
 8008c84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008c86:	4b0d      	ldr	r3, [pc, #52]	@ (8008cbc <std+0x64>)
 8008c88:	6323      	str	r3, [r4, #48]	@ 0x30
 8008c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8008cc0 <std+0x68>)
 8008c8c:	6224      	str	r4, [r4, #32]
 8008c8e:	429c      	cmp	r4, r3
 8008c90:	d006      	beq.n	8008ca0 <std+0x48>
 8008c92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008c96:	4294      	cmp	r4, r2
 8008c98:	d002      	beq.n	8008ca0 <std+0x48>
 8008c9a:	33d0      	adds	r3, #208	@ 0xd0
 8008c9c:	429c      	cmp	r4, r3
 8008c9e:	d105      	bne.n	8008cac <std+0x54>
 8008ca0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ca8:	f000 bad0 	b.w	800924c <__retarget_lock_init_recursive>
 8008cac:	bd10      	pop	{r4, pc}
 8008cae:	bf00      	nop
 8008cb0:	08008f01 	.word	0x08008f01
 8008cb4:	08008f23 	.word	0x08008f23
 8008cb8:	08008f5b 	.word	0x08008f5b
 8008cbc:	08008f7f 	.word	0x08008f7f
 8008cc0:	200016ec 	.word	0x200016ec

08008cc4 <stdio_exit_handler>:
 8008cc4:	4a02      	ldr	r2, [pc, #8]	@ (8008cd0 <stdio_exit_handler+0xc>)
 8008cc6:	4903      	ldr	r1, [pc, #12]	@ (8008cd4 <stdio_exit_handler+0x10>)
 8008cc8:	4803      	ldr	r0, [pc, #12]	@ (8008cd8 <stdio_exit_handler+0x14>)
 8008cca:	f000 b869 	b.w	8008da0 <_fwalk_sglue>
 8008cce:	bf00      	nop
 8008cd0:	2000001c 	.word	0x2000001c
 8008cd4:	08009b35 	.word	0x08009b35
 8008cd8:	2000002c 	.word	0x2000002c

08008cdc <cleanup_stdio>:
 8008cdc:	6841      	ldr	r1, [r0, #4]
 8008cde:	4b0c      	ldr	r3, [pc, #48]	@ (8008d10 <cleanup_stdio+0x34>)
 8008ce0:	4299      	cmp	r1, r3
 8008ce2:	b510      	push	{r4, lr}
 8008ce4:	4604      	mov	r4, r0
 8008ce6:	d001      	beq.n	8008cec <cleanup_stdio+0x10>
 8008ce8:	f000 ff24 	bl	8009b34 <_fflush_r>
 8008cec:	68a1      	ldr	r1, [r4, #8]
 8008cee:	4b09      	ldr	r3, [pc, #36]	@ (8008d14 <cleanup_stdio+0x38>)
 8008cf0:	4299      	cmp	r1, r3
 8008cf2:	d002      	beq.n	8008cfa <cleanup_stdio+0x1e>
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	f000 ff1d 	bl	8009b34 <_fflush_r>
 8008cfa:	68e1      	ldr	r1, [r4, #12]
 8008cfc:	4b06      	ldr	r3, [pc, #24]	@ (8008d18 <cleanup_stdio+0x3c>)
 8008cfe:	4299      	cmp	r1, r3
 8008d00:	d004      	beq.n	8008d0c <cleanup_stdio+0x30>
 8008d02:	4620      	mov	r0, r4
 8008d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d08:	f000 bf14 	b.w	8009b34 <_fflush_r>
 8008d0c:	bd10      	pop	{r4, pc}
 8008d0e:	bf00      	nop
 8008d10:	200016ec 	.word	0x200016ec
 8008d14:	20001754 	.word	0x20001754
 8008d18:	200017bc 	.word	0x200017bc

08008d1c <global_stdio_init.part.0>:
 8008d1c:	b510      	push	{r4, lr}
 8008d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8008d4c <global_stdio_init.part.0+0x30>)
 8008d20:	4c0b      	ldr	r4, [pc, #44]	@ (8008d50 <global_stdio_init.part.0+0x34>)
 8008d22:	4a0c      	ldr	r2, [pc, #48]	@ (8008d54 <global_stdio_init.part.0+0x38>)
 8008d24:	601a      	str	r2, [r3, #0]
 8008d26:	4620      	mov	r0, r4
 8008d28:	2200      	movs	r2, #0
 8008d2a:	2104      	movs	r1, #4
 8008d2c:	f7ff ff94 	bl	8008c58 <std>
 8008d30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008d34:	2201      	movs	r2, #1
 8008d36:	2109      	movs	r1, #9
 8008d38:	f7ff ff8e 	bl	8008c58 <std>
 8008d3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008d40:	2202      	movs	r2, #2
 8008d42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d46:	2112      	movs	r1, #18
 8008d48:	f7ff bf86 	b.w	8008c58 <std>
 8008d4c:	20001824 	.word	0x20001824
 8008d50:	200016ec 	.word	0x200016ec
 8008d54:	08008cc5 	.word	0x08008cc5

08008d58 <__sfp_lock_acquire>:
 8008d58:	4801      	ldr	r0, [pc, #4]	@ (8008d60 <__sfp_lock_acquire+0x8>)
 8008d5a:	f000 ba78 	b.w	800924e <__retarget_lock_acquire_recursive>
 8008d5e:	bf00      	nop
 8008d60:	2000182d 	.word	0x2000182d

08008d64 <__sfp_lock_release>:
 8008d64:	4801      	ldr	r0, [pc, #4]	@ (8008d6c <__sfp_lock_release+0x8>)
 8008d66:	f000 ba73 	b.w	8009250 <__retarget_lock_release_recursive>
 8008d6a:	bf00      	nop
 8008d6c:	2000182d 	.word	0x2000182d

08008d70 <__sinit>:
 8008d70:	b510      	push	{r4, lr}
 8008d72:	4604      	mov	r4, r0
 8008d74:	f7ff fff0 	bl	8008d58 <__sfp_lock_acquire>
 8008d78:	6a23      	ldr	r3, [r4, #32]
 8008d7a:	b11b      	cbz	r3, 8008d84 <__sinit+0x14>
 8008d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d80:	f7ff bff0 	b.w	8008d64 <__sfp_lock_release>
 8008d84:	4b04      	ldr	r3, [pc, #16]	@ (8008d98 <__sinit+0x28>)
 8008d86:	6223      	str	r3, [r4, #32]
 8008d88:	4b04      	ldr	r3, [pc, #16]	@ (8008d9c <__sinit+0x2c>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1f5      	bne.n	8008d7c <__sinit+0xc>
 8008d90:	f7ff ffc4 	bl	8008d1c <global_stdio_init.part.0>
 8008d94:	e7f2      	b.n	8008d7c <__sinit+0xc>
 8008d96:	bf00      	nop
 8008d98:	08008cdd 	.word	0x08008cdd
 8008d9c:	20001824 	.word	0x20001824

08008da0 <_fwalk_sglue>:
 8008da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008da4:	4607      	mov	r7, r0
 8008da6:	4688      	mov	r8, r1
 8008da8:	4614      	mov	r4, r2
 8008daa:	2600      	movs	r6, #0
 8008dac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008db0:	f1b9 0901 	subs.w	r9, r9, #1
 8008db4:	d505      	bpl.n	8008dc2 <_fwalk_sglue+0x22>
 8008db6:	6824      	ldr	r4, [r4, #0]
 8008db8:	2c00      	cmp	r4, #0
 8008dba:	d1f7      	bne.n	8008dac <_fwalk_sglue+0xc>
 8008dbc:	4630      	mov	r0, r6
 8008dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dc2:	89ab      	ldrh	r3, [r5, #12]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d907      	bls.n	8008dd8 <_fwalk_sglue+0x38>
 8008dc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	d003      	beq.n	8008dd8 <_fwalk_sglue+0x38>
 8008dd0:	4629      	mov	r1, r5
 8008dd2:	4638      	mov	r0, r7
 8008dd4:	47c0      	blx	r8
 8008dd6:	4306      	orrs	r6, r0
 8008dd8:	3568      	adds	r5, #104	@ 0x68
 8008dda:	e7e9      	b.n	8008db0 <_fwalk_sglue+0x10>

08008ddc <_puts_r>:
 8008ddc:	6a03      	ldr	r3, [r0, #32]
 8008dde:	b570      	push	{r4, r5, r6, lr}
 8008de0:	6884      	ldr	r4, [r0, #8]
 8008de2:	4605      	mov	r5, r0
 8008de4:	460e      	mov	r6, r1
 8008de6:	b90b      	cbnz	r3, 8008dec <_puts_r+0x10>
 8008de8:	f7ff ffc2 	bl	8008d70 <__sinit>
 8008dec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008dee:	07db      	lsls	r3, r3, #31
 8008df0:	d405      	bmi.n	8008dfe <_puts_r+0x22>
 8008df2:	89a3      	ldrh	r3, [r4, #12]
 8008df4:	0598      	lsls	r0, r3, #22
 8008df6:	d402      	bmi.n	8008dfe <_puts_r+0x22>
 8008df8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008dfa:	f000 fa28 	bl	800924e <__retarget_lock_acquire_recursive>
 8008dfe:	89a3      	ldrh	r3, [r4, #12]
 8008e00:	0719      	lsls	r1, r3, #28
 8008e02:	d502      	bpl.n	8008e0a <_puts_r+0x2e>
 8008e04:	6923      	ldr	r3, [r4, #16]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d135      	bne.n	8008e76 <_puts_r+0x9a>
 8008e0a:	4621      	mov	r1, r4
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	f000 f8f9 	bl	8009004 <__swsetup_r>
 8008e12:	b380      	cbz	r0, 8008e76 <_puts_r+0x9a>
 8008e14:	f04f 35ff 	mov.w	r5, #4294967295
 8008e18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e1a:	07da      	lsls	r2, r3, #31
 8008e1c:	d405      	bmi.n	8008e2a <_puts_r+0x4e>
 8008e1e:	89a3      	ldrh	r3, [r4, #12]
 8008e20:	059b      	lsls	r3, r3, #22
 8008e22:	d402      	bmi.n	8008e2a <_puts_r+0x4e>
 8008e24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e26:	f000 fa13 	bl	8009250 <__retarget_lock_release_recursive>
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	bd70      	pop	{r4, r5, r6, pc}
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	da04      	bge.n	8008e3c <_puts_r+0x60>
 8008e32:	69a2      	ldr	r2, [r4, #24]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	dc17      	bgt.n	8008e68 <_puts_r+0x8c>
 8008e38:	290a      	cmp	r1, #10
 8008e3a:	d015      	beq.n	8008e68 <_puts_r+0x8c>
 8008e3c:	6823      	ldr	r3, [r4, #0]
 8008e3e:	1c5a      	adds	r2, r3, #1
 8008e40:	6022      	str	r2, [r4, #0]
 8008e42:	7019      	strb	r1, [r3, #0]
 8008e44:	68a3      	ldr	r3, [r4, #8]
 8008e46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	60a3      	str	r3, [r4, #8]
 8008e4e:	2900      	cmp	r1, #0
 8008e50:	d1ed      	bne.n	8008e2e <_puts_r+0x52>
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	da11      	bge.n	8008e7a <_puts_r+0x9e>
 8008e56:	4622      	mov	r2, r4
 8008e58:	210a      	movs	r1, #10
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	f000 f893 	bl	8008f86 <__swbuf_r>
 8008e60:	3001      	adds	r0, #1
 8008e62:	d0d7      	beq.n	8008e14 <_puts_r+0x38>
 8008e64:	250a      	movs	r5, #10
 8008e66:	e7d7      	b.n	8008e18 <_puts_r+0x3c>
 8008e68:	4622      	mov	r2, r4
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	f000 f88b 	bl	8008f86 <__swbuf_r>
 8008e70:	3001      	adds	r0, #1
 8008e72:	d1e7      	bne.n	8008e44 <_puts_r+0x68>
 8008e74:	e7ce      	b.n	8008e14 <_puts_r+0x38>
 8008e76:	3e01      	subs	r6, #1
 8008e78:	e7e4      	b.n	8008e44 <_puts_r+0x68>
 8008e7a:	6823      	ldr	r3, [r4, #0]
 8008e7c:	1c5a      	adds	r2, r3, #1
 8008e7e:	6022      	str	r2, [r4, #0]
 8008e80:	220a      	movs	r2, #10
 8008e82:	701a      	strb	r2, [r3, #0]
 8008e84:	e7ee      	b.n	8008e64 <_puts_r+0x88>
	...

08008e88 <puts>:
 8008e88:	4b02      	ldr	r3, [pc, #8]	@ (8008e94 <puts+0xc>)
 8008e8a:	4601      	mov	r1, r0
 8008e8c:	6818      	ldr	r0, [r3, #0]
 8008e8e:	f7ff bfa5 	b.w	8008ddc <_puts_r>
 8008e92:	bf00      	nop
 8008e94:	20000028 	.word	0x20000028

08008e98 <sniprintf>:
 8008e98:	b40c      	push	{r2, r3}
 8008e9a:	b530      	push	{r4, r5, lr}
 8008e9c:	4b17      	ldr	r3, [pc, #92]	@ (8008efc <sniprintf+0x64>)
 8008e9e:	1e0c      	subs	r4, r1, #0
 8008ea0:	681d      	ldr	r5, [r3, #0]
 8008ea2:	b09d      	sub	sp, #116	@ 0x74
 8008ea4:	da08      	bge.n	8008eb8 <sniprintf+0x20>
 8008ea6:	238b      	movs	r3, #139	@ 0x8b
 8008ea8:	602b      	str	r3, [r5, #0]
 8008eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8008eae:	b01d      	add	sp, #116	@ 0x74
 8008eb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008eb4:	b002      	add	sp, #8
 8008eb6:	4770      	bx	lr
 8008eb8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008ebc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008ec0:	bf14      	ite	ne
 8008ec2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008ec6:	4623      	moveq	r3, r4
 8008ec8:	9304      	str	r3, [sp, #16]
 8008eca:	9307      	str	r3, [sp, #28]
 8008ecc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008ed0:	9002      	str	r0, [sp, #8]
 8008ed2:	9006      	str	r0, [sp, #24]
 8008ed4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008ed8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008eda:	ab21      	add	r3, sp, #132	@ 0x84
 8008edc:	a902      	add	r1, sp, #8
 8008ede:	4628      	mov	r0, r5
 8008ee0:	9301      	str	r3, [sp, #4]
 8008ee2:	f000 fb19 	bl	8009518 <_svfiprintf_r>
 8008ee6:	1c43      	adds	r3, r0, #1
 8008ee8:	bfbc      	itt	lt
 8008eea:	238b      	movlt	r3, #139	@ 0x8b
 8008eec:	602b      	strlt	r3, [r5, #0]
 8008eee:	2c00      	cmp	r4, #0
 8008ef0:	d0dd      	beq.n	8008eae <sniprintf+0x16>
 8008ef2:	9b02      	ldr	r3, [sp, #8]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	701a      	strb	r2, [r3, #0]
 8008ef8:	e7d9      	b.n	8008eae <sniprintf+0x16>
 8008efa:	bf00      	nop
 8008efc:	20000028 	.word	0x20000028

08008f00 <__sread>:
 8008f00:	b510      	push	{r4, lr}
 8008f02:	460c      	mov	r4, r1
 8008f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f08:	f000 f952 	bl	80091b0 <_read_r>
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	bfab      	itete	ge
 8008f10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008f12:	89a3      	ldrhlt	r3, [r4, #12]
 8008f14:	181b      	addge	r3, r3, r0
 8008f16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008f1a:	bfac      	ite	ge
 8008f1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008f1e:	81a3      	strhlt	r3, [r4, #12]
 8008f20:	bd10      	pop	{r4, pc}

08008f22 <__swrite>:
 8008f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f26:	461f      	mov	r7, r3
 8008f28:	898b      	ldrh	r3, [r1, #12]
 8008f2a:	05db      	lsls	r3, r3, #23
 8008f2c:	4605      	mov	r5, r0
 8008f2e:	460c      	mov	r4, r1
 8008f30:	4616      	mov	r6, r2
 8008f32:	d505      	bpl.n	8008f40 <__swrite+0x1e>
 8008f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f38:	2302      	movs	r3, #2
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f000 f926 	bl	800918c <_lseek_r>
 8008f40:	89a3      	ldrh	r3, [r4, #12]
 8008f42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f4a:	81a3      	strh	r3, [r4, #12]
 8008f4c:	4632      	mov	r2, r6
 8008f4e:	463b      	mov	r3, r7
 8008f50:	4628      	mov	r0, r5
 8008f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f56:	f000 b93d 	b.w	80091d4 <_write_r>

08008f5a <__sseek>:
 8008f5a:	b510      	push	{r4, lr}
 8008f5c:	460c      	mov	r4, r1
 8008f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f62:	f000 f913 	bl	800918c <_lseek_r>
 8008f66:	1c43      	adds	r3, r0, #1
 8008f68:	89a3      	ldrh	r3, [r4, #12]
 8008f6a:	bf15      	itete	ne
 8008f6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008f6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008f72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008f76:	81a3      	strheq	r3, [r4, #12]
 8008f78:	bf18      	it	ne
 8008f7a:	81a3      	strhne	r3, [r4, #12]
 8008f7c:	bd10      	pop	{r4, pc}

08008f7e <__sclose>:
 8008f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f82:	f000 b89d 	b.w	80090c0 <_close_r>

08008f86 <__swbuf_r>:
 8008f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f88:	460e      	mov	r6, r1
 8008f8a:	4614      	mov	r4, r2
 8008f8c:	4605      	mov	r5, r0
 8008f8e:	b118      	cbz	r0, 8008f98 <__swbuf_r+0x12>
 8008f90:	6a03      	ldr	r3, [r0, #32]
 8008f92:	b90b      	cbnz	r3, 8008f98 <__swbuf_r+0x12>
 8008f94:	f7ff feec 	bl	8008d70 <__sinit>
 8008f98:	69a3      	ldr	r3, [r4, #24]
 8008f9a:	60a3      	str	r3, [r4, #8]
 8008f9c:	89a3      	ldrh	r3, [r4, #12]
 8008f9e:	071a      	lsls	r2, r3, #28
 8008fa0:	d501      	bpl.n	8008fa6 <__swbuf_r+0x20>
 8008fa2:	6923      	ldr	r3, [r4, #16]
 8008fa4:	b943      	cbnz	r3, 8008fb8 <__swbuf_r+0x32>
 8008fa6:	4621      	mov	r1, r4
 8008fa8:	4628      	mov	r0, r5
 8008faa:	f000 f82b 	bl	8009004 <__swsetup_r>
 8008fae:	b118      	cbz	r0, 8008fb8 <__swbuf_r+0x32>
 8008fb0:	f04f 37ff 	mov.w	r7, #4294967295
 8008fb4:	4638      	mov	r0, r7
 8008fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fb8:	6823      	ldr	r3, [r4, #0]
 8008fba:	6922      	ldr	r2, [r4, #16]
 8008fbc:	1a98      	subs	r0, r3, r2
 8008fbe:	6963      	ldr	r3, [r4, #20]
 8008fc0:	b2f6      	uxtb	r6, r6
 8008fc2:	4283      	cmp	r3, r0
 8008fc4:	4637      	mov	r7, r6
 8008fc6:	dc05      	bgt.n	8008fd4 <__swbuf_r+0x4e>
 8008fc8:	4621      	mov	r1, r4
 8008fca:	4628      	mov	r0, r5
 8008fcc:	f000 fdb2 	bl	8009b34 <_fflush_r>
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	d1ed      	bne.n	8008fb0 <__swbuf_r+0x2a>
 8008fd4:	68a3      	ldr	r3, [r4, #8]
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	60a3      	str	r3, [r4, #8]
 8008fda:	6823      	ldr	r3, [r4, #0]
 8008fdc:	1c5a      	adds	r2, r3, #1
 8008fde:	6022      	str	r2, [r4, #0]
 8008fe0:	701e      	strb	r6, [r3, #0]
 8008fe2:	6962      	ldr	r2, [r4, #20]
 8008fe4:	1c43      	adds	r3, r0, #1
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d004      	beq.n	8008ff4 <__swbuf_r+0x6e>
 8008fea:	89a3      	ldrh	r3, [r4, #12]
 8008fec:	07db      	lsls	r3, r3, #31
 8008fee:	d5e1      	bpl.n	8008fb4 <__swbuf_r+0x2e>
 8008ff0:	2e0a      	cmp	r6, #10
 8008ff2:	d1df      	bne.n	8008fb4 <__swbuf_r+0x2e>
 8008ff4:	4621      	mov	r1, r4
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	f000 fd9c 	bl	8009b34 <_fflush_r>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	d0d9      	beq.n	8008fb4 <__swbuf_r+0x2e>
 8009000:	e7d6      	b.n	8008fb0 <__swbuf_r+0x2a>
	...

08009004 <__swsetup_r>:
 8009004:	b538      	push	{r3, r4, r5, lr}
 8009006:	4b29      	ldr	r3, [pc, #164]	@ (80090ac <__swsetup_r+0xa8>)
 8009008:	4605      	mov	r5, r0
 800900a:	6818      	ldr	r0, [r3, #0]
 800900c:	460c      	mov	r4, r1
 800900e:	b118      	cbz	r0, 8009018 <__swsetup_r+0x14>
 8009010:	6a03      	ldr	r3, [r0, #32]
 8009012:	b90b      	cbnz	r3, 8009018 <__swsetup_r+0x14>
 8009014:	f7ff feac 	bl	8008d70 <__sinit>
 8009018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800901c:	0719      	lsls	r1, r3, #28
 800901e:	d422      	bmi.n	8009066 <__swsetup_r+0x62>
 8009020:	06da      	lsls	r2, r3, #27
 8009022:	d407      	bmi.n	8009034 <__swsetup_r+0x30>
 8009024:	2209      	movs	r2, #9
 8009026:	602a      	str	r2, [r5, #0]
 8009028:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800902c:	81a3      	strh	r3, [r4, #12]
 800902e:	f04f 30ff 	mov.w	r0, #4294967295
 8009032:	e033      	b.n	800909c <__swsetup_r+0x98>
 8009034:	0758      	lsls	r0, r3, #29
 8009036:	d512      	bpl.n	800905e <__swsetup_r+0x5a>
 8009038:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800903a:	b141      	cbz	r1, 800904e <__swsetup_r+0x4a>
 800903c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009040:	4299      	cmp	r1, r3
 8009042:	d002      	beq.n	800904a <__swsetup_r+0x46>
 8009044:	4628      	mov	r0, r5
 8009046:	f000 f913 	bl	8009270 <_free_r>
 800904a:	2300      	movs	r3, #0
 800904c:	6363      	str	r3, [r4, #52]	@ 0x34
 800904e:	89a3      	ldrh	r3, [r4, #12]
 8009050:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009054:	81a3      	strh	r3, [r4, #12]
 8009056:	2300      	movs	r3, #0
 8009058:	6063      	str	r3, [r4, #4]
 800905a:	6923      	ldr	r3, [r4, #16]
 800905c:	6023      	str	r3, [r4, #0]
 800905e:	89a3      	ldrh	r3, [r4, #12]
 8009060:	f043 0308 	orr.w	r3, r3, #8
 8009064:	81a3      	strh	r3, [r4, #12]
 8009066:	6923      	ldr	r3, [r4, #16]
 8009068:	b94b      	cbnz	r3, 800907e <__swsetup_r+0x7a>
 800906a:	89a3      	ldrh	r3, [r4, #12]
 800906c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009074:	d003      	beq.n	800907e <__swsetup_r+0x7a>
 8009076:	4621      	mov	r1, r4
 8009078:	4628      	mov	r0, r5
 800907a:	f000 fda9 	bl	8009bd0 <__smakebuf_r>
 800907e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009082:	f013 0201 	ands.w	r2, r3, #1
 8009086:	d00a      	beq.n	800909e <__swsetup_r+0x9a>
 8009088:	2200      	movs	r2, #0
 800908a:	60a2      	str	r2, [r4, #8]
 800908c:	6962      	ldr	r2, [r4, #20]
 800908e:	4252      	negs	r2, r2
 8009090:	61a2      	str	r2, [r4, #24]
 8009092:	6922      	ldr	r2, [r4, #16]
 8009094:	b942      	cbnz	r2, 80090a8 <__swsetup_r+0xa4>
 8009096:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800909a:	d1c5      	bne.n	8009028 <__swsetup_r+0x24>
 800909c:	bd38      	pop	{r3, r4, r5, pc}
 800909e:	0799      	lsls	r1, r3, #30
 80090a0:	bf58      	it	pl
 80090a2:	6962      	ldrpl	r2, [r4, #20]
 80090a4:	60a2      	str	r2, [r4, #8]
 80090a6:	e7f4      	b.n	8009092 <__swsetup_r+0x8e>
 80090a8:	2000      	movs	r0, #0
 80090aa:	e7f7      	b.n	800909c <__swsetup_r+0x98>
 80090ac:	20000028 	.word	0x20000028

080090b0 <memset>:
 80090b0:	4402      	add	r2, r0
 80090b2:	4603      	mov	r3, r0
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d100      	bne.n	80090ba <memset+0xa>
 80090b8:	4770      	bx	lr
 80090ba:	f803 1b01 	strb.w	r1, [r3], #1
 80090be:	e7f9      	b.n	80090b4 <memset+0x4>

080090c0 <_close_r>:
 80090c0:	b538      	push	{r3, r4, r5, lr}
 80090c2:	4d06      	ldr	r5, [pc, #24]	@ (80090dc <_close_r+0x1c>)
 80090c4:	2300      	movs	r3, #0
 80090c6:	4604      	mov	r4, r0
 80090c8:	4608      	mov	r0, r1
 80090ca:	602b      	str	r3, [r5, #0]
 80090cc:	f7f8 f961 	bl	8001392 <_close>
 80090d0:	1c43      	adds	r3, r0, #1
 80090d2:	d102      	bne.n	80090da <_close_r+0x1a>
 80090d4:	682b      	ldr	r3, [r5, #0]
 80090d6:	b103      	cbz	r3, 80090da <_close_r+0x1a>
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	bd38      	pop	{r3, r4, r5, pc}
 80090dc:	20001828 	.word	0x20001828

080090e0 <_reclaim_reent>:
 80090e0:	4b29      	ldr	r3, [pc, #164]	@ (8009188 <_reclaim_reent+0xa8>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4283      	cmp	r3, r0
 80090e6:	b570      	push	{r4, r5, r6, lr}
 80090e8:	4604      	mov	r4, r0
 80090ea:	d04b      	beq.n	8009184 <_reclaim_reent+0xa4>
 80090ec:	69c3      	ldr	r3, [r0, #28]
 80090ee:	b1ab      	cbz	r3, 800911c <_reclaim_reent+0x3c>
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	b16b      	cbz	r3, 8009110 <_reclaim_reent+0x30>
 80090f4:	2500      	movs	r5, #0
 80090f6:	69e3      	ldr	r3, [r4, #28]
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	5959      	ldr	r1, [r3, r5]
 80090fc:	2900      	cmp	r1, #0
 80090fe:	d13b      	bne.n	8009178 <_reclaim_reent+0x98>
 8009100:	3504      	adds	r5, #4
 8009102:	2d80      	cmp	r5, #128	@ 0x80
 8009104:	d1f7      	bne.n	80090f6 <_reclaim_reent+0x16>
 8009106:	69e3      	ldr	r3, [r4, #28]
 8009108:	4620      	mov	r0, r4
 800910a:	68d9      	ldr	r1, [r3, #12]
 800910c:	f000 f8b0 	bl	8009270 <_free_r>
 8009110:	69e3      	ldr	r3, [r4, #28]
 8009112:	6819      	ldr	r1, [r3, #0]
 8009114:	b111      	cbz	r1, 800911c <_reclaim_reent+0x3c>
 8009116:	4620      	mov	r0, r4
 8009118:	f000 f8aa 	bl	8009270 <_free_r>
 800911c:	6961      	ldr	r1, [r4, #20]
 800911e:	b111      	cbz	r1, 8009126 <_reclaim_reent+0x46>
 8009120:	4620      	mov	r0, r4
 8009122:	f000 f8a5 	bl	8009270 <_free_r>
 8009126:	69e1      	ldr	r1, [r4, #28]
 8009128:	b111      	cbz	r1, 8009130 <_reclaim_reent+0x50>
 800912a:	4620      	mov	r0, r4
 800912c:	f000 f8a0 	bl	8009270 <_free_r>
 8009130:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009132:	b111      	cbz	r1, 800913a <_reclaim_reent+0x5a>
 8009134:	4620      	mov	r0, r4
 8009136:	f000 f89b 	bl	8009270 <_free_r>
 800913a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800913c:	b111      	cbz	r1, 8009144 <_reclaim_reent+0x64>
 800913e:	4620      	mov	r0, r4
 8009140:	f000 f896 	bl	8009270 <_free_r>
 8009144:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009146:	b111      	cbz	r1, 800914e <_reclaim_reent+0x6e>
 8009148:	4620      	mov	r0, r4
 800914a:	f000 f891 	bl	8009270 <_free_r>
 800914e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009150:	b111      	cbz	r1, 8009158 <_reclaim_reent+0x78>
 8009152:	4620      	mov	r0, r4
 8009154:	f000 f88c 	bl	8009270 <_free_r>
 8009158:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800915a:	b111      	cbz	r1, 8009162 <_reclaim_reent+0x82>
 800915c:	4620      	mov	r0, r4
 800915e:	f000 f887 	bl	8009270 <_free_r>
 8009162:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009164:	b111      	cbz	r1, 800916c <_reclaim_reent+0x8c>
 8009166:	4620      	mov	r0, r4
 8009168:	f000 f882 	bl	8009270 <_free_r>
 800916c:	6a23      	ldr	r3, [r4, #32]
 800916e:	b14b      	cbz	r3, 8009184 <_reclaim_reent+0xa4>
 8009170:	4620      	mov	r0, r4
 8009172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009176:	4718      	bx	r3
 8009178:	680e      	ldr	r6, [r1, #0]
 800917a:	4620      	mov	r0, r4
 800917c:	f000 f878 	bl	8009270 <_free_r>
 8009180:	4631      	mov	r1, r6
 8009182:	e7bb      	b.n	80090fc <_reclaim_reent+0x1c>
 8009184:	bd70      	pop	{r4, r5, r6, pc}
 8009186:	bf00      	nop
 8009188:	20000028 	.word	0x20000028

0800918c <_lseek_r>:
 800918c:	b538      	push	{r3, r4, r5, lr}
 800918e:	4d07      	ldr	r5, [pc, #28]	@ (80091ac <_lseek_r+0x20>)
 8009190:	4604      	mov	r4, r0
 8009192:	4608      	mov	r0, r1
 8009194:	4611      	mov	r1, r2
 8009196:	2200      	movs	r2, #0
 8009198:	602a      	str	r2, [r5, #0]
 800919a:	461a      	mov	r2, r3
 800919c:	f7f8 f920 	bl	80013e0 <_lseek>
 80091a0:	1c43      	adds	r3, r0, #1
 80091a2:	d102      	bne.n	80091aa <_lseek_r+0x1e>
 80091a4:	682b      	ldr	r3, [r5, #0]
 80091a6:	b103      	cbz	r3, 80091aa <_lseek_r+0x1e>
 80091a8:	6023      	str	r3, [r4, #0]
 80091aa:	bd38      	pop	{r3, r4, r5, pc}
 80091ac:	20001828 	.word	0x20001828

080091b0 <_read_r>:
 80091b0:	b538      	push	{r3, r4, r5, lr}
 80091b2:	4d07      	ldr	r5, [pc, #28]	@ (80091d0 <_read_r+0x20>)
 80091b4:	4604      	mov	r4, r0
 80091b6:	4608      	mov	r0, r1
 80091b8:	4611      	mov	r1, r2
 80091ba:	2200      	movs	r2, #0
 80091bc:	602a      	str	r2, [r5, #0]
 80091be:	461a      	mov	r2, r3
 80091c0:	f7f8 f8ae 	bl	8001320 <_read>
 80091c4:	1c43      	adds	r3, r0, #1
 80091c6:	d102      	bne.n	80091ce <_read_r+0x1e>
 80091c8:	682b      	ldr	r3, [r5, #0]
 80091ca:	b103      	cbz	r3, 80091ce <_read_r+0x1e>
 80091cc:	6023      	str	r3, [r4, #0]
 80091ce:	bd38      	pop	{r3, r4, r5, pc}
 80091d0:	20001828 	.word	0x20001828

080091d4 <_write_r>:
 80091d4:	b538      	push	{r3, r4, r5, lr}
 80091d6:	4d07      	ldr	r5, [pc, #28]	@ (80091f4 <_write_r+0x20>)
 80091d8:	4604      	mov	r4, r0
 80091da:	4608      	mov	r0, r1
 80091dc:	4611      	mov	r1, r2
 80091de:	2200      	movs	r2, #0
 80091e0:	602a      	str	r2, [r5, #0]
 80091e2:	461a      	mov	r2, r3
 80091e4:	f7f8 f8b9 	bl	800135a <_write>
 80091e8:	1c43      	adds	r3, r0, #1
 80091ea:	d102      	bne.n	80091f2 <_write_r+0x1e>
 80091ec:	682b      	ldr	r3, [r5, #0]
 80091ee:	b103      	cbz	r3, 80091f2 <_write_r+0x1e>
 80091f0:	6023      	str	r3, [r4, #0]
 80091f2:	bd38      	pop	{r3, r4, r5, pc}
 80091f4:	20001828 	.word	0x20001828

080091f8 <__errno>:
 80091f8:	4b01      	ldr	r3, [pc, #4]	@ (8009200 <__errno+0x8>)
 80091fa:	6818      	ldr	r0, [r3, #0]
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	20000028 	.word	0x20000028

08009204 <__libc_init_array>:
 8009204:	b570      	push	{r4, r5, r6, lr}
 8009206:	4d0d      	ldr	r5, [pc, #52]	@ (800923c <__libc_init_array+0x38>)
 8009208:	4c0d      	ldr	r4, [pc, #52]	@ (8009240 <__libc_init_array+0x3c>)
 800920a:	1b64      	subs	r4, r4, r5
 800920c:	10a4      	asrs	r4, r4, #2
 800920e:	2600      	movs	r6, #0
 8009210:	42a6      	cmp	r6, r4
 8009212:	d109      	bne.n	8009228 <__libc_init_array+0x24>
 8009214:	4d0b      	ldr	r5, [pc, #44]	@ (8009244 <__libc_init_array+0x40>)
 8009216:	4c0c      	ldr	r4, [pc, #48]	@ (8009248 <__libc_init_array+0x44>)
 8009218:	f000 fd98 	bl	8009d4c <_init>
 800921c:	1b64      	subs	r4, r4, r5
 800921e:	10a4      	asrs	r4, r4, #2
 8009220:	2600      	movs	r6, #0
 8009222:	42a6      	cmp	r6, r4
 8009224:	d105      	bne.n	8009232 <__libc_init_array+0x2e>
 8009226:	bd70      	pop	{r4, r5, r6, pc}
 8009228:	f855 3b04 	ldr.w	r3, [r5], #4
 800922c:	4798      	blx	r3
 800922e:	3601      	adds	r6, #1
 8009230:	e7ee      	b.n	8009210 <__libc_init_array+0xc>
 8009232:	f855 3b04 	ldr.w	r3, [r5], #4
 8009236:	4798      	blx	r3
 8009238:	3601      	adds	r6, #1
 800923a:	e7f2      	b.n	8009222 <__libc_init_array+0x1e>
 800923c:	0800a0bc 	.word	0x0800a0bc
 8009240:	0800a0bc 	.word	0x0800a0bc
 8009244:	0800a0bc 	.word	0x0800a0bc
 8009248:	0800a0c0 	.word	0x0800a0c0

0800924c <__retarget_lock_init_recursive>:
 800924c:	4770      	bx	lr

0800924e <__retarget_lock_acquire_recursive>:
 800924e:	4770      	bx	lr

08009250 <__retarget_lock_release_recursive>:
 8009250:	4770      	bx	lr

08009252 <memcpy>:
 8009252:	440a      	add	r2, r1
 8009254:	4291      	cmp	r1, r2
 8009256:	f100 33ff 	add.w	r3, r0, #4294967295
 800925a:	d100      	bne.n	800925e <memcpy+0xc>
 800925c:	4770      	bx	lr
 800925e:	b510      	push	{r4, lr}
 8009260:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009264:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009268:	4291      	cmp	r1, r2
 800926a:	d1f9      	bne.n	8009260 <memcpy+0xe>
 800926c:	bd10      	pop	{r4, pc}
	...

08009270 <_free_r>:
 8009270:	b538      	push	{r3, r4, r5, lr}
 8009272:	4605      	mov	r5, r0
 8009274:	2900      	cmp	r1, #0
 8009276:	d041      	beq.n	80092fc <_free_r+0x8c>
 8009278:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800927c:	1f0c      	subs	r4, r1, #4
 800927e:	2b00      	cmp	r3, #0
 8009280:	bfb8      	it	lt
 8009282:	18e4      	addlt	r4, r4, r3
 8009284:	f000 f8e0 	bl	8009448 <__malloc_lock>
 8009288:	4a1d      	ldr	r2, [pc, #116]	@ (8009300 <_free_r+0x90>)
 800928a:	6813      	ldr	r3, [r2, #0]
 800928c:	b933      	cbnz	r3, 800929c <_free_r+0x2c>
 800928e:	6063      	str	r3, [r4, #4]
 8009290:	6014      	str	r4, [r2, #0]
 8009292:	4628      	mov	r0, r5
 8009294:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009298:	f000 b8dc 	b.w	8009454 <__malloc_unlock>
 800929c:	42a3      	cmp	r3, r4
 800929e:	d908      	bls.n	80092b2 <_free_r+0x42>
 80092a0:	6820      	ldr	r0, [r4, #0]
 80092a2:	1821      	adds	r1, r4, r0
 80092a4:	428b      	cmp	r3, r1
 80092a6:	bf01      	itttt	eq
 80092a8:	6819      	ldreq	r1, [r3, #0]
 80092aa:	685b      	ldreq	r3, [r3, #4]
 80092ac:	1809      	addeq	r1, r1, r0
 80092ae:	6021      	streq	r1, [r4, #0]
 80092b0:	e7ed      	b.n	800928e <_free_r+0x1e>
 80092b2:	461a      	mov	r2, r3
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	b10b      	cbz	r3, 80092bc <_free_r+0x4c>
 80092b8:	42a3      	cmp	r3, r4
 80092ba:	d9fa      	bls.n	80092b2 <_free_r+0x42>
 80092bc:	6811      	ldr	r1, [r2, #0]
 80092be:	1850      	adds	r0, r2, r1
 80092c0:	42a0      	cmp	r0, r4
 80092c2:	d10b      	bne.n	80092dc <_free_r+0x6c>
 80092c4:	6820      	ldr	r0, [r4, #0]
 80092c6:	4401      	add	r1, r0
 80092c8:	1850      	adds	r0, r2, r1
 80092ca:	4283      	cmp	r3, r0
 80092cc:	6011      	str	r1, [r2, #0]
 80092ce:	d1e0      	bne.n	8009292 <_free_r+0x22>
 80092d0:	6818      	ldr	r0, [r3, #0]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	6053      	str	r3, [r2, #4]
 80092d6:	4408      	add	r0, r1
 80092d8:	6010      	str	r0, [r2, #0]
 80092da:	e7da      	b.n	8009292 <_free_r+0x22>
 80092dc:	d902      	bls.n	80092e4 <_free_r+0x74>
 80092de:	230c      	movs	r3, #12
 80092e0:	602b      	str	r3, [r5, #0]
 80092e2:	e7d6      	b.n	8009292 <_free_r+0x22>
 80092e4:	6820      	ldr	r0, [r4, #0]
 80092e6:	1821      	adds	r1, r4, r0
 80092e8:	428b      	cmp	r3, r1
 80092ea:	bf04      	itt	eq
 80092ec:	6819      	ldreq	r1, [r3, #0]
 80092ee:	685b      	ldreq	r3, [r3, #4]
 80092f0:	6063      	str	r3, [r4, #4]
 80092f2:	bf04      	itt	eq
 80092f4:	1809      	addeq	r1, r1, r0
 80092f6:	6021      	streq	r1, [r4, #0]
 80092f8:	6054      	str	r4, [r2, #4]
 80092fa:	e7ca      	b.n	8009292 <_free_r+0x22>
 80092fc:	bd38      	pop	{r3, r4, r5, pc}
 80092fe:	bf00      	nop
 8009300:	20001834 	.word	0x20001834

08009304 <sbrk_aligned>:
 8009304:	b570      	push	{r4, r5, r6, lr}
 8009306:	4e0f      	ldr	r6, [pc, #60]	@ (8009344 <sbrk_aligned+0x40>)
 8009308:	460c      	mov	r4, r1
 800930a:	6831      	ldr	r1, [r6, #0]
 800930c:	4605      	mov	r5, r0
 800930e:	b911      	cbnz	r1, 8009316 <sbrk_aligned+0x12>
 8009310:	f000 fcd6 	bl	8009cc0 <_sbrk_r>
 8009314:	6030      	str	r0, [r6, #0]
 8009316:	4621      	mov	r1, r4
 8009318:	4628      	mov	r0, r5
 800931a:	f000 fcd1 	bl	8009cc0 <_sbrk_r>
 800931e:	1c43      	adds	r3, r0, #1
 8009320:	d103      	bne.n	800932a <sbrk_aligned+0x26>
 8009322:	f04f 34ff 	mov.w	r4, #4294967295
 8009326:	4620      	mov	r0, r4
 8009328:	bd70      	pop	{r4, r5, r6, pc}
 800932a:	1cc4      	adds	r4, r0, #3
 800932c:	f024 0403 	bic.w	r4, r4, #3
 8009330:	42a0      	cmp	r0, r4
 8009332:	d0f8      	beq.n	8009326 <sbrk_aligned+0x22>
 8009334:	1a21      	subs	r1, r4, r0
 8009336:	4628      	mov	r0, r5
 8009338:	f000 fcc2 	bl	8009cc0 <_sbrk_r>
 800933c:	3001      	adds	r0, #1
 800933e:	d1f2      	bne.n	8009326 <sbrk_aligned+0x22>
 8009340:	e7ef      	b.n	8009322 <sbrk_aligned+0x1e>
 8009342:	bf00      	nop
 8009344:	20001830 	.word	0x20001830

08009348 <_malloc_r>:
 8009348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800934c:	1ccd      	adds	r5, r1, #3
 800934e:	f025 0503 	bic.w	r5, r5, #3
 8009352:	3508      	adds	r5, #8
 8009354:	2d0c      	cmp	r5, #12
 8009356:	bf38      	it	cc
 8009358:	250c      	movcc	r5, #12
 800935a:	2d00      	cmp	r5, #0
 800935c:	4606      	mov	r6, r0
 800935e:	db01      	blt.n	8009364 <_malloc_r+0x1c>
 8009360:	42a9      	cmp	r1, r5
 8009362:	d904      	bls.n	800936e <_malloc_r+0x26>
 8009364:	230c      	movs	r3, #12
 8009366:	6033      	str	r3, [r6, #0]
 8009368:	2000      	movs	r0, #0
 800936a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800936e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009444 <_malloc_r+0xfc>
 8009372:	f000 f869 	bl	8009448 <__malloc_lock>
 8009376:	f8d8 3000 	ldr.w	r3, [r8]
 800937a:	461c      	mov	r4, r3
 800937c:	bb44      	cbnz	r4, 80093d0 <_malloc_r+0x88>
 800937e:	4629      	mov	r1, r5
 8009380:	4630      	mov	r0, r6
 8009382:	f7ff ffbf 	bl	8009304 <sbrk_aligned>
 8009386:	1c43      	adds	r3, r0, #1
 8009388:	4604      	mov	r4, r0
 800938a:	d158      	bne.n	800943e <_malloc_r+0xf6>
 800938c:	f8d8 4000 	ldr.w	r4, [r8]
 8009390:	4627      	mov	r7, r4
 8009392:	2f00      	cmp	r7, #0
 8009394:	d143      	bne.n	800941e <_malloc_r+0xd6>
 8009396:	2c00      	cmp	r4, #0
 8009398:	d04b      	beq.n	8009432 <_malloc_r+0xea>
 800939a:	6823      	ldr	r3, [r4, #0]
 800939c:	4639      	mov	r1, r7
 800939e:	4630      	mov	r0, r6
 80093a0:	eb04 0903 	add.w	r9, r4, r3
 80093a4:	f000 fc8c 	bl	8009cc0 <_sbrk_r>
 80093a8:	4581      	cmp	r9, r0
 80093aa:	d142      	bne.n	8009432 <_malloc_r+0xea>
 80093ac:	6821      	ldr	r1, [r4, #0]
 80093ae:	1a6d      	subs	r5, r5, r1
 80093b0:	4629      	mov	r1, r5
 80093b2:	4630      	mov	r0, r6
 80093b4:	f7ff ffa6 	bl	8009304 <sbrk_aligned>
 80093b8:	3001      	adds	r0, #1
 80093ba:	d03a      	beq.n	8009432 <_malloc_r+0xea>
 80093bc:	6823      	ldr	r3, [r4, #0]
 80093be:	442b      	add	r3, r5
 80093c0:	6023      	str	r3, [r4, #0]
 80093c2:	f8d8 3000 	ldr.w	r3, [r8]
 80093c6:	685a      	ldr	r2, [r3, #4]
 80093c8:	bb62      	cbnz	r2, 8009424 <_malloc_r+0xdc>
 80093ca:	f8c8 7000 	str.w	r7, [r8]
 80093ce:	e00f      	b.n	80093f0 <_malloc_r+0xa8>
 80093d0:	6822      	ldr	r2, [r4, #0]
 80093d2:	1b52      	subs	r2, r2, r5
 80093d4:	d420      	bmi.n	8009418 <_malloc_r+0xd0>
 80093d6:	2a0b      	cmp	r2, #11
 80093d8:	d917      	bls.n	800940a <_malloc_r+0xc2>
 80093da:	1961      	adds	r1, r4, r5
 80093dc:	42a3      	cmp	r3, r4
 80093de:	6025      	str	r5, [r4, #0]
 80093e0:	bf18      	it	ne
 80093e2:	6059      	strne	r1, [r3, #4]
 80093e4:	6863      	ldr	r3, [r4, #4]
 80093e6:	bf08      	it	eq
 80093e8:	f8c8 1000 	streq.w	r1, [r8]
 80093ec:	5162      	str	r2, [r4, r5]
 80093ee:	604b      	str	r3, [r1, #4]
 80093f0:	4630      	mov	r0, r6
 80093f2:	f000 f82f 	bl	8009454 <__malloc_unlock>
 80093f6:	f104 000b 	add.w	r0, r4, #11
 80093fa:	1d23      	adds	r3, r4, #4
 80093fc:	f020 0007 	bic.w	r0, r0, #7
 8009400:	1ac2      	subs	r2, r0, r3
 8009402:	bf1c      	itt	ne
 8009404:	1a1b      	subne	r3, r3, r0
 8009406:	50a3      	strne	r3, [r4, r2]
 8009408:	e7af      	b.n	800936a <_malloc_r+0x22>
 800940a:	6862      	ldr	r2, [r4, #4]
 800940c:	42a3      	cmp	r3, r4
 800940e:	bf0c      	ite	eq
 8009410:	f8c8 2000 	streq.w	r2, [r8]
 8009414:	605a      	strne	r2, [r3, #4]
 8009416:	e7eb      	b.n	80093f0 <_malloc_r+0xa8>
 8009418:	4623      	mov	r3, r4
 800941a:	6864      	ldr	r4, [r4, #4]
 800941c:	e7ae      	b.n	800937c <_malloc_r+0x34>
 800941e:	463c      	mov	r4, r7
 8009420:	687f      	ldr	r7, [r7, #4]
 8009422:	e7b6      	b.n	8009392 <_malloc_r+0x4a>
 8009424:	461a      	mov	r2, r3
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	42a3      	cmp	r3, r4
 800942a:	d1fb      	bne.n	8009424 <_malloc_r+0xdc>
 800942c:	2300      	movs	r3, #0
 800942e:	6053      	str	r3, [r2, #4]
 8009430:	e7de      	b.n	80093f0 <_malloc_r+0xa8>
 8009432:	230c      	movs	r3, #12
 8009434:	6033      	str	r3, [r6, #0]
 8009436:	4630      	mov	r0, r6
 8009438:	f000 f80c 	bl	8009454 <__malloc_unlock>
 800943c:	e794      	b.n	8009368 <_malloc_r+0x20>
 800943e:	6005      	str	r5, [r0, #0]
 8009440:	e7d6      	b.n	80093f0 <_malloc_r+0xa8>
 8009442:	bf00      	nop
 8009444:	20001834 	.word	0x20001834

08009448 <__malloc_lock>:
 8009448:	4801      	ldr	r0, [pc, #4]	@ (8009450 <__malloc_lock+0x8>)
 800944a:	f7ff bf00 	b.w	800924e <__retarget_lock_acquire_recursive>
 800944e:	bf00      	nop
 8009450:	2000182c 	.word	0x2000182c

08009454 <__malloc_unlock>:
 8009454:	4801      	ldr	r0, [pc, #4]	@ (800945c <__malloc_unlock+0x8>)
 8009456:	f7ff befb 	b.w	8009250 <__retarget_lock_release_recursive>
 800945a:	bf00      	nop
 800945c:	2000182c 	.word	0x2000182c

08009460 <__ssputs_r>:
 8009460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009464:	688e      	ldr	r6, [r1, #8]
 8009466:	461f      	mov	r7, r3
 8009468:	42be      	cmp	r6, r7
 800946a:	680b      	ldr	r3, [r1, #0]
 800946c:	4682      	mov	sl, r0
 800946e:	460c      	mov	r4, r1
 8009470:	4690      	mov	r8, r2
 8009472:	d82d      	bhi.n	80094d0 <__ssputs_r+0x70>
 8009474:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009478:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800947c:	d026      	beq.n	80094cc <__ssputs_r+0x6c>
 800947e:	6965      	ldr	r5, [r4, #20]
 8009480:	6909      	ldr	r1, [r1, #16]
 8009482:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009486:	eba3 0901 	sub.w	r9, r3, r1
 800948a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800948e:	1c7b      	adds	r3, r7, #1
 8009490:	444b      	add	r3, r9
 8009492:	106d      	asrs	r5, r5, #1
 8009494:	429d      	cmp	r5, r3
 8009496:	bf38      	it	cc
 8009498:	461d      	movcc	r5, r3
 800949a:	0553      	lsls	r3, r2, #21
 800949c:	d527      	bpl.n	80094ee <__ssputs_r+0x8e>
 800949e:	4629      	mov	r1, r5
 80094a0:	f7ff ff52 	bl	8009348 <_malloc_r>
 80094a4:	4606      	mov	r6, r0
 80094a6:	b360      	cbz	r0, 8009502 <__ssputs_r+0xa2>
 80094a8:	6921      	ldr	r1, [r4, #16]
 80094aa:	464a      	mov	r2, r9
 80094ac:	f7ff fed1 	bl	8009252 <memcpy>
 80094b0:	89a3      	ldrh	r3, [r4, #12]
 80094b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80094b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094ba:	81a3      	strh	r3, [r4, #12]
 80094bc:	6126      	str	r6, [r4, #16]
 80094be:	6165      	str	r5, [r4, #20]
 80094c0:	444e      	add	r6, r9
 80094c2:	eba5 0509 	sub.w	r5, r5, r9
 80094c6:	6026      	str	r6, [r4, #0]
 80094c8:	60a5      	str	r5, [r4, #8]
 80094ca:	463e      	mov	r6, r7
 80094cc:	42be      	cmp	r6, r7
 80094ce:	d900      	bls.n	80094d2 <__ssputs_r+0x72>
 80094d0:	463e      	mov	r6, r7
 80094d2:	6820      	ldr	r0, [r4, #0]
 80094d4:	4632      	mov	r2, r6
 80094d6:	4641      	mov	r1, r8
 80094d8:	f000 fbb6 	bl	8009c48 <memmove>
 80094dc:	68a3      	ldr	r3, [r4, #8]
 80094de:	1b9b      	subs	r3, r3, r6
 80094e0:	60a3      	str	r3, [r4, #8]
 80094e2:	6823      	ldr	r3, [r4, #0]
 80094e4:	4433      	add	r3, r6
 80094e6:	6023      	str	r3, [r4, #0]
 80094e8:	2000      	movs	r0, #0
 80094ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ee:	462a      	mov	r2, r5
 80094f0:	f000 fbf6 	bl	8009ce0 <_realloc_r>
 80094f4:	4606      	mov	r6, r0
 80094f6:	2800      	cmp	r0, #0
 80094f8:	d1e0      	bne.n	80094bc <__ssputs_r+0x5c>
 80094fa:	6921      	ldr	r1, [r4, #16]
 80094fc:	4650      	mov	r0, sl
 80094fe:	f7ff feb7 	bl	8009270 <_free_r>
 8009502:	230c      	movs	r3, #12
 8009504:	f8ca 3000 	str.w	r3, [sl]
 8009508:	89a3      	ldrh	r3, [r4, #12]
 800950a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800950e:	81a3      	strh	r3, [r4, #12]
 8009510:	f04f 30ff 	mov.w	r0, #4294967295
 8009514:	e7e9      	b.n	80094ea <__ssputs_r+0x8a>
	...

08009518 <_svfiprintf_r>:
 8009518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800951c:	4698      	mov	r8, r3
 800951e:	898b      	ldrh	r3, [r1, #12]
 8009520:	061b      	lsls	r3, r3, #24
 8009522:	b09d      	sub	sp, #116	@ 0x74
 8009524:	4607      	mov	r7, r0
 8009526:	460d      	mov	r5, r1
 8009528:	4614      	mov	r4, r2
 800952a:	d510      	bpl.n	800954e <_svfiprintf_r+0x36>
 800952c:	690b      	ldr	r3, [r1, #16]
 800952e:	b973      	cbnz	r3, 800954e <_svfiprintf_r+0x36>
 8009530:	2140      	movs	r1, #64	@ 0x40
 8009532:	f7ff ff09 	bl	8009348 <_malloc_r>
 8009536:	6028      	str	r0, [r5, #0]
 8009538:	6128      	str	r0, [r5, #16]
 800953a:	b930      	cbnz	r0, 800954a <_svfiprintf_r+0x32>
 800953c:	230c      	movs	r3, #12
 800953e:	603b      	str	r3, [r7, #0]
 8009540:	f04f 30ff 	mov.w	r0, #4294967295
 8009544:	b01d      	add	sp, #116	@ 0x74
 8009546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800954a:	2340      	movs	r3, #64	@ 0x40
 800954c:	616b      	str	r3, [r5, #20]
 800954e:	2300      	movs	r3, #0
 8009550:	9309      	str	r3, [sp, #36]	@ 0x24
 8009552:	2320      	movs	r3, #32
 8009554:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009558:	f8cd 800c 	str.w	r8, [sp, #12]
 800955c:	2330      	movs	r3, #48	@ 0x30
 800955e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80096fc <_svfiprintf_r+0x1e4>
 8009562:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009566:	f04f 0901 	mov.w	r9, #1
 800956a:	4623      	mov	r3, r4
 800956c:	469a      	mov	sl, r3
 800956e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009572:	b10a      	cbz	r2, 8009578 <_svfiprintf_r+0x60>
 8009574:	2a25      	cmp	r2, #37	@ 0x25
 8009576:	d1f9      	bne.n	800956c <_svfiprintf_r+0x54>
 8009578:	ebba 0b04 	subs.w	fp, sl, r4
 800957c:	d00b      	beq.n	8009596 <_svfiprintf_r+0x7e>
 800957e:	465b      	mov	r3, fp
 8009580:	4622      	mov	r2, r4
 8009582:	4629      	mov	r1, r5
 8009584:	4638      	mov	r0, r7
 8009586:	f7ff ff6b 	bl	8009460 <__ssputs_r>
 800958a:	3001      	adds	r0, #1
 800958c:	f000 80a7 	beq.w	80096de <_svfiprintf_r+0x1c6>
 8009590:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009592:	445a      	add	r2, fp
 8009594:	9209      	str	r2, [sp, #36]	@ 0x24
 8009596:	f89a 3000 	ldrb.w	r3, [sl]
 800959a:	2b00      	cmp	r3, #0
 800959c:	f000 809f 	beq.w	80096de <_svfiprintf_r+0x1c6>
 80095a0:	2300      	movs	r3, #0
 80095a2:	f04f 32ff 	mov.w	r2, #4294967295
 80095a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095aa:	f10a 0a01 	add.w	sl, sl, #1
 80095ae:	9304      	str	r3, [sp, #16]
 80095b0:	9307      	str	r3, [sp, #28]
 80095b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80095b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80095b8:	4654      	mov	r4, sl
 80095ba:	2205      	movs	r2, #5
 80095bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095c0:	484e      	ldr	r0, [pc, #312]	@ (80096fc <_svfiprintf_r+0x1e4>)
 80095c2:	f7f6 fe05 	bl	80001d0 <memchr>
 80095c6:	9a04      	ldr	r2, [sp, #16]
 80095c8:	b9d8      	cbnz	r0, 8009602 <_svfiprintf_r+0xea>
 80095ca:	06d0      	lsls	r0, r2, #27
 80095cc:	bf44      	itt	mi
 80095ce:	2320      	movmi	r3, #32
 80095d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095d4:	0711      	lsls	r1, r2, #28
 80095d6:	bf44      	itt	mi
 80095d8:	232b      	movmi	r3, #43	@ 0x2b
 80095da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095de:	f89a 3000 	ldrb.w	r3, [sl]
 80095e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80095e4:	d015      	beq.n	8009612 <_svfiprintf_r+0xfa>
 80095e6:	9a07      	ldr	r2, [sp, #28]
 80095e8:	4654      	mov	r4, sl
 80095ea:	2000      	movs	r0, #0
 80095ec:	f04f 0c0a 	mov.w	ip, #10
 80095f0:	4621      	mov	r1, r4
 80095f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095f6:	3b30      	subs	r3, #48	@ 0x30
 80095f8:	2b09      	cmp	r3, #9
 80095fa:	d94b      	bls.n	8009694 <_svfiprintf_r+0x17c>
 80095fc:	b1b0      	cbz	r0, 800962c <_svfiprintf_r+0x114>
 80095fe:	9207      	str	r2, [sp, #28]
 8009600:	e014      	b.n	800962c <_svfiprintf_r+0x114>
 8009602:	eba0 0308 	sub.w	r3, r0, r8
 8009606:	fa09 f303 	lsl.w	r3, r9, r3
 800960a:	4313      	orrs	r3, r2
 800960c:	9304      	str	r3, [sp, #16]
 800960e:	46a2      	mov	sl, r4
 8009610:	e7d2      	b.n	80095b8 <_svfiprintf_r+0xa0>
 8009612:	9b03      	ldr	r3, [sp, #12]
 8009614:	1d19      	adds	r1, r3, #4
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	9103      	str	r1, [sp, #12]
 800961a:	2b00      	cmp	r3, #0
 800961c:	bfbb      	ittet	lt
 800961e:	425b      	neglt	r3, r3
 8009620:	f042 0202 	orrlt.w	r2, r2, #2
 8009624:	9307      	strge	r3, [sp, #28]
 8009626:	9307      	strlt	r3, [sp, #28]
 8009628:	bfb8      	it	lt
 800962a:	9204      	strlt	r2, [sp, #16]
 800962c:	7823      	ldrb	r3, [r4, #0]
 800962e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009630:	d10a      	bne.n	8009648 <_svfiprintf_r+0x130>
 8009632:	7863      	ldrb	r3, [r4, #1]
 8009634:	2b2a      	cmp	r3, #42	@ 0x2a
 8009636:	d132      	bne.n	800969e <_svfiprintf_r+0x186>
 8009638:	9b03      	ldr	r3, [sp, #12]
 800963a:	1d1a      	adds	r2, r3, #4
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	9203      	str	r2, [sp, #12]
 8009640:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009644:	3402      	adds	r4, #2
 8009646:	9305      	str	r3, [sp, #20]
 8009648:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800970c <_svfiprintf_r+0x1f4>
 800964c:	7821      	ldrb	r1, [r4, #0]
 800964e:	2203      	movs	r2, #3
 8009650:	4650      	mov	r0, sl
 8009652:	f7f6 fdbd 	bl	80001d0 <memchr>
 8009656:	b138      	cbz	r0, 8009668 <_svfiprintf_r+0x150>
 8009658:	9b04      	ldr	r3, [sp, #16]
 800965a:	eba0 000a 	sub.w	r0, r0, sl
 800965e:	2240      	movs	r2, #64	@ 0x40
 8009660:	4082      	lsls	r2, r0
 8009662:	4313      	orrs	r3, r2
 8009664:	3401      	adds	r4, #1
 8009666:	9304      	str	r3, [sp, #16]
 8009668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800966c:	4824      	ldr	r0, [pc, #144]	@ (8009700 <_svfiprintf_r+0x1e8>)
 800966e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009672:	2206      	movs	r2, #6
 8009674:	f7f6 fdac 	bl	80001d0 <memchr>
 8009678:	2800      	cmp	r0, #0
 800967a:	d036      	beq.n	80096ea <_svfiprintf_r+0x1d2>
 800967c:	4b21      	ldr	r3, [pc, #132]	@ (8009704 <_svfiprintf_r+0x1ec>)
 800967e:	bb1b      	cbnz	r3, 80096c8 <_svfiprintf_r+0x1b0>
 8009680:	9b03      	ldr	r3, [sp, #12]
 8009682:	3307      	adds	r3, #7
 8009684:	f023 0307 	bic.w	r3, r3, #7
 8009688:	3308      	adds	r3, #8
 800968a:	9303      	str	r3, [sp, #12]
 800968c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800968e:	4433      	add	r3, r6
 8009690:	9309      	str	r3, [sp, #36]	@ 0x24
 8009692:	e76a      	b.n	800956a <_svfiprintf_r+0x52>
 8009694:	fb0c 3202 	mla	r2, ip, r2, r3
 8009698:	460c      	mov	r4, r1
 800969a:	2001      	movs	r0, #1
 800969c:	e7a8      	b.n	80095f0 <_svfiprintf_r+0xd8>
 800969e:	2300      	movs	r3, #0
 80096a0:	3401      	adds	r4, #1
 80096a2:	9305      	str	r3, [sp, #20]
 80096a4:	4619      	mov	r1, r3
 80096a6:	f04f 0c0a 	mov.w	ip, #10
 80096aa:	4620      	mov	r0, r4
 80096ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096b0:	3a30      	subs	r2, #48	@ 0x30
 80096b2:	2a09      	cmp	r2, #9
 80096b4:	d903      	bls.n	80096be <_svfiprintf_r+0x1a6>
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d0c6      	beq.n	8009648 <_svfiprintf_r+0x130>
 80096ba:	9105      	str	r1, [sp, #20]
 80096bc:	e7c4      	b.n	8009648 <_svfiprintf_r+0x130>
 80096be:	fb0c 2101 	mla	r1, ip, r1, r2
 80096c2:	4604      	mov	r4, r0
 80096c4:	2301      	movs	r3, #1
 80096c6:	e7f0      	b.n	80096aa <_svfiprintf_r+0x192>
 80096c8:	ab03      	add	r3, sp, #12
 80096ca:	9300      	str	r3, [sp, #0]
 80096cc:	462a      	mov	r2, r5
 80096ce:	4b0e      	ldr	r3, [pc, #56]	@ (8009708 <_svfiprintf_r+0x1f0>)
 80096d0:	a904      	add	r1, sp, #16
 80096d2:	4638      	mov	r0, r7
 80096d4:	f3af 8000 	nop.w
 80096d8:	1c42      	adds	r2, r0, #1
 80096da:	4606      	mov	r6, r0
 80096dc:	d1d6      	bne.n	800968c <_svfiprintf_r+0x174>
 80096de:	89ab      	ldrh	r3, [r5, #12]
 80096e0:	065b      	lsls	r3, r3, #25
 80096e2:	f53f af2d 	bmi.w	8009540 <_svfiprintf_r+0x28>
 80096e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80096e8:	e72c      	b.n	8009544 <_svfiprintf_r+0x2c>
 80096ea:	ab03      	add	r3, sp, #12
 80096ec:	9300      	str	r3, [sp, #0]
 80096ee:	462a      	mov	r2, r5
 80096f0:	4b05      	ldr	r3, [pc, #20]	@ (8009708 <_svfiprintf_r+0x1f0>)
 80096f2:	a904      	add	r1, sp, #16
 80096f4:	4638      	mov	r0, r7
 80096f6:	f000 f879 	bl	80097ec <_printf_i>
 80096fa:	e7ed      	b.n	80096d8 <_svfiprintf_r+0x1c0>
 80096fc:	0800a081 	.word	0x0800a081
 8009700:	0800a08b 	.word	0x0800a08b
 8009704:	00000000 	.word	0x00000000
 8009708:	08009461 	.word	0x08009461
 800970c:	0800a087 	.word	0x0800a087

08009710 <_printf_common>:
 8009710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009714:	4616      	mov	r6, r2
 8009716:	4698      	mov	r8, r3
 8009718:	688a      	ldr	r2, [r1, #8]
 800971a:	690b      	ldr	r3, [r1, #16]
 800971c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009720:	4293      	cmp	r3, r2
 8009722:	bfb8      	it	lt
 8009724:	4613      	movlt	r3, r2
 8009726:	6033      	str	r3, [r6, #0]
 8009728:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800972c:	4607      	mov	r7, r0
 800972e:	460c      	mov	r4, r1
 8009730:	b10a      	cbz	r2, 8009736 <_printf_common+0x26>
 8009732:	3301      	adds	r3, #1
 8009734:	6033      	str	r3, [r6, #0]
 8009736:	6823      	ldr	r3, [r4, #0]
 8009738:	0699      	lsls	r1, r3, #26
 800973a:	bf42      	ittt	mi
 800973c:	6833      	ldrmi	r3, [r6, #0]
 800973e:	3302      	addmi	r3, #2
 8009740:	6033      	strmi	r3, [r6, #0]
 8009742:	6825      	ldr	r5, [r4, #0]
 8009744:	f015 0506 	ands.w	r5, r5, #6
 8009748:	d106      	bne.n	8009758 <_printf_common+0x48>
 800974a:	f104 0a19 	add.w	sl, r4, #25
 800974e:	68e3      	ldr	r3, [r4, #12]
 8009750:	6832      	ldr	r2, [r6, #0]
 8009752:	1a9b      	subs	r3, r3, r2
 8009754:	42ab      	cmp	r3, r5
 8009756:	dc26      	bgt.n	80097a6 <_printf_common+0x96>
 8009758:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800975c:	6822      	ldr	r2, [r4, #0]
 800975e:	3b00      	subs	r3, #0
 8009760:	bf18      	it	ne
 8009762:	2301      	movne	r3, #1
 8009764:	0692      	lsls	r2, r2, #26
 8009766:	d42b      	bmi.n	80097c0 <_printf_common+0xb0>
 8009768:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800976c:	4641      	mov	r1, r8
 800976e:	4638      	mov	r0, r7
 8009770:	47c8      	blx	r9
 8009772:	3001      	adds	r0, #1
 8009774:	d01e      	beq.n	80097b4 <_printf_common+0xa4>
 8009776:	6823      	ldr	r3, [r4, #0]
 8009778:	6922      	ldr	r2, [r4, #16]
 800977a:	f003 0306 	and.w	r3, r3, #6
 800977e:	2b04      	cmp	r3, #4
 8009780:	bf02      	ittt	eq
 8009782:	68e5      	ldreq	r5, [r4, #12]
 8009784:	6833      	ldreq	r3, [r6, #0]
 8009786:	1aed      	subeq	r5, r5, r3
 8009788:	68a3      	ldr	r3, [r4, #8]
 800978a:	bf0c      	ite	eq
 800978c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009790:	2500      	movne	r5, #0
 8009792:	4293      	cmp	r3, r2
 8009794:	bfc4      	itt	gt
 8009796:	1a9b      	subgt	r3, r3, r2
 8009798:	18ed      	addgt	r5, r5, r3
 800979a:	2600      	movs	r6, #0
 800979c:	341a      	adds	r4, #26
 800979e:	42b5      	cmp	r5, r6
 80097a0:	d11a      	bne.n	80097d8 <_printf_common+0xc8>
 80097a2:	2000      	movs	r0, #0
 80097a4:	e008      	b.n	80097b8 <_printf_common+0xa8>
 80097a6:	2301      	movs	r3, #1
 80097a8:	4652      	mov	r2, sl
 80097aa:	4641      	mov	r1, r8
 80097ac:	4638      	mov	r0, r7
 80097ae:	47c8      	blx	r9
 80097b0:	3001      	adds	r0, #1
 80097b2:	d103      	bne.n	80097bc <_printf_common+0xac>
 80097b4:	f04f 30ff 	mov.w	r0, #4294967295
 80097b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097bc:	3501      	adds	r5, #1
 80097be:	e7c6      	b.n	800974e <_printf_common+0x3e>
 80097c0:	18e1      	adds	r1, r4, r3
 80097c2:	1c5a      	adds	r2, r3, #1
 80097c4:	2030      	movs	r0, #48	@ 0x30
 80097c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80097ca:	4422      	add	r2, r4
 80097cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80097d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80097d4:	3302      	adds	r3, #2
 80097d6:	e7c7      	b.n	8009768 <_printf_common+0x58>
 80097d8:	2301      	movs	r3, #1
 80097da:	4622      	mov	r2, r4
 80097dc:	4641      	mov	r1, r8
 80097de:	4638      	mov	r0, r7
 80097e0:	47c8      	blx	r9
 80097e2:	3001      	adds	r0, #1
 80097e4:	d0e6      	beq.n	80097b4 <_printf_common+0xa4>
 80097e6:	3601      	adds	r6, #1
 80097e8:	e7d9      	b.n	800979e <_printf_common+0x8e>
	...

080097ec <_printf_i>:
 80097ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097f0:	7e0f      	ldrb	r7, [r1, #24]
 80097f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80097f4:	2f78      	cmp	r7, #120	@ 0x78
 80097f6:	4691      	mov	r9, r2
 80097f8:	4680      	mov	r8, r0
 80097fa:	460c      	mov	r4, r1
 80097fc:	469a      	mov	sl, r3
 80097fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009802:	d807      	bhi.n	8009814 <_printf_i+0x28>
 8009804:	2f62      	cmp	r7, #98	@ 0x62
 8009806:	d80a      	bhi.n	800981e <_printf_i+0x32>
 8009808:	2f00      	cmp	r7, #0
 800980a:	f000 80d2 	beq.w	80099b2 <_printf_i+0x1c6>
 800980e:	2f58      	cmp	r7, #88	@ 0x58
 8009810:	f000 80b9 	beq.w	8009986 <_printf_i+0x19a>
 8009814:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009818:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800981c:	e03a      	b.n	8009894 <_printf_i+0xa8>
 800981e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009822:	2b15      	cmp	r3, #21
 8009824:	d8f6      	bhi.n	8009814 <_printf_i+0x28>
 8009826:	a101      	add	r1, pc, #4	@ (adr r1, 800982c <_printf_i+0x40>)
 8009828:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800982c:	08009885 	.word	0x08009885
 8009830:	08009899 	.word	0x08009899
 8009834:	08009815 	.word	0x08009815
 8009838:	08009815 	.word	0x08009815
 800983c:	08009815 	.word	0x08009815
 8009840:	08009815 	.word	0x08009815
 8009844:	08009899 	.word	0x08009899
 8009848:	08009815 	.word	0x08009815
 800984c:	08009815 	.word	0x08009815
 8009850:	08009815 	.word	0x08009815
 8009854:	08009815 	.word	0x08009815
 8009858:	08009999 	.word	0x08009999
 800985c:	080098c3 	.word	0x080098c3
 8009860:	08009953 	.word	0x08009953
 8009864:	08009815 	.word	0x08009815
 8009868:	08009815 	.word	0x08009815
 800986c:	080099bb 	.word	0x080099bb
 8009870:	08009815 	.word	0x08009815
 8009874:	080098c3 	.word	0x080098c3
 8009878:	08009815 	.word	0x08009815
 800987c:	08009815 	.word	0x08009815
 8009880:	0800995b 	.word	0x0800995b
 8009884:	6833      	ldr	r3, [r6, #0]
 8009886:	1d1a      	adds	r2, r3, #4
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	6032      	str	r2, [r6, #0]
 800988c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009890:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009894:	2301      	movs	r3, #1
 8009896:	e09d      	b.n	80099d4 <_printf_i+0x1e8>
 8009898:	6833      	ldr	r3, [r6, #0]
 800989a:	6820      	ldr	r0, [r4, #0]
 800989c:	1d19      	adds	r1, r3, #4
 800989e:	6031      	str	r1, [r6, #0]
 80098a0:	0606      	lsls	r6, r0, #24
 80098a2:	d501      	bpl.n	80098a8 <_printf_i+0xbc>
 80098a4:	681d      	ldr	r5, [r3, #0]
 80098a6:	e003      	b.n	80098b0 <_printf_i+0xc4>
 80098a8:	0645      	lsls	r5, r0, #25
 80098aa:	d5fb      	bpl.n	80098a4 <_printf_i+0xb8>
 80098ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80098b0:	2d00      	cmp	r5, #0
 80098b2:	da03      	bge.n	80098bc <_printf_i+0xd0>
 80098b4:	232d      	movs	r3, #45	@ 0x2d
 80098b6:	426d      	negs	r5, r5
 80098b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80098bc:	4859      	ldr	r0, [pc, #356]	@ (8009a24 <_printf_i+0x238>)
 80098be:	230a      	movs	r3, #10
 80098c0:	e011      	b.n	80098e6 <_printf_i+0xfa>
 80098c2:	6821      	ldr	r1, [r4, #0]
 80098c4:	6833      	ldr	r3, [r6, #0]
 80098c6:	0608      	lsls	r0, r1, #24
 80098c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80098cc:	d402      	bmi.n	80098d4 <_printf_i+0xe8>
 80098ce:	0649      	lsls	r1, r1, #25
 80098d0:	bf48      	it	mi
 80098d2:	b2ad      	uxthmi	r5, r5
 80098d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80098d6:	4853      	ldr	r0, [pc, #332]	@ (8009a24 <_printf_i+0x238>)
 80098d8:	6033      	str	r3, [r6, #0]
 80098da:	bf14      	ite	ne
 80098dc:	230a      	movne	r3, #10
 80098de:	2308      	moveq	r3, #8
 80098e0:	2100      	movs	r1, #0
 80098e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80098e6:	6866      	ldr	r6, [r4, #4]
 80098e8:	60a6      	str	r6, [r4, #8]
 80098ea:	2e00      	cmp	r6, #0
 80098ec:	bfa2      	ittt	ge
 80098ee:	6821      	ldrge	r1, [r4, #0]
 80098f0:	f021 0104 	bicge.w	r1, r1, #4
 80098f4:	6021      	strge	r1, [r4, #0]
 80098f6:	b90d      	cbnz	r5, 80098fc <_printf_i+0x110>
 80098f8:	2e00      	cmp	r6, #0
 80098fa:	d04b      	beq.n	8009994 <_printf_i+0x1a8>
 80098fc:	4616      	mov	r6, r2
 80098fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8009902:	fb03 5711 	mls	r7, r3, r1, r5
 8009906:	5dc7      	ldrb	r7, [r0, r7]
 8009908:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800990c:	462f      	mov	r7, r5
 800990e:	42bb      	cmp	r3, r7
 8009910:	460d      	mov	r5, r1
 8009912:	d9f4      	bls.n	80098fe <_printf_i+0x112>
 8009914:	2b08      	cmp	r3, #8
 8009916:	d10b      	bne.n	8009930 <_printf_i+0x144>
 8009918:	6823      	ldr	r3, [r4, #0]
 800991a:	07df      	lsls	r7, r3, #31
 800991c:	d508      	bpl.n	8009930 <_printf_i+0x144>
 800991e:	6923      	ldr	r3, [r4, #16]
 8009920:	6861      	ldr	r1, [r4, #4]
 8009922:	4299      	cmp	r1, r3
 8009924:	bfde      	ittt	le
 8009926:	2330      	movle	r3, #48	@ 0x30
 8009928:	f806 3c01 	strble.w	r3, [r6, #-1]
 800992c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009930:	1b92      	subs	r2, r2, r6
 8009932:	6122      	str	r2, [r4, #16]
 8009934:	f8cd a000 	str.w	sl, [sp]
 8009938:	464b      	mov	r3, r9
 800993a:	aa03      	add	r2, sp, #12
 800993c:	4621      	mov	r1, r4
 800993e:	4640      	mov	r0, r8
 8009940:	f7ff fee6 	bl	8009710 <_printf_common>
 8009944:	3001      	adds	r0, #1
 8009946:	d14a      	bne.n	80099de <_printf_i+0x1f2>
 8009948:	f04f 30ff 	mov.w	r0, #4294967295
 800994c:	b004      	add	sp, #16
 800994e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009952:	6823      	ldr	r3, [r4, #0]
 8009954:	f043 0320 	orr.w	r3, r3, #32
 8009958:	6023      	str	r3, [r4, #0]
 800995a:	4833      	ldr	r0, [pc, #204]	@ (8009a28 <_printf_i+0x23c>)
 800995c:	2778      	movs	r7, #120	@ 0x78
 800995e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009962:	6823      	ldr	r3, [r4, #0]
 8009964:	6831      	ldr	r1, [r6, #0]
 8009966:	061f      	lsls	r7, r3, #24
 8009968:	f851 5b04 	ldr.w	r5, [r1], #4
 800996c:	d402      	bmi.n	8009974 <_printf_i+0x188>
 800996e:	065f      	lsls	r7, r3, #25
 8009970:	bf48      	it	mi
 8009972:	b2ad      	uxthmi	r5, r5
 8009974:	6031      	str	r1, [r6, #0]
 8009976:	07d9      	lsls	r1, r3, #31
 8009978:	bf44      	itt	mi
 800997a:	f043 0320 	orrmi.w	r3, r3, #32
 800997e:	6023      	strmi	r3, [r4, #0]
 8009980:	b11d      	cbz	r5, 800998a <_printf_i+0x19e>
 8009982:	2310      	movs	r3, #16
 8009984:	e7ac      	b.n	80098e0 <_printf_i+0xf4>
 8009986:	4827      	ldr	r0, [pc, #156]	@ (8009a24 <_printf_i+0x238>)
 8009988:	e7e9      	b.n	800995e <_printf_i+0x172>
 800998a:	6823      	ldr	r3, [r4, #0]
 800998c:	f023 0320 	bic.w	r3, r3, #32
 8009990:	6023      	str	r3, [r4, #0]
 8009992:	e7f6      	b.n	8009982 <_printf_i+0x196>
 8009994:	4616      	mov	r6, r2
 8009996:	e7bd      	b.n	8009914 <_printf_i+0x128>
 8009998:	6833      	ldr	r3, [r6, #0]
 800999a:	6825      	ldr	r5, [r4, #0]
 800999c:	6961      	ldr	r1, [r4, #20]
 800999e:	1d18      	adds	r0, r3, #4
 80099a0:	6030      	str	r0, [r6, #0]
 80099a2:	062e      	lsls	r6, r5, #24
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	d501      	bpl.n	80099ac <_printf_i+0x1c0>
 80099a8:	6019      	str	r1, [r3, #0]
 80099aa:	e002      	b.n	80099b2 <_printf_i+0x1c6>
 80099ac:	0668      	lsls	r0, r5, #25
 80099ae:	d5fb      	bpl.n	80099a8 <_printf_i+0x1bc>
 80099b0:	8019      	strh	r1, [r3, #0]
 80099b2:	2300      	movs	r3, #0
 80099b4:	6123      	str	r3, [r4, #16]
 80099b6:	4616      	mov	r6, r2
 80099b8:	e7bc      	b.n	8009934 <_printf_i+0x148>
 80099ba:	6833      	ldr	r3, [r6, #0]
 80099bc:	1d1a      	adds	r2, r3, #4
 80099be:	6032      	str	r2, [r6, #0]
 80099c0:	681e      	ldr	r6, [r3, #0]
 80099c2:	6862      	ldr	r2, [r4, #4]
 80099c4:	2100      	movs	r1, #0
 80099c6:	4630      	mov	r0, r6
 80099c8:	f7f6 fc02 	bl	80001d0 <memchr>
 80099cc:	b108      	cbz	r0, 80099d2 <_printf_i+0x1e6>
 80099ce:	1b80      	subs	r0, r0, r6
 80099d0:	6060      	str	r0, [r4, #4]
 80099d2:	6863      	ldr	r3, [r4, #4]
 80099d4:	6123      	str	r3, [r4, #16]
 80099d6:	2300      	movs	r3, #0
 80099d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099dc:	e7aa      	b.n	8009934 <_printf_i+0x148>
 80099de:	6923      	ldr	r3, [r4, #16]
 80099e0:	4632      	mov	r2, r6
 80099e2:	4649      	mov	r1, r9
 80099e4:	4640      	mov	r0, r8
 80099e6:	47d0      	blx	sl
 80099e8:	3001      	adds	r0, #1
 80099ea:	d0ad      	beq.n	8009948 <_printf_i+0x15c>
 80099ec:	6823      	ldr	r3, [r4, #0]
 80099ee:	079b      	lsls	r3, r3, #30
 80099f0:	d413      	bmi.n	8009a1a <_printf_i+0x22e>
 80099f2:	68e0      	ldr	r0, [r4, #12]
 80099f4:	9b03      	ldr	r3, [sp, #12]
 80099f6:	4298      	cmp	r0, r3
 80099f8:	bfb8      	it	lt
 80099fa:	4618      	movlt	r0, r3
 80099fc:	e7a6      	b.n	800994c <_printf_i+0x160>
 80099fe:	2301      	movs	r3, #1
 8009a00:	4632      	mov	r2, r6
 8009a02:	4649      	mov	r1, r9
 8009a04:	4640      	mov	r0, r8
 8009a06:	47d0      	blx	sl
 8009a08:	3001      	adds	r0, #1
 8009a0a:	d09d      	beq.n	8009948 <_printf_i+0x15c>
 8009a0c:	3501      	adds	r5, #1
 8009a0e:	68e3      	ldr	r3, [r4, #12]
 8009a10:	9903      	ldr	r1, [sp, #12]
 8009a12:	1a5b      	subs	r3, r3, r1
 8009a14:	42ab      	cmp	r3, r5
 8009a16:	dcf2      	bgt.n	80099fe <_printf_i+0x212>
 8009a18:	e7eb      	b.n	80099f2 <_printf_i+0x206>
 8009a1a:	2500      	movs	r5, #0
 8009a1c:	f104 0619 	add.w	r6, r4, #25
 8009a20:	e7f5      	b.n	8009a0e <_printf_i+0x222>
 8009a22:	bf00      	nop
 8009a24:	0800a092 	.word	0x0800a092
 8009a28:	0800a0a3 	.word	0x0800a0a3

08009a2c <__sflush_r>:
 8009a2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a34:	0716      	lsls	r6, r2, #28
 8009a36:	4605      	mov	r5, r0
 8009a38:	460c      	mov	r4, r1
 8009a3a:	d454      	bmi.n	8009ae6 <__sflush_r+0xba>
 8009a3c:	684b      	ldr	r3, [r1, #4]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	dc02      	bgt.n	8009a48 <__sflush_r+0x1c>
 8009a42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	dd48      	ble.n	8009ada <__sflush_r+0xae>
 8009a48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a4a:	2e00      	cmp	r6, #0
 8009a4c:	d045      	beq.n	8009ada <__sflush_r+0xae>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009a54:	682f      	ldr	r7, [r5, #0]
 8009a56:	6a21      	ldr	r1, [r4, #32]
 8009a58:	602b      	str	r3, [r5, #0]
 8009a5a:	d030      	beq.n	8009abe <__sflush_r+0x92>
 8009a5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009a5e:	89a3      	ldrh	r3, [r4, #12]
 8009a60:	0759      	lsls	r1, r3, #29
 8009a62:	d505      	bpl.n	8009a70 <__sflush_r+0x44>
 8009a64:	6863      	ldr	r3, [r4, #4]
 8009a66:	1ad2      	subs	r2, r2, r3
 8009a68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a6a:	b10b      	cbz	r3, 8009a70 <__sflush_r+0x44>
 8009a6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009a6e:	1ad2      	subs	r2, r2, r3
 8009a70:	2300      	movs	r3, #0
 8009a72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a74:	6a21      	ldr	r1, [r4, #32]
 8009a76:	4628      	mov	r0, r5
 8009a78:	47b0      	blx	r6
 8009a7a:	1c43      	adds	r3, r0, #1
 8009a7c:	89a3      	ldrh	r3, [r4, #12]
 8009a7e:	d106      	bne.n	8009a8e <__sflush_r+0x62>
 8009a80:	6829      	ldr	r1, [r5, #0]
 8009a82:	291d      	cmp	r1, #29
 8009a84:	d82b      	bhi.n	8009ade <__sflush_r+0xb2>
 8009a86:	4a2a      	ldr	r2, [pc, #168]	@ (8009b30 <__sflush_r+0x104>)
 8009a88:	410a      	asrs	r2, r1
 8009a8a:	07d6      	lsls	r6, r2, #31
 8009a8c:	d427      	bmi.n	8009ade <__sflush_r+0xb2>
 8009a8e:	2200      	movs	r2, #0
 8009a90:	6062      	str	r2, [r4, #4]
 8009a92:	04d9      	lsls	r1, r3, #19
 8009a94:	6922      	ldr	r2, [r4, #16]
 8009a96:	6022      	str	r2, [r4, #0]
 8009a98:	d504      	bpl.n	8009aa4 <__sflush_r+0x78>
 8009a9a:	1c42      	adds	r2, r0, #1
 8009a9c:	d101      	bne.n	8009aa2 <__sflush_r+0x76>
 8009a9e:	682b      	ldr	r3, [r5, #0]
 8009aa0:	b903      	cbnz	r3, 8009aa4 <__sflush_r+0x78>
 8009aa2:	6560      	str	r0, [r4, #84]	@ 0x54
 8009aa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009aa6:	602f      	str	r7, [r5, #0]
 8009aa8:	b1b9      	cbz	r1, 8009ada <__sflush_r+0xae>
 8009aaa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009aae:	4299      	cmp	r1, r3
 8009ab0:	d002      	beq.n	8009ab8 <__sflush_r+0x8c>
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	f7ff fbdc 	bl	8009270 <_free_r>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	6363      	str	r3, [r4, #52]	@ 0x34
 8009abc:	e00d      	b.n	8009ada <__sflush_r+0xae>
 8009abe:	2301      	movs	r3, #1
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	47b0      	blx	r6
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	1c50      	adds	r0, r2, #1
 8009ac8:	d1c9      	bne.n	8009a5e <__sflush_r+0x32>
 8009aca:	682b      	ldr	r3, [r5, #0]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d0c6      	beq.n	8009a5e <__sflush_r+0x32>
 8009ad0:	2b1d      	cmp	r3, #29
 8009ad2:	d001      	beq.n	8009ad8 <__sflush_r+0xac>
 8009ad4:	2b16      	cmp	r3, #22
 8009ad6:	d11e      	bne.n	8009b16 <__sflush_r+0xea>
 8009ad8:	602f      	str	r7, [r5, #0]
 8009ada:	2000      	movs	r0, #0
 8009adc:	e022      	b.n	8009b24 <__sflush_r+0xf8>
 8009ade:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ae2:	b21b      	sxth	r3, r3
 8009ae4:	e01b      	b.n	8009b1e <__sflush_r+0xf2>
 8009ae6:	690f      	ldr	r7, [r1, #16]
 8009ae8:	2f00      	cmp	r7, #0
 8009aea:	d0f6      	beq.n	8009ada <__sflush_r+0xae>
 8009aec:	0793      	lsls	r3, r2, #30
 8009aee:	680e      	ldr	r6, [r1, #0]
 8009af0:	bf08      	it	eq
 8009af2:	694b      	ldreq	r3, [r1, #20]
 8009af4:	600f      	str	r7, [r1, #0]
 8009af6:	bf18      	it	ne
 8009af8:	2300      	movne	r3, #0
 8009afa:	eba6 0807 	sub.w	r8, r6, r7
 8009afe:	608b      	str	r3, [r1, #8]
 8009b00:	f1b8 0f00 	cmp.w	r8, #0
 8009b04:	dde9      	ble.n	8009ada <__sflush_r+0xae>
 8009b06:	6a21      	ldr	r1, [r4, #32]
 8009b08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009b0a:	4643      	mov	r3, r8
 8009b0c:	463a      	mov	r2, r7
 8009b0e:	4628      	mov	r0, r5
 8009b10:	47b0      	blx	r6
 8009b12:	2800      	cmp	r0, #0
 8009b14:	dc08      	bgt.n	8009b28 <__sflush_r+0xfc>
 8009b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b1e:	81a3      	strh	r3, [r4, #12]
 8009b20:	f04f 30ff 	mov.w	r0, #4294967295
 8009b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b28:	4407      	add	r7, r0
 8009b2a:	eba8 0800 	sub.w	r8, r8, r0
 8009b2e:	e7e7      	b.n	8009b00 <__sflush_r+0xd4>
 8009b30:	dfbffffe 	.word	0xdfbffffe

08009b34 <_fflush_r>:
 8009b34:	b538      	push	{r3, r4, r5, lr}
 8009b36:	690b      	ldr	r3, [r1, #16]
 8009b38:	4605      	mov	r5, r0
 8009b3a:	460c      	mov	r4, r1
 8009b3c:	b913      	cbnz	r3, 8009b44 <_fflush_r+0x10>
 8009b3e:	2500      	movs	r5, #0
 8009b40:	4628      	mov	r0, r5
 8009b42:	bd38      	pop	{r3, r4, r5, pc}
 8009b44:	b118      	cbz	r0, 8009b4e <_fflush_r+0x1a>
 8009b46:	6a03      	ldr	r3, [r0, #32]
 8009b48:	b90b      	cbnz	r3, 8009b4e <_fflush_r+0x1a>
 8009b4a:	f7ff f911 	bl	8008d70 <__sinit>
 8009b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d0f3      	beq.n	8009b3e <_fflush_r+0xa>
 8009b56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009b58:	07d0      	lsls	r0, r2, #31
 8009b5a:	d404      	bmi.n	8009b66 <_fflush_r+0x32>
 8009b5c:	0599      	lsls	r1, r3, #22
 8009b5e:	d402      	bmi.n	8009b66 <_fflush_r+0x32>
 8009b60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b62:	f7ff fb74 	bl	800924e <__retarget_lock_acquire_recursive>
 8009b66:	4628      	mov	r0, r5
 8009b68:	4621      	mov	r1, r4
 8009b6a:	f7ff ff5f 	bl	8009a2c <__sflush_r>
 8009b6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b70:	07da      	lsls	r2, r3, #31
 8009b72:	4605      	mov	r5, r0
 8009b74:	d4e4      	bmi.n	8009b40 <_fflush_r+0xc>
 8009b76:	89a3      	ldrh	r3, [r4, #12]
 8009b78:	059b      	lsls	r3, r3, #22
 8009b7a:	d4e1      	bmi.n	8009b40 <_fflush_r+0xc>
 8009b7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b7e:	f7ff fb67 	bl	8009250 <__retarget_lock_release_recursive>
 8009b82:	e7dd      	b.n	8009b40 <_fflush_r+0xc>

08009b84 <__swhatbuf_r>:
 8009b84:	b570      	push	{r4, r5, r6, lr}
 8009b86:	460c      	mov	r4, r1
 8009b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b8c:	2900      	cmp	r1, #0
 8009b8e:	b096      	sub	sp, #88	@ 0x58
 8009b90:	4615      	mov	r5, r2
 8009b92:	461e      	mov	r6, r3
 8009b94:	da0d      	bge.n	8009bb2 <__swhatbuf_r+0x2e>
 8009b96:	89a3      	ldrh	r3, [r4, #12]
 8009b98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009b9c:	f04f 0100 	mov.w	r1, #0
 8009ba0:	bf14      	ite	ne
 8009ba2:	2340      	movne	r3, #64	@ 0x40
 8009ba4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009ba8:	2000      	movs	r0, #0
 8009baa:	6031      	str	r1, [r6, #0]
 8009bac:	602b      	str	r3, [r5, #0]
 8009bae:	b016      	add	sp, #88	@ 0x58
 8009bb0:	bd70      	pop	{r4, r5, r6, pc}
 8009bb2:	466a      	mov	r2, sp
 8009bb4:	f000 f862 	bl	8009c7c <_fstat_r>
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	dbec      	blt.n	8009b96 <__swhatbuf_r+0x12>
 8009bbc:	9901      	ldr	r1, [sp, #4]
 8009bbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009bc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009bc6:	4259      	negs	r1, r3
 8009bc8:	4159      	adcs	r1, r3
 8009bca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009bce:	e7eb      	b.n	8009ba8 <__swhatbuf_r+0x24>

08009bd0 <__smakebuf_r>:
 8009bd0:	898b      	ldrh	r3, [r1, #12]
 8009bd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bd4:	079d      	lsls	r5, r3, #30
 8009bd6:	4606      	mov	r6, r0
 8009bd8:	460c      	mov	r4, r1
 8009bda:	d507      	bpl.n	8009bec <__smakebuf_r+0x1c>
 8009bdc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009be0:	6023      	str	r3, [r4, #0]
 8009be2:	6123      	str	r3, [r4, #16]
 8009be4:	2301      	movs	r3, #1
 8009be6:	6163      	str	r3, [r4, #20]
 8009be8:	b003      	add	sp, #12
 8009bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bec:	ab01      	add	r3, sp, #4
 8009bee:	466a      	mov	r2, sp
 8009bf0:	f7ff ffc8 	bl	8009b84 <__swhatbuf_r>
 8009bf4:	9f00      	ldr	r7, [sp, #0]
 8009bf6:	4605      	mov	r5, r0
 8009bf8:	4639      	mov	r1, r7
 8009bfa:	4630      	mov	r0, r6
 8009bfc:	f7ff fba4 	bl	8009348 <_malloc_r>
 8009c00:	b948      	cbnz	r0, 8009c16 <__smakebuf_r+0x46>
 8009c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c06:	059a      	lsls	r2, r3, #22
 8009c08:	d4ee      	bmi.n	8009be8 <__smakebuf_r+0x18>
 8009c0a:	f023 0303 	bic.w	r3, r3, #3
 8009c0e:	f043 0302 	orr.w	r3, r3, #2
 8009c12:	81a3      	strh	r3, [r4, #12]
 8009c14:	e7e2      	b.n	8009bdc <__smakebuf_r+0xc>
 8009c16:	89a3      	ldrh	r3, [r4, #12]
 8009c18:	6020      	str	r0, [r4, #0]
 8009c1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c1e:	81a3      	strh	r3, [r4, #12]
 8009c20:	9b01      	ldr	r3, [sp, #4]
 8009c22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009c26:	b15b      	cbz	r3, 8009c40 <__smakebuf_r+0x70>
 8009c28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	f000 f837 	bl	8009ca0 <_isatty_r>
 8009c32:	b128      	cbz	r0, 8009c40 <__smakebuf_r+0x70>
 8009c34:	89a3      	ldrh	r3, [r4, #12]
 8009c36:	f023 0303 	bic.w	r3, r3, #3
 8009c3a:	f043 0301 	orr.w	r3, r3, #1
 8009c3e:	81a3      	strh	r3, [r4, #12]
 8009c40:	89a3      	ldrh	r3, [r4, #12]
 8009c42:	431d      	orrs	r5, r3
 8009c44:	81a5      	strh	r5, [r4, #12]
 8009c46:	e7cf      	b.n	8009be8 <__smakebuf_r+0x18>

08009c48 <memmove>:
 8009c48:	4288      	cmp	r0, r1
 8009c4a:	b510      	push	{r4, lr}
 8009c4c:	eb01 0402 	add.w	r4, r1, r2
 8009c50:	d902      	bls.n	8009c58 <memmove+0x10>
 8009c52:	4284      	cmp	r4, r0
 8009c54:	4623      	mov	r3, r4
 8009c56:	d807      	bhi.n	8009c68 <memmove+0x20>
 8009c58:	1e43      	subs	r3, r0, #1
 8009c5a:	42a1      	cmp	r1, r4
 8009c5c:	d008      	beq.n	8009c70 <memmove+0x28>
 8009c5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c66:	e7f8      	b.n	8009c5a <memmove+0x12>
 8009c68:	4402      	add	r2, r0
 8009c6a:	4601      	mov	r1, r0
 8009c6c:	428a      	cmp	r2, r1
 8009c6e:	d100      	bne.n	8009c72 <memmove+0x2a>
 8009c70:	bd10      	pop	{r4, pc}
 8009c72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c7a:	e7f7      	b.n	8009c6c <memmove+0x24>

08009c7c <_fstat_r>:
 8009c7c:	b538      	push	{r3, r4, r5, lr}
 8009c7e:	4d07      	ldr	r5, [pc, #28]	@ (8009c9c <_fstat_r+0x20>)
 8009c80:	2300      	movs	r3, #0
 8009c82:	4604      	mov	r4, r0
 8009c84:	4608      	mov	r0, r1
 8009c86:	4611      	mov	r1, r2
 8009c88:	602b      	str	r3, [r5, #0]
 8009c8a:	f7f7 fb8e 	bl	80013aa <_fstat>
 8009c8e:	1c43      	adds	r3, r0, #1
 8009c90:	d102      	bne.n	8009c98 <_fstat_r+0x1c>
 8009c92:	682b      	ldr	r3, [r5, #0]
 8009c94:	b103      	cbz	r3, 8009c98 <_fstat_r+0x1c>
 8009c96:	6023      	str	r3, [r4, #0]
 8009c98:	bd38      	pop	{r3, r4, r5, pc}
 8009c9a:	bf00      	nop
 8009c9c:	20001828 	.word	0x20001828

08009ca0 <_isatty_r>:
 8009ca0:	b538      	push	{r3, r4, r5, lr}
 8009ca2:	4d06      	ldr	r5, [pc, #24]	@ (8009cbc <_isatty_r+0x1c>)
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	4604      	mov	r4, r0
 8009ca8:	4608      	mov	r0, r1
 8009caa:	602b      	str	r3, [r5, #0]
 8009cac:	f7f7 fb8d 	bl	80013ca <_isatty>
 8009cb0:	1c43      	adds	r3, r0, #1
 8009cb2:	d102      	bne.n	8009cba <_isatty_r+0x1a>
 8009cb4:	682b      	ldr	r3, [r5, #0]
 8009cb6:	b103      	cbz	r3, 8009cba <_isatty_r+0x1a>
 8009cb8:	6023      	str	r3, [r4, #0]
 8009cba:	bd38      	pop	{r3, r4, r5, pc}
 8009cbc:	20001828 	.word	0x20001828

08009cc0 <_sbrk_r>:
 8009cc0:	b538      	push	{r3, r4, r5, lr}
 8009cc2:	4d06      	ldr	r5, [pc, #24]	@ (8009cdc <_sbrk_r+0x1c>)
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	4604      	mov	r4, r0
 8009cc8:	4608      	mov	r0, r1
 8009cca:	602b      	str	r3, [r5, #0]
 8009ccc:	f7f7 fb96 	bl	80013fc <_sbrk>
 8009cd0:	1c43      	adds	r3, r0, #1
 8009cd2:	d102      	bne.n	8009cda <_sbrk_r+0x1a>
 8009cd4:	682b      	ldr	r3, [r5, #0]
 8009cd6:	b103      	cbz	r3, 8009cda <_sbrk_r+0x1a>
 8009cd8:	6023      	str	r3, [r4, #0]
 8009cda:	bd38      	pop	{r3, r4, r5, pc}
 8009cdc:	20001828 	.word	0x20001828

08009ce0 <_realloc_r>:
 8009ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ce4:	4680      	mov	r8, r0
 8009ce6:	4615      	mov	r5, r2
 8009ce8:	460c      	mov	r4, r1
 8009cea:	b921      	cbnz	r1, 8009cf6 <_realloc_r+0x16>
 8009cec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf0:	4611      	mov	r1, r2
 8009cf2:	f7ff bb29 	b.w	8009348 <_malloc_r>
 8009cf6:	b92a      	cbnz	r2, 8009d04 <_realloc_r+0x24>
 8009cf8:	f7ff faba 	bl	8009270 <_free_r>
 8009cfc:	2400      	movs	r4, #0
 8009cfe:	4620      	mov	r0, r4
 8009d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d04:	f000 f81a 	bl	8009d3c <_malloc_usable_size_r>
 8009d08:	4285      	cmp	r5, r0
 8009d0a:	4606      	mov	r6, r0
 8009d0c:	d802      	bhi.n	8009d14 <_realloc_r+0x34>
 8009d0e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009d12:	d8f4      	bhi.n	8009cfe <_realloc_r+0x1e>
 8009d14:	4629      	mov	r1, r5
 8009d16:	4640      	mov	r0, r8
 8009d18:	f7ff fb16 	bl	8009348 <_malloc_r>
 8009d1c:	4607      	mov	r7, r0
 8009d1e:	2800      	cmp	r0, #0
 8009d20:	d0ec      	beq.n	8009cfc <_realloc_r+0x1c>
 8009d22:	42b5      	cmp	r5, r6
 8009d24:	462a      	mov	r2, r5
 8009d26:	4621      	mov	r1, r4
 8009d28:	bf28      	it	cs
 8009d2a:	4632      	movcs	r2, r6
 8009d2c:	f7ff fa91 	bl	8009252 <memcpy>
 8009d30:	4621      	mov	r1, r4
 8009d32:	4640      	mov	r0, r8
 8009d34:	f7ff fa9c 	bl	8009270 <_free_r>
 8009d38:	463c      	mov	r4, r7
 8009d3a:	e7e0      	b.n	8009cfe <_realloc_r+0x1e>

08009d3c <_malloc_usable_size_r>:
 8009d3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d40:	1f18      	subs	r0, r3, #4
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	bfbc      	itt	lt
 8009d46:	580b      	ldrlt	r3, [r1, r0]
 8009d48:	18c0      	addlt	r0, r0, r3
 8009d4a:	4770      	bx	lr

08009d4c <_init>:
 8009d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4e:	bf00      	nop
 8009d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d52:	bc08      	pop	{r3}
 8009d54:	469e      	mov	lr, r3
 8009d56:	4770      	bx	lr

08009d58 <_fini>:
 8009d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d5a:	bf00      	nop
 8009d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d5e:	bc08      	pop	{r3}
 8009d60:	469e      	mov	lr, r3
 8009d62:	4770      	bx	lr
