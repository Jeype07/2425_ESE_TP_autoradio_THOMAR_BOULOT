
TP-autoradio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079f0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08007b80  08007b80  00008b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ea0  08007ea0  00009074  2**0
                  CONTENTS
  4 .ARM          00000008  08007ea0  08007ea0  00008ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ea8  08007ea8  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ea8  08007ea8  00008ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007eac  08007eac  00008eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08007eb0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015c8  20000074  08007f24  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000163c  08007f24  0000963c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bfa0  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000439f  00000000  00000000  00025044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  000293e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000128e  00000000  00000000  0002abf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002adec  00000000  00000000  0002be86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e093  00000000  00000000  00056c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff8a5  00000000  00000000  00074d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001745aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bc4  00000000  00000000  001745f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a3  00000000  00000000  0017b1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b68 	.word	0x08007b68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007b68 	.word	0x08007b68

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	4a07      	ldr	r2, [pc, #28]	@ (800058c <vApplicationGetIdleTaskMemory+0x2c>)
 8000570:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	4a06      	ldr	r2, [pc, #24]	@ (8000590 <vApplicationGetIdleTaskMemory+0x30>)
 8000576:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2280      	movs	r2, #128	@ 0x80
 800057c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000094 	.word	0x20000094
 8000590:	20000134 	.word	0x20000134

08000594 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000594:	b5b0      	push	{r4, r5, r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800059a:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <MX_FREERTOS_Init+0x30>)
 800059c:	1d3c      	adds	r4, r7, #4
 800059e:	461d      	mov	r5, r3
 80005a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f004 fccf 	bl	8004f54 <osThreadCreate>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a03      	ldr	r2, [pc, #12]	@ (80005c8 <MX_FREERTOS_Init+0x34>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bdb0      	pop	{r4, r5, r7, pc}
 80005c4:	08007b8c 	.word	0x08007b8c
 80005c8:	20000090 	.word	0x20000090

080005cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f004 fd09 	bl	8004fec <osDelay>
 80005da:	e7fb      	b.n	80005d4 <StartDefaultTask+0x8>

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	@ 0x28
 80005e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	4b35      	ldr	r3, [pc, #212]	@ (80006c8 <MX_GPIO_Init+0xec>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f6:	4a34      	ldr	r2, [pc, #208]	@ (80006c8 <MX_GPIO_Init+0xec>)
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005fe:	4b32      	ldr	r3, [pc, #200]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	f003 0304 	and.w	r3, r3, #4
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	4b2f      	ldr	r3, [pc, #188]	@ (80006c8 <MX_GPIO_Init+0xec>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060e:	4a2e      	ldr	r2, [pc, #184]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000616:	4b2c      	ldr	r3, [pc, #176]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000626:	4a28      	ldr	r2, [pc, #160]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <MX_GPIO_Init+0xec>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063e:	4a22      	ldr	r2, [pc, #136]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2121      	movs	r1, #33	@ 0x21
 8000656:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065a:	f001 f8cb 	bl	80017f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2180      	movs	r1, #128	@ 0x80
 8000662:	481a      	ldr	r0, [pc, #104]	@ (80006cc <MX_GPIO_Init+0xf0>)
 8000664:	f001 f8c6 	bl	80017f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000668:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800066c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800066e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4619      	mov	r1, r3
 800067e:	4814      	ldr	r0, [pc, #80]	@ (80006d0 <MX_GPIO_Init+0xf4>)
 8000680:	f000 ff0e 	bl	80014a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 8000684:	2321      	movs	r3, #33	@ 0x21
 8000686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	2301      	movs	r3, #1
 800068a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2300      	movs	r3, #0
 8000692:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	4619      	mov	r1, r3
 800069a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069e:	f000 feff 	bl	80014a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006a2:	2380      	movs	r3, #128	@ 0x80
 80006a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2300      	movs	r3, #0
 80006b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4619      	mov	r1, r3
 80006b8:	4804      	ldr	r0, [pc, #16]	@ (80006cc <MX_GPIO_Init+0xf0>)
 80006ba:	f000 fef1 	bl	80014a0 <HAL_GPIO_Init>

}
 80006be:	bf00      	nop
 80006c0:	3728      	adds	r7, #40	@ 0x28
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000
 80006cc:	48000400 	.word	0x48000400
 80006d0:	48000800 	.word	0x48000800

080006d4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80006dc:	1d39      	adds	r1, r7, #4
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
 80006e2:	2201      	movs	r2, #1
 80006e4:	4803      	ldr	r0, [pc, #12]	@ (80006f4 <__io_putchar+0x20>)
 80006e6:	f003 fa81 	bl	8003bec <HAL_UART_Transmit>

	return ch;
 80006ea:	687b      	ldr	r3, [r7, #4]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000758 	.word	0x20000758

080006f8 <fonction>:
		shell_uart_receive_irq_cb();	// C'est la fonction qui donne le sémaphore!
	}
}

int fonction(h_shell_t * h_shell, int argc, char ** argv)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
	int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Je suis une fonction bidon\r\n");
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800070a:	4a0a      	ldr	r2, [pc, #40]	@ (8000734 <fonction+0x3c>)
 800070c:	2128      	movs	r1, #40	@ 0x28
 800070e:	4618      	mov	r0, r3
 8000710:	f006 fad0 	bl	8006cb4 <sniprintf>
 8000714:	6178      	str	r0, [r7, #20]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 800071c:	68fa      	ldr	r2, [r7, #12]
 800071e:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000722:	6979      	ldr	r1, [r7, #20]
 8000724:	b289      	uxth	r1, r1
 8000726:	4610      	mov	r0, r2
 8000728:	4798      	blx	r3

	return 0;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	08007ba8 	.word	0x08007ba8

08000738 <addition>:

int addition(h_shell_t * h_shell, int argc, char ** argv)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	@ 0x28
 800073c:	af02      	add	r7, sp, #8
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	607a      	str	r2, [r7, #4]
	if (argc == 3)
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	2b03      	cmp	r3, #3
 8000748:	d128      	bne.n	800079c <addition+0x64>
	{
		int a, b;
		a = atoi(argv[1]);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	3304      	adds	r3, #4
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4618      	mov	r0, r3
 8000752:	f006 f907 	bl	8006964 <atoi>
 8000756:	61b8      	str	r0, [r7, #24]
		b = atoi(argv[2]);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3308      	adds	r3, #8
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	f006 f900 	bl	8006964 <atoi>
 8000764:	6178      	str	r0, [r7, #20]
		int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%d + %d = %d\r\n", a, b, a+b);
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 800076c:	69ba      	ldr	r2, [r7, #24]
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	4413      	add	r3, r2
 8000772:	9301      	str	r3, [sp, #4]
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	69bb      	ldr	r3, [r7, #24]
 800077a:	4a15      	ldr	r2, [pc, #84]	@ (80007d0 <addition+0x98>)
 800077c:	2128      	movs	r1, #40	@ 0x28
 800077e:	f006 fa99 	bl	8006cb4 <sniprintf>
 8000782:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 800078a:	68fa      	ldr	r2, [r7, #12]
 800078c:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000790:	6939      	ldr	r1, [r7, #16]
 8000792:	b289      	uxth	r1, r1
 8000794:	4610      	mov	r0, r2
 8000796:	4798      	blx	r3

		return 0;
 8000798:	2300      	movs	r3, #0
 800079a:	e014      	b.n	80007c6 <addition+0x8e>
	}
	else
	{
		int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Erreur, pas le bon nombre d'arguments\r\n");
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80007a2:	4a0c      	ldr	r2, [pc, #48]	@ (80007d4 <addition+0x9c>)
 80007a4:	2128      	movs	r1, #40	@ 0x28
 80007a6:	4618      	mov	r0, r3
 80007a8:	f006 fa84 	bl	8006cb4 <sniprintf>
 80007ac:	61f8      	str	r0, [r7, #28]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80007b4:	68fa      	ldr	r2, [r7, #12]
 80007b6:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80007ba:	69f9      	ldr	r1, [r7, #28]
 80007bc:	b289      	uxth	r1, r1
 80007be:	4610      	mov	r0, r2
 80007c0:	4798      	blx	r3
		return -1;
 80007c2:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3720      	adds	r7, #32
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	08007bc8 	.word	0x08007bc8
 80007d4:	08007bd8 	.word	0x08007bd8

080007d8 <ledToggle>:



int ledToggle(h_shell_t * h_shell, int argc, char ** argv)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
	if (argc == 3)
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	2b03      	cmp	r3, #3
 80007e8:	d13b      	bne.n	8000862 <ledToggle+0x8a>
	{
		uint8_t etat_des_LEDs = 0xff;
 80007ea:	23ff      	movs	r3, #255	@ 0xff
 80007ec:	77fb      	strb	r3, [r7, #31]
		int a;
		a = atoi(argv[1]);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	3304      	adds	r3, #4
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f006 f8b5 	bl	8006964 <atoi>
 80007fa:	6178      	str	r0, [r7, #20]
		if((a>=0 && a<=7)!=0){
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	db04      	blt.n	800080c <ledToggle+0x34>
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	2b07      	cmp	r3, #7
 8000806:	dc01      	bgt.n	800080c <ledToggle+0x34>
 8000808:	2301      	movs	r3, #1
 800080a:	e000      	b.n	800080e <ledToggle+0x36>
 800080c:	2300      	movs	r3, #0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d009      	beq.n	8000826 <ledToggle+0x4e>
			etat_des_LEDs ^= (1 << a);
 8000812:	2201      	movs	r2, #1
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	b25a      	sxtb	r2, r3
 800081c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000820:	4053      	eors	r3, r2
 8000822:	b25b      	sxtb	r3, r3
 8000824:	77fb      	strb	r3, [r7, #31]
		}
		if(atoi(argv[2])==0){
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	3308      	adds	r3, #8
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4618      	mov	r0, r3
 800082e:	f006 f899 	bl	8006964 <atoi>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d104      	bne.n	8000842 <ledToggle+0x6a>
			// Allumer la LED (GPB0 à HIGH)
			MCP23S17_Write(MCPGPIOA, etat_des_LEDs);
 8000838:	7ffb      	ldrb	r3, [r7, #31]
 800083a:	4619      	mov	r1, r3
 800083c:	2012      	movs	r0, #18
 800083e:	f005 fe89 	bl	8006554 <MCP23S17_Write>
		}
		if(atoi(argv[2])==1){
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	3308      	adds	r3, #8
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4618      	mov	r0, r3
 800084a:	f006 f88b 	bl	8006964 <atoi>
 800084e:	4603      	mov	r3, r0
 8000850:	2b01      	cmp	r3, #1
 8000852:	d104      	bne.n	800085e <ledToggle+0x86>
			// Allumer la LED (GPB0 à HIGH)
			MCP23S17_Write(MCPGPIOB, etat_des_LEDs);
 8000854:	7ffb      	ldrb	r3, [r7, #31]
 8000856:	4619      	mov	r1, r3
 8000858:	2013      	movs	r0, #19
 800085a:	f005 fe7b 	bl	8006554 <MCP23S17_Write>
		}
		return 0;
 800085e:	2300      	movs	r3, #0
 8000860:	e014      	b.n	800088c <ledToggle+0xb4>
	}
	else
	{
		int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Erreur, pas le bon nombre d'arguments\r\n");
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8000868:	4a0a      	ldr	r2, [pc, #40]	@ (8000894 <ledToggle+0xbc>)
 800086a:	2128      	movs	r1, #40	@ 0x28
 800086c:	4618      	mov	r0, r3
 800086e:	f006 fa21 	bl	8006cb4 <sniprintf>
 8000872:	61b8      	str	r0, [r7, #24]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000880:	69b9      	ldr	r1, [r7, #24]
 8000882:	b289      	uxth	r1, r1
 8000884:	4610      	mov	r0, r2
 8000886:	4798      	blx	r3
		return -1;
 8000888:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800088c:	4618      	mov	r0, r3
 800088e:	3720      	adds	r7, #32
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	08007bd8 	.word	0x08007bd8

08000898 <Control_LED>:

void Control_LED(uint8_t led_num, uint8_t gpio) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	460a      	mov	r2, r1
 80008a2:	71fb      	strb	r3, [r7, #7]
 80008a4:	4613      	mov	r3, r2
 80008a6:	71bb      	strb	r3, [r7, #6]
	uint8_t etat_des_LEDs = 0xff;      // Éteindre toutes les LEDs
 80008a8:	23ff      	movs	r3, #255	@ 0xff
 80008aa:	73fb      	strb	r3, [r7, #15]
	etat_des_LEDs &= ~(1 << led_num);  // Allumer la LED spécifiée
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	2201      	movs	r2, #1
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	b25b      	sxtb	r3, r3
 80008b6:	43db      	mvns	r3, r3
 80008b8:	b25a      	sxtb	r2, r3
 80008ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008be:	4013      	ands	r3, r2
 80008c0:	b25b      	sxtb	r3, r3
 80008c2:	73fb      	strb	r3, [r7, #15]
	MCP23S17_Write(gpio, etat_des_LEDs);
 80008c4:	7bfa      	ldrb	r2, [r7, #15]
 80008c6:	79bb      	ldrb	r3, [r7, #6]
 80008c8:	4611      	mov	r1, r2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f005 fe42 	bl	8006554 <MCP23S17_Write>
}
 80008d0:	bf00      	nop
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <task_chenillard>:

void task_chenillard() {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
	uint8_t current_led_a = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	71fb      	strb	r3, [r7, #7]
	uint8_t current_led_b = 4;
 80008e2:	2304      	movs	r3, #4
 80008e4:	71bb      	strb	r3, [r7, #6]

	while (1) {
		if (chenillard_running) {
 80008e6:	4b15      	ldr	r3, [pc, #84]	@ (800093c <task_chenillard+0x64>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d021      	beq.n	8000934 <task_chenillard+0x5c>
			Control_LED(current_led_a, MCPGPIOA); // Allume la LED courante
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	2112      	movs	r1, #18
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ffcf 	bl	8000898 <Control_LED>
			Control_LED(current_led_b, MCPGPIOB);
 80008fa:	79bb      	ldrb	r3, [r7, #6]
 80008fc:	2113      	movs	r1, #19
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ffca 	bl	8000898 <Control_LED>
			current_led_a = (current_led_a + 1) % NUM_LEDS; // Passer à la LED suivante
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	3301      	adds	r3, #1
 8000908:	425a      	negs	r2, r3
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	f002 0207 	and.w	r2, r2, #7
 8000912:	bf58      	it	pl
 8000914:	4253      	negpl	r3, r2
 8000916:	71fb      	strb	r3, [r7, #7]
			current_led_b = (current_led_b + 1) % NUM_LEDS;
 8000918:	79bb      	ldrb	r3, [r7, #6]
 800091a:	3301      	adds	r3, #1
 800091c:	425a      	negs	r2, r3
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	f002 0207 	and.w	r2, r2, #7
 8000926:	bf58      	it	pl
 8000928:	4253      	negpl	r3, r2
 800092a:	71bb      	strb	r3, [r7, #6]
			vTaskDelay(pdMS_TO_TICKS(200)); // Délai entre deux LEDs (200 ms)
 800092c:	20c8      	movs	r0, #200	@ 0xc8
 800092e:	f004 fe65 	bl	80055fc <vTaskDelay>
 8000932:	e7d8      	b.n	80008e6 <task_chenillard+0xe>
		} else {
			vTaskDelay(pdMS_TO_TICKS(50)); // Petit délai pour éviter une boucle infinie rapide
 8000934:	2032      	movs	r0, #50	@ 0x32
 8000936:	f004 fe61 	bl	80055fc <vTaskDelay>
		if (chenillard_running) {
 800093a:	e7d4      	b.n	80008e6 <task_chenillard+0xe>
 800093c:	2000033c 	.word	0x2000033c

08000940 <startChenillard>:
		}
	}
}

int startChenillard(h_shell_t * h_shell, int argc, char ** argv) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af02      	add	r7, sp, #8
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
	chenillard_running = 1; // Activer le chenillard
 800094c:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <startChenillard+0x38>)
 800094e:	2201      	movs	r2, #1
 8000950:	701a      	strb	r2, [r3, #0]
	if (ChenillardTaskHandle == NULL) {
 8000952:	4b0a      	ldr	r3, [pc, #40]	@ (800097c <startChenillard+0x3c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d109      	bne.n	800096e <startChenillard+0x2e>
		// Créer la tâche si elle n'existe pas
		xTaskCreate(task_chenillard, "ChenillardTask", 128, NULL, 1, &ChenillardTaskHandle);
 800095a:	4b08      	ldr	r3, [pc, #32]	@ (800097c <startChenillard+0x3c>)
 800095c:	9301      	str	r3, [sp, #4]
 800095e:	2301      	movs	r3, #1
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	2300      	movs	r3, #0
 8000964:	2280      	movs	r2, #128	@ 0x80
 8000966:	4906      	ldr	r1, [pc, #24]	@ (8000980 <startChenillard+0x40>)
 8000968:	4806      	ldr	r0, [pc, #24]	@ (8000984 <startChenillard+0x44>)
 800096a:	f004 fc67 	bl	800523c <xTaskCreate>
	}
	return 0;
 800096e:	2300      	movs	r3, #0
}
 8000970:	4618      	mov	r0, r3
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	2000033c 	.word	0x2000033c
 800097c:	20000338 	.word	0x20000338
 8000980:	08007c00 	.word	0x08007c00
 8000984:	080008d9 	.word	0x080008d9

08000988 <stopChenillard>:

int stopChenillard(h_shell_t * h_shell, int argc, char ** argv) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
	chenillard_running = 0; // Désactiver le chenillard
 8000994:	4b0d      	ldr	r3, [pc, #52]	@ (80009cc <stopChenillard+0x44>)
 8000996:	2200      	movs	r2, #0
 8000998:	701a      	strb	r2, [r3, #0]
	if (ChenillardTaskHandle != NULL) {
 800099a:	4b0d      	ldr	r3, [pc, #52]	@ (80009d0 <stopChenillard+0x48>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d00f      	beq.n	80009c2 <stopChenillard+0x3a>
		vTaskDelete(ChenillardTaskHandle); // Supprimer la tâche
 80009a2:	4b0b      	ldr	r3, [pc, #44]	@ (80009d0 <stopChenillard+0x48>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f004 fd98 	bl	80054dc <vTaskDelete>
		ChenillardTaskHandle = NULL;
 80009ac:	4b08      	ldr	r3, [pc, #32]	@ (80009d0 <stopChenillard+0x48>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
		MCP23S17_Write(MCPGPIOA, 0xff);
 80009b2:	21ff      	movs	r1, #255	@ 0xff
 80009b4:	2012      	movs	r0, #18
 80009b6:	f005 fdcd 	bl	8006554 <MCP23S17_Write>
		MCP23S17_Write(MCPGPIOB, 0xff);
 80009ba:	21ff      	movs	r1, #255	@ 0xff
 80009bc:	2013      	movs	r0, #19
 80009be:	f005 fdc9 	bl	8006554 <MCP23S17_Write>
	}
	return 0;
 80009c2:	2300      	movs	r3, #0
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	2000033c 	.word	0x2000033c
 80009d0:	20000338 	.word	0x20000338

080009d4 <task_shell>:

void task_shell(void * unused)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	shell_init(&h_shell);
 80009dc:	4813      	ldr	r0, [pc, #76]	@ (8000a2c <task_shell+0x58>)
 80009de:	f005 fe49 	bl	8006674 <shell_init>
	shell_add(&h_shell, 'f', fonction, "Une fonction inutile");
 80009e2:	4b13      	ldr	r3, [pc, #76]	@ (8000a30 <task_shell+0x5c>)
 80009e4:	4a13      	ldr	r2, [pc, #76]	@ (8000a34 <task_shell+0x60>)
 80009e6:	2166      	movs	r1, #102	@ 0x66
 80009e8:	4810      	ldr	r0, [pc, #64]	@ (8000a2c <task_shell+0x58>)
 80009ea:	f005 fe85 	bl	80066f8 <shell_add>
	shell_add(&h_shell, 'a', addition, "Effectue une somme");
 80009ee:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <task_shell+0x64>)
 80009f0:	4a12      	ldr	r2, [pc, #72]	@ (8000a3c <task_shell+0x68>)
 80009f2:	2161      	movs	r1, #97	@ 0x61
 80009f4:	480d      	ldr	r0, [pc, #52]	@ (8000a2c <task_shell+0x58>)
 80009f6:	f005 fe7f 	bl	80066f8 <shell_add>
	shell_add(&h_shell, 'b', ledToggle, "Allumer une led");
 80009fa:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <task_shell+0x6c>)
 80009fc:	4a11      	ldr	r2, [pc, #68]	@ (8000a44 <task_shell+0x70>)
 80009fe:	2162      	movs	r1, #98	@ 0x62
 8000a00:	480a      	ldr	r0, [pc, #40]	@ (8000a2c <task_shell+0x58>)
 8000a02:	f005 fe79 	bl	80066f8 <shell_add>
	shell_add(&h_shell, 'c',startChenillard, "Lancer chenillard");
 8000a06:	4b10      	ldr	r3, [pc, #64]	@ (8000a48 <task_shell+0x74>)
 8000a08:	4a10      	ldr	r2, [pc, #64]	@ (8000a4c <task_shell+0x78>)
 8000a0a:	2163      	movs	r1, #99	@ 0x63
 8000a0c:	4807      	ldr	r0, [pc, #28]	@ (8000a2c <task_shell+0x58>)
 8000a0e:	f005 fe73 	bl	80066f8 <shell_add>
	shell_add(&h_shell, 'd',stopChenillard, "Arreter chenillard");
 8000a12:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <task_shell+0x7c>)
 8000a14:	4a0f      	ldr	r2, [pc, #60]	@ (8000a54 <task_shell+0x80>)
 8000a16:	2164      	movs	r1, #100	@ 0x64
 8000a18:	4804      	ldr	r0, [pc, #16]	@ (8000a2c <task_shell+0x58>)
 8000a1a:	f005 fe6d 	bl	80066f8 <shell_add>
	shell_run(&h_shell);	// boucle infinie
 8000a1e:	4803      	ldr	r0, [pc, #12]	@ (8000a2c <task_shell+0x58>)
 8000a20:	f005 ff16 	bl	8006850 <shell_run>
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000340 	.word	0x20000340
 8000a30:	08007c10 	.word	0x08007c10
 8000a34:	080006f9 	.word	0x080006f9
 8000a38:	08007c28 	.word	0x08007c28
 8000a3c:	08000739 	.word	0x08000739
 8000a40:	08007c3c 	.word	0x08007c3c
 8000a44:	080007d9 	.word	0x080007d9
 8000a48:	08007c4c 	.word	0x08007c4c
 8000a4c:	08000941 	.word	0x08000941
 8000a50:	08007c60 	.word	0x08007c60
 8000a54:	08000989 	.word	0x08000989

08000a58 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a5e:	f000 fb7d 	bl	800115c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a62:	f000 f837 	bl	8000ad4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a66:	f7ff fdb9 	bl	80005dc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000a6a:	f000 fab9 	bl	8000fe0 <MX_USART2_UART_Init>
	MX_SPI3_Init();
 8000a6e:	f000 f89b 	bl	8000ba8 <MX_SPI3_Init>
	/* USER CODE BEGIN 2 */

	h_shell.drv.receive = drv_uart2_receive;
 8000a72:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <main+0x60>)
 8000a74:	4a11      	ldr	r2, [pc, #68]	@ (8000abc <main+0x64>)
 8000a76:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
	h_shell.drv.transmit = drv_uart2_transmit;
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <main+0x60>)
 8000a7c:	4a10      	ldr	r2, [pc, #64]	@ (8000ac0 <main+0x68>)
 8000a7e:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354


	if (xTaskCreate(task_shell, "Shell", TASK_SHELL_STACK_DEPTH, NULL, TASK_SHELL_PRIORITY, &h_task_shell) != pdPASS)
 8000a82:	4b10      	ldr	r3, [pc, #64]	@ (8000ac4 <main+0x6c>)
 8000a84:	9301      	str	r3, [sp, #4]
 8000a86:	2301      	movs	r3, #1
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a90:	490d      	ldr	r1, [pc, #52]	@ (8000ac8 <main+0x70>)
 8000a92:	480e      	ldr	r0, [pc, #56]	@ (8000acc <main+0x74>)
 8000a94:	f004 fbd2 	bl	800523c <xTaskCreate>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d004      	beq.n	8000aa8 <main+0x50>
	{
		printf("Error creating task shell\r\n");
 8000a9e:	480c      	ldr	r0, [pc, #48]	@ (8000ad0 <main+0x78>)
 8000aa0:	f006 f900 	bl	8006ca4 <puts>
		Error_Handler();
 8000aa4:	f000 f87a 	bl	8000b9c <Error_Handler>
	}

	vTaskStartScheduler();
 8000aa8:	f004 fdde 	bl	8005668 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 8000aac:	f7ff fd72 	bl	8000594 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8000ab0:	f004 fa49 	bl	8004f46 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <main+0x5c>
 8000ab8:	20000340 	.word	0x20000340
 8000abc:	080065a5 	.word	0x080065a5
 8000ac0:	080065cd 	.word	0x080065cd
 8000ac4:	20000334 	.word	0x20000334
 8000ac8:	08007c74 	.word	0x08007c74
 8000acc:	080009d5 	.word	0x080009d5
 8000ad0:	08007c7c 	.word	0x08007c7c

08000ad4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b096      	sub	sp, #88	@ 0x58
 8000ad8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	2244      	movs	r2, #68	@ 0x44
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f006 f9f2 	bl	8006ecc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae8:	463b      	mov	r3, r7
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000af6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000afa:	f000 fea1 	bl	8001840 <HAL_PWREx_ControlVoltageScaling>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000b04:	f000 f84a 	bl	8000b9c <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b10:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b12:	2310      	movs	r3, #16
 8000b14:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b16:	2302      	movs	r3, #2
 8000b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000b22:	230a      	movs	r3, #10
 8000b24:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b26:	2307      	movs	r3, #7
 8000b28:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 fed8 	bl	80018ec <HAL_RCC_OscConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0x72>
	{
		Error_Handler();
 8000b42:	f000 f82b 	bl	8000b9c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b46:	230f      	movs	r3, #15
 8000b48:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	2104      	movs	r1, #4
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 faa0 	bl	80020a4 <HAL_RCC_ClockConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000b6a:	f000 f817 	bl	8000b9c <Error_Handler>
	}
}
 8000b6e:	bf00      	nop
 8000b70:	3758      	adds	r7, #88	@ 0x58
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a04      	ldr	r2, [pc, #16]	@ (8000b98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d101      	bne.n	8000b8e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000b8a:	f000 fb07 	bl	800119c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40012c00 	.word	0x40012c00

08000b9c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <Error_Handler+0x8>

08000ba8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000bac:	4b1b      	ldr	r3, [pc, #108]	@ (8000c1c <MX_SPI3_Init+0x74>)
 8000bae:	4a1c      	ldr	r2, [pc, #112]	@ (8000c20 <MX_SPI3_Init+0x78>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c1c <MX_SPI3_Init+0x74>)
 8000bb4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bb8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000bba:	4b18      	ldr	r3, [pc, #96]	@ (8000c1c <MX_SPI3_Init+0x74>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bc0:	4b16      	ldr	r3, [pc, #88]	@ (8000c1c <MX_SPI3_Init+0x74>)
 8000bc2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000bc6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <MX_SPI3_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bce:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <MX_SPI3_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <MX_SPI3_Init+0x74>)
 8000bd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bda:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <MX_SPI3_Init+0x74>)
 8000bde:	2210      	movs	r2, #16
 8000be0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <MX_SPI3_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <MX_SPI3_Init+0x74>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	@ (8000c1c <MX_SPI3_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <MX_SPI3_Init+0x74>)
 8000bf6:	2207      	movs	r2, #7
 8000bf8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bfa:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <MX_SPI3_Init+0x74>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <MX_SPI3_Init+0x74>)
 8000c02:	2208      	movs	r2, #8
 8000c04:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c06:	4805      	ldr	r0, [pc, #20]	@ (8000c1c <MX_SPI3_Init+0x74>)
 8000c08:	f002 f95e 	bl	8002ec8 <HAL_SPI_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000c12:	f7ff ffc3 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200006a4 	.word	0x200006a4
 8000c20:	40003c00 	.word	0x40003c00

08000c24 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	@ 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a25      	ldr	r2, [pc, #148]	@ (8000cd8 <HAL_SPI_MspInit+0xb4>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d144      	bne.n	8000cd0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c46:	4b25      	ldr	r3, [pc, #148]	@ (8000cdc <HAL_SPI_MspInit+0xb8>)
 8000c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c4a:	4a24      	ldr	r2, [pc, #144]	@ (8000cdc <HAL_SPI_MspInit+0xb8>)
 8000c4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c50:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c52:	4b22      	ldr	r3, [pc, #136]	@ (8000cdc <HAL_SPI_MspInit+0xb8>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cdc <HAL_SPI_MspInit+0xb8>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c62:	4a1e      	ldr	r2, [pc, #120]	@ (8000cdc <HAL_SPI_MspInit+0xb8>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <HAL_SPI_MspInit+0xb8>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6e:	f003 0304 	and.w	r3, r3, #4
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	4b19      	ldr	r3, [pc, #100]	@ (8000cdc <HAL_SPI_MspInit+0xb8>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7a:	4a18      	ldr	r2, [pc, #96]	@ (8000cdc <HAL_SPI_MspInit+0xb8>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c82:	4b16      	ldr	r3, [pc, #88]	@ (8000cdc <HAL_SPI_MspInit+0xb8>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c8e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ca0:	2306      	movs	r3, #6
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480d      	ldr	r0, [pc, #52]	@ (8000ce0 <HAL_SPI_MspInit+0xbc>)
 8000cac:	f000 fbf8 	bl	80014a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cb0:	2320      	movs	r3, #32
 8000cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cc0:	2306      	movs	r3, #6
 8000cc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4806      	ldr	r0, [pc, #24]	@ (8000ce4 <HAL_SPI_MspInit+0xc0>)
 8000ccc:	f000 fbe8 	bl	80014a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000cd0:	bf00      	nop
 8000cd2:	3728      	adds	r7, #40	@ 0x28
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40003c00 	.word	0x40003c00
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	48000800 	.word	0x48000800
 8000ce4:	48000400 	.word	0x48000400

08000ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <HAL_MspInit+0x4c>)
 8000cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cf2:	4a10      	ldr	r2, [pc, #64]	@ (8000d34 <HAL_MspInit+0x4c>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000d34 <HAL_MspInit+0x4c>)
 8000cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	4b0b      	ldr	r3, [pc, #44]	@ (8000d34 <HAL_MspInit+0x4c>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d34 <HAL_MspInit+0x4c>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d10:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d12:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <HAL_MspInit+0x4c>)
 8000d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	210f      	movs	r1, #15
 8000d22:	f06f 0001 	mvn.w	r0, #1
 8000d26:	f000 fb11 	bl	800134c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000

08000d38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08c      	sub	sp, #48	@ 0x30
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000d40:	2300      	movs	r3, #0
 8000d42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d46:	4b2e      	ldr	r3, [pc, #184]	@ (8000e00 <HAL_InitTick+0xc8>)
 8000d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d4a:	4a2d      	ldr	r2, [pc, #180]	@ (8000e00 <HAL_InitTick+0xc8>)
 8000d4c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d50:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d52:	4b2b      	ldr	r3, [pc, #172]	@ (8000e00 <HAL_InitTick+0xc8>)
 8000d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d5e:	f107 020c 	add.w	r2, r7, #12
 8000d62:	f107 0310 	add.w	r3, r7, #16
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f001 fb5f 	bl	800242c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d6e:	f001 fb47 	bl	8002400 <HAL_RCC_GetPCLK2Freq>
 8000d72:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d76:	4a23      	ldr	r2, [pc, #140]	@ (8000e04 <HAL_InitTick+0xcc>)
 8000d78:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7c:	0c9b      	lsrs	r3, r3, #18
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d82:	4b21      	ldr	r3, [pc, #132]	@ (8000e08 <HAL_InitTick+0xd0>)
 8000d84:	4a21      	ldr	r2, [pc, #132]	@ (8000e0c <HAL_InitTick+0xd4>)
 8000d86:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d88:	4b1f      	ldr	r3, [pc, #124]	@ (8000e08 <HAL_InitTick+0xd0>)
 8000d8a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d8e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d90:	4a1d      	ldr	r2, [pc, #116]	@ (8000e08 <HAL_InitTick+0xd0>)
 8000d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d94:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d96:	4b1c      	ldr	r3, [pc, #112]	@ (8000e08 <HAL_InitTick+0xd0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e08 <HAL_InitTick+0xd0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da2:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <HAL_InitTick+0xd0>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000da8:	4817      	ldr	r0, [pc, #92]	@ (8000e08 <HAL_InitTick+0xd0>)
 8000daa:	f002 fc0b 	bl	80035c4 <HAL_TIM_Base_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000db4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d11b      	bne.n	8000df4 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000dbc:	4812      	ldr	r0, [pc, #72]	@ (8000e08 <HAL_InitTick+0xd0>)
 8000dbe:	f002 fc63 	bl	8003688 <HAL_TIM_Base_Start_IT>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000dc8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d111      	bne.n	8000df4 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000dd0:	2019      	movs	r0, #25
 8000dd2:	f000 fad7 	bl	8001384 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b0f      	cmp	r3, #15
 8000dda:	d808      	bhi.n	8000dee <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	2019      	movs	r0, #25
 8000de2:	f000 fab3 	bl	800134c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000de6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e10 <HAL_InitTick+0xd8>)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6013      	str	r3, [r2, #0]
 8000dec:	e002      	b.n	8000df4 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000df4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3730      	adds	r7, #48	@ 0x30
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40021000 	.word	0x40021000
 8000e04:	431bde83 	.word	0x431bde83
 8000e08:	20000708 	.word	0x20000708
 8000e0c:	40012c00 	.word	0x40012c00
 8000e10:	20000004 	.word	0x20000004

08000e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <NMI_Handler+0x4>

08000e1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <HardFault_Handler+0x4>

08000e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <MemManage_Handler+0x4>

08000e2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <BusFault_Handler+0x4>

08000e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <UsageFault_Handler+0x4>

08000e3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e50:	4802      	ldr	r0, [pc, #8]	@ (8000e5c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000e52:	f002 fc89 	bl	8003768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000708 	.word	0x20000708

08000e60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e64:	4802      	ldr	r0, [pc, #8]	@ (8000e70 <USART2_IRQHandler+0x10>)
 8000e66:	f003 f813 	bl	8003e90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000758 	.word	0x20000758

08000e74 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	e00a      	b.n	8000e9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e86:	f3af 8000 	nop.w
 8000e8a:	4601      	mov	r1, r0
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	60ba      	str	r2, [r7, #8]
 8000e92:	b2ca      	uxtb	r2, r1
 8000e94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	dbf0      	blt.n	8000e86 <_read+0x12>
  }

  return len;
 8000ea4:	687b      	ldr	r3, [r7, #4]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b086      	sub	sp, #24
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	60f8      	str	r0, [r7, #12]
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
 8000ebe:	e009      	b.n	8000ed4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	1c5a      	adds	r2, r3, #1
 8000ec4:	60ba      	str	r2, [r7, #8]
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fc03 	bl	80006d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	dbf1      	blt.n	8000ec0 <_write+0x12>
  }
  return len;
 8000edc:	687b      	ldr	r3, [r7, #4]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <_close>:

int _close(int file)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
 8000f06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f0e:	605a      	str	r2, [r3, #4]
  return 0;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <_isatty>:

int _isatty(int file)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f58:	4a14      	ldr	r2, [pc, #80]	@ (8000fac <_sbrk+0x5c>)
 8000f5a:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <_sbrk+0x60>)
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f64:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d102      	bne.n	8000f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	@ (8000fb4 <_sbrk+0x64>)
 8000f6e:	4a12      	ldr	r2, [pc, #72]	@ (8000fb8 <_sbrk+0x68>)
 8000f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f72:	4b10      	ldr	r3, [pc, #64]	@ (8000fb4 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d207      	bcs.n	8000f90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f80:	f006 f848 	bl	8007014 <__errno>
 8000f84:	4603      	mov	r3, r0
 8000f86:	220c      	movs	r2, #12
 8000f88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8e:	e009      	b.n	8000fa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f90:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <_sbrk+0x64>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f96:	4b07      	ldr	r3, [pc, #28]	@ (8000fb4 <_sbrk+0x64>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	4a05      	ldr	r2, [pc, #20]	@ (8000fb4 <_sbrk+0x64>)
 8000fa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20018000 	.word	0x20018000
 8000fb0:	00000400 	.word	0x00000400
 8000fb4:	20000754 	.word	0x20000754
 8000fb8:	20001640 	.word	0x20001640

08000fbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <SystemInit+0x20>)
 8000fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fc6:	4a05      	ldr	r2, [pc, #20]	@ (8000fdc <SystemInit+0x20>)
 8000fc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <MX_USART2_UART_Init+0x58>)
 8000fe6:	4a15      	ldr	r2, [pc, #84]	@ (800103c <MX_USART2_UART_Init+0x5c>)
 8000fe8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fea:	4b13      	ldr	r3, [pc, #76]	@ (8001038 <MX_USART2_UART_Init+0x58>)
 8000fec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ff0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <MX_USART2_UART_Init+0x58>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <MX_USART2_UART_Init+0x58>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <MX_USART2_UART_Init+0x58>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001004:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <MX_USART2_UART_Init+0x58>)
 8001006:	220c      	movs	r2, #12
 8001008:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100a:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <MX_USART2_UART_Init+0x58>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001010:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <MX_USART2_UART_Init+0x58>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001016:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <MX_USART2_UART_Init+0x58>)
 8001018:	2200      	movs	r2, #0
 800101a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <MX_USART2_UART_Init+0x58>)
 800101e:	2200      	movs	r2, #0
 8001020:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001022:	4805      	ldr	r0, [pc, #20]	@ (8001038 <MX_USART2_UART_Init+0x58>)
 8001024:	f002 fd94 	bl	8003b50 <HAL_UART_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800102e:	f7ff fdb5 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000758 	.word	0x20000758
 800103c:	40004400 	.word	0x40004400

08001040 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b0ac      	sub	sp, #176	@ 0xb0
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2288      	movs	r2, #136	@ 0x88
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f005 ff33 	bl	8006ecc <memset>
  if(uartHandle->Instance==USART2)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a25      	ldr	r2, [pc, #148]	@ (8001100 <HAL_UART_MspInit+0xc0>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d143      	bne.n	80010f8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001070:	2302      	movs	r3, #2
 8001072:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001074:	2300      	movs	r3, #0
 8001076:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4618      	mov	r0, r3
 800107e:	f001 fa67 	bl	8002550 <HAL_RCCEx_PeriphCLKConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001088:	f7ff fd88 	bl	8000b9c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800108c:	4b1d      	ldr	r3, [pc, #116]	@ (8001104 <HAL_UART_MspInit+0xc4>)
 800108e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001090:	4a1c      	ldr	r2, [pc, #112]	@ (8001104 <HAL_UART_MspInit+0xc4>)
 8001092:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001096:	6593      	str	r3, [r2, #88]	@ 0x58
 8001098:	4b1a      	ldr	r3, [pc, #104]	@ (8001104 <HAL_UART_MspInit+0xc4>)
 800109a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800109c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	4b17      	ldr	r3, [pc, #92]	@ (8001104 <HAL_UART_MspInit+0xc4>)
 80010a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a8:	4a16      	ldr	r2, [pc, #88]	@ (8001104 <HAL_UART_MspInit+0xc4>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b0:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <HAL_UART_MspInit+0xc4>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010bc:	230c      	movs	r3, #12
 80010be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ce:	2303      	movs	r3, #3
 80010d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010d4:	2307      	movs	r3, #7
 80010d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010de:	4619      	mov	r1, r3
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e4:	f000 f9dc 	bl	80014a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2105      	movs	r1, #5
 80010ec:	2026      	movs	r0, #38	@ 0x26
 80010ee:	f000 f92d 	bl	800134c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010f2:	2026      	movs	r0, #38	@ 0x26
 80010f4:	f000 f946 	bl	8001384 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010f8:	bf00      	nop
 80010fa:	37b0      	adds	r7, #176	@ 0xb0
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40004400 	.word	0x40004400
 8001104:	40021000 	.word	0x40021000

08001108 <Reset_Handler>:
 8001108:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001140 <LoopForever+0x2>
 800110c:	f7ff ff56 	bl	8000fbc <SystemInit>
 8001110:	480c      	ldr	r0, [pc, #48]	@ (8001144 <LoopForever+0x6>)
 8001112:	490d      	ldr	r1, [pc, #52]	@ (8001148 <LoopForever+0xa>)
 8001114:	4a0d      	ldr	r2, [pc, #52]	@ (800114c <LoopForever+0xe>)
 8001116:	2300      	movs	r3, #0
 8001118:	e002      	b.n	8001120 <LoopCopyDataInit>

0800111a <CopyDataInit>:
 800111a:	58d4      	ldr	r4, [r2, r3]
 800111c:	50c4      	str	r4, [r0, r3]
 800111e:	3304      	adds	r3, #4

08001120 <LoopCopyDataInit>:
 8001120:	18c4      	adds	r4, r0, r3
 8001122:	428c      	cmp	r4, r1
 8001124:	d3f9      	bcc.n	800111a <CopyDataInit>
 8001126:	4a0a      	ldr	r2, [pc, #40]	@ (8001150 <LoopForever+0x12>)
 8001128:	4c0a      	ldr	r4, [pc, #40]	@ (8001154 <LoopForever+0x16>)
 800112a:	2300      	movs	r3, #0
 800112c:	e001      	b.n	8001132 <LoopFillZerobss>

0800112e <FillZerobss>:
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	3204      	adds	r2, #4

08001132 <LoopFillZerobss>:
 8001132:	42a2      	cmp	r2, r4
 8001134:	d3fb      	bcc.n	800112e <FillZerobss>
 8001136:	f005 ff73 	bl	8007020 <__libc_init_array>
 800113a:	f7ff fc8d 	bl	8000a58 <main>

0800113e <LoopForever>:
 800113e:	e7fe      	b.n	800113e <LoopForever>
 8001140:	20018000 	.word	0x20018000
 8001144:	20000000 	.word	0x20000000
 8001148:	20000074 	.word	0x20000074
 800114c:	08007eb0 	.word	0x08007eb0
 8001150:	20000074 	.word	0x20000074
 8001154:	2000163c 	.word	0x2000163c

08001158 <ADC1_2_IRQHandler>:
 8001158:	e7fe      	b.n	8001158 <ADC1_2_IRQHandler>
	...

0800115c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001162:	2300      	movs	r3, #0
 8001164:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001166:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <HAL_Init+0x3c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a0b      	ldr	r2, [pc, #44]	@ (8001198 <HAL_Init+0x3c>)
 800116c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001170:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001172:	2003      	movs	r0, #3
 8001174:	f000 f8df 	bl	8001336 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001178:	200f      	movs	r0, #15
 800117a:	f7ff fddd 	bl	8000d38 <HAL_InitTick>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d002      	beq.n	800118a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	71fb      	strb	r3, [r7, #7]
 8001188:	e001      	b.n	800118e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800118a:	f7ff fdad 	bl	8000ce8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800118e:	79fb      	ldrb	r3, [r7, #7]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40022000 	.word	0x40022000

0800119c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011a0:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <HAL_IncTick+0x20>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <HAL_IncTick+0x24>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <HAL_IncTick+0x24>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000008 	.word	0x20000008
 80011c0:	200007e0 	.word	0x200007e0

080011c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return uwTick;
 80011c8:	4b03      	ldr	r3, [pc, #12]	@ (80011d8 <HAL_GetTick+0x14>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	200007e0 	.word	0x200007e0

080011dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <__NVIC_SetPriorityGrouping+0x44>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011f8:	4013      	ands	r3, r2
 80011fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001204:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001208:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800120c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800120e:	4a04      	ldr	r2, [pc, #16]	@ (8001220 <__NVIC_SetPriorityGrouping+0x44>)
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	60d3      	str	r3, [r2, #12]
}
 8001214:	bf00      	nop
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001228:	4b04      	ldr	r3, [pc, #16]	@ (800123c <__NVIC_GetPriorityGrouping+0x18>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	0a1b      	lsrs	r3, r3, #8
 800122e:	f003 0307 	and.w	r3, r3, #7
}
 8001232:	4618      	mov	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	2b00      	cmp	r3, #0
 8001250:	db0b      	blt.n	800126a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	f003 021f 	and.w	r2, r3, #31
 8001258:	4907      	ldr	r1, [pc, #28]	@ (8001278 <__NVIC_EnableIRQ+0x38>)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	095b      	lsrs	r3, r3, #5
 8001260:	2001      	movs	r0, #1
 8001262:	fa00 f202 	lsl.w	r2, r0, r2
 8001266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000e100 	.word	0xe000e100

0800127c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	2b00      	cmp	r3, #0
 800128e:	db0a      	blt.n	80012a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	b2da      	uxtb	r2, r3
 8001294:	490c      	ldr	r1, [pc, #48]	@ (80012c8 <__NVIC_SetPriority+0x4c>)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	0112      	lsls	r2, r2, #4
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	440b      	add	r3, r1
 80012a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a4:	e00a      	b.n	80012bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4908      	ldr	r1, [pc, #32]	@ (80012cc <__NVIC_SetPriority+0x50>)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	3b04      	subs	r3, #4
 80012b4:	0112      	lsls	r2, r2, #4
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	440b      	add	r3, r1
 80012ba:	761a      	strb	r2, [r3, #24]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000e100 	.word	0xe000e100
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b089      	sub	sp, #36	@ 0x24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f1c3 0307 	rsb	r3, r3, #7
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	bf28      	it	cs
 80012ee:	2304      	movcs	r3, #4
 80012f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3304      	adds	r3, #4
 80012f6:	2b06      	cmp	r3, #6
 80012f8:	d902      	bls.n	8001300 <NVIC_EncodePriority+0x30>
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3b03      	subs	r3, #3
 80012fe:	e000      	b.n	8001302 <NVIC_EncodePriority+0x32>
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	f04f 32ff 	mov.w	r2, #4294967295
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43da      	mvns	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	401a      	ands	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001318:	f04f 31ff 	mov.w	r1, #4294967295
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa01 f303 	lsl.w	r3, r1, r3
 8001322:	43d9      	mvns	r1, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	4313      	orrs	r3, r2
         );
}
 800132a:	4618      	mov	r0, r3
 800132c:	3724      	adds	r7, #36	@ 0x24
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ff4c 	bl	80011dc <__NVIC_SetPriorityGrouping>
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
 8001358:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800135e:	f7ff ff61 	bl	8001224 <__NVIC_GetPriorityGrouping>
 8001362:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	68b9      	ldr	r1, [r7, #8]
 8001368:	6978      	ldr	r0, [r7, #20]
 800136a:	f7ff ffb1 	bl	80012d0 <NVIC_EncodePriority>
 800136e:	4602      	mov	r2, r0
 8001370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001374:	4611      	mov	r1, r2
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ff80 	bl	800127c <__NVIC_SetPriority>
}
 800137c:	bf00      	nop
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff ff54 	bl	8001240 <__NVIC_EnableIRQ>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013a8:	2300      	movs	r3, #0
 80013aa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d008      	beq.n	80013ca <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2204      	movs	r2, #4
 80013bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e022      	b.n	8001410 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 020e 	bic.w	r2, r2, #14
 80013d8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 0201 	bic.w	r2, r2, #1
 80013e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ee:	f003 021c 	and.w	r2, r3, #28
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	2101      	movs	r1, #1
 80013f8:	fa01 f202 	lsl.w	r2, r1, r2
 80013fc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800140e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001410:	4618      	mov	r0, r3
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001424:	2300      	movs	r3, #0
 8001426:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d005      	beq.n	8001440 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2204      	movs	r2, #4
 8001438:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	e029      	b.n	8001494 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 020e 	bic.w	r2, r2, #14
 800144e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f022 0201 	bic.w	r2, r2, #1
 800145e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001464:	f003 021c 	and.w	r2, r3, #28
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146c:	2101      	movs	r1, #1
 800146e:	fa01 f202 	lsl.w	r2, r1, r2
 8001472:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	4798      	blx	r3
    }
  }
  return status;
 8001494:	7bfb      	ldrb	r3, [r7, #15]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b087      	sub	sp, #28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ae:	e17f      	b.n	80017b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	2101      	movs	r1, #1
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	4013      	ands	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 8171 	beq.w	80017aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d005      	beq.n	80014e0 <HAL_GPIO_Init+0x40>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d130      	bne.n	8001542 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	2203      	movs	r2, #3
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001516:	2201      	movs	r2, #1
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	091b      	lsrs	r3, r3, #4
 800152c:	f003 0201 	and.w	r2, r3, #1
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	2b03      	cmp	r3, #3
 800154c:	d118      	bne.n	8001580 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001552:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001554:	2201      	movs	r2, #1
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	08db      	lsrs	r3, r3, #3
 800156a:	f003 0201 	and.w	r2, r3, #1
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4313      	orrs	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 0303 	and.w	r3, r3, #3
 8001588:	2b03      	cmp	r3, #3
 800158a:	d017      	beq.n	80015bc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	2203      	movs	r2, #3
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 0303 	and.w	r3, r3, #3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d123      	bne.n	8001610 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	08da      	lsrs	r2, r3, #3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3208      	adds	r2, #8
 80015d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	220f      	movs	r2, #15
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	691a      	ldr	r2, [r3, #16]
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	08da      	lsrs	r2, r3, #3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3208      	adds	r2, #8
 800160a:	6939      	ldr	r1, [r7, #16]
 800160c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	2203      	movs	r2, #3
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0203 	and.w	r2, r3, #3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 80ac 	beq.w	80017aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	4b5f      	ldr	r3, [pc, #380]	@ (80017d0 <HAL_GPIO_Init+0x330>)
 8001654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001656:	4a5e      	ldr	r2, [pc, #376]	@ (80017d0 <HAL_GPIO_Init+0x330>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6613      	str	r3, [r2, #96]	@ 0x60
 800165e:	4b5c      	ldr	r3, [pc, #368]	@ (80017d0 <HAL_GPIO_Init+0x330>)
 8001660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800166a:	4a5a      	ldr	r2, [pc, #360]	@ (80017d4 <HAL_GPIO_Init+0x334>)
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	089b      	lsrs	r3, r3, #2
 8001670:	3302      	adds	r3, #2
 8001672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001676:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	220f      	movs	r2, #15
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001694:	d025      	beq.n	80016e2 <HAL_GPIO_Init+0x242>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a4f      	ldr	r2, [pc, #316]	@ (80017d8 <HAL_GPIO_Init+0x338>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d01f      	beq.n	80016de <HAL_GPIO_Init+0x23e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4e      	ldr	r2, [pc, #312]	@ (80017dc <HAL_GPIO_Init+0x33c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d019      	beq.n	80016da <HAL_GPIO_Init+0x23a>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4d      	ldr	r2, [pc, #308]	@ (80017e0 <HAL_GPIO_Init+0x340>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d013      	beq.n	80016d6 <HAL_GPIO_Init+0x236>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4c      	ldr	r2, [pc, #304]	@ (80017e4 <HAL_GPIO_Init+0x344>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d00d      	beq.n	80016d2 <HAL_GPIO_Init+0x232>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4b      	ldr	r2, [pc, #300]	@ (80017e8 <HAL_GPIO_Init+0x348>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d007      	beq.n	80016ce <HAL_GPIO_Init+0x22e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4a      	ldr	r2, [pc, #296]	@ (80017ec <HAL_GPIO_Init+0x34c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d101      	bne.n	80016ca <HAL_GPIO_Init+0x22a>
 80016c6:	2306      	movs	r3, #6
 80016c8:	e00c      	b.n	80016e4 <HAL_GPIO_Init+0x244>
 80016ca:	2307      	movs	r3, #7
 80016cc:	e00a      	b.n	80016e4 <HAL_GPIO_Init+0x244>
 80016ce:	2305      	movs	r3, #5
 80016d0:	e008      	b.n	80016e4 <HAL_GPIO_Init+0x244>
 80016d2:	2304      	movs	r3, #4
 80016d4:	e006      	b.n	80016e4 <HAL_GPIO_Init+0x244>
 80016d6:	2303      	movs	r3, #3
 80016d8:	e004      	b.n	80016e4 <HAL_GPIO_Init+0x244>
 80016da:	2302      	movs	r3, #2
 80016dc:	e002      	b.n	80016e4 <HAL_GPIO_Init+0x244>
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <HAL_GPIO_Init+0x244>
 80016e2:	2300      	movs	r3, #0
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	f002 0203 	and.w	r2, r2, #3
 80016ea:	0092      	lsls	r2, r2, #2
 80016ec:	4093      	lsls	r3, r2
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016f4:	4937      	ldr	r1, [pc, #220]	@ (80017d4 <HAL_GPIO_Init+0x334>)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	089b      	lsrs	r3, r3, #2
 80016fa:	3302      	adds	r3, #2
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001702:	4b3b      	ldr	r3, [pc, #236]	@ (80017f0 <HAL_GPIO_Init+0x350>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	43db      	mvns	r3, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4313      	orrs	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001726:	4a32      	ldr	r2, [pc, #200]	@ (80017f0 <HAL_GPIO_Init+0x350>)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800172c:	4b30      	ldr	r3, [pc, #192]	@ (80017f0 <HAL_GPIO_Init+0x350>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	43db      	mvns	r3, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001750:	4a27      	ldr	r2, [pc, #156]	@ (80017f0 <HAL_GPIO_Init+0x350>)
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001756:	4b26      	ldr	r3, [pc, #152]	@ (80017f0 <HAL_GPIO_Init+0x350>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	43db      	mvns	r3, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4313      	orrs	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800177a:	4a1d      	ldr	r2, [pc, #116]	@ (80017f0 <HAL_GPIO_Init+0x350>)
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001780:	4b1b      	ldr	r3, [pc, #108]	@ (80017f0 <HAL_GPIO_Init+0x350>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	43db      	mvns	r3, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017a4:	4a12      	ldr	r2, [pc, #72]	@ (80017f0 <HAL_GPIO_Init+0x350>)
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	3301      	adds	r3, #1
 80017ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa22 f303 	lsr.w	r3, r2, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f47f ae78 	bne.w	80014b0 <HAL_GPIO_Init+0x10>
  }
}
 80017c0:	bf00      	nop
 80017c2:	bf00      	nop
 80017c4:	371c      	adds	r7, #28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40010000 	.word	0x40010000
 80017d8:	48000400 	.word	0x48000400
 80017dc:	48000800 	.word	0x48000800
 80017e0:	48000c00 	.word	0x48000c00
 80017e4:	48001000 	.word	0x48001000
 80017e8:	48001400 	.word	0x48001400
 80017ec:	48001800 	.word	0x48001800
 80017f0:	40010400 	.word	0x40010400

080017f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	807b      	strh	r3, [r7, #2]
 8001800:	4613      	mov	r3, r2
 8001802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001804:	787b      	ldrb	r3, [r7, #1]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800180a:	887a      	ldrh	r2, [r7, #2]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001810:	e002      	b.n	8001818 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001812:	887a      	ldrh	r2, [r7, #2]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001828:	4b04      	ldr	r3, [pc, #16]	@ (800183c <HAL_PWREx_GetVoltageRange+0x18>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40007000 	.word	0x40007000

08001840 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800184e:	d130      	bne.n	80018b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001850:	4b23      	ldr	r3, [pc, #140]	@ (80018e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800185c:	d038      	beq.n	80018d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800185e:	4b20      	ldr	r3, [pc, #128]	@ (80018e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001866:	4a1e      	ldr	r2, [pc, #120]	@ (80018e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001868:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800186c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800186e:	4b1d      	ldr	r3, [pc, #116]	@ (80018e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2232      	movs	r2, #50	@ 0x32
 8001874:	fb02 f303 	mul.w	r3, r2, r3
 8001878:	4a1b      	ldr	r2, [pc, #108]	@ (80018e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800187a:	fba2 2303 	umull	r2, r3, r2, r3
 800187e:	0c9b      	lsrs	r3, r3, #18
 8001880:	3301      	adds	r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001884:	e002      	b.n	800188c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	3b01      	subs	r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800188c:	4b14      	ldr	r3, [pc, #80]	@ (80018e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001894:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001898:	d102      	bne.n	80018a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1f2      	bne.n	8001886 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018a0:	4b0f      	ldr	r3, [pc, #60]	@ (80018e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018ac:	d110      	bne.n	80018d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e00f      	b.n	80018d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018b2:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018be:	d007      	beq.n	80018d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018c0:	4b07      	ldr	r3, [pc, #28]	@ (80018e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018c8:	4a05      	ldr	r2, [pc, #20]	@ (80018e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40007000 	.word	0x40007000
 80018e4:	20000000 	.word	0x20000000
 80018e8:	431bde83 	.word	0x431bde83

080018ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e3ca      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018fe:	4b97      	ldr	r3, [pc, #604]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 030c 	and.w	r3, r3, #12
 8001906:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001908:	4b94      	ldr	r3, [pc, #592]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0310 	and.w	r3, r3, #16
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 80e4 	beq.w	8001ae8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d007      	beq.n	8001936 <HAL_RCC_OscConfig+0x4a>
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	2b0c      	cmp	r3, #12
 800192a:	f040 808b 	bne.w	8001a44 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	2b01      	cmp	r3, #1
 8001932:	f040 8087 	bne.w	8001a44 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001936:	4b89      	ldr	r3, [pc, #548]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d005      	beq.n	800194e <HAL_RCC_OscConfig+0x62>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e3a2      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a1a      	ldr	r2, [r3, #32]
 8001952:	4b82      	ldr	r3, [pc, #520]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b00      	cmp	r3, #0
 800195c:	d004      	beq.n	8001968 <HAL_RCC_OscConfig+0x7c>
 800195e:	4b7f      	ldr	r3, [pc, #508]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001966:	e005      	b.n	8001974 <HAL_RCC_OscConfig+0x88>
 8001968:	4b7c      	ldr	r3, [pc, #496]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 800196a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800196e:	091b      	lsrs	r3, r3, #4
 8001970:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001974:	4293      	cmp	r3, r2
 8001976:	d223      	bcs.n	80019c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	4618      	mov	r0, r3
 800197e:	f000 fd87 	bl	8002490 <RCC_SetFlashLatencyFromMSIRange>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e383      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800198c:	4b73      	ldr	r3, [pc, #460]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a72      	ldr	r2, [pc, #456]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001992:	f043 0308 	orr.w	r3, r3, #8
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	4b70      	ldr	r3, [pc, #448]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	496d      	ldr	r1, [pc, #436]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019aa:	4b6c      	ldr	r3, [pc, #432]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	021b      	lsls	r3, r3, #8
 80019b8:	4968      	ldr	r1, [pc, #416]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	604b      	str	r3, [r1, #4]
 80019be:	e025      	b.n	8001a0c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019c0:	4b66      	ldr	r3, [pc, #408]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a65      	ldr	r2, [pc, #404]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 80019c6:	f043 0308 	orr.w	r3, r3, #8
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	4b63      	ldr	r3, [pc, #396]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	4960      	ldr	r1, [pc, #384]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019de:	4b5f      	ldr	r3, [pc, #380]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	021b      	lsls	r3, r3, #8
 80019ec:	495b      	ldr	r1, [pc, #364]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d109      	bne.n	8001a0c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 fd47 	bl	8002490 <RCC_SetFlashLatencyFromMSIRange>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e343      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a0c:	f000 fc4a 	bl	80022a4 <HAL_RCC_GetSysClockFreq>
 8001a10:	4602      	mov	r2, r0
 8001a12:	4b52      	ldr	r3, [pc, #328]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	091b      	lsrs	r3, r3, #4
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	4950      	ldr	r1, [pc, #320]	@ (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001a1e:	5ccb      	ldrb	r3, [r1, r3]
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	fa22 f303 	lsr.w	r3, r2, r3
 8001a28:	4a4e      	ldr	r2, [pc, #312]	@ (8001b64 <HAL_RCC_OscConfig+0x278>)
 8001a2a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a2c:	4b4e      	ldr	r3, [pc, #312]	@ (8001b68 <HAL_RCC_OscConfig+0x27c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff f981 	bl	8000d38 <HAL_InitTick>
 8001a36:	4603      	mov	r3, r0
 8001a38:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d052      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	e327      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d032      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a4c:	4b43      	ldr	r3, [pc, #268]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a42      	ldr	r2, [pc, #264]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a58:	f7ff fbb4 	bl	80011c4 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a60:	f7ff fbb0 	bl	80011c4 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e310      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a72:	4b3a      	ldr	r3, [pc, #232]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a7e:	4b37      	ldr	r3, [pc, #220]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a36      	ldr	r2, [pc, #216]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001a84:	f043 0308 	orr.w	r3, r3, #8
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	4b34      	ldr	r3, [pc, #208]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	4931      	ldr	r1, [pc, #196]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a9c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	021b      	lsls	r3, r3, #8
 8001aaa:	492c      	ldr	r1, [pc, #176]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	604b      	str	r3, [r1, #4]
 8001ab0:	e01a      	b.n	8001ae8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a29      	ldr	r2, [pc, #164]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001ab8:	f023 0301 	bic.w	r3, r3, #1
 8001abc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001abe:	f7ff fb81 	bl	80011c4 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ac6:	f7ff fb7d 	bl	80011c4 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e2dd      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ad8:	4b20      	ldr	r3, [pc, #128]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1f0      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x1da>
 8001ae4:	e000      	b.n	8001ae8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ae6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d074      	beq.n	8001bde <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d005      	beq.n	8001b06 <HAL_RCC_OscConfig+0x21a>
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	2b0c      	cmp	r3, #12
 8001afe:	d10e      	bne.n	8001b1e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d10b      	bne.n	8001b1e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b06:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d064      	beq.n	8001bdc <HAL_RCC_OscConfig+0x2f0>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d160      	bne.n	8001bdc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e2ba      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b26:	d106      	bne.n	8001b36 <HAL_RCC_OscConfig+0x24a>
 8001b28:	4b0c      	ldr	r3, [pc, #48]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001b2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	e026      	b.n	8001b84 <HAL_RCC_OscConfig+0x298>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b3e:	d115      	bne.n	8001b6c <HAL_RCC_OscConfig+0x280>
 8001b40:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a05      	ldr	r2, [pc, #20]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001b46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	4b03      	ldr	r3, [pc, #12]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a02      	ldr	r2, [pc, #8]	@ (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001b52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	e014      	b.n	8001b84 <HAL_RCC_OscConfig+0x298>
 8001b5a:	bf00      	nop
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	08007d24 	.word	0x08007d24
 8001b64:	20000000 	.word	0x20000000
 8001b68:	20000004 	.word	0x20000004
 8001b6c:	4ba0      	ldr	r3, [pc, #640]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a9f      	ldr	r2, [pc, #636]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001b72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	4b9d      	ldr	r3, [pc, #628]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a9c      	ldr	r2, [pc, #624]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001b7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d013      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8c:	f7ff fb1a 	bl	80011c4 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b94:	f7ff fb16 	bl	80011c4 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b64      	cmp	r3, #100	@ 0x64
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e276      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ba6:	4b92      	ldr	r3, [pc, #584]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0x2a8>
 8001bb2:	e014      	b.n	8001bde <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb4:	f7ff fb06 	bl	80011c4 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bbc:	f7ff fb02 	bl	80011c4 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b64      	cmp	r3, #100	@ 0x64
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e262      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bce:	4b88      	ldr	r3, [pc, #544]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x2d0>
 8001bda:	e000      	b.n	8001bde <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d060      	beq.n	8001cac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d005      	beq.n	8001bfc <HAL_RCC_OscConfig+0x310>
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	2b0c      	cmp	r3, #12
 8001bf4:	d119      	bne.n	8001c2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d116      	bne.n	8001c2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bfc:	4b7c      	ldr	r3, [pc, #496]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_OscConfig+0x328>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e23f      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c14:	4b76      	ldr	r3, [pc, #472]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	061b      	lsls	r3, r3, #24
 8001c22:	4973      	ldr	r1, [pc, #460]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c28:	e040      	b.n	8001cac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d023      	beq.n	8001c7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c32:	4b6f      	ldr	r3, [pc, #444]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a6e      	ldr	r2, [pc, #440]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3e:	f7ff fac1 	bl	80011c4 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c46:	f7ff fabd 	bl	80011c4 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e21d      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c58:	4b65      	ldr	r3, [pc, #404]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c64:	4b62      	ldr	r3, [pc, #392]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	061b      	lsls	r3, r3, #24
 8001c72:	495f      	ldr	r1, [pc, #380]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	604b      	str	r3, [r1, #4]
 8001c78:	e018      	b.n	8001cac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c7a:	4b5d      	ldr	r3, [pc, #372]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a5c      	ldr	r2, [pc, #368]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001c80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c86:	f7ff fa9d 	bl	80011c4 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c8e:	f7ff fa99 	bl	80011c4 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e1f9      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ca0:	4b53      	ldr	r3, [pc, #332]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f0      	bne.n	8001c8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d03c      	beq.n	8001d32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d01c      	beq.n	8001cfa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cc0:	4b4b      	ldr	r3, [pc, #300]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cc6:	4a4a      	ldr	r2, [pc, #296]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd0:	f7ff fa78 	bl	80011c4 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd8:	f7ff fa74 	bl	80011c4 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e1d4      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cea:	4b41      	ldr	r3, [pc, #260]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ef      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x3ec>
 8001cf8:	e01b      	b.n	8001d32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cfa:	4b3d      	ldr	r3, [pc, #244]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d00:	4a3b      	ldr	r2, [pc, #236]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001d02:	f023 0301 	bic.w	r3, r3, #1
 8001d06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0a:	f7ff fa5b 	bl	80011c4 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d12:	f7ff fa57 	bl	80011c4 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e1b7      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d24:	4b32      	ldr	r3, [pc, #200]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1ef      	bne.n	8001d12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 80a6 	beq.w	8001e8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d40:	2300      	movs	r3, #0
 8001d42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d44:	4b2a      	ldr	r3, [pc, #168]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10d      	bne.n	8001d6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d50:	4b27      	ldr	r3, [pc, #156]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d54:	4a26      	ldr	r2, [pc, #152]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001d56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d5c:	4b24      	ldr	r3, [pc, #144]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d6c:	4b21      	ldr	r3, [pc, #132]	@ (8001df4 <HAL_RCC_OscConfig+0x508>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d118      	bne.n	8001daa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d78:	4b1e      	ldr	r3, [pc, #120]	@ (8001df4 <HAL_RCC_OscConfig+0x508>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001df4 <HAL_RCC_OscConfig+0x508>)
 8001d7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d84:	f7ff fa1e 	bl	80011c4 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8c:	f7ff fa1a 	bl	80011c4 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e17a      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d9e:	4b15      	ldr	r3, [pc, #84]	@ (8001df4 <HAL_RCC_OscConfig+0x508>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d108      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x4d8>
 8001db2:	4b0f      	ldr	r3, [pc, #60]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001db8:	4a0d      	ldr	r2, [pc, #52]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dc2:	e029      	b.n	8001e18 <HAL_RCC_OscConfig+0x52c>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b05      	cmp	r3, #5
 8001dca:	d115      	bne.n	8001df8 <HAL_RCC_OscConfig+0x50c>
 8001dcc:	4b08      	ldr	r3, [pc, #32]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dd2:	4a07      	ldr	r2, [pc, #28]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001dd4:	f043 0304 	orr.w	r3, r3, #4
 8001dd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ddc:	4b04      	ldr	r3, [pc, #16]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001de2:	4a03      	ldr	r2, [pc, #12]	@ (8001df0 <HAL_RCC_OscConfig+0x504>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dec:	e014      	b.n	8001e18 <HAL_RCC_OscConfig+0x52c>
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40007000 	.word	0x40007000
 8001df8:	4b9c      	ldr	r3, [pc, #624]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dfe:	4a9b      	ldr	r2, [pc, #620]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001e00:	f023 0301 	bic.w	r3, r3, #1
 8001e04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e08:	4b98      	ldr	r3, [pc, #608]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e0e:	4a97      	ldr	r2, [pc, #604]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001e10:	f023 0304 	bic.w	r3, r3, #4
 8001e14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d016      	beq.n	8001e4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e20:	f7ff f9d0 	bl	80011c4 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e26:	e00a      	b.n	8001e3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e28:	f7ff f9cc 	bl	80011c4 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e12a      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e3e:	4b8b      	ldr	r3, [pc, #556]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0ed      	beq.n	8001e28 <HAL_RCC_OscConfig+0x53c>
 8001e4c:	e015      	b.n	8001e7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4e:	f7ff f9b9 	bl	80011c4 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e54:	e00a      	b.n	8001e6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f7ff f9b5 	bl	80011c4 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e113      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e6c:	4b7f      	ldr	r3, [pc, #508]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1ed      	bne.n	8001e56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e7a:	7ffb      	ldrb	r3, [r7, #31]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d105      	bne.n	8001e8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e80:	4b7a      	ldr	r3, [pc, #488]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e84:	4a79      	ldr	r2, [pc, #484]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001e86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e8a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 80fe 	beq.w	8002092 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	f040 80d0 	bne.w	8002040 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ea0:	4b72      	ldr	r3, [pc, #456]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f003 0203 	and.w	r2, r3, #3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d130      	bne.n	8001f16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d127      	bne.n	8001f16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ed0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d11f      	bne.n	8001f16 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ee0:	2a07      	cmp	r2, #7
 8001ee2:	bf14      	ite	ne
 8001ee4:	2201      	movne	r2, #1
 8001ee6:	2200      	moveq	r2, #0
 8001ee8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d113      	bne.n	8001f16 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ef8:	085b      	lsrs	r3, r3, #1
 8001efa:	3b01      	subs	r3, #1
 8001efc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d109      	bne.n	8001f16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0c:	085b      	lsrs	r3, r3, #1
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d06e      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	2b0c      	cmp	r3, #12
 8001f1a:	d069      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f1c:	4b53      	ldr	r3, [pc, #332]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d105      	bne.n	8001f34 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f28:	4b50      	ldr	r3, [pc, #320]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0ad      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f38:	4b4c      	ldr	r3, [pc, #304]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a4b      	ldr	r2, [pc, #300]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001f3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f42:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f44:	f7ff f93e 	bl	80011c4 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4c:	f7ff f93a 	bl	80011c4 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e09a      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f5e:	4b43      	ldr	r3, [pc, #268]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f6a:	4b40      	ldr	r3, [pc, #256]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	4b40      	ldr	r3, [pc, #256]	@ (8002070 <HAL_RCC_OscConfig+0x784>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001f7a:	3a01      	subs	r2, #1
 8001f7c:	0112      	lsls	r2, r2, #4
 8001f7e:	4311      	orrs	r1, r2
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f84:	0212      	lsls	r2, r2, #8
 8001f86:	4311      	orrs	r1, r2
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f8c:	0852      	lsrs	r2, r2, #1
 8001f8e:	3a01      	subs	r2, #1
 8001f90:	0552      	lsls	r2, r2, #21
 8001f92:	4311      	orrs	r1, r2
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f98:	0852      	lsrs	r2, r2, #1
 8001f9a:	3a01      	subs	r2, #1
 8001f9c:	0652      	lsls	r2, r2, #25
 8001f9e:	4311      	orrs	r1, r2
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001fa4:	0912      	lsrs	r2, r2, #4
 8001fa6:	0452      	lsls	r2, r2, #17
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	4930      	ldr	r1, [pc, #192]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fb0:	4b2e      	ldr	r3, [pc, #184]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a2d      	ldr	r2, [pc, #180]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001fb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4a2a      	ldr	r2, [pc, #168]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001fc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fc8:	f7ff f8fc 	bl	80011c4 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd0:	f7ff f8f8 	bl	80011c4 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e058      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe2:	4b22      	ldr	r3, [pc, #136]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fee:	e050      	b.n	8002092 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e04f      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d148      	bne.n	8002092 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002000:	4b1a      	ldr	r3, [pc, #104]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a19      	ldr	r2, [pc, #100]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8002006:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800200a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800200c:	4b17      	ldr	r3, [pc, #92]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	4a16      	ldr	r2, [pc, #88]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8002012:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002016:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002018:	f7ff f8d4 	bl	80011c4 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002020:	f7ff f8d0 	bl	80011c4 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e030      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002032:	4b0e      	ldr	r3, [pc, #56]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0x734>
 800203e:	e028      	b.n	8002092 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	2b0c      	cmp	r3, #12
 8002044:	d023      	beq.n	800208e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002046:	4b09      	ldr	r3, [pc, #36]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a08      	ldr	r2, [pc, #32]	@ (800206c <HAL_RCC_OscConfig+0x780>)
 800204c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002052:	f7ff f8b7 	bl	80011c4 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002058:	e00c      	b.n	8002074 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205a:	f7ff f8b3 	bl	80011c4 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d905      	bls.n	8002074 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e013      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
 800206c:	40021000 	.word	0x40021000
 8002070:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002074:	4b09      	ldr	r3, [pc, #36]	@ (800209c <HAL_RCC_OscConfig+0x7b0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1ec      	bne.n	800205a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002080:	4b06      	ldr	r3, [pc, #24]	@ (800209c <HAL_RCC_OscConfig+0x7b0>)
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	4905      	ldr	r1, [pc, #20]	@ (800209c <HAL_RCC_OscConfig+0x7b0>)
 8002086:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <HAL_RCC_OscConfig+0x7b4>)
 8002088:	4013      	ands	r3, r2
 800208a:	60cb      	str	r3, [r1, #12]
 800208c:	e001      	b.n	8002092 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3720      	adds	r7, #32
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000
 80020a0:	feeefffc 	.word	0xfeeefffc

080020a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0e7      	b.n	8002288 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020b8:	4b75      	ldr	r3, [pc, #468]	@ (8002290 <HAL_RCC_ClockConfig+0x1ec>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d910      	bls.n	80020e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c6:	4b72      	ldr	r3, [pc, #456]	@ (8002290 <HAL_RCC_ClockConfig+0x1ec>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 0207 	bic.w	r2, r3, #7
 80020ce:	4970      	ldr	r1, [pc, #448]	@ (8002290 <HAL_RCC_ClockConfig+0x1ec>)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d6:	4b6e      	ldr	r3, [pc, #440]	@ (8002290 <HAL_RCC_ClockConfig+0x1ec>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d001      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0cf      	b.n	8002288 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d010      	beq.n	8002116 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	4b66      	ldr	r3, [pc, #408]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002100:	429a      	cmp	r2, r3
 8002102:	d908      	bls.n	8002116 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002104:	4b63      	ldr	r3, [pc, #396]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	4960      	ldr	r1, [pc, #384]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 8002112:	4313      	orrs	r3, r2
 8002114:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d04c      	beq.n	80021bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b03      	cmp	r3, #3
 8002128:	d107      	bne.n	800213a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800212a:	4b5a      	ldr	r3, [pc, #360]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d121      	bne.n	800217a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e0a6      	b.n	8002288 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d107      	bne.n	8002152 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002142:	4b54      	ldr	r3, [pc, #336]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d115      	bne.n	800217a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e09a      	b.n	8002288 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d107      	bne.n	800216a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800215a:	4b4e      	ldr	r3, [pc, #312]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d109      	bne.n	800217a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e08e      	b.n	8002288 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800216a:	4b4a      	ldr	r3, [pc, #296]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e086      	b.n	8002288 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800217a:	4b46      	ldr	r3, [pc, #280]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f023 0203 	bic.w	r2, r3, #3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	4943      	ldr	r1, [pc, #268]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 8002188:	4313      	orrs	r3, r2
 800218a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800218c:	f7ff f81a 	bl	80011c4 <HAL_GetTick>
 8002190:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002192:	e00a      	b.n	80021aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002194:	f7ff f816 	bl	80011c4 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e06e      	b.n	8002288 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 020c 	and.w	r2, r3, #12
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d1eb      	bne.n	8002194 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d010      	beq.n	80021ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	4b31      	ldr	r3, [pc, #196]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d208      	bcs.n	80021ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	492b      	ldr	r1, [pc, #172]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021ea:	4b29      	ldr	r3, [pc, #164]	@ (8002290 <HAL_RCC_ClockConfig+0x1ec>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d210      	bcs.n	800221a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f8:	4b25      	ldr	r3, [pc, #148]	@ (8002290 <HAL_RCC_ClockConfig+0x1ec>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f023 0207 	bic.w	r2, r3, #7
 8002200:	4923      	ldr	r1, [pc, #140]	@ (8002290 <HAL_RCC_ClockConfig+0x1ec>)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	4313      	orrs	r3, r2
 8002206:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002208:	4b21      	ldr	r3, [pc, #132]	@ (8002290 <HAL_RCC_ClockConfig+0x1ec>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d001      	beq.n	800221a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e036      	b.n	8002288 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0304 	and.w	r3, r3, #4
 8002222:	2b00      	cmp	r3, #0
 8002224:	d008      	beq.n	8002238 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002226:	4b1b      	ldr	r3, [pc, #108]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	4918      	ldr	r1, [pc, #96]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 8002234:	4313      	orrs	r3, r2
 8002236:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	2b00      	cmp	r3, #0
 8002242:	d009      	beq.n	8002258 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002244:	4b13      	ldr	r3, [pc, #76]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	4910      	ldr	r1, [pc, #64]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 8002254:	4313      	orrs	r3, r2
 8002256:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002258:	f000 f824 	bl	80022a4 <HAL_RCC_GetSysClockFreq>
 800225c:	4602      	mov	r2, r0
 800225e:	4b0d      	ldr	r3, [pc, #52]	@ (8002294 <HAL_RCC_ClockConfig+0x1f0>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	091b      	lsrs	r3, r3, #4
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	490b      	ldr	r1, [pc, #44]	@ (8002298 <HAL_RCC_ClockConfig+0x1f4>)
 800226a:	5ccb      	ldrb	r3, [r1, r3]
 800226c:	f003 031f 	and.w	r3, r3, #31
 8002270:	fa22 f303 	lsr.w	r3, r2, r3
 8002274:	4a09      	ldr	r2, [pc, #36]	@ (800229c <HAL_RCC_ClockConfig+0x1f8>)
 8002276:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002278:	4b09      	ldr	r3, [pc, #36]	@ (80022a0 <HAL_RCC_ClockConfig+0x1fc>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe fd5b 	bl	8000d38 <HAL_InitTick>
 8002282:	4603      	mov	r3, r0
 8002284:	72fb      	strb	r3, [r7, #11]

  return status;
 8002286:	7afb      	ldrb	r3, [r7, #11]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40022000 	.word	0x40022000
 8002294:	40021000 	.word	0x40021000
 8002298:	08007d24 	.word	0x08007d24
 800229c:	20000000 	.word	0x20000000
 80022a0:	20000004 	.word	0x20000004

080022a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b089      	sub	sp, #36	@ 0x24
 80022a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022b2:	4b3e      	ldr	r3, [pc, #248]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x108>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022bc:	4b3b      	ldr	r3, [pc, #236]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x108>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_GetSysClockFreq+0x34>
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	2b0c      	cmp	r3, #12
 80022d0:	d121      	bne.n	8002316 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d11e      	bne.n	8002316 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022d8:	4b34      	ldr	r3, [pc, #208]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x108>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d107      	bne.n	80022f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022e4:	4b31      	ldr	r3, [pc, #196]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x108>)
 80022e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ea:	0a1b      	lsrs	r3, r3, #8
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	61fb      	str	r3, [r7, #28]
 80022f2:	e005      	b.n	8002300 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022f4:	4b2d      	ldr	r3, [pc, #180]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x108>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	091b      	lsrs	r3, r3, #4
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002300:	4a2b      	ldr	r2, [pc, #172]	@ (80023b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002308:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10d      	bne.n	800232c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002314:	e00a      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	2b04      	cmp	r3, #4
 800231a:	d102      	bne.n	8002322 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800231c:	4b25      	ldr	r3, [pc, #148]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800231e:	61bb      	str	r3, [r7, #24]
 8002320:	e004      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	2b08      	cmp	r3, #8
 8002326:	d101      	bne.n	800232c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002328:	4b23      	ldr	r3, [pc, #140]	@ (80023b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800232a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	2b0c      	cmp	r3, #12
 8002330:	d134      	bne.n	800239c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002332:	4b1e      	ldr	r3, [pc, #120]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d003      	beq.n	800234a <HAL_RCC_GetSysClockFreq+0xa6>
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2b03      	cmp	r3, #3
 8002346:	d003      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0xac>
 8002348:	e005      	b.n	8002356 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800234a:	4b1a      	ldr	r3, [pc, #104]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800234c:	617b      	str	r3, [r7, #20]
      break;
 800234e:	e005      	b.n	800235c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002350:	4b19      	ldr	r3, [pc, #100]	@ (80023b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002352:	617b      	str	r3, [r7, #20]
      break;
 8002354:	e002      	b.n	800235c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	617b      	str	r3, [r7, #20]
      break;
 800235a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800235c:	4b13      	ldr	r3, [pc, #76]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x108>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	091b      	lsrs	r3, r3, #4
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	3301      	adds	r3, #1
 8002368:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800236a:	4b10      	ldr	r3, [pc, #64]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x108>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	0a1b      	lsrs	r3, r3, #8
 8002370:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	fb03 f202 	mul.w	r2, r3, r2
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002380:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002382:	4b0a      	ldr	r3, [pc, #40]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	0e5b      	lsrs	r3, r3, #25
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	3301      	adds	r3, #1
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	fbb2 f3f3 	udiv	r3, r2, r3
 800239a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800239c:	69bb      	ldr	r3, [r7, #24]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3724      	adds	r7, #36	@ 0x24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000
 80023b0:	08007d3c 	.word	0x08007d3c
 80023b4:	00f42400 	.word	0x00f42400
 80023b8:	007a1200 	.word	0x007a1200

080023bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023c0:	4b03      	ldr	r3, [pc, #12]	@ (80023d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000000 	.word	0x20000000

080023d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023d8:	f7ff fff0 	bl	80023bc <HAL_RCC_GetHCLKFreq>
 80023dc:	4602      	mov	r2, r0
 80023de:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	0a1b      	lsrs	r3, r3, #8
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	4904      	ldr	r1, [pc, #16]	@ (80023fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80023ea:	5ccb      	ldrb	r3, [r1, r3]
 80023ec:	f003 031f 	and.w	r3, r3, #31
 80023f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021000 	.word	0x40021000
 80023fc:	08007d34 	.word	0x08007d34

08002400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002404:	f7ff ffda 	bl	80023bc <HAL_RCC_GetHCLKFreq>
 8002408:	4602      	mov	r2, r0
 800240a:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <HAL_RCC_GetPCLK2Freq+0x24>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	0adb      	lsrs	r3, r3, #11
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	4904      	ldr	r1, [pc, #16]	@ (8002428 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002416:	5ccb      	ldrb	r3, [r1, r3]
 8002418:	f003 031f 	and.w	r3, r3, #31
 800241c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002420:	4618      	mov	r0, r3
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	08007d34 	.word	0x08007d34

0800242c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	220f      	movs	r2, #15
 800243a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800243c:	4b12      	ldr	r3, [pc, #72]	@ (8002488 <HAL_RCC_GetClockConfig+0x5c>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 0203 	and.w	r2, r3, #3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002448:	4b0f      	ldr	r3, [pc, #60]	@ (8002488 <HAL_RCC_GetClockConfig+0x5c>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002454:	4b0c      	ldr	r3, [pc, #48]	@ (8002488 <HAL_RCC_GetClockConfig+0x5c>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002460:	4b09      	ldr	r3, [pc, #36]	@ (8002488 <HAL_RCC_GetClockConfig+0x5c>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	08db      	lsrs	r3, r3, #3
 8002466:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800246e:	4b07      	ldr	r3, [pc, #28]	@ (800248c <HAL_RCC_GetClockConfig+0x60>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0207 	and.w	r2, r3, #7
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	601a      	str	r2, [r3, #0]
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40021000 	.word	0x40021000
 800248c:	40022000 	.word	0x40022000

08002490 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002498:	2300      	movs	r3, #0
 800249a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800249c:	4b2a      	ldr	r3, [pc, #168]	@ (8002548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800249e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024a8:	f7ff f9bc 	bl	8001824 <HAL_PWREx_GetVoltageRange>
 80024ac:	6178      	str	r0, [r7, #20]
 80024ae:	e014      	b.n	80024da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024b0:	4b25      	ldr	r3, [pc, #148]	@ (8002548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b4:	4a24      	ldr	r2, [pc, #144]	@ (8002548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80024bc:	4b22      	ldr	r3, [pc, #136]	@ (8002548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024c8:	f7ff f9ac 	bl	8001824 <HAL_PWREx_GetVoltageRange>
 80024cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024e0:	d10b      	bne.n	80024fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b80      	cmp	r3, #128	@ 0x80
 80024e6:	d919      	bls.n	800251c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2ba0      	cmp	r3, #160	@ 0xa0
 80024ec:	d902      	bls.n	80024f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024ee:	2302      	movs	r3, #2
 80024f0:	613b      	str	r3, [r7, #16]
 80024f2:	e013      	b.n	800251c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024f4:	2301      	movs	r3, #1
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	e010      	b.n	800251c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b80      	cmp	r3, #128	@ 0x80
 80024fe:	d902      	bls.n	8002506 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002500:	2303      	movs	r3, #3
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	e00a      	b.n	800251c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b80      	cmp	r3, #128	@ 0x80
 800250a:	d102      	bne.n	8002512 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800250c:	2302      	movs	r3, #2
 800250e:	613b      	str	r3, [r7, #16]
 8002510:	e004      	b.n	800251c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b70      	cmp	r3, #112	@ 0x70
 8002516:	d101      	bne.n	800251c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002518:	2301      	movs	r3, #1
 800251a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800251c:	4b0b      	ldr	r3, [pc, #44]	@ (800254c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f023 0207 	bic.w	r2, r3, #7
 8002524:	4909      	ldr	r1, [pc, #36]	@ (800254c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800252c:	4b07      	ldr	r3, [pc, #28]	@ (800254c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	429a      	cmp	r2, r3
 8002538:	d001      	beq.n	800253e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40021000 	.word	0x40021000
 800254c:	40022000 	.word	0x40022000

08002550 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002558:	2300      	movs	r3, #0
 800255a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800255c:	2300      	movs	r3, #0
 800255e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002568:	2b00      	cmp	r3, #0
 800256a:	d041      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002570:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002574:	d02a      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002576:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800257a:	d824      	bhi.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800257c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002580:	d008      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002582:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002586:	d81e      	bhi.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00a      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800258c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002590:	d010      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002592:	e018      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002594:	4b86      	ldr	r3, [pc, #536]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4a85      	ldr	r2, [pc, #532]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800259e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025a0:	e015      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3304      	adds	r3, #4
 80025a6:	2100      	movs	r1, #0
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 fabb 	bl	8002b24 <RCCEx_PLLSAI1_Config>
 80025ae:	4603      	mov	r3, r0
 80025b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025b2:	e00c      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3320      	adds	r3, #32
 80025b8:	2100      	movs	r1, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 fba6 	bl	8002d0c <RCCEx_PLLSAI2_Config>
 80025c0:	4603      	mov	r3, r0
 80025c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025c4:	e003      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	74fb      	strb	r3, [r7, #19]
      break;
 80025ca:	e000      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80025cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025ce:	7cfb      	ldrb	r3, [r7, #19]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10b      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025d4:	4b76      	ldr	r3, [pc, #472]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025e2:	4973      	ldr	r1, [pc, #460]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80025ea:	e001      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ec:	7cfb      	ldrb	r3, [r7, #19]
 80025ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d041      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002600:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002604:	d02a      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002606:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800260a:	d824      	bhi.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800260c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002610:	d008      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002612:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002616:	d81e      	bhi.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00a      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800261c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002620:	d010      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002622:	e018      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002624:	4b62      	ldr	r3, [pc, #392]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	4a61      	ldr	r2, [pc, #388]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800262e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002630:	e015      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3304      	adds	r3, #4
 8002636:	2100      	movs	r1, #0
 8002638:	4618      	mov	r0, r3
 800263a:	f000 fa73 	bl	8002b24 <RCCEx_PLLSAI1_Config>
 800263e:	4603      	mov	r3, r0
 8002640:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002642:	e00c      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3320      	adds	r3, #32
 8002648:	2100      	movs	r1, #0
 800264a:	4618      	mov	r0, r3
 800264c:	f000 fb5e 	bl	8002d0c <RCCEx_PLLSAI2_Config>
 8002650:	4603      	mov	r3, r0
 8002652:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002654:	e003      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	74fb      	strb	r3, [r7, #19]
      break;
 800265a:	e000      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800265c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800265e:	7cfb      	ldrb	r3, [r7, #19]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10b      	bne.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002664:	4b52      	ldr	r3, [pc, #328]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800266a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002672:	494f      	ldr	r1, [pc, #316]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800267a:	e001      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800267c:	7cfb      	ldrb	r3, [r7, #19]
 800267e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80a0 	beq.w	80027ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800268e:	2300      	movs	r3, #0
 8002690:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002692:	4b47      	ldr	r3, [pc, #284]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80026a2:	2300      	movs	r3, #0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00d      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a8:	4b41      	ldr	r3, [pc, #260]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ac:	4a40      	ldr	r2, [pc, #256]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80026b4:	4b3e      	ldr	r3, [pc, #248]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c0:	2301      	movs	r3, #1
 80026c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026c4:	4b3b      	ldr	r3, [pc, #236]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a3a      	ldr	r2, [pc, #232]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026d0:	f7fe fd78 	bl	80011c4 <HAL_GetTick>
 80026d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026d6:	e009      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d8:	f7fe fd74 	bl	80011c4 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d902      	bls.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	74fb      	strb	r3, [r7, #19]
        break;
 80026ea:	e005      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026ec:	4b31      	ldr	r3, [pc, #196]	@ (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0ef      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80026f8:	7cfb      	ldrb	r3, [r7, #19]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d15c      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026fe:	4b2c      	ldr	r3, [pc, #176]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002704:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002708:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d01f      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	429a      	cmp	r2, r3
 800271a:	d019      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800271c:	4b24      	ldr	r3, [pc, #144]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800271e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002722:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002726:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002728:	4b21      	ldr	r3, [pc, #132]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800272e:	4a20      	ldr	r2, [pc, #128]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002734:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002738:	4b1d      	ldr	r3, [pc, #116]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800273a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800273e:	4a1c      	ldr	r2, [pc, #112]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002740:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002744:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002748:	4a19      	ldr	r2, [pc, #100]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d016      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275a:	f7fe fd33 	bl	80011c4 <HAL_GetTick>
 800275e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002760:	e00b      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002762:	f7fe fd2f 	bl	80011c4 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002770:	4293      	cmp	r3, r2
 8002772:	d902      	bls.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	74fb      	strb	r3, [r7, #19]
            break;
 8002778:	e006      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800277a:	4b0d      	ldr	r3, [pc, #52]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0ec      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002788:	7cfb      	ldrb	r3, [r7, #19]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10c      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800278e:	4b08      	ldr	r3, [pc, #32]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002794:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800279e:	4904      	ldr	r1, [pc, #16]	@ (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80027a6:	e009      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027a8:	7cfb      	ldrb	r3, [r7, #19]
 80027aa:	74bb      	strb	r3, [r7, #18]
 80027ac:	e006      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80027ae:	bf00      	nop
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b8:	7cfb      	ldrb	r3, [r7, #19]
 80027ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027bc:	7c7b      	ldrb	r3, [r7, #17]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d105      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c2:	4b9e      	ldr	r3, [pc, #632]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c6:	4a9d      	ldr	r2, [pc, #628]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00a      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027da:	4b98      	ldr	r3, [pc, #608]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e0:	f023 0203 	bic.w	r2, r3, #3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e8:	4994      	ldr	r1, [pc, #592]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00a      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027fc:	4b8f      	ldr	r3, [pc, #572]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002802:	f023 020c 	bic.w	r2, r3, #12
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800280a:	498c      	ldr	r1, [pc, #560]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280c:	4313      	orrs	r3, r2
 800280e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00a      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800281e:	4b87      	ldr	r3, [pc, #540]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002824:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282c:	4983      	ldr	r1, [pc, #524]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282e:	4313      	orrs	r3, r2
 8002830:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00a      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002840:	4b7e      	ldr	r3, [pc, #504]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002846:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284e:	497b      	ldr	r1, [pc, #492]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002850:	4313      	orrs	r3, r2
 8002852:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0310 	and.w	r3, r3, #16
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00a      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002862:	4b76      	ldr	r3, [pc, #472]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002868:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002870:	4972      	ldr	r1, [pc, #456]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002872:	4313      	orrs	r3, r2
 8002874:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0320 	and.w	r3, r3, #32
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00a      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002884:	4b6d      	ldr	r3, [pc, #436]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800288a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002892:	496a      	ldr	r1, [pc, #424]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00a      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028a6:	4b65      	ldr	r3, [pc, #404]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b4:	4961      	ldr	r1, [pc, #388]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00a      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028c8:	4b5c      	ldr	r3, [pc, #368]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028d6:	4959      	ldr	r1, [pc, #356]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00a      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028ea:	4b54      	ldr	r3, [pc, #336]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028f8:	4950      	ldr	r1, [pc, #320]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800290c:	4b4b      	ldr	r3, [pc, #300]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002912:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800291a:	4948      	ldr	r1, [pc, #288]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800292e:	4b43      	ldr	r3, [pc, #268]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002934:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293c:	493f      	ldr	r1, [pc, #252]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d028      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002950:	4b3a      	ldr	r3, [pc, #232]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002956:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800295e:	4937      	ldr	r1, [pc, #220]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800296a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800296e:	d106      	bne.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002970:	4b32      	ldr	r3, [pc, #200]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4a31      	ldr	r2, [pc, #196]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002976:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800297a:	60d3      	str	r3, [r2, #12]
 800297c:	e011      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002982:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002986:	d10c      	bne.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3304      	adds	r3, #4
 800298c:	2101      	movs	r1, #1
 800298e:	4618      	mov	r0, r3
 8002990:	f000 f8c8 	bl	8002b24 <RCCEx_PLLSAI1_Config>
 8002994:	4603      	mov	r3, r0
 8002996:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002998:	7cfb      	ldrb	r3, [r7, #19]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800299e:	7cfb      	ldrb	r3, [r7, #19]
 80029a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d028      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029ae:	4b23      	ldr	r3, [pc, #140]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029bc:	491f      	ldr	r1, [pc, #124]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029cc:	d106      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029ce:	4b1b      	ldr	r3, [pc, #108]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	4a1a      	ldr	r2, [pc, #104]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029d8:	60d3      	str	r3, [r2, #12]
 80029da:	e011      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029e4:	d10c      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3304      	adds	r3, #4
 80029ea:	2101      	movs	r1, #1
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 f899 	bl	8002b24 <RCCEx_PLLSAI1_Config>
 80029f2:	4603      	mov	r3, r0
 80029f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029f6:	7cfb      	ldrb	r3, [r7, #19]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80029fc:	7cfb      	ldrb	r3, [r7, #19]
 80029fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d02b      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a1a:	4908      	ldr	r1, [pc, #32]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a2a:	d109      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a2c:	4b03      	ldr	r3, [pc, #12]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	4a02      	ldr	r2, [pc, #8]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a36:	60d3      	str	r3, [r2, #12]
 8002a38:	e014      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a3a:	bf00      	nop
 8002a3c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a48:	d10c      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	2101      	movs	r1, #1
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 f867 	bl	8002b24 <RCCEx_PLLSAI1_Config>
 8002a56:	4603      	mov	r3, r0
 8002a58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a5a:	7cfb      	ldrb	r3, [r7, #19]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a60:	7cfb      	ldrb	r3, [r7, #19]
 8002a62:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d02f      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a70:	4b2b      	ldr	r3, [pc, #172]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a76:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a7e:	4928      	ldr	r1, [pc, #160]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a8e:	d10d      	bne.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3304      	adds	r3, #4
 8002a94:	2102      	movs	r1, #2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 f844 	bl	8002b24 <RCCEx_PLLSAI1_Config>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aa0:	7cfb      	ldrb	r3, [r7, #19]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d014      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002aa6:	7cfb      	ldrb	r3, [r7, #19]
 8002aa8:	74bb      	strb	r3, [r7, #18]
 8002aaa:	e011      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ab0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3320      	adds	r3, #32
 8002aba:	2102      	movs	r1, #2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 f925 	bl	8002d0c <RCCEx_PLLSAI2_Config>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ac6:	7cfb      	ldrb	r3, [r7, #19]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002acc:	7cfb      	ldrb	r3, [r7, #19]
 8002ace:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00a      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002adc:	4b10      	ldr	r3, [pc, #64]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002aea:	490d      	ldr	r1, [pc, #52]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00b      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002afe:	4b08      	ldr	r3, [pc, #32]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b04:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b0e:	4904      	ldr	r1, [pc, #16]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b16:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40021000 	.word	0x40021000

08002b24 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b32:	4b75      	ldr	r3, [pc, #468]	@ (8002d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d018      	beq.n	8002b70 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b3e:	4b72      	ldr	r3, [pc, #456]	@ (8002d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f003 0203 	and.w	r2, r3, #3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d10d      	bne.n	8002b6a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
       ||
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d009      	beq.n	8002b6a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b56:	4b6c      	ldr	r3, [pc, #432]	@ (8002d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	091b      	lsrs	r3, r3, #4
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
       ||
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d047      	beq.n	8002bfa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
 8002b6e:	e044      	b.n	8002bfa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d018      	beq.n	8002baa <RCCEx_PLLSAI1_Config+0x86>
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d825      	bhi.n	8002bc8 <RCCEx_PLLSAI1_Config+0xa4>
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d002      	beq.n	8002b86 <RCCEx_PLLSAI1_Config+0x62>
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d009      	beq.n	8002b98 <RCCEx_PLLSAI1_Config+0x74>
 8002b84:	e020      	b.n	8002bc8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b86:	4b60      	ldr	r3, [pc, #384]	@ (8002d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d11d      	bne.n	8002bce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b96:	e01a      	b.n	8002bce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b98:	4b5b      	ldr	r3, [pc, #364]	@ (8002d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d116      	bne.n	8002bd2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba8:	e013      	b.n	8002bd2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002baa:	4b57      	ldr	r3, [pc, #348]	@ (8002d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10f      	bne.n	8002bd6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bb6:	4b54      	ldr	r3, [pc, #336]	@ (8002d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d109      	bne.n	8002bd6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bc6:	e006      	b.n	8002bd6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
      break;
 8002bcc:	e004      	b.n	8002bd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bce:	bf00      	nop
 8002bd0:	e002      	b.n	8002bd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bd2:	bf00      	nop
 8002bd4:	e000      	b.n	8002bd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bd6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10d      	bne.n	8002bfa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bde:	4b4a      	ldr	r3, [pc, #296]	@ (8002d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6819      	ldr	r1, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	430b      	orrs	r3, r1
 8002bf4:	4944      	ldr	r1, [pc, #272]	@ (8002d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d17d      	bne.n	8002cfc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c00:	4b41      	ldr	r3, [pc, #260]	@ (8002d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a40      	ldr	r2, [pc, #256]	@ (8002d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002c0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c0c:	f7fe fada 	bl	80011c4 <HAL_GetTick>
 8002c10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c12:	e009      	b.n	8002c28 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c14:	f7fe fad6 	bl	80011c4 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d902      	bls.n	8002c28 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	73fb      	strb	r3, [r7, #15]
        break;
 8002c26:	e005      	b.n	8002c34 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c28:	4b37      	ldr	r3, [pc, #220]	@ (8002d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1ef      	bne.n	8002c14 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d160      	bne.n	8002cfc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d111      	bne.n	8002c64 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c40:	4b31      	ldr	r3, [pc, #196]	@ (8002d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6892      	ldr	r2, [r2, #8]
 8002c50:	0211      	lsls	r1, r2, #8
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68d2      	ldr	r2, [r2, #12]
 8002c56:	0912      	lsrs	r2, r2, #4
 8002c58:	0452      	lsls	r2, r2, #17
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	492a      	ldr	r1, [pc, #168]	@ (8002d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	610b      	str	r3, [r1, #16]
 8002c62:	e027      	b.n	8002cb4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d112      	bne.n	8002c90 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c6a:	4b27      	ldr	r3, [pc, #156]	@ (8002d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002c72:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6892      	ldr	r2, [r2, #8]
 8002c7a:	0211      	lsls	r1, r2, #8
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6912      	ldr	r2, [r2, #16]
 8002c80:	0852      	lsrs	r2, r2, #1
 8002c82:	3a01      	subs	r2, #1
 8002c84:	0552      	lsls	r2, r2, #21
 8002c86:	430a      	orrs	r2, r1
 8002c88:	491f      	ldr	r1, [pc, #124]	@ (8002d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	610b      	str	r3, [r1, #16]
 8002c8e:	e011      	b.n	8002cb4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c90:	4b1d      	ldr	r3, [pc, #116]	@ (8002d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c98:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6892      	ldr	r2, [r2, #8]
 8002ca0:	0211      	lsls	r1, r2, #8
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6952      	ldr	r2, [r2, #20]
 8002ca6:	0852      	lsrs	r2, r2, #1
 8002ca8:	3a01      	subs	r2, #1
 8002caa:	0652      	lsls	r2, r2, #25
 8002cac:	430a      	orrs	r2, r1
 8002cae:	4916      	ldr	r1, [pc, #88]	@ (8002d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002cb4:	4b14      	ldr	r3, [pc, #80]	@ (8002d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a13      	ldr	r2, [pc, #76]	@ (8002d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002cbe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc0:	f7fe fa80 	bl	80011c4 <HAL_GetTick>
 8002cc4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cc6:	e009      	b.n	8002cdc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cc8:	f7fe fa7c 	bl	80011c4 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d902      	bls.n	8002cdc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	73fb      	strb	r3, [r7, #15]
          break;
 8002cda:	e005      	b.n	8002ce8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0ef      	beq.n	8002cc8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d106      	bne.n	8002cfc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002cee:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf0:	691a      	ldr	r2, [r3, #16]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	4904      	ldr	r1, [pc, #16]	@ (8002d08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40021000 	.word	0x40021000

08002d0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d1a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d018      	beq.n	8002d58 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d26:	4b67      	ldr	r3, [pc, #412]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f003 0203 	and.w	r2, r3, #3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d10d      	bne.n	8002d52 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
       ||
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d009      	beq.n	8002d52 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d3e:	4b61      	ldr	r3, [pc, #388]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	091b      	lsrs	r3, r3, #4
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
       ||
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d047      	beq.n	8002de2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	73fb      	strb	r3, [r7, #15]
 8002d56:	e044      	b.n	8002de2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d018      	beq.n	8002d92 <RCCEx_PLLSAI2_Config+0x86>
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d825      	bhi.n	8002db0 <RCCEx_PLLSAI2_Config+0xa4>
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d002      	beq.n	8002d6e <RCCEx_PLLSAI2_Config+0x62>
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d009      	beq.n	8002d80 <RCCEx_PLLSAI2_Config+0x74>
 8002d6c:	e020      	b.n	8002db0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d6e:	4b55      	ldr	r3, [pc, #340]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d11d      	bne.n	8002db6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d7e:	e01a      	b.n	8002db6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d80:	4b50      	ldr	r3, [pc, #320]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d116      	bne.n	8002dba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d90:	e013      	b.n	8002dba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d92:	4b4c      	ldr	r3, [pc, #304]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10f      	bne.n	8002dbe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d9e:	4b49      	ldr	r3, [pc, #292]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d109      	bne.n	8002dbe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dae:	e006      	b.n	8002dbe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	73fb      	strb	r3, [r7, #15]
      break;
 8002db4:	e004      	b.n	8002dc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002db6:	bf00      	nop
 8002db8:	e002      	b.n	8002dc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dba:	bf00      	nop
 8002dbc:	e000      	b.n	8002dc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10d      	bne.n	8002de2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dc6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6819      	ldr	r1, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	430b      	orrs	r3, r1
 8002ddc:	4939      	ldr	r1, [pc, #228]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d167      	bne.n	8002eb8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002de8:	4b36      	ldr	r3, [pc, #216]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a35      	ldr	r2, [pc, #212]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002df2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002df4:	f7fe f9e6 	bl	80011c4 <HAL_GetTick>
 8002df8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dfa:	e009      	b.n	8002e10 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002dfc:	f7fe f9e2 	bl	80011c4 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d902      	bls.n	8002e10 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	73fb      	strb	r3, [r7, #15]
        break;
 8002e0e:	e005      	b.n	8002e1c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e10:	4b2c      	ldr	r3, [pc, #176]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1ef      	bne.n	8002dfc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d14a      	bne.n	8002eb8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d111      	bne.n	8002e4c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e28:	4b26      	ldr	r3, [pc, #152]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002e30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6892      	ldr	r2, [r2, #8]
 8002e38:	0211      	lsls	r1, r2, #8
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68d2      	ldr	r2, [r2, #12]
 8002e3e:	0912      	lsrs	r2, r2, #4
 8002e40:	0452      	lsls	r2, r2, #17
 8002e42:	430a      	orrs	r2, r1
 8002e44:	491f      	ldr	r1, [pc, #124]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	614b      	str	r3, [r1, #20]
 8002e4a:	e011      	b.n	8002e70 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002e54:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6892      	ldr	r2, [r2, #8]
 8002e5c:	0211      	lsls	r1, r2, #8
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6912      	ldr	r2, [r2, #16]
 8002e62:	0852      	lsrs	r2, r2, #1
 8002e64:	3a01      	subs	r2, #1
 8002e66:	0652      	lsls	r2, r2, #25
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	4916      	ldr	r1, [pc, #88]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e70:	4b14      	ldr	r3, [pc, #80]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a13      	ldr	r2, [pc, #76]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7c:	f7fe f9a2 	bl	80011c4 <HAL_GetTick>
 8002e80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e82:	e009      	b.n	8002e98 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e84:	f7fe f99e 	bl	80011c4 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d902      	bls.n	8002e98 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	73fb      	strb	r3, [r7, #15]
          break;
 8002e96:	e005      	b.n	8002ea4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e98:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0ef      	beq.n	8002e84 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002eaa:	4b06      	ldr	r3, [pc, #24]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	4904      	ldr	r1, [pc, #16]	@ (8002ec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40021000 	.word	0x40021000

08002ec8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e095      	b.n	8003006 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d108      	bne.n	8002ef4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002eea:	d009      	beq.n	8002f00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	61da      	str	r2, [r3, #28]
 8002ef2:	e005      	b.n	8002f00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d106      	bne.n	8002f20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fd fe82 	bl	8000c24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f40:	d902      	bls.n	8002f48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	e002      	b.n	8002f4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002f56:	d007      	beq.n	8002f68 <HAL_SPI_Init+0xa0>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f60:	d002      	beq.n	8002f68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002faa:	ea42 0103 	orr.w	r1, r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	0c1b      	lsrs	r3, r3, #16
 8002fc4:	f003 0204 	and.w	r2, r3, #4
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002fe4:	ea42 0103 	orr.w	r1, r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b088      	sub	sp, #32
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	603b      	str	r3, [r7, #0]
 800301a:	4613      	mov	r3, r2
 800301c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800301e:	f7fe f8d1 	bl	80011c4 <HAL_GetTick>
 8003022:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003024:	88fb      	ldrh	r3, [r7, #6]
 8003026:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b01      	cmp	r3, #1
 8003032:	d001      	beq.n	8003038 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003034:	2302      	movs	r3, #2
 8003036:	e15c      	b.n	80032f2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <HAL_SPI_Transmit+0x36>
 800303e:	88fb      	ldrh	r3, [r7, #6]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e154      	b.n	80032f2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_SPI_Transmit+0x48>
 8003052:	2302      	movs	r3, #2
 8003054:	e14d      	b.n	80032f2 <HAL_SPI_Transmit+0x2e4>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2203      	movs	r2, #3
 8003062:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	88fa      	ldrh	r2, [r7, #6]
 8003076:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	88fa      	ldrh	r2, [r7, #6]
 800307c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030a8:	d10f      	bne.n	80030ca <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d4:	2b40      	cmp	r3, #64	@ 0x40
 80030d6:	d007      	beq.n	80030e8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030f0:	d952      	bls.n	8003198 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <HAL_SPI_Transmit+0xf2>
 80030fa:	8b7b      	ldrh	r3, [r7, #26]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d145      	bne.n	800318c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003104:	881a      	ldrh	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003110:	1c9a      	adds	r2, r3, #2
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003124:	e032      	b.n	800318c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b02      	cmp	r3, #2
 8003132:	d112      	bne.n	800315a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003138:	881a      	ldrh	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003144:	1c9a      	adds	r2, r3, #2
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800314e:	b29b      	uxth	r3, r3
 8003150:	3b01      	subs	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003158:	e018      	b.n	800318c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800315a:	f7fe f833 	bl	80011c4 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d803      	bhi.n	8003172 <HAL_SPI_Transmit+0x164>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003170:	d102      	bne.n	8003178 <HAL_SPI_Transmit+0x16a>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d109      	bne.n	800318c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e0b2      	b.n	80032f2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1c7      	bne.n	8003126 <HAL_SPI_Transmit+0x118>
 8003196:	e083      	b.n	80032a0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <HAL_SPI_Transmit+0x198>
 80031a0:	8b7b      	ldrh	r3, [r7, #26]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d177      	bne.n	8003296 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d912      	bls.n	80031d6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b4:	881a      	ldrh	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c0:	1c9a      	adds	r2, r3, #2
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	3b02      	subs	r3, #2
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031d4:	e05f      	b.n	8003296 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	330c      	adds	r3, #12
 80031e0:	7812      	ldrb	r2, [r2, #0]
 80031e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80031fc:	e04b      	b.n	8003296 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b02      	cmp	r3, #2
 800320a:	d12b      	bne.n	8003264 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003210:	b29b      	uxth	r3, r3
 8003212:	2b01      	cmp	r3, #1
 8003214:	d912      	bls.n	800323c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321a:	881a      	ldrh	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003226:	1c9a      	adds	r2, r3, #2
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003230:	b29b      	uxth	r3, r3
 8003232:	3b02      	subs	r3, #2
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800323a:	e02c      	b.n	8003296 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	330c      	adds	r3, #12
 8003246:	7812      	ldrb	r2, [r2, #0]
 8003248:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003258:	b29b      	uxth	r3, r3
 800325a:	3b01      	subs	r3, #1
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003262:	e018      	b.n	8003296 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003264:	f7fd ffae 	bl	80011c4 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	d803      	bhi.n	800327c <HAL_SPI_Transmit+0x26e>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327a:	d102      	bne.n	8003282 <HAL_SPI_Transmit+0x274>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d109      	bne.n	8003296 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e02d      	b.n	80032f2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800329a:	b29b      	uxth	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1ae      	bne.n	80031fe <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032a0:	69fa      	ldr	r2, [r7, #28]
 80032a2:	6839      	ldr	r1, [r7, #0]
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f947 	bl	8003538 <SPI_EndRxTxTransaction>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2220      	movs	r2, #32
 80032b4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10a      	bne.n	80032d4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032be:	2300      	movs	r3, #0
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	617b      	str	r3, [r7, #20]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e000      	b.n	80032f2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80032f0:	2300      	movs	r3, #0
  }
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3720      	adds	r7, #32
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
	...

080032fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b088      	sub	sp, #32
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	603b      	str	r3, [r7, #0]
 8003308:	4613      	mov	r3, r2
 800330a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800330c:	f7fd ff5a 	bl	80011c4 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003314:	1a9b      	subs	r3, r3, r2
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	4413      	add	r3, r2
 800331a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800331c:	f7fd ff52 	bl	80011c4 <HAL_GetTick>
 8003320:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003322:	4b39      	ldr	r3, [pc, #228]	@ (8003408 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	015b      	lsls	r3, r3, #5
 8003328:	0d1b      	lsrs	r3, r3, #20
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	fb02 f303 	mul.w	r3, r2, r3
 8003330:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003332:	e054      	b.n	80033de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333a:	d050      	beq.n	80033de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800333c:	f7fd ff42 	bl	80011c4 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	69fa      	ldr	r2, [r7, #28]
 8003348:	429a      	cmp	r2, r3
 800334a:	d902      	bls.n	8003352 <SPI_WaitFlagStateUntilTimeout+0x56>
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d13d      	bne.n	80033ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003360:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800336a:	d111      	bne.n	8003390 <SPI_WaitFlagStateUntilTimeout+0x94>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003374:	d004      	beq.n	8003380 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800337e:	d107      	bne.n	8003390 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800338e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003394:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003398:	d10f      	bne.n	80033ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e017      	b.n	80033fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	3b01      	subs	r3, #1
 80033dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	4013      	ands	r3, r2
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	bf0c      	ite	eq
 80033ee:	2301      	moveq	r3, #1
 80033f0:	2300      	movne	r3, #0
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	461a      	mov	r2, r3
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d19b      	bne.n	8003334 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3720      	adds	r7, #32
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20000000 	.word	0x20000000

0800340c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b08a      	sub	sp, #40	@ 0x28
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
 8003418:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800341e:	f7fd fed1 	bl	80011c4 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	4413      	add	r3, r2
 800342c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800342e:	f7fd fec9 	bl	80011c4 <HAL_GetTick>
 8003432:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	330c      	adds	r3, #12
 800343a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800343c:	4b3d      	ldr	r3, [pc, #244]	@ (8003534 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	00da      	lsls	r2, r3, #3
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	0d1b      	lsrs	r3, r3, #20
 800344c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800344e:	fb02 f303 	mul.w	r3, r2, r3
 8003452:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003454:	e060      	b.n	8003518 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800345c:	d107      	bne.n	800346e <SPI_WaitFifoStateUntilTimeout+0x62>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d104      	bne.n	800346e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	b2db      	uxtb	r3, r3
 800346a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800346c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003474:	d050      	beq.n	8003518 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003476:	f7fd fea5 	bl	80011c4 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003482:	429a      	cmp	r2, r3
 8003484:	d902      	bls.n	800348c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003488:	2b00      	cmp	r3, #0
 800348a:	d13d      	bne.n	8003508 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800349a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034a4:	d111      	bne.n	80034ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034ae:	d004      	beq.n	80034ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034b8:	d107      	bne.n	80034ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034d2:	d10f      	bne.n	80034f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e010      	b.n	800352a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	3b01      	subs	r3, #1
 8003516:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	4013      	ands	r3, r2
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	429a      	cmp	r2, r3
 8003526:	d196      	bne.n	8003456 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3728      	adds	r7, #40	@ 0x28
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	20000000 	.word	0x20000000

08003538 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af02      	add	r7, sp, #8
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2200      	movs	r2, #0
 800354c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f7ff ff5b 	bl	800340c <SPI_WaitFifoStateUntilTimeout>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d007      	beq.n	800356c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003560:	f043 0220 	orr.w	r2, r3, #32
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e027      	b.n	80035bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2200      	movs	r2, #0
 8003574:	2180      	movs	r1, #128	@ 0x80
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f7ff fec0 	bl	80032fc <SPI_WaitFlagStateUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d007      	beq.n	8003592 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003586:	f043 0220 	orr.w	r2, r3, #32
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e014      	b.n	80035bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2200      	movs	r2, #0
 800359a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f7ff ff34 	bl	800340c <SPI_WaitFifoStateUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d007      	beq.n	80035ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ae:	f043 0220 	orr.w	r2, r3, #32
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e000      	b.n	80035bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e049      	b.n	800366a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d106      	bne.n	80035f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f841 	bl	8003672 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3304      	adds	r3, #4
 8003600:	4619      	mov	r1, r3
 8003602:	4610      	mov	r0, r2
 8003604:	f000 f9e0 	bl	80039c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
	...

08003688 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b01      	cmp	r3, #1
 800369a:	d001      	beq.n	80036a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e04f      	b.n	8003740 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a23      	ldr	r2, [pc, #140]	@ (800374c <HAL_TIM_Base_Start_IT+0xc4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d01d      	beq.n	80036fe <HAL_TIM_Base_Start_IT+0x76>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ca:	d018      	beq.n	80036fe <HAL_TIM_Base_Start_IT+0x76>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003750 <HAL_TIM_Base_Start_IT+0xc8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d013      	beq.n	80036fe <HAL_TIM_Base_Start_IT+0x76>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a1e      	ldr	r2, [pc, #120]	@ (8003754 <HAL_TIM_Base_Start_IT+0xcc>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d00e      	beq.n	80036fe <HAL_TIM_Base_Start_IT+0x76>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003758 <HAL_TIM_Base_Start_IT+0xd0>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d009      	beq.n	80036fe <HAL_TIM_Base_Start_IT+0x76>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a1b      	ldr	r2, [pc, #108]	@ (800375c <HAL_TIM_Base_Start_IT+0xd4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d004      	beq.n	80036fe <HAL_TIM_Base_Start_IT+0x76>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a19      	ldr	r2, [pc, #100]	@ (8003760 <HAL_TIM_Base_Start_IT+0xd8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d115      	bne.n	800372a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	4b17      	ldr	r3, [pc, #92]	@ (8003764 <HAL_TIM_Base_Start_IT+0xdc>)
 8003706:	4013      	ands	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2b06      	cmp	r3, #6
 800370e:	d015      	beq.n	800373c <HAL_TIM_Base_Start_IT+0xb4>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003716:	d011      	beq.n	800373c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003728:	e008      	b.n	800373c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0201 	orr.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	e000      	b.n	800373e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	40012c00 	.word	0x40012c00
 8003750:	40000400 	.word	0x40000400
 8003754:	40000800 	.word	0x40000800
 8003758:	40000c00 	.word	0x40000c00
 800375c:	40013400 	.word	0x40013400
 8003760:	40014000 	.word	0x40014000
 8003764:	00010007 	.word	0x00010007

08003768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d020      	beq.n	80037cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d01b      	beq.n	80037cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0202 	mvn.w	r2, #2
 800379c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f8e9 	bl	800398a <HAL_TIM_IC_CaptureCallback>
 80037b8:	e005      	b.n	80037c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f8db 	bl	8003976 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f8ec 	bl	800399e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d020      	beq.n	8003818 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d01b      	beq.n	8003818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0204 	mvn.w	r2, #4
 80037e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2202      	movs	r2, #2
 80037ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f8c3 	bl	800398a <HAL_TIM_IC_CaptureCallback>
 8003804:	e005      	b.n	8003812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f8b5 	bl	8003976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f8c6 	bl	800399e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d020      	beq.n	8003864 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b00      	cmp	r3, #0
 800382a:	d01b      	beq.n	8003864 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0208 	mvn.w	r2, #8
 8003834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2204      	movs	r2, #4
 800383a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f89d 	bl	800398a <HAL_TIM_IC_CaptureCallback>
 8003850:	e005      	b.n	800385e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f88f 	bl	8003976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f8a0 	bl	800399e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	2b00      	cmp	r3, #0
 800386c:	d020      	beq.n	80038b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b00      	cmp	r3, #0
 8003876:	d01b      	beq.n	80038b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0210 	mvn.w	r2, #16
 8003880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2208      	movs	r2, #8
 8003886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f877 	bl	800398a <HAL_TIM_IC_CaptureCallback>
 800389c:	e005      	b.n	80038aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f869 	bl	8003976 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f87a 	bl	800399e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00c      	beq.n	80038d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d007      	beq.n	80038d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0201 	mvn.w	r2, #1
 80038cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fd f952 	bl	8000b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d104      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00c      	beq.n	8003902 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d007      	beq.n	8003902 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80038fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f913 	bl	8003b28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00c      	beq.n	8003926 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003912:	2b00      	cmp	r3, #0
 8003914:	d007      	beq.n	8003926 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800391e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f90b 	bl	8003b3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00c      	beq.n	800394a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003936:	2b00      	cmp	r3, #0
 8003938:	d007      	beq.n	800394a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f834 	bl	80039b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00c      	beq.n	800396e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b00      	cmp	r3, #0
 800395c:	d007      	beq.n	800396e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f06f 0220 	mvn.w	r2, #32
 8003966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f8d3 	bl	8003b14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800396e:	bf00      	nop
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800399e:	b480      	push	{r7}
 80039a0:	b083      	sub	sp, #12
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039a6:	bf00      	nop
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
	...

080039c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a46      	ldr	r2, [pc, #280]	@ (8003af4 <TIM_Base_SetConfig+0x12c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d013      	beq.n	8003a08 <TIM_Base_SetConfig+0x40>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039e6:	d00f      	beq.n	8003a08 <TIM_Base_SetConfig+0x40>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a43      	ldr	r2, [pc, #268]	@ (8003af8 <TIM_Base_SetConfig+0x130>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00b      	beq.n	8003a08 <TIM_Base_SetConfig+0x40>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a42      	ldr	r2, [pc, #264]	@ (8003afc <TIM_Base_SetConfig+0x134>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d007      	beq.n	8003a08 <TIM_Base_SetConfig+0x40>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a41      	ldr	r2, [pc, #260]	@ (8003b00 <TIM_Base_SetConfig+0x138>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d003      	beq.n	8003a08 <TIM_Base_SetConfig+0x40>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a40      	ldr	r2, [pc, #256]	@ (8003b04 <TIM_Base_SetConfig+0x13c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d108      	bne.n	8003a1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a35      	ldr	r2, [pc, #212]	@ (8003af4 <TIM_Base_SetConfig+0x12c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d01f      	beq.n	8003a62 <TIM_Base_SetConfig+0x9a>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a28:	d01b      	beq.n	8003a62 <TIM_Base_SetConfig+0x9a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a32      	ldr	r2, [pc, #200]	@ (8003af8 <TIM_Base_SetConfig+0x130>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d017      	beq.n	8003a62 <TIM_Base_SetConfig+0x9a>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a31      	ldr	r2, [pc, #196]	@ (8003afc <TIM_Base_SetConfig+0x134>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d013      	beq.n	8003a62 <TIM_Base_SetConfig+0x9a>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a30      	ldr	r2, [pc, #192]	@ (8003b00 <TIM_Base_SetConfig+0x138>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00f      	beq.n	8003a62 <TIM_Base_SetConfig+0x9a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a2f      	ldr	r2, [pc, #188]	@ (8003b04 <TIM_Base_SetConfig+0x13c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d00b      	beq.n	8003a62 <TIM_Base_SetConfig+0x9a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a2e      	ldr	r2, [pc, #184]	@ (8003b08 <TIM_Base_SetConfig+0x140>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d007      	beq.n	8003a62 <TIM_Base_SetConfig+0x9a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a2d      	ldr	r2, [pc, #180]	@ (8003b0c <TIM_Base_SetConfig+0x144>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d003      	beq.n	8003a62 <TIM_Base_SetConfig+0x9a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a2c      	ldr	r2, [pc, #176]	@ (8003b10 <TIM_Base_SetConfig+0x148>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d108      	bne.n	8003a74 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a16      	ldr	r2, [pc, #88]	@ (8003af4 <TIM_Base_SetConfig+0x12c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d00f      	beq.n	8003ac0 <TIM_Base_SetConfig+0xf8>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a18      	ldr	r2, [pc, #96]	@ (8003b04 <TIM_Base_SetConfig+0x13c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d00b      	beq.n	8003ac0 <TIM_Base_SetConfig+0xf8>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a17      	ldr	r2, [pc, #92]	@ (8003b08 <TIM_Base_SetConfig+0x140>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d007      	beq.n	8003ac0 <TIM_Base_SetConfig+0xf8>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a16      	ldr	r2, [pc, #88]	@ (8003b0c <TIM_Base_SetConfig+0x144>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d003      	beq.n	8003ac0 <TIM_Base_SetConfig+0xf8>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a15      	ldr	r2, [pc, #84]	@ (8003b10 <TIM_Base_SetConfig+0x148>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d103      	bne.n	8003ac8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d105      	bne.n	8003ae6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f023 0201 	bic.w	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	611a      	str	r2, [r3, #16]
  }
}
 8003ae6:	bf00      	nop
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40012c00 	.word	0x40012c00
 8003af8:	40000400 	.word	0x40000400
 8003afc:	40000800 	.word	0x40000800
 8003b00:	40000c00 	.word	0x40000c00
 8003b04:	40013400 	.word	0x40013400
 8003b08:	40014000 	.word	0x40014000
 8003b0c:	40014400 	.word	0x40014400
 8003b10:	40014800 	.word	0x40014800

08003b14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e040      	b.n	8003be4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fd fa64 	bl	8001040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2224      	movs	r2, #36	@ 0x24
 8003b7c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0201 	bic.w	r2, r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d002      	beq.n	8003b9c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 ff58 	bl	8004a4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 fc9d 	bl	80044dc <UART_SetConfig>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e01b      	b.n	8003be4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 ffd7 	bl	8004b90 <UART_CheckIdleState>
 8003be2:	4603      	mov	r3, r0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08a      	sub	sp, #40	@ 0x28
 8003bf0:	af02      	add	r7, sp, #8
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	d177      	bne.n	8003cf4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <HAL_UART_Transmit+0x24>
 8003c0a:	88fb      	ldrh	r3, [r7, #6]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e070      	b.n	8003cf6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2221      	movs	r2, #33	@ 0x21
 8003c20:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c22:	f7fd facf 	bl	80011c4 <HAL_GetTick>
 8003c26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	88fa      	ldrh	r2, [r7, #6]
 8003c2c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	88fa      	ldrh	r2, [r7, #6]
 8003c34:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c40:	d108      	bne.n	8003c54 <HAL_UART_Transmit+0x68>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d104      	bne.n	8003c54 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	61bb      	str	r3, [r7, #24]
 8003c52:	e003      	b.n	8003c5c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c5c:	e02f      	b.n	8003cbe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2200      	movs	r2, #0
 8003c66:	2180      	movs	r1, #128	@ 0x80
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f001 f839 	bl	8004ce0 <UART_WaitOnFlagUntilTimeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d004      	beq.n	8003c7e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e03b      	b.n	8003cf6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10b      	bne.n	8003c9c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	881a      	ldrh	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c90:	b292      	uxth	r2, r2
 8003c92:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	3302      	adds	r3, #2
 8003c98:	61bb      	str	r3, [r7, #24]
 8003c9a:	e007      	b.n	8003cac <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	781a      	ldrb	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1c9      	bne.n	8003c5e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	2140      	movs	r1, #64	@ 0x40
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f001 f803 	bl	8004ce0 <UART_WaitOnFlagUntilTimeout>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d004      	beq.n	8003cea <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e005      	b.n	8003cf6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2220      	movs	r2, #32
 8003cee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e000      	b.n	8003cf6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003cf4:	2302      	movs	r3, #2
  }
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3720      	adds	r7, #32
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b08a      	sub	sp, #40	@ 0x28
 8003d02:	af02      	add	r7, sp, #8
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	603b      	str	r3, [r7, #0]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d14:	2b20      	cmp	r3, #32
 8003d16:	f040 80b6 	bne.w	8003e86 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d002      	beq.n	8003d26 <HAL_UART_Receive+0x28>
 8003d20:	88fb      	ldrh	r3, [r7, #6]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e0ae      	b.n	8003e88 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2222      	movs	r2, #34	@ 0x22
 8003d36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d40:	f7fd fa40 	bl	80011c4 <HAL_GetTick>
 8003d44:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	88fa      	ldrh	r2, [r7, #6]
 8003d4a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	88fa      	ldrh	r2, [r7, #6]
 8003d52:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d5e:	d10e      	bne.n	8003d7e <HAL_UART_Receive+0x80>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d105      	bne.n	8003d74 <HAL_UART_Receive+0x76>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003d6e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003d72:	e02d      	b.n	8003dd0 <HAL_UART_Receive+0xd2>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	22ff      	movs	r2, #255	@ 0xff
 8003d78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003d7c:	e028      	b.n	8003dd0 <HAL_UART_Receive+0xd2>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10d      	bne.n	8003da2 <HAL_UART_Receive+0xa4>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d104      	bne.n	8003d98 <HAL_UART_Receive+0x9a>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	22ff      	movs	r2, #255	@ 0xff
 8003d92:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003d96:	e01b      	b.n	8003dd0 <HAL_UART_Receive+0xd2>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	227f      	movs	r2, #127	@ 0x7f
 8003d9c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003da0:	e016      	b.n	8003dd0 <HAL_UART_Receive+0xd2>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003daa:	d10d      	bne.n	8003dc8 <HAL_UART_Receive+0xca>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d104      	bne.n	8003dbe <HAL_UART_Receive+0xc0>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	227f      	movs	r2, #127	@ 0x7f
 8003db8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003dbc:	e008      	b.n	8003dd0 <HAL_UART_Receive+0xd2>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	223f      	movs	r2, #63	@ 0x3f
 8003dc2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003dc6:	e003      	b.n	8003dd0 <HAL_UART_Receive+0xd2>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003dd6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003de0:	d108      	bne.n	8003df4 <HAL_UART_Receive+0xf6>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d104      	bne.n	8003df4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003dea:	2300      	movs	r3, #0
 8003dec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	61bb      	str	r3, [r7, #24]
 8003df2:	e003      	b.n	8003dfc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003dfc:	e037      	b.n	8003e6e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2200      	movs	r2, #0
 8003e06:	2120      	movs	r1, #32
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 ff69 	bl	8004ce0 <UART_WaitOnFlagUntilTimeout>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e033      	b.n	8003e88 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10c      	bne.n	8003e40 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	8a7b      	ldrh	r3, [r7, #18]
 8003e30:	4013      	ands	r3, r2
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	3302      	adds	r3, #2
 8003e3c:	61bb      	str	r3, [r7, #24]
 8003e3e:	e00d      	b.n	8003e5c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	8a7b      	ldrh	r3, [r7, #18]
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	4013      	ands	r3, r2
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1c1      	bne.n	8003dfe <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	e000      	b.n	8003e88 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003e86:	2302      	movs	r3, #2
  }
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3720      	adds	r7, #32
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b0ba      	sub	sp, #232	@ 0xe8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003eb6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003eba:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003ec4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d115      	bne.n	8003ef8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00f      	beq.n	8003ef8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003edc:	f003 0320 	and.w	r3, r3, #32
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d009      	beq.n	8003ef8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 82ca 	beq.w	8004482 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	4798      	blx	r3
      }
      return;
 8003ef6:	e2c4      	b.n	8004482 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003ef8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 8117 	beq.w	8004130 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d106      	bne.n	8003f1c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003f0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003f12:	4b85      	ldr	r3, [pc, #532]	@ (8004128 <HAL_UART_IRQHandler+0x298>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 810a 	beq.w	8004130 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d011      	beq.n	8003f4c <HAL_UART_IRQHandler+0xbc>
 8003f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00b      	beq.n	8003f4c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f42:	f043 0201 	orr.w	r2, r3, #1
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d011      	beq.n	8003f7c <HAL_UART_IRQHandler+0xec>
 8003f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00b      	beq.n	8003f7c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2202      	movs	r2, #2
 8003f6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f72:	f043 0204 	orr.w	r2, r3, #4
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d011      	beq.n	8003fac <HAL_UART_IRQHandler+0x11c>
 8003f88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00b      	beq.n	8003fac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2204      	movs	r2, #4
 8003f9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fa2:	f043 0202 	orr.w	r2, r3, #2
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d017      	beq.n	8003fe8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fbc:	f003 0320 	and.w	r3, r3, #32
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d105      	bne.n	8003fd0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fc8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00b      	beq.n	8003fe8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2208      	movs	r2, #8
 8003fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fde:	f043 0208 	orr.w	r2, r3, #8
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d012      	beq.n	800401a <HAL_UART_IRQHandler+0x18a>
 8003ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ff8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00c      	beq.n	800401a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004008:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004010:	f043 0220 	orr.w	r2, r3, #32
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8230 	beq.w	8004486 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00d      	beq.n	800404e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b00      	cmp	r3, #0
 800403c:	d007      	beq.n	800404e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004054:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004062:	2b40      	cmp	r3, #64	@ 0x40
 8004064:	d005      	beq.n	8004072 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004066:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800406a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800406e:	2b00      	cmp	r3, #0
 8004070:	d04f      	beq.n	8004112 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fea1 	bl	8004dba <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004082:	2b40      	cmp	r3, #64	@ 0x40
 8004084:	d141      	bne.n	800410a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3308      	adds	r3, #8
 800408c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004090:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800409c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3308      	adds	r3, #8
 80040ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80040b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80040b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80040be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80040c2:	e841 2300 	strex	r3, r2, [r1]
 80040c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80040ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1d9      	bne.n	8004086 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d013      	beq.n	8004102 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040de:	4a13      	ldr	r2, [pc, #76]	@ (800412c <HAL_UART_IRQHandler+0x29c>)
 80040e0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fd f998 	bl	800141c <HAL_DMA_Abort_IT>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d017      	beq.n	8004122 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80040fc:	4610      	mov	r0, r2
 80040fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004100:	e00f      	b.n	8004122 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f9d4 	bl	80044b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004108:	e00b      	b.n	8004122 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f9d0 	bl	80044b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004110:	e007      	b.n	8004122 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f9cc 	bl	80044b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004120:	e1b1      	b.n	8004486 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004122:	bf00      	nop
    return;
 8004124:	e1af      	b.n	8004486 <HAL_UART_IRQHandler+0x5f6>
 8004126:	bf00      	nop
 8004128:	04000120 	.word	0x04000120
 800412c:	08004e83 	.word	0x08004e83

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004134:	2b01      	cmp	r3, #1
 8004136:	f040 816a 	bne.w	800440e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800413a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800413e:	f003 0310 	and.w	r3, r3, #16
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 8163 	beq.w	800440e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800414c:	f003 0310 	and.w	r3, r3, #16
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 815c 	beq.w	800440e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2210      	movs	r2, #16
 800415c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004168:	2b40      	cmp	r3, #64	@ 0x40
 800416a:	f040 80d4 	bne.w	8004316 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800417a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 80ad 	beq.w	80042de <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800418a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800418e:	429a      	cmp	r2, r3
 8004190:	f080 80a5 	bcs.w	80042de <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800419a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0320 	and.w	r3, r3, #32
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f040 8086 	bne.w	80042bc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80041bc:	e853 3f00 	ldrex	r3, [r3]
 80041c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80041c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	461a      	mov	r2, r3
 80041d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80041da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80041de:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80041e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80041ea:	e841 2300 	strex	r3, r2, [r1]
 80041ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80041f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1da      	bne.n	80041b0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	3308      	adds	r3, #8
 8004200:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004202:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004204:	e853 3f00 	ldrex	r3, [r3]
 8004208:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800420a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800420c:	f023 0301 	bic.w	r3, r3, #1
 8004210:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3308      	adds	r3, #8
 800421a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800421e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004222:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004224:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004226:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800422a:	e841 2300 	strex	r3, r2, [r1]
 800422e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004230:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1e1      	bne.n	80041fa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3308      	adds	r3, #8
 800423c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004240:	e853 3f00 	ldrex	r3, [r3]
 8004244:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004246:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004248:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800424c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	3308      	adds	r3, #8
 8004256:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800425a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800425c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004260:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004262:	e841 2300 	strex	r3, r2, [r1]
 8004266:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004268:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1e3      	bne.n	8004236 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2220      	movs	r2, #32
 8004272:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004282:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004284:	e853 3f00 	ldrex	r3, [r3]
 8004288:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800428a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800428c:	f023 0310 	bic.w	r3, r3, #16
 8004290:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	461a      	mov	r2, r3
 800429a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800429e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80042a0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80042a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80042a6:	e841 2300 	strex	r3, r2, [r1]
 80042aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80042ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1e4      	bne.n	800427c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fd f872 	bl	80013a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	4619      	mov	r1, r3
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f8f4 	bl	80044c4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80042dc:	e0d5      	b.n	800448a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80042e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042e8:	429a      	cmp	r2, r3
 80042ea:	f040 80ce 	bne.w	800448a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0320 	and.w	r3, r3, #32
 80042fa:	2b20      	cmp	r3, #32
 80042fc:	f040 80c5 	bne.w	800448a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800430c:	4619      	mov	r1, r3
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f8d8 	bl	80044c4 <HAL_UARTEx_RxEventCallback>
      return;
 8004314:	e0b9      	b.n	800448a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004322:	b29b      	uxth	r3, r3
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 80ab 	beq.w	800448e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004338:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 80a6 	beq.w	800448e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800434a:	e853 3f00 	ldrex	r3, [r3]
 800434e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004352:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004356:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004364:	647b      	str	r3, [r7, #68]	@ 0x44
 8004366:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004368:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800436a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800436c:	e841 2300 	strex	r3, r2, [r1]
 8004370:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1e4      	bne.n	8004342 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	3308      	adds	r3, #8
 800437e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004382:	e853 3f00 	ldrex	r3, [r3]
 8004386:	623b      	str	r3, [r7, #32]
   return(result);
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	f023 0301 	bic.w	r3, r3, #1
 800438e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3308      	adds	r3, #8
 8004398:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800439c:	633a      	str	r2, [r7, #48]	@ 0x30
 800439e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043a4:	e841 2300 	strex	r3, r2, [r1]
 80043a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1e3      	bne.n	8004378 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	e853 3f00 	ldrex	r3, [r3]
 80043d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f023 0310 	bic.w	r3, r3, #16
 80043d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80043e6:	61fb      	str	r3, [r7, #28]
 80043e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ea:	69b9      	ldr	r1, [r7, #24]
 80043ec:	69fa      	ldr	r2, [r7, #28]
 80043ee:	e841 2300 	strex	r3, r2, [r1]
 80043f2:	617b      	str	r3, [r7, #20]
   return(result);
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1e4      	bne.n	80043c4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2202      	movs	r2, #2
 80043fe:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004400:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004404:	4619      	mov	r1, r3
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f85c 	bl	80044c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800440c:	e03f      	b.n	800448e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800440e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004412:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00e      	beq.n	8004438 <HAL_UART_IRQHandler+0x5a8>
 800441a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800441e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d008      	beq.n	8004438 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800442e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 fd66 	bl	8004f02 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004436:	e02d      	b.n	8004494 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800443c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00e      	beq.n	8004462 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004454:	2b00      	cmp	r3, #0
 8004456:	d01c      	beq.n	8004492 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	4798      	blx	r3
    }
    return;
 8004460:	e017      	b.n	8004492 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d012      	beq.n	8004494 <HAL_UART_IRQHandler+0x604>
 800446e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00c      	beq.n	8004494 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 fd17 	bl	8004eae <UART_EndTransmit_IT>
    return;
 8004480:	e008      	b.n	8004494 <HAL_UART_IRQHandler+0x604>
      return;
 8004482:	bf00      	nop
 8004484:	e006      	b.n	8004494 <HAL_UART_IRQHandler+0x604>
    return;
 8004486:	bf00      	nop
 8004488:	e004      	b.n	8004494 <HAL_UART_IRQHandler+0x604>
      return;
 800448a:	bf00      	nop
 800448c:	e002      	b.n	8004494 <HAL_UART_IRQHandler+0x604>
      return;
 800448e:	bf00      	nop
 8004490:	e000      	b.n	8004494 <HAL_UART_IRQHandler+0x604>
    return;
 8004492:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004494:	37e8      	adds	r7, #232	@ 0xe8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop

0800449c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044e0:	b08a      	sub	sp, #40	@ 0x28
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044e6:	2300      	movs	r3, #0
 80044e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	431a      	orrs	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	4313      	orrs	r3, r2
 8004502:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	4ba4      	ldr	r3, [pc, #656]	@ (800479c <UART_SetConfig+0x2c0>)
 800450c:	4013      	ands	r3, r2
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	6812      	ldr	r2, [r2, #0]
 8004512:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004514:	430b      	orrs	r3, r1
 8004516:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a99      	ldr	r2, [pc, #612]	@ (80047a0 <UART_SetConfig+0x2c4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d004      	beq.n	8004548 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004544:	4313      	orrs	r3, r2
 8004546:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004558:	430a      	orrs	r2, r1
 800455a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a90      	ldr	r2, [pc, #576]	@ (80047a4 <UART_SetConfig+0x2c8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d126      	bne.n	80045b4 <UART_SetConfig+0xd8>
 8004566:	4b90      	ldr	r3, [pc, #576]	@ (80047a8 <UART_SetConfig+0x2cc>)
 8004568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800456c:	f003 0303 	and.w	r3, r3, #3
 8004570:	2b03      	cmp	r3, #3
 8004572:	d81b      	bhi.n	80045ac <UART_SetConfig+0xd0>
 8004574:	a201      	add	r2, pc, #4	@ (adr r2, 800457c <UART_SetConfig+0xa0>)
 8004576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457a:	bf00      	nop
 800457c:	0800458d 	.word	0x0800458d
 8004580:	0800459d 	.word	0x0800459d
 8004584:	08004595 	.word	0x08004595
 8004588:	080045a5 	.word	0x080045a5
 800458c:	2301      	movs	r3, #1
 800458e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004592:	e116      	b.n	80047c2 <UART_SetConfig+0x2e6>
 8004594:	2302      	movs	r3, #2
 8004596:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800459a:	e112      	b.n	80047c2 <UART_SetConfig+0x2e6>
 800459c:	2304      	movs	r3, #4
 800459e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045a2:	e10e      	b.n	80047c2 <UART_SetConfig+0x2e6>
 80045a4:	2308      	movs	r3, #8
 80045a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045aa:	e10a      	b.n	80047c2 <UART_SetConfig+0x2e6>
 80045ac:	2310      	movs	r3, #16
 80045ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045b2:	e106      	b.n	80047c2 <UART_SetConfig+0x2e6>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a7c      	ldr	r2, [pc, #496]	@ (80047ac <UART_SetConfig+0x2d0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d138      	bne.n	8004630 <UART_SetConfig+0x154>
 80045be:	4b7a      	ldr	r3, [pc, #488]	@ (80047a8 <UART_SetConfig+0x2cc>)
 80045c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c4:	f003 030c 	and.w	r3, r3, #12
 80045c8:	2b0c      	cmp	r3, #12
 80045ca:	d82d      	bhi.n	8004628 <UART_SetConfig+0x14c>
 80045cc:	a201      	add	r2, pc, #4	@ (adr r2, 80045d4 <UART_SetConfig+0xf8>)
 80045ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d2:	bf00      	nop
 80045d4:	08004609 	.word	0x08004609
 80045d8:	08004629 	.word	0x08004629
 80045dc:	08004629 	.word	0x08004629
 80045e0:	08004629 	.word	0x08004629
 80045e4:	08004619 	.word	0x08004619
 80045e8:	08004629 	.word	0x08004629
 80045ec:	08004629 	.word	0x08004629
 80045f0:	08004629 	.word	0x08004629
 80045f4:	08004611 	.word	0x08004611
 80045f8:	08004629 	.word	0x08004629
 80045fc:	08004629 	.word	0x08004629
 8004600:	08004629 	.word	0x08004629
 8004604:	08004621 	.word	0x08004621
 8004608:	2300      	movs	r3, #0
 800460a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800460e:	e0d8      	b.n	80047c2 <UART_SetConfig+0x2e6>
 8004610:	2302      	movs	r3, #2
 8004612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004616:	e0d4      	b.n	80047c2 <UART_SetConfig+0x2e6>
 8004618:	2304      	movs	r3, #4
 800461a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800461e:	e0d0      	b.n	80047c2 <UART_SetConfig+0x2e6>
 8004620:	2308      	movs	r3, #8
 8004622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004626:	e0cc      	b.n	80047c2 <UART_SetConfig+0x2e6>
 8004628:	2310      	movs	r3, #16
 800462a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800462e:	e0c8      	b.n	80047c2 <UART_SetConfig+0x2e6>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a5e      	ldr	r2, [pc, #376]	@ (80047b0 <UART_SetConfig+0x2d4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d125      	bne.n	8004686 <UART_SetConfig+0x1aa>
 800463a:	4b5b      	ldr	r3, [pc, #364]	@ (80047a8 <UART_SetConfig+0x2cc>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004640:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004644:	2b30      	cmp	r3, #48	@ 0x30
 8004646:	d016      	beq.n	8004676 <UART_SetConfig+0x19a>
 8004648:	2b30      	cmp	r3, #48	@ 0x30
 800464a:	d818      	bhi.n	800467e <UART_SetConfig+0x1a2>
 800464c:	2b20      	cmp	r3, #32
 800464e:	d00a      	beq.n	8004666 <UART_SetConfig+0x18a>
 8004650:	2b20      	cmp	r3, #32
 8004652:	d814      	bhi.n	800467e <UART_SetConfig+0x1a2>
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <UART_SetConfig+0x182>
 8004658:	2b10      	cmp	r3, #16
 800465a:	d008      	beq.n	800466e <UART_SetConfig+0x192>
 800465c:	e00f      	b.n	800467e <UART_SetConfig+0x1a2>
 800465e:	2300      	movs	r3, #0
 8004660:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004664:	e0ad      	b.n	80047c2 <UART_SetConfig+0x2e6>
 8004666:	2302      	movs	r3, #2
 8004668:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800466c:	e0a9      	b.n	80047c2 <UART_SetConfig+0x2e6>
 800466e:	2304      	movs	r3, #4
 8004670:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004674:	e0a5      	b.n	80047c2 <UART_SetConfig+0x2e6>
 8004676:	2308      	movs	r3, #8
 8004678:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800467c:	e0a1      	b.n	80047c2 <UART_SetConfig+0x2e6>
 800467e:	2310      	movs	r3, #16
 8004680:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004684:	e09d      	b.n	80047c2 <UART_SetConfig+0x2e6>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a4a      	ldr	r2, [pc, #296]	@ (80047b4 <UART_SetConfig+0x2d8>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d125      	bne.n	80046dc <UART_SetConfig+0x200>
 8004690:	4b45      	ldr	r3, [pc, #276]	@ (80047a8 <UART_SetConfig+0x2cc>)
 8004692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004696:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800469a:	2bc0      	cmp	r3, #192	@ 0xc0
 800469c:	d016      	beq.n	80046cc <UART_SetConfig+0x1f0>
 800469e:	2bc0      	cmp	r3, #192	@ 0xc0
 80046a0:	d818      	bhi.n	80046d4 <UART_SetConfig+0x1f8>
 80046a2:	2b80      	cmp	r3, #128	@ 0x80
 80046a4:	d00a      	beq.n	80046bc <UART_SetConfig+0x1e0>
 80046a6:	2b80      	cmp	r3, #128	@ 0x80
 80046a8:	d814      	bhi.n	80046d4 <UART_SetConfig+0x1f8>
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d002      	beq.n	80046b4 <UART_SetConfig+0x1d8>
 80046ae:	2b40      	cmp	r3, #64	@ 0x40
 80046b0:	d008      	beq.n	80046c4 <UART_SetConfig+0x1e8>
 80046b2:	e00f      	b.n	80046d4 <UART_SetConfig+0x1f8>
 80046b4:	2300      	movs	r3, #0
 80046b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ba:	e082      	b.n	80047c2 <UART_SetConfig+0x2e6>
 80046bc:	2302      	movs	r3, #2
 80046be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046c2:	e07e      	b.n	80047c2 <UART_SetConfig+0x2e6>
 80046c4:	2304      	movs	r3, #4
 80046c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ca:	e07a      	b.n	80047c2 <UART_SetConfig+0x2e6>
 80046cc:	2308      	movs	r3, #8
 80046ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046d2:	e076      	b.n	80047c2 <UART_SetConfig+0x2e6>
 80046d4:	2310      	movs	r3, #16
 80046d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046da:	e072      	b.n	80047c2 <UART_SetConfig+0x2e6>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a35      	ldr	r2, [pc, #212]	@ (80047b8 <UART_SetConfig+0x2dc>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d12a      	bne.n	800473c <UART_SetConfig+0x260>
 80046e6:	4b30      	ldr	r3, [pc, #192]	@ (80047a8 <UART_SetConfig+0x2cc>)
 80046e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046f4:	d01a      	beq.n	800472c <UART_SetConfig+0x250>
 80046f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046fa:	d81b      	bhi.n	8004734 <UART_SetConfig+0x258>
 80046fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004700:	d00c      	beq.n	800471c <UART_SetConfig+0x240>
 8004702:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004706:	d815      	bhi.n	8004734 <UART_SetConfig+0x258>
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <UART_SetConfig+0x238>
 800470c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004710:	d008      	beq.n	8004724 <UART_SetConfig+0x248>
 8004712:	e00f      	b.n	8004734 <UART_SetConfig+0x258>
 8004714:	2300      	movs	r3, #0
 8004716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800471a:	e052      	b.n	80047c2 <UART_SetConfig+0x2e6>
 800471c:	2302      	movs	r3, #2
 800471e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004722:	e04e      	b.n	80047c2 <UART_SetConfig+0x2e6>
 8004724:	2304      	movs	r3, #4
 8004726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800472a:	e04a      	b.n	80047c2 <UART_SetConfig+0x2e6>
 800472c:	2308      	movs	r3, #8
 800472e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004732:	e046      	b.n	80047c2 <UART_SetConfig+0x2e6>
 8004734:	2310      	movs	r3, #16
 8004736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800473a:	e042      	b.n	80047c2 <UART_SetConfig+0x2e6>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a17      	ldr	r2, [pc, #92]	@ (80047a0 <UART_SetConfig+0x2c4>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d13a      	bne.n	80047bc <UART_SetConfig+0x2e0>
 8004746:	4b18      	ldr	r3, [pc, #96]	@ (80047a8 <UART_SetConfig+0x2cc>)
 8004748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800474c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004750:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004754:	d01a      	beq.n	800478c <UART_SetConfig+0x2b0>
 8004756:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800475a:	d81b      	bhi.n	8004794 <UART_SetConfig+0x2b8>
 800475c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004760:	d00c      	beq.n	800477c <UART_SetConfig+0x2a0>
 8004762:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004766:	d815      	bhi.n	8004794 <UART_SetConfig+0x2b8>
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <UART_SetConfig+0x298>
 800476c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004770:	d008      	beq.n	8004784 <UART_SetConfig+0x2a8>
 8004772:	e00f      	b.n	8004794 <UART_SetConfig+0x2b8>
 8004774:	2300      	movs	r3, #0
 8004776:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800477a:	e022      	b.n	80047c2 <UART_SetConfig+0x2e6>
 800477c:	2302      	movs	r3, #2
 800477e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004782:	e01e      	b.n	80047c2 <UART_SetConfig+0x2e6>
 8004784:	2304      	movs	r3, #4
 8004786:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800478a:	e01a      	b.n	80047c2 <UART_SetConfig+0x2e6>
 800478c:	2308      	movs	r3, #8
 800478e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004792:	e016      	b.n	80047c2 <UART_SetConfig+0x2e6>
 8004794:	2310      	movs	r3, #16
 8004796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800479a:	e012      	b.n	80047c2 <UART_SetConfig+0x2e6>
 800479c:	efff69f3 	.word	0xefff69f3
 80047a0:	40008000 	.word	0x40008000
 80047a4:	40013800 	.word	0x40013800
 80047a8:	40021000 	.word	0x40021000
 80047ac:	40004400 	.word	0x40004400
 80047b0:	40004800 	.word	0x40004800
 80047b4:	40004c00 	.word	0x40004c00
 80047b8:	40005000 	.word	0x40005000
 80047bc:	2310      	movs	r3, #16
 80047be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a9f      	ldr	r2, [pc, #636]	@ (8004a44 <UART_SetConfig+0x568>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d17a      	bne.n	80048c2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d824      	bhi.n	800481e <UART_SetConfig+0x342>
 80047d4:	a201      	add	r2, pc, #4	@ (adr r2, 80047dc <UART_SetConfig+0x300>)
 80047d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047da:	bf00      	nop
 80047dc:	08004801 	.word	0x08004801
 80047e0:	0800481f 	.word	0x0800481f
 80047e4:	08004809 	.word	0x08004809
 80047e8:	0800481f 	.word	0x0800481f
 80047ec:	0800480f 	.word	0x0800480f
 80047f0:	0800481f 	.word	0x0800481f
 80047f4:	0800481f 	.word	0x0800481f
 80047f8:	0800481f 	.word	0x0800481f
 80047fc:	08004817 	.word	0x08004817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004800:	f7fd fde8 	bl	80023d4 <HAL_RCC_GetPCLK1Freq>
 8004804:	61f8      	str	r0, [r7, #28]
        break;
 8004806:	e010      	b.n	800482a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004808:	4b8f      	ldr	r3, [pc, #572]	@ (8004a48 <UART_SetConfig+0x56c>)
 800480a:	61fb      	str	r3, [r7, #28]
        break;
 800480c:	e00d      	b.n	800482a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800480e:	f7fd fd49 	bl	80022a4 <HAL_RCC_GetSysClockFreq>
 8004812:	61f8      	str	r0, [r7, #28]
        break;
 8004814:	e009      	b.n	800482a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800481a:	61fb      	str	r3, [r7, #28]
        break;
 800481c:	e005      	b.n	800482a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800481e:	2300      	movs	r3, #0
 8004820:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004828:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 80fb 	beq.w	8004a28 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	4613      	mov	r3, r2
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	4413      	add	r3, r2
 800483c:	69fa      	ldr	r2, [r7, #28]
 800483e:	429a      	cmp	r2, r3
 8004840:	d305      	bcc.n	800484e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004848:	69fa      	ldr	r2, [r7, #28]
 800484a:	429a      	cmp	r2, r3
 800484c:	d903      	bls.n	8004856 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004854:	e0e8      	b.n	8004a28 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	2200      	movs	r2, #0
 800485a:	461c      	mov	r4, r3
 800485c:	4615      	mov	r5, r2
 800485e:	f04f 0200 	mov.w	r2, #0
 8004862:	f04f 0300 	mov.w	r3, #0
 8004866:	022b      	lsls	r3, r5, #8
 8004868:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800486c:	0222      	lsls	r2, r4, #8
 800486e:	68f9      	ldr	r1, [r7, #12]
 8004870:	6849      	ldr	r1, [r1, #4]
 8004872:	0849      	lsrs	r1, r1, #1
 8004874:	2000      	movs	r0, #0
 8004876:	4688      	mov	r8, r1
 8004878:	4681      	mov	r9, r0
 800487a:	eb12 0a08 	adds.w	sl, r2, r8
 800487e:	eb43 0b09 	adc.w	fp, r3, r9
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	603b      	str	r3, [r7, #0]
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004890:	4650      	mov	r0, sl
 8004892:	4659      	mov	r1, fp
 8004894:	f7fb fcec 	bl	8000270 <__aeabi_uldivmod>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4613      	mov	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048a6:	d308      	bcc.n	80048ba <UART_SetConfig+0x3de>
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048ae:	d204      	bcs.n	80048ba <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	60da      	str	r2, [r3, #12]
 80048b8:	e0b6      	b.n	8004a28 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80048c0:	e0b2      	b.n	8004a28 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048ca:	d15e      	bne.n	800498a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80048cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d828      	bhi.n	8004926 <UART_SetConfig+0x44a>
 80048d4:	a201      	add	r2, pc, #4	@ (adr r2, 80048dc <UART_SetConfig+0x400>)
 80048d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048da:	bf00      	nop
 80048dc:	08004901 	.word	0x08004901
 80048e0:	08004909 	.word	0x08004909
 80048e4:	08004911 	.word	0x08004911
 80048e8:	08004927 	.word	0x08004927
 80048ec:	08004917 	.word	0x08004917
 80048f0:	08004927 	.word	0x08004927
 80048f4:	08004927 	.word	0x08004927
 80048f8:	08004927 	.word	0x08004927
 80048fc:	0800491f 	.word	0x0800491f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004900:	f7fd fd68 	bl	80023d4 <HAL_RCC_GetPCLK1Freq>
 8004904:	61f8      	str	r0, [r7, #28]
        break;
 8004906:	e014      	b.n	8004932 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004908:	f7fd fd7a 	bl	8002400 <HAL_RCC_GetPCLK2Freq>
 800490c:	61f8      	str	r0, [r7, #28]
        break;
 800490e:	e010      	b.n	8004932 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004910:	4b4d      	ldr	r3, [pc, #308]	@ (8004a48 <UART_SetConfig+0x56c>)
 8004912:	61fb      	str	r3, [r7, #28]
        break;
 8004914:	e00d      	b.n	8004932 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004916:	f7fd fcc5 	bl	80022a4 <HAL_RCC_GetSysClockFreq>
 800491a:	61f8      	str	r0, [r7, #28]
        break;
 800491c:	e009      	b.n	8004932 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800491e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004922:	61fb      	str	r3, [r7, #28]
        break;
 8004924:	e005      	b.n	8004932 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004930:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d077      	beq.n	8004a28 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	005a      	lsls	r2, r3, #1
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	085b      	lsrs	r3, r3, #1
 8004942:	441a      	add	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	fbb2 f3f3 	udiv	r3, r2, r3
 800494c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	2b0f      	cmp	r3, #15
 8004952:	d916      	bls.n	8004982 <UART_SetConfig+0x4a6>
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800495a:	d212      	bcs.n	8004982 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	b29b      	uxth	r3, r3
 8004960:	f023 030f 	bic.w	r3, r3, #15
 8004964:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	085b      	lsrs	r3, r3, #1
 800496a:	b29b      	uxth	r3, r3
 800496c:	f003 0307 	and.w	r3, r3, #7
 8004970:	b29a      	uxth	r2, r3
 8004972:	8afb      	ldrh	r3, [r7, #22]
 8004974:	4313      	orrs	r3, r2
 8004976:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	8afa      	ldrh	r2, [r7, #22]
 800497e:	60da      	str	r2, [r3, #12]
 8004980:	e052      	b.n	8004a28 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004988:	e04e      	b.n	8004a28 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800498a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800498e:	2b08      	cmp	r3, #8
 8004990:	d827      	bhi.n	80049e2 <UART_SetConfig+0x506>
 8004992:	a201      	add	r2, pc, #4	@ (adr r2, 8004998 <UART_SetConfig+0x4bc>)
 8004994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004998:	080049bd 	.word	0x080049bd
 800499c:	080049c5 	.word	0x080049c5
 80049a0:	080049cd 	.word	0x080049cd
 80049a4:	080049e3 	.word	0x080049e3
 80049a8:	080049d3 	.word	0x080049d3
 80049ac:	080049e3 	.word	0x080049e3
 80049b0:	080049e3 	.word	0x080049e3
 80049b4:	080049e3 	.word	0x080049e3
 80049b8:	080049db 	.word	0x080049db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049bc:	f7fd fd0a 	bl	80023d4 <HAL_RCC_GetPCLK1Freq>
 80049c0:	61f8      	str	r0, [r7, #28]
        break;
 80049c2:	e014      	b.n	80049ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049c4:	f7fd fd1c 	bl	8002400 <HAL_RCC_GetPCLK2Freq>
 80049c8:	61f8      	str	r0, [r7, #28]
        break;
 80049ca:	e010      	b.n	80049ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049cc:	4b1e      	ldr	r3, [pc, #120]	@ (8004a48 <UART_SetConfig+0x56c>)
 80049ce:	61fb      	str	r3, [r7, #28]
        break;
 80049d0:	e00d      	b.n	80049ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049d2:	f7fd fc67 	bl	80022a4 <HAL_RCC_GetSysClockFreq>
 80049d6:	61f8      	str	r0, [r7, #28]
        break;
 80049d8:	e009      	b.n	80049ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049de:	61fb      	str	r3, [r7, #28]
        break;
 80049e0:	e005      	b.n	80049ee <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80049ec:	bf00      	nop
    }

    if (pclk != 0U)
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d019      	beq.n	8004a28 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	085a      	lsrs	r2, r3, #1
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	441a      	add	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a06:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	2b0f      	cmp	r3, #15
 8004a0c:	d909      	bls.n	8004a22 <UART_SetConfig+0x546>
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a14:	d205      	bcs.n	8004a22 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	60da      	str	r2, [r3, #12]
 8004a20:	e002      	b.n	8004a28 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a34:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3728      	adds	r7, #40	@ 0x28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a42:	bf00      	nop
 8004a44:	40008000 	.word	0x40008000
 8004a48:	00f42400 	.word	0x00f42400

08004a4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00a      	beq.n	8004a76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00a      	beq.n	8004aba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abe:	f003 0304 	and.w	r3, r3, #4
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00a      	beq.n	8004afe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01a      	beq.n	8004b62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b4a:	d10a      	bne.n	8004b62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	605a      	str	r2, [r3, #4]
  }
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b098      	sub	sp, #96	@ 0x60
 8004b94:	af02      	add	r7, sp, #8
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ba0:	f7fc fb10 	bl	80011c4 <HAL_GetTick>
 8004ba4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0308 	and.w	r3, r3, #8
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d12e      	bne.n	8004c12 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f88c 	bl	8004ce0 <UART_WaitOnFlagUntilTimeout>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d021      	beq.n	8004c12 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd6:	e853 3f00 	ldrex	r3, [r3]
 8004bda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004be2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	461a      	mov	r2, r3
 8004bea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bec:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bf4:	e841 2300 	strex	r3, r2, [r1]
 8004bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1e6      	bne.n	8004bce <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2220      	movs	r2, #32
 8004c04:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e062      	b.n	8004cd8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d149      	bne.n	8004cb4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f856 	bl	8004ce0 <UART_WaitOnFlagUntilTimeout>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d03c      	beq.n	8004cb4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c42:	e853 3f00 	ldrex	r3, [r3]
 8004c46:	623b      	str	r3, [r7, #32]
   return(result);
 8004c48:	6a3b      	ldr	r3, [r7, #32]
 8004c4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c58:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c60:	e841 2300 	strex	r3, r2, [r1]
 8004c64:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1e6      	bne.n	8004c3a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3308      	adds	r3, #8
 8004c72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	e853 3f00 	ldrex	r3, [r3]
 8004c7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0301 	bic.w	r3, r3, #1
 8004c82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3308      	adds	r3, #8
 8004c8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c8c:	61fa      	str	r2, [r7, #28]
 8004c8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c90:	69b9      	ldr	r1, [r7, #24]
 8004c92:	69fa      	ldr	r2, [r7, #28]
 8004c94:	e841 2300 	strex	r3, r2, [r1]
 8004c98:	617b      	str	r3, [r7, #20]
   return(result);
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1e5      	bne.n	8004c6c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e011      	b.n	8004cd8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3758      	adds	r7, #88	@ 0x58
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	603b      	str	r3, [r7, #0]
 8004cec:	4613      	mov	r3, r2
 8004cee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf0:	e04f      	b.n	8004d92 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf8:	d04b      	beq.n	8004d92 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cfa:	f7fc fa63 	bl	80011c4 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d302      	bcc.n	8004d10 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e04e      	b.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0304 	and.w	r3, r3, #4
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d037      	beq.n	8004d92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2b80      	cmp	r3, #128	@ 0x80
 8004d26:	d034      	beq.n	8004d92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b40      	cmp	r3, #64	@ 0x40
 8004d2c:	d031      	beq.n	8004d92 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d110      	bne.n	8004d5e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2208      	movs	r2, #8
 8004d42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 f838 	bl	8004dba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2208      	movs	r2, #8
 8004d4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e029      	b.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	69db      	ldr	r3, [r3, #28]
 8004d64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d6c:	d111      	bne.n	8004d92 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 f81e 	bl	8004dba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e00f      	b.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69da      	ldr	r2, [r3, #28]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	bf0c      	ite	eq
 8004da2:	2301      	moveq	r3, #1
 8004da4:	2300      	movne	r3, #0
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	461a      	mov	r2, r3
 8004daa:	79fb      	ldrb	r3, [r7, #7]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d0a0      	beq.n	8004cf2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b095      	sub	sp, #84	@ 0x54
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dca:	e853 3f00 	ldrex	r3, [r3]
 8004dce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	461a      	mov	r2, r3
 8004dde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004de0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004de2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004de6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004de8:	e841 2300 	strex	r3, r2, [r1]
 8004dec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1e6      	bne.n	8004dc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3308      	adds	r3, #8
 8004dfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	e853 3f00 	ldrex	r3, [r3]
 8004e02:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	f023 0301 	bic.w	r3, r3, #1
 8004e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	3308      	adds	r3, #8
 8004e12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e1c:	e841 2300 	strex	r3, r2, [r1]
 8004e20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1e5      	bne.n	8004df4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d118      	bne.n	8004e62 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	e853 3f00 	ldrex	r3, [r3]
 8004e3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	f023 0310 	bic.w	r3, r3, #16
 8004e44:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e4e:	61bb      	str	r3, [r7, #24]
 8004e50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e52:	6979      	ldr	r1, [r7, #20]
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	e841 2300 	strex	r3, r2, [r1]
 8004e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1e6      	bne.n	8004e30 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e76:	bf00      	nop
 8004e78:	3754      	adds	r7, #84	@ 0x54
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f7ff fb05 	bl	80044b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b088      	sub	sp, #32
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	e853 3f00 	ldrex	r3, [r3]
 8004ec2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eca:	61fb      	str	r3, [r7, #28]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	61bb      	str	r3, [r7, #24]
 8004ed6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	6979      	ldr	r1, [r7, #20]
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e6      	bne.n	8004eb6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2220      	movs	r2, #32
 8004eec:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7ff fad1 	bl	800449c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004efa:	bf00      	nop
 8004efc:	3720      	adds	r7, #32
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b085      	sub	sp, #20
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f20:	2300      	movs	r3, #0
 8004f22:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f28:	2b84      	cmp	r3, #132	@ 0x84
 8004f2a:	d005      	beq.n	8004f38 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f2c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4413      	add	r3, r2
 8004f34:	3303      	adds	r3, #3
 8004f36:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f38:	68fb      	ldr	r3, [r7, #12]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004f4a:	f000 fb8d 	bl	8005668 <vTaskStartScheduler>
  
  return osOK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f56:	b089      	sub	sp, #36	@ 0x24
 8004f58:	af04      	add	r7, sp, #16
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d020      	beq.n	8004fa8 <osThreadCreate+0x54>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d01c      	beq.n	8004fa8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685c      	ldr	r4, [r3, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691e      	ldr	r6, [r3, #16]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7ff ffc8 	bl	8004f16 <makeFreeRtosPriority>
 8004f86:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f90:	9202      	str	r2, [sp, #8]
 8004f92:	9301      	str	r3, [sp, #4]
 8004f94:	9100      	str	r1, [sp, #0]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	4632      	mov	r2, r6
 8004f9a:	4629      	mov	r1, r5
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	f000 f8ed 	bl	800517c <xTaskCreateStatic>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	60fb      	str	r3, [r7, #12]
 8004fa6:	e01c      	b.n	8004fe2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685c      	ldr	r4, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fb4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7ff ffaa 	bl	8004f16 <makeFreeRtosPriority>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	f107 030c 	add.w	r3, r7, #12
 8004fc8:	9301      	str	r3, [sp, #4]
 8004fca:	9200      	str	r2, [sp, #0]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	4632      	mov	r2, r6
 8004fd0:	4629      	mov	r1, r5
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	f000 f932 	bl	800523c <xTaskCreate>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d001      	beq.n	8004fe2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e000      	b.n	8004fe4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fec <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <osDelay+0x16>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	e000      	b.n	8005004 <osDelay+0x18>
 8005002:	2301      	movs	r3, #1
 8005004:	4618      	mov	r0, r3
 8005006:	f000 faf9 	bl	80055fc <vTaskDelay>
  
  return osOK;
 800500a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f103 0208 	add.w	r2, r3, #8
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f04f 32ff 	mov.w	r2, #4294967295
 800502c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f103 0208 	add.w	r2, r3, #8
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f103 0208 	add.w	r2, r3, #8
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800506e:	b480      	push	{r7}
 8005070:	b085      	sub	sp, #20
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	601a      	str	r2, [r3, #0]
}
 80050aa:	bf00      	nop
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050b6:	b480      	push	{r7}
 80050b8:	b085      	sub	sp, #20
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
 80050be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050cc:	d103      	bne.n	80050d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	e00c      	b.n	80050f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3308      	adds	r3, #8
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	e002      	b.n	80050e4 <vListInsert+0x2e>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d2f6      	bcs.n	80050de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	601a      	str	r2, [r3, #0]
}
 800511c:	bf00      	nop
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6892      	ldr	r2, [r2, #8]
 800513e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6852      	ldr	r2, [r2, #4]
 8005148:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	429a      	cmp	r2, r3
 8005152:	d103      	bne.n	800515c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	1e5a      	subs	r2, r3, #1
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
}
 8005170:	4618      	mov	r0, r3
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800517c:	b580      	push	{r7, lr}
 800517e:	b08e      	sub	sp, #56	@ 0x38
 8005180:	af04      	add	r7, sp, #16
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800518a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10b      	bne.n	80051a8 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
 80051a6:	e7fd      	b.n	80051a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80051a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10b      	bne.n	80051c6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	61fb      	str	r3, [r7, #28]
}
 80051c0:	bf00      	nop
 80051c2:	bf00      	nop
 80051c4:	e7fd      	b.n	80051c2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051c6:	23a0      	movs	r3, #160	@ 0xa0
 80051c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	2ba0      	cmp	r3, #160	@ 0xa0
 80051ce:	d00b      	beq.n	80051e8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80051d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	61bb      	str	r3, [r7, #24]
}
 80051e2:	bf00      	nop
 80051e4:	bf00      	nop
 80051e6:	e7fd      	b.n	80051e4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80051e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d01e      	beq.n	800522e <xTaskCreateStatic+0xb2>
 80051f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d01b      	beq.n	800522e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80051fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005202:	2202      	movs	r2, #2
 8005204:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005208:	2300      	movs	r3, #0
 800520a:	9303      	str	r3, [sp, #12]
 800520c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520e:	9302      	str	r3, [sp, #8]
 8005210:	f107 0314 	add.w	r3, r7, #20
 8005214:	9301      	str	r3, [sp, #4]
 8005216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	68b9      	ldr	r1, [r7, #8]
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 f851 	bl	80052c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005226:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005228:	f000 f8ee 	bl	8005408 <prvAddNewTaskToReadyList>
 800522c:	e001      	b.n	8005232 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005232:	697b      	ldr	r3, [r7, #20]
	}
 8005234:	4618      	mov	r0, r3
 8005236:	3728      	adds	r7, #40	@ 0x28
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800523c:	b580      	push	{r7, lr}
 800523e:	b08c      	sub	sp, #48	@ 0x30
 8005240:	af04      	add	r7, sp, #16
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	4613      	mov	r3, r2
 800524a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4618      	mov	r0, r3
 8005252:	f000 ff91 	bl	8006178 <pvPortMalloc>
 8005256:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00e      	beq.n	800527c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800525e:	20a0      	movs	r0, #160	@ 0xa0
 8005260:	f000 ff8a 	bl	8006178 <pvPortMalloc>
 8005264:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	631a      	str	r2, [r3, #48]	@ 0x30
 8005272:	e005      	b.n	8005280 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005274:	6978      	ldr	r0, [r7, #20]
 8005276:	f001 f84d 	bl	8006314 <vPortFree>
 800527a:	e001      	b.n	8005280 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800527c:	2300      	movs	r3, #0
 800527e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d017      	beq.n	80052b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800528e:	88fa      	ldrh	r2, [r7, #6]
 8005290:	2300      	movs	r3, #0
 8005292:	9303      	str	r3, [sp, #12]
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	9302      	str	r3, [sp, #8]
 8005298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800529a:	9301      	str	r3, [sp, #4]
 800529c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	68b9      	ldr	r1, [r7, #8]
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f000 f80f 	bl	80052c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052aa:	69f8      	ldr	r0, [r7, #28]
 80052ac:	f000 f8ac 	bl	8005408 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052b0:	2301      	movs	r3, #1
 80052b2:	61bb      	str	r3, [r7, #24]
 80052b4:	e002      	b.n	80052bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052b6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80052bc:	69bb      	ldr	r3, [r7, #24]
	}
 80052be:	4618      	mov	r0, r3
 80052c0:	3720      	adds	r7, #32
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b088      	sub	sp, #32
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80052d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80052e0:	3b01      	subs	r3, #1
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	f023 0307 	bic.w	r3, r3, #7
 80052ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00b      	beq.n	8005312 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	617b      	str	r3, [r7, #20]
}
 800530c:	bf00      	nop
 800530e:	bf00      	nop
 8005310:	e7fd      	b.n	800530e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d01f      	beq.n	8005358 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005318:	2300      	movs	r3, #0
 800531a:	61fb      	str	r3, [r7, #28]
 800531c:	e012      	b.n	8005344 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	4413      	add	r3, r2
 8005324:	7819      	ldrb	r1, [r3, #0]
 8005326:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	4413      	add	r3, r2
 800532c:	3334      	adds	r3, #52	@ 0x34
 800532e:	460a      	mov	r2, r1
 8005330:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	4413      	add	r3, r2
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d006      	beq.n	800534c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	3301      	adds	r3, #1
 8005342:	61fb      	str	r3, [r7, #28]
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	2b0f      	cmp	r3, #15
 8005348:	d9e9      	bls.n	800531e <prvInitialiseNewTask+0x56>
 800534a:	e000      	b.n	800534e <prvInitialiseNewTask+0x86>
			{
				break;
 800534c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800534e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005356:	e003      	b.n	8005360 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005362:	2b06      	cmp	r3, #6
 8005364:	d901      	bls.n	800536a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005366:	2306      	movs	r3, #6
 8005368:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800536a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800536e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005372:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005374:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005378:	2200      	movs	r2, #0
 800537a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800537c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537e:	3304      	adds	r3, #4
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff fe67 	bl	8005054 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005388:	3318      	adds	r3, #24
 800538a:	4618      	mov	r0, r3
 800538c:	f7ff fe62 	bl	8005054 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005394:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005398:	f1c3 0207 	rsb	r2, r3, #7
 800539c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800539e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053a4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a8:	2200      	movs	r2, #0
 80053aa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80053b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b8:	334c      	adds	r3, #76	@ 0x4c
 80053ba:	224c      	movs	r2, #76	@ 0x4c
 80053bc:	2100      	movs	r1, #0
 80053be:	4618      	mov	r0, r3
 80053c0:	f001 fd84 	bl	8006ecc <memset>
 80053c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c6:	4a0d      	ldr	r2, [pc, #52]	@ (80053fc <prvInitialiseNewTask+0x134>)
 80053c8:	651a      	str	r2, [r3, #80]	@ 0x50
 80053ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053cc:	4a0c      	ldr	r2, [pc, #48]	@ (8005400 <prvInitialiseNewTask+0x138>)
 80053ce:	655a      	str	r2, [r3, #84]	@ 0x54
 80053d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d2:	4a0c      	ldr	r2, [pc, #48]	@ (8005404 <prvInitialiseNewTask+0x13c>)
 80053d4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	68f9      	ldr	r1, [r7, #12]
 80053da:	69b8      	ldr	r0, [r7, #24]
 80053dc:	f000 fcba 	bl	8005d54 <pxPortInitialiseStack>
 80053e0:	4602      	mov	r2, r0
 80053e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80053e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053f2:	bf00      	nop
 80053f4:	3720      	adds	r7, #32
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	200014f0 	.word	0x200014f0
 8005400:	20001558 	.word	0x20001558
 8005404:	200015c0 	.word	0x200015c0

08005408 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005410:	f000 fdd2 	bl	8005fb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005414:	4b2a      	ldr	r3, [pc, #168]	@ (80054c0 <prvAddNewTaskToReadyList+0xb8>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3301      	adds	r3, #1
 800541a:	4a29      	ldr	r2, [pc, #164]	@ (80054c0 <prvAddNewTaskToReadyList+0xb8>)
 800541c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800541e:	4b29      	ldr	r3, [pc, #164]	@ (80054c4 <prvAddNewTaskToReadyList+0xbc>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d109      	bne.n	800543a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005426:	4a27      	ldr	r2, [pc, #156]	@ (80054c4 <prvAddNewTaskToReadyList+0xbc>)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800542c:	4b24      	ldr	r3, [pc, #144]	@ (80054c0 <prvAddNewTaskToReadyList+0xb8>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d110      	bne.n	8005456 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005434:	f000 fb64 	bl	8005b00 <prvInitialiseTaskLists>
 8005438:	e00d      	b.n	8005456 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800543a:	4b23      	ldr	r3, [pc, #140]	@ (80054c8 <prvAddNewTaskToReadyList+0xc0>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d109      	bne.n	8005456 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005442:	4b20      	ldr	r3, [pc, #128]	@ (80054c4 <prvAddNewTaskToReadyList+0xbc>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800544c:	429a      	cmp	r2, r3
 800544e:	d802      	bhi.n	8005456 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005450:	4a1c      	ldr	r2, [pc, #112]	@ (80054c4 <prvAddNewTaskToReadyList+0xbc>)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005456:	4b1d      	ldr	r3, [pc, #116]	@ (80054cc <prvAddNewTaskToReadyList+0xc4>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3301      	adds	r3, #1
 800545c:	4a1b      	ldr	r2, [pc, #108]	@ (80054cc <prvAddNewTaskToReadyList+0xc4>)
 800545e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005464:	2201      	movs	r2, #1
 8005466:	409a      	lsls	r2, r3
 8005468:	4b19      	ldr	r3, [pc, #100]	@ (80054d0 <prvAddNewTaskToReadyList+0xc8>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4313      	orrs	r3, r2
 800546e:	4a18      	ldr	r2, [pc, #96]	@ (80054d0 <prvAddNewTaskToReadyList+0xc8>)
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005476:	4613      	mov	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4a15      	ldr	r2, [pc, #84]	@ (80054d4 <prvAddNewTaskToReadyList+0xcc>)
 8005480:	441a      	add	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	3304      	adds	r3, #4
 8005486:	4619      	mov	r1, r3
 8005488:	4610      	mov	r0, r2
 800548a:	f7ff fdf0 	bl	800506e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800548e:	f000 fdc5 	bl	800601c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005492:	4b0d      	ldr	r3, [pc, #52]	@ (80054c8 <prvAddNewTaskToReadyList+0xc0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00e      	beq.n	80054b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800549a:	4b0a      	ldr	r3, [pc, #40]	@ (80054c4 <prvAddNewTaskToReadyList+0xbc>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d207      	bcs.n	80054b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054a8:	4b0b      	ldr	r3, [pc, #44]	@ (80054d8 <prvAddNewTaskToReadyList+0xd0>)
 80054aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054b8:	bf00      	nop
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	200008e4 	.word	0x200008e4
 80054c4:	200007e4 	.word	0x200007e4
 80054c8:	200008f0 	.word	0x200008f0
 80054cc:	20000900 	.word	0x20000900
 80054d0:	200008ec 	.word	0x200008ec
 80054d4:	200007e8 	.word	0x200007e8
 80054d8:	e000ed04 	.word	0xe000ed04

080054dc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80054e4:	f000 fd68 	bl	8005fb8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d102      	bne.n	80054f4 <vTaskDelete+0x18>
 80054ee:	4b39      	ldr	r3, [pc, #228]	@ (80055d4 <vTaskDelete+0xf8>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	e000      	b.n	80054f6 <vTaskDelete+0x1a>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	3304      	adds	r3, #4
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff fe13 	bl	8005128 <uxListRemove>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d115      	bne.n	8005534 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800550c:	4932      	ldr	r1, [pc, #200]	@ (80055d8 <vTaskDelete+0xfc>)
 800550e:	4613      	mov	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	440b      	add	r3, r1
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10a      	bne.n	8005534 <vTaskDelete+0x58>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005522:	2201      	movs	r2, #1
 8005524:	fa02 f303 	lsl.w	r3, r2, r3
 8005528:	43da      	mvns	r2, r3
 800552a:	4b2c      	ldr	r3, [pc, #176]	@ (80055dc <vTaskDelete+0x100>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4013      	ands	r3, r2
 8005530:	4a2a      	ldr	r2, [pc, #168]	@ (80055dc <vTaskDelete+0x100>)
 8005532:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005538:	2b00      	cmp	r3, #0
 800553a:	d004      	beq.n	8005546 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	3318      	adds	r3, #24
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff fdf1 	bl	8005128 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005546:	4b26      	ldr	r3, [pc, #152]	@ (80055e0 <vTaskDelete+0x104>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3301      	adds	r3, #1
 800554c:	4a24      	ldr	r2, [pc, #144]	@ (80055e0 <vTaskDelete+0x104>)
 800554e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005550:	4b20      	ldr	r3, [pc, #128]	@ (80055d4 <vTaskDelete+0xf8>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	429a      	cmp	r2, r3
 8005558:	d10b      	bne.n	8005572 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	3304      	adds	r3, #4
 800555e:	4619      	mov	r1, r3
 8005560:	4820      	ldr	r0, [pc, #128]	@ (80055e4 <vTaskDelete+0x108>)
 8005562:	f7ff fd84 	bl	800506e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005566:	4b20      	ldr	r3, [pc, #128]	@ (80055e8 <vTaskDelete+0x10c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3301      	adds	r3, #1
 800556c:	4a1e      	ldr	r2, [pc, #120]	@ (80055e8 <vTaskDelete+0x10c>)
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	e009      	b.n	8005586 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005572:	4b1e      	ldr	r3, [pc, #120]	@ (80055ec <vTaskDelete+0x110>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3b01      	subs	r3, #1
 8005578:	4a1c      	ldr	r2, [pc, #112]	@ (80055ec <vTaskDelete+0x110>)
 800557a:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 fb2d 	bl	8005bdc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005582:	f000 fb61 	bl	8005c48 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8005586:	f000 fd49 	bl	800601c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800558a:	4b19      	ldr	r3, [pc, #100]	@ (80055f0 <vTaskDelete+0x114>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d01c      	beq.n	80055cc <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 8005592:	4b10      	ldr	r3, [pc, #64]	@ (80055d4 <vTaskDelete+0xf8>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	429a      	cmp	r2, r3
 800559a:	d117      	bne.n	80055cc <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800559c:	4b15      	ldr	r3, [pc, #84]	@ (80055f4 <vTaskDelete+0x118>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00b      	beq.n	80055bc <vTaskDelete+0xe0>
	__asm volatile
 80055a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a8:	f383 8811 	msr	BASEPRI, r3
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	60bb      	str	r3, [r7, #8]
}
 80055b6:	bf00      	nop
 80055b8:	bf00      	nop
 80055ba:	e7fd      	b.n	80055b8 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 80055bc:	4b0e      	ldr	r3, [pc, #56]	@ (80055f8 <vTaskDelete+0x11c>)
 80055be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80055cc:	bf00      	nop
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	200007e4 	.word	0x200007e4
 80055d8:	200007e8 	.word	0x200007e8
 80055dc:	200008ec 	.word	0x200008ec
 80055e0:	20000900 	.word	0x20000900
 80055e4:	200008b8 	.word	0x200008b8
 80055e8:	200008cc 	.word	0x200008cc
 80055ec:	200008e4 	.word	0x200008e4
 80055f0:	200008f0 	.word	0x200008f0
 80055f4:	2000090c 	.word	0x2000090c
 80055f8:	e000ed04 	.word	0xe000ed04

080055fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005604:	2300      	movs	r3, #0
 8005606:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d018      	beq.n	8005640 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800560e:	4b14      	ldr	r3, [pc, #80]	@ (8005660 <vTaskDelay+0x64>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00b      	beq.n	800562e <vTaskDelay+0x32>
	__asm volatile
 8005616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800561a:	f383 8811 	msr	BASEPRI, r3
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	f3bf 8f4f 	dsb	sy
 8005626:	60bb      	str	r3, [r7, #8]
}
 8005628:	bf00      	nop
 800562a:	bf00      	nop
 800562c:	e7fd      	b.n	800562a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800562e:	f000 f885 	bl	800573c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005632:	2100      	movs	r1, #0
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 fb27 	bl	8005c88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800563a:	f000 f88d 	bl	8005758 <xTaskResumeAll>
 800563e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d107      	bne.n	8005656 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005646:	4b07      	ldr	r3, [pc, #28]	@ (8005664 <vTaskDelay+0x68>)
 8005648:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005656:	bf00      	nop
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	2000090c 	.word	0x2000090c
 8005664:	e000ed04 	.word	0xe000ed04

08005668 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08a      	sub	sp, #40	@ 0x28
 800566c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800566e:	2300      	movs	r3, #0
 8005670:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005672:	2300      	movs	r3, #0
 8005674:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005676:	463a      	mov	r2, r7
 8005678:	1d39      	adds	r1, r7, #4
 800567a:	f107 0308 	add.w	r3, r7, #8
 800567e:	4618      	mov	r0, r3
 8005680:	f7fa ff6e 	bl	8000560 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005684:	6839      	ldr	r1, [r7, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	9202      	str	r2, [sp, #8]
 800568c:	9301      	str	r3, [sp, #4]
 800568e:	2300      	movs	r3, #0
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	2300      	movs	r3, #0
 8005694:	460a      	mov	r2, r1
 8005696:	4921      	ldr	r1, [pc, #132]	@ (800571c <vTaskStartScheduler+0xb4>)
 8005698:	4821      	ldr	r0, [pc, #132]	@ (8005720 <vTaskStartScheduler+0xb8>)
 800569a:	f7ff fd6f 	bl	800517c <xTaskCreateStatic>
 800569e:	4603      	mov	r3, r0
 80056a0:	4a20      	ldr	r2, [pc, #128]	@ (8005724 <vTaskStartScheduler+0xbc>)
 80056a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80056a4:	4b1f      	ldr	r3, [pc, #124]	@ (8005724 <vTaskStartScheduler+0xbc>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80056ac:	2301      	movs	r3, #1
 80056ae:	617b      	str	r3, [r7, #20]
 80056b0:	e001      	b.n	80056b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d11b      	bne.n	80056f4 <vTaskStartScheduler+0x8c>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	613b      	str	r3, [r7, #16]
}
 80056ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80056d0:	4b15      	ldr	r3, [pc, #84]	@ (8005728 <vTaskStartScheduler+0xc0>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	334c      	adds	r3, #76	@ 0x4c
 80056d6:	4a15      	ldr	r2, [pc, #84]	@ (800572c <vTaskStartScheduler+0xc4>)
 80056d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80056da:	4b15      	ldr	r3, [pc, #84]	@ (8005730 <vTaskStartScheduler+0xc8>)
 80056dc:	f04f 32ff 	mov.w	r2, #4294967295
 80056e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056e2:	4b14      	ldr	r3, [pc, #80]	@ (8005734 <vTaskStartScheduler+0xcc>)
 80056e4:	2201      	movs	r2, #1
 80056e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80056e8:	4b13      	ldr	r3, [pc, #76]	@ (8005738 <vTaskStartScheduler+0xd0>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80056ee:	f000 fbbf 	bl	8005e70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80056f2:	e00f      	b.n	8005714 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fa:	d10b      	bne.n	8005714 <vTaskStartScheduler+0xac>
	__asm volatile
 80056fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005700:	f383 8811 	msr	BASEPRI, r3
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	60fb      	str	r3, [r7, #12]
}
 800570e:	bf00      	nop
 8005710:	bf00      	nop
 8005712:	e7fd      	b.n	8005710 <vTaskStartScheduler+0xa8>
}
 8005714:	bf00      	nop
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	08007c98 	.word	0x08007c98
 8005720:	08005ad1 	.word	0x08005ad1
 8005724:	20000908 	.word	0x20000908
 8005728:	200007e4 	.word	0x200007e4
 800572c:	20000024 	.word	0x20000024
 8005730:	20000904 	.word	0x20000904
 8005734:	200008f0 	.word	0x200008f0
 8005738:	200008e8 	.word	0x200008e8

0800573c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005740:	4b04      	ldr	r3, [pc, #16]	@ (8005754 <vTaskSuspendAll+0x18>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3301      	adds	r3, #1
 8005746:	4a03      	ldr	r2, [pc, #12]	@ (8005754 <vTaskSuspendAll+0x18>)
 8005748:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800574a:	bf00      	nop
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	2000090c 	.word	0x2000090c

08005758 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800575e:	2300      	movs	r3, #0
 8005760:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005762:	2300      	movs	r3, #0
 8005764:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005766:	4b42      	ldr	r3, [pc, #264]	@ (8005870 <xTaskResumeAll+0x118>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10b      	bne.n	8005786 <xTaskResumeAll+0x2e>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	603b      	str	r3, [r7, #0]
}
 8005780:	bf00      	nop
 8005782:	bf00      	nop
 8005784:	e7fd      	b.n	8005782 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005786:	f000 fc17 	bl	8005fb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800578a:	4b39      	ldr	r3, [pc, #228]	@ (8005870 <xTaskResumeAll+0x118>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3b01      	subs	r3, #1
 8005790:	4a37      	ldr	r2, [pc, #220]	@ (8005870 <xTaskResumeAll+0x118>)
 8005792:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005794:	4b36      	ldr	r3, [pc, #216]	@ (8005870 <xTaskResumeAll+0x118>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d161      	bne.n	8005860 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800579c:	4b35      	ldr	r3, [pc, #212]	@ (8005874 <xTaskResumeAll+0x11c>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d05d      	beq.n	8005860 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057a4:	e02e      	b.n	8005804 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057a6:	4b34      	ldr	r3, [pc, #208]	@ (8005878 <xTaskResumeAll+0x120>)
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	3318      	adds	r3, #24
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7ff fcb8 	bl	8005128 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	3304      	adds	r3, #4
 80057bc:	4618      	mov	r0, r3
 80057be:	f7ff fcb3 	bl	8005128 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c6:	2201      	movs	r2, #1
 80057c8:	409a      	lsls	r2, r3
 80057ca:	4b2c      	ldr	r3, [pc, #176]	@ (800587c <xTaskResumeAll+0x124>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	4a2a      	ldr	r2, [pc, #168]	@ (800587c <xTaskResumeAll+0x124>)
 80057d2:	6013      	str	r3, [r2, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057d8:	4613      	mov	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4a27      	ldr	r2, [pc, #156]	@ (8005880 <xTaskResumeAll+0x128>)
 80057e2:	441a      	add	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3304      	adds	r3, #4
 80057e8:	4619      	mov	r1, r3
 80057ea:	4610      	mov	r0, r2
 80057ec:	f7ff fc3f 	bl	800506e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057f4:	4b23      	ldr	r3, [pc, #140]	@ (8005884 <xTaskResumeAll+0x12c>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d302      	bcc.n	8005804 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80057fe:	4b22      	ldr	r3, [pc, #136]	@ (8005888 <xTaskResumeAll+0x130>)
 8005800:	2201      	movs	r2, #1
 8005802:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005804:	4b1c      	ldr	r3, [pc, #112]	@ (8005878 <xTaskResumeAll+0x120>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1cc      	bne.n	80057a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005812:	f000 fa19 	bl	8005c48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005816:	4b1d      	ldr	r3, [pc, #116]	@ (800588c <xTaskResumeAll+0x134>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d010      	beq.n	8005844 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005822:	f000 f837 	bl	8005894 <xTaskIncrementTick>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800582c:	4b16      	ldr	r3, [pc, #88]	@ (8005888 <xTaskResumeAll+0x130>)
 800582e:	2201      	movs	r2, #1
 8005830:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	3b01      	subs	r3, #1
 8005836:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1f1      	bne.n	8005822 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800583e:	4b13      	ldr	r3, [pc, #76]	@ (800588c <xTaskResumeAll+0x134>)
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005844:	4b10      	ldr	r3, [pc, #64]	@ (8005888 <xTaskResumeAll+0x130>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d009      	beq.n	8005860 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800584c:	2301      	movs	r3, #1
 800584e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005850:	4b0f      	ldr	r3, [pc, #60]	@ (8005890 <xTaskResumeAll+0x138>)
 8005852:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005860:	f000 fbdc 	bl	800601c <vPortExitCritical>

	return xAlreadyYielded;
 8005864:	68bb      	ldr	r3, [r7, #8]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	2000090c 	.word	0x2000090c
 8005874:	200008e4 	.word	0x200008e4
 8005878:	200008a4 	.word	0x200008a4
 800587c:	200008ec 	.word	0x200008ec
 8005880:	200007e8 	.word	0x200007e8
 8005884:	200007e4 	.word	0x200007e4
 8005888:	200008f8 	.word	0x200008f8
 800588c:	200008f4 	.word	0x200008f4
 8005890:	e000ed04 	.word	0xe000ed04

08005894 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800589a:	2300      	movs	r3, #0
 800589c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800589e:	4b4f      	ldr	r3, [pc, #316]	@ (80059dc <xTaskIncrementTick+0x148>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f040 808f 	bne.w	80059c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058a8:	4b4d      	ldr	r3, [pc, #308]	@ (80059e0 <xTaskIncrementTick+0x14c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3301      	adds	r3, #1
 80058ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058b0:	4a4b      	ldr	r2, [pc, #300]	@ (80059e0 <xTaskIncrementTick+0x14c>)
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d121      	bne.n	8005900 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80058bc:	4b49      	ldr	r3, [pc, #292]	@ (80059e4 <xTaskIncrementTick+0x150>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00b      	beq.n	80058de <xTaskIncrementTick+0x4a>
	__asm volatile
 80058c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ca:	f383 8811 	msr	BASEPRI, r3
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	603b      	str	r3, [r7, #0]
}
 80058d8:	bf00      	nop
 80058da:	bf00      	nop
 80058dc:	e7fd      	b.n	80058da <xTaskIncrementTick+0x46>
 80058de:	4b41      	ldr	r3, [pc, #260]	@ (80059e4 <xTaskIncrementTick+0x150>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	4b40      	ldr	r3, [pc, #256]	@ (80059e8 <xTaskIncrementTick+0x154>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a3e      	ldr	r2, [pc, #248]	@ (80059e4 <xTaskIncrementTick+0x150>)
 80058ea:	6013      	str	r3, [r2, #0]
 80058ec:	4a3e      	ldr	r2, [pc, #248]	@ (80059e8 <xTaskIncrementTick+0x154>)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6013      	str	r3, [r2, #0]
 80058f2:	4b3e      	ldr	r3, [pc, #248]	@ (80059ec <xTaskIncrementTick+0x158>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3301      	adds	r3, #1
 80058f8:	4a3c      	ldr	r2, [pc, #240]	@ (80059ec <xTaskIncrementTick+0x158>)
 80058fa:	6013      	str	r3, [r2, #0]
 80058fc:	f000 f9a4 	bl	8005c48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005900:	4b3b      	ldr	r3, [pc, #236]	@ (80059f0 <xTaskIncrementTick+0x15c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	429a      	cmp	r2, r3
 8005908:	d348      	bcc.n	800599c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800590a:	4b36      	ldr	r3, [pc, #216]	@ (80059e4 <xTaskIncrementTick+0x150>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d104      	bne.n	800591e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005914:	4b36      	ldr	r3, [pc, #216]	@ (80059f0 <xTaskIncrementTick+0x15c>)
 8005916:	f04f 32ff 	mov.w	r2, #4294967295
 800591a:	601a      	str	r2, [r3, #0]
					break;
 800591c:	e03e      	b.n	800599c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800591e:	4b31      	ldr	r3, [pc, #196]	@ (80059e4 <xTaskIncrementTick+0x150>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	429a      	cmp	r2, r3
 8005934:	d203      	bcs.n	800593e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005936:	4a2e      	ldr	r2, [pc, #184]	@ (80059f0 <xTaskIncrementTick+0x15c>)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800593c:	e02e      	b.n	800599c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	3304      	adds	r3, #4
 8005942:	4618      	mov	r0, r3
 8005944:	f7ff fbf0 	bl	8005128 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800594c:	2b00      	cmp	r3, #0
 800594e:	d004      	beq.n	800595a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	3318      	adds	r3, #24
 8005954:	4618      	mov	r0, r3
 8005956:	f7ff fbe7 	bl	8005128 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595e:	2201      	movs	r2, #1
 8005960:	409a      	lsls	r2, r3
 8005962:	4b24      	ldr	r3, [pc, #144]	@ (80059f4 <xTaskIncrementTick+0x160>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4313      	orrs	r3, r2
 8005968:	4a22      	ldr	r2, [pc, #136]	@ (80059f4 <xTaskIncrementTick+0x160>)
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005970:	4613      	mov	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4a1f      	ldr	r2, [pc, #124]	@ (80059f8 <xTaskIncrementTick+0x164>)
 800597a:	441a      	add	r2, r3
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	3304      	adds	r3, #4
 8005980:	4619      	mov	r1, r3
 8005982:	4610      	mov	r0, r2
 8005984:	f7ff fb73 	bl	800506e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800598c:	4b1b      	ldr	r3, [pc, #108]	@ (80059fc <xTaskIncrementTick+0x168>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005992:	429a      	cmp	r2, r3
 8005994:	d3b9      	bcc.n	800590a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005996:	2301      	movs	r3, #1
 8005998:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800599a:	e7b6      	b.n	800590a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800599c:	4b17      	ldr	r3, [pc, #92]	@ (80059fc <xTaskIncrementTick+0x168>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059a2:	4915      	ldr	r1, [pc, #84]	@ (80059f8 <xTaskIncrementTick+0x164>)
 80059a4:	4613      	mov	r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	440b      	add	r3, r1
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d901      	bls.n	80059b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80059b4:	2301      	movs	r3, #1
 80059b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80059b8:	4b11      	ldr	r3, [pc, #68]	@ (8005a00 <xTaskIncrementTick+0x16c>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d007      	beq.n	80059d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80059c0:	2301      	movs	r3, #1
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	e004      	b.n	80059d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80059c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005a04 <xTaskIncrementTick+0x170>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	3301      	adds	r3, #1
 80059cc:	4a0d      	ldr	r2, [pc, #52]	@ (8005a04 <xTaskIncrementTick+0x170>)
 80059ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80059d0:	697b      	ldr	r3, [r7, #20]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	2000090c 	.word	0x2000090c
 80059e0:	200008e8 	.word	0x200008e8
 80059e4:	2000089c 	.word	0x2000089c
 80059e8:	200008a0 	.word	0x200008a0
 80059ec:	200008fc 	.word	0x200008fc
 80059f0:	20000904 	.word	0x20000904
 80059f4:	200008ec 	.word	0x200008ec
 80059f8:	200007e8 	.word	0x200007e8
 80059fc:	200007e4 	.word	0x200007e4
 8005a00:	200008f8 	.word	0x200008f8
 8005a04:	200008f4 	.word	0x200008f4

08005a08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8005ab8 <vTaskSwitchContext+0xb0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a16:	4b29      	ldr	r3, [pc, #164]	@ (8005abc <vTaskSwitchContext+0xb4>)
 8005a18:	2201      	movs	r2, #1
 8005a1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a1c:	e045      	b.n	8005aaa <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005a1e:	4b27      	ldr	r3, [pc, #156]	@ (8005abc <vTaskSwitchContext+0xb4>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a24:	4b26      	ldr	r3, [pc, #152]	@ (8005ac0 <vTaskSwitchContext+0xb8>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	fab3 f383 	clz	r3, r3
 8005a30:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005a32:	7afb      	ldrb	r3, [r7, #11]
 8005a34:	f1c3 031f 	rsb	r3, r3, #31
 8005a38:	617b      	str	r3, [r7, #20]
 8005a3a:	4922      	ldr	r1, [pc, #136]	@ (8005ac4 <vTaskSwitchContext+0xbc>)
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	440b      	add	r3, r1
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10b      	bne.n	8005a66 <vTaskSwitchContext+0x5e>
	__asm volatile
 8005a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	607b      	str	r3, [r7, #4]
}
 8005a60:	bf00      	nop
 8005a62:	bf00      	nop
 8005a64:	e7fd      	b.n	8005a62 <vTaskSwitchContext+0x5a>
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4a14      	ldr	r2, [pc, #80]	@ (8005ac4 <vTaskSwitchContext+0xbc>)
 8005a72:	4413      	add	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	605a      	str	r2, [r3, #4]
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	3308      	adds	r3, #8
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d104      	bne.n	8005a96 <vTaskSwitchContext+0x8e>
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	605a      	str	r2, [r3, #4]
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	4a0a      	ldr	r2, [pc, #40]	@ (8005ac8 <vTaskSwitchContext+0xc0>)
 8005a9e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005aa0:	4b09      	ldr	r3, [pc, #36]	@ (8005ac8 <vTaskSwitchContext+0xc0>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	334c      	adds	r3, #76	@ 0x4c
 8005aa6:	4a09      	ldr	r2, [pc, #36]	@ (8005acc <vTaskSwitchContext+0xc4>)
 8005aa8:	6013      	str	r3, [r2, #0]
}
 8005aaa:	bf00      	nop
 8005aac:	371c      	adds	r7, #28
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	2000090c 	.word	0x2000090c
 8005abc:	200008f8 	.word	0x200008f8
 8005ac0:	200008ec 	.word	0x200008ec
 8005ac4:	200007e8 	.word	0x200007e8
 8005ac8:	200007e4 	.word	0x200007e4
 8005acc:	20000024 	.word	0x20000024

08005ad0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ad8:	f000 f852 	bl	8005b80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005adc:	4b06      	ldr	r3, [pc, #24]	@ (8005af8 <prvIdleTask+0x28>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d9f9      	bls.n	8005ad8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ae4:	4b05      	ldr	r3, [pc, #20]	@ (8005afc <prvIdleTask+0x2c>)
 8005ae6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005af4:	e7f0      	b.n	8005ad8 <prvIdleTask+0x8>
 8005af6:	bf00      	nop
 8005af8:	200007e8 	.word	0x200007e8
 8005afc:	e000ed04 	.word	0xe000ed04

08005b00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b06:	2300      	movs	r3, #0
 8005b08:	607b      	str	r3, [r7, #4]
 8005b0a:	e00c      	b.n	8005b26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4a12      	ldr	r2, [pc, #72]	@ (8005b60 <prvInitialiseTaskLists+0x60>)
 8005b18:	4413      	add	r3, r2
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7ff fa7a 	bl	8005014 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3301      	adds	r3, #1
 8005b24:	607b      	str	r3, [r7, #4]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b06      	cmp	r3, #6
 8005b2a:	d9ef      	bls.n	8005b0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b2c:	480d      	ldr	r0, [pc, #52]	@ (8005b64 <prvInitialiseTaskLists+0x64>)
 8005b2e:	f7ff fa71 	bl	8005014 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b32:	480d      	ldr	r0, [pc, #52]	@ (8005b68 <prvInitialiseTaskLists+0x68>)
 8005b34:	f7ff fa6e 	bl	8005014 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b38:	480c      	ldr	r0, [pc, #48]	@ (8005b6c <prvInitialiseTaskLists+0x6c>)
 8005b3a:	f7ff fa6b 	bl	8005014 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b3e:	480c      	ldr	r0, [pc, #48]	@ (8005b70 <prvInitialiseTaskLists+0x70>)
 8005b40:	f7ff fa68 	bl	8005014 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b44:	480b      	ldr	r0, [pc, #44]	@ (8005b74 <prvInitialiseTaskLists+0x74>)
 8005b46:	f7ff fa65 	bl	8005014 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b78 <prvInitialiseTaskLists+0x78>)
 8005b4c:	4a05      	ldr	r2, [pc, #20]	@ (8005b64 <prvInitialiseTaskLists+0x64>)
 8005b4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b50:	4b0a      	ldr	r3, [pc, #40]	@ (8005b7c <prvInitialiseTaskLists+0x7c>)
 8005b52:	4a05      	ldr	r2, [pc, #20]	@ (8005b68 <prvInitialiseTaskLists+0x68>)
 8005b54:	601a      	str	r2, [r3, #0]
}
 8005b56:	bf00      	nop
 8005b58:	3708      	adds	r7, #8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	200007e8 	.word	0x200007e8
 8005b64:	20000874 	.word	0x20000874
 8005b68:	20000888 	.word	0x20000888
 8005b6c:	200008a4 	.word	0x200008a4
 8005b70:	200008b8 	.word	0x200008b8
 8005b74:	200008d0 	.word	0x200008d0
 8005b78:	2000089c 	.word	0x2000089c
 8005b7c:	200008a0 	.word	0x200008a0

08005b80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b86:	e019      	b.n	8005bbc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b88:	f000 fa16 	bl	8005fb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b8c:	4b10      	ldr	r3, [pc, #64]	@ (8005bd0 <prvCheckTasksWaitingTermination+0x50>)
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3304      	adds	r3, #4
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7ff fac5 	bl	8005128 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd4 <prvCheckTasksWaitingTermination+0x54>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	4a0b      	ldr	r2, [pc, #44]	@ (8005bd4 <prvCheckTasksWaitingTermination+0x54>)
 8005ba6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd8 <prvCheckTasksWaitingTermination+0x58>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3b01      	subs	r3, #1
 8005bae:	4a0a      	ldr	r2, [pc, #40]	@ (8005bd8 <prvCheckTasksWaitingTermination+0x58>)
 8005bb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bb2:	f000 fa33 	bl	800601c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f810 	bl	8005bdc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bbc:	4b06      	ldr	r3, [pc, #24]	@ (8005bd8 <prvCheckTasksWaitingTermination+0x58>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1e1      	bne.n	8005b88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005bc4:	bf00      	nop
 8005bc6:	bf00      	nop
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	200008b8 	.word	0x200008b8
 8005bd4:	200008e4 	.word	0x200008e4
 8005bd8:	200008cc 	.word	0x200008cc

08005bdc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	334c      	adds	r3, #76	@ 0x4c
 8005be8:	4618      	mov	r0, r3
 8005bea:	f001 f987 	bl	8006efc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d108      	bne.n	8005c0a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f000 fb89 	bl	8006314 <vPortFree>
				vPortFree( pxTCB );
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fb86 	bl	8006314 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c08:	e019      	b.n	8005c3e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d103      	bne.n	8005c1c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fb7d 	bl	8006314 <vPortFree>
	}
 8005c1a:	e010      	b.n	8005c3e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d00b      	beq.n	8005c3e <prvDeleteTCB+0x62>
	__asm volatile
 8005c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	60fb      	str	r3, [r7, #12]
}
 8005c38:	bf00      	nop
 8005c3a:	bf00      	nop
 8005c3c:	e7fd      	b.n	8005c3a <prvDeleteTCB+0x5e>
	}
 8005c3e:	bf00      	nop
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8005c80 <prvResetNextTaskUnblockTime+0x38>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d104      	bne.n	8005c62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c58:	4b0a      	ldr	r3, [pc, #40]	@ (8005c84 <prvResetNextTaskUnblockTime+0x3c>)
 8005c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c60:	e008      	b.n	8005c74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c62:	4b07      	ldr	r3, [pc, #28]	@ (8005c80 <prvResetNextTaskUnblockTime+0x38>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	4a04      	ldr	r2, [pc, #16]	@ (8005c84 <prvResetNextTaskUnblockTime+0x3c>)
 8005c72:	6013      	str	r3, [r2, #0]
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	2000089c 	.word	0x2000089c
 8005c84:	20000904 	.word	0x20000904

08005c88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c92:	4b29      	ldr	r3, [pc, #164]	@ (8005d38 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c98:	4b28      	ldr	r3, [pc, #160]	@ (8005d3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7ff fa42 	bl	8005128 <uxListRemove>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10b      	bne.n	8005cc2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005caa:	4b24      	ldr	r3, [pc, #144]	@ (8005d3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb6:	43da      	mvns	r2, r3
 8005cb8:	4b21      	ldr	r3, [pc, #132]	@ (8005d40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	4a20      	ldr	r2, [pc, #128]	@ (8005d40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005cc0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc8:	d10a      	bne.n	8005ce0 <prvAddCurrentTaskToDelayedList+0x58>
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d007      	beq.n	8005ce0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8005d3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3304      	adds	r3, #4
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	481a      	ldr	r0, [pc, #104]	@ (8005d44 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005cda:	f7ff f9c8 	bl	800506e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005cde:	e026      	b.n	8005d2e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ce8:	4b14      	ldr	r3, [pc, #80]	@ (8005d3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d209      	bcs.n	8005d0c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cf8:	4b13      	ldr	r3, [pc, #76]	@ (8005d48 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8005d3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	3304      	adds	r3, #4
 8005d02:	4619      	mov	r1, r3
 8005d04:	4610      	mov	r0, r2
 8005d06:	f7ff f9d6 	bl	80050b6 <vListInsert>
}
 8005d0a:	e010      	b.n	8005d2e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8005d4c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	4b0a      	ldr	r3, [pc, #40]	@ (8005d3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3304      	adds	r3, #4
 8005d16:	4619      	mov	r1, r3
 8005d18:	4610      	mov	r0, r2
 8005d1a:	f7ff f9cc 	bl	80050b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8005d50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d202      	bcs.n	8005d2e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005d28:	4a09      	ldr	r2, [pc, #36]	@ (8005d50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	6013      	str	r3, [r2, #0]
}
 8005d2e:	bf00      	nop
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	200008e8 	.word	0x200008e8
 8005d3c:	200007e4 	.word	0x200007e4
 8005d40:	200008ec 	.word	0x200008ec
 8005d44:	200008d0 	.word	0x200008d0
 8005d48:	200008a0 	.word	0x200008a0
 8005d4c:	2000089c 	.word	0x2000089c
 8005d50:	20000904 	.word	0x20000904

08005d54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	3b04      	subs	r3, #4
 8005d64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005d6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	3b04      	subs	r3, #4
 8005d72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f023 0201 	bic.w	r2, r3, #1
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	3b04      	subs	r3, #4
 8005d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d84:	4a0c      	ldr	r2, [pc, #48]	@ (8005db8 <pxPortInitialiseStack+0x64>)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	3b14      	subs	r3, #20
 8005d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	3b04      	subs	r3, #4
 8005d9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f06f 0202 	mvn.w	r2, #2
 8005da2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	3b20      	subs	r3, #32
 8005da8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005daa:	68fb      	ldr	r3, [r7, #12]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	08005dbd 	.word	0x08005dbd

08005dbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005dc6:	4b13      	ldr	r3, [pc, #76]	@ (8005e14 <prvTaskExitError+0x58>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dce:	d00b      	beq.n	8005de8 <prvTaskExitError+0x2c>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	60fb      	str	r3, [r7, #12]
}
 8005de2:	bf00      	nop
 8005de4:	bf00      	nop
 8005de6:	e7fd      	b.n	8005de4 <prvTaskExitError+0x28>
	__asm volatile
 8005de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	60bb      	str	r3, [r7, #8]
}
 8005dfa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005dfc:	bf00      	nop
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0fc      	beq.n	8005dfe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e04:	bf00      	nop
 8005e06:	bf00      	nop
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	2000000c 	.word	0x2000000c
	...

08005e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e20:	4b07      	ldr	r3, [pc, #28]	@ (8005e40 <pxCurrentTCBConst2>)
 8005e22:	6819      	ldr	r1, [r3, #0]
 8005e24:	6808      	ldr	r0, [r1, #0]
 8005e26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e2a:	f380 8809 	msr	PSP, r0
 8005e2e:	f3bf 8f6f 	isb	sy
 8005e32:	f04f 0000 	mov.w	r0, #0
 8005e36:	f380 8811 	msr	BASEPRI, r0
 8005e3a:	4770      	bx	lr
 8005e3c:	f3af 8000 	nop.w

08005e40 <pxCurrentTCBConst2>:
 8005e40:	200007e4 	.word	0x200007e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e44:	bf00      	nop
 8005e46:	bf00      	nop

08005e48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005e48:	4808      	ldr	r0, [pc, #32]	@ (8005e6c <prvPortStartFirstTask+0x24>)
 8005e4a:	6800      	ldr	r0, [r0, #0]
 8005e4c:	6800      	ldr	r0, [r0, #0]
 8005e4e:	f380 8808 	msr	MSP, r0
 8005e52:	f04f 0000 	mov.w	r0, #0
 8005e56:	f380 8814 	msr	CONTROL, r0
 8005e5a:	b662      	cpsie	i
 8005e5c:	b661      	cpsie	f
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	df00      	svc	0
 8005e68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e6a:	bf00      	nop
 8005e6c:	e000ed08 	.word	0xe000ed08

08005e70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005e76:	4b47      	ldr	r3, [pc, #284]	@ (8005f94 <xPortStartScheduler+0x124>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a47      	ldr	r2, [pc, #284]	@ (8005f98 <xPortStartScheduler+0x128>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d10b      	bne.n	8005e98 <xPortStartScheduler+0x28>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	613b      	str	r3, [r7, #16]
}
 8005e92:	bf00      	nop
 8005e94:	bf00      	nop
 8005e96:	e7fd      	b.n	8005e94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e98:	4b3e      	ldr	r3, [pc, #248]	@ (8005f94 <xPortStartScheduler+0x124>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a3f      	ldr	r2, [pc, #252]	@ (8005f9c <xPortStartScheduler+0x12c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d10b      	bne.n	8005eba <xPortStartScheduler+0x4a>
	__asm volatile
 8005ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	60fb      	str	r3, [r7, #12]
}
 8005eb4:	bf00      	nop
 8005eb6:	bf00      	nop
 8005eb8:	e7fd      	b.n	8005eb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005eba:	4b39      	ldr	r3, [pc, #228]	@ (8005fa0 <xPortStartScheduler+0x130>)
 8005ebc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	22ff      	movs	r2, #255	@ 0xff
 8005eca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ed4:	78fb      	ldrb	r3, [r7, #3]
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	4b31      	ldr	r3, [pc, #196]	@ (8005fa4 <xPortStartScheduler+0x134>)
 8005ee0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ee2:	4b31      	ldr	r3, [pc, #196]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005ee4:	2207      	movs	r2, #7
 8005ee6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ee8:	e009      	b.n	8005efe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005eea:	4b2f      	ldr	r3, [pc, #188]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	4a2d      	ldr	r2, [pc, #180]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005ef2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ef4:	78fb      	ldrb	r3, [r7, #3]
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005efe:	78fb      	ldrb	r3, [r7, #3]
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f06:	2b80      	cmp	r3, #128	@ 0x80
 8005f08:	d0ef      	beq.n	8005eea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f0a:	4b27      	ldr	r3, [pc, #156]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f1c3 0307 	rsb	r3, r3, #7
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	d00b      	beq.n	8005f2e <xPortStartScheduler+0xbe>
	__asm volatile
 8005f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	60bb      	str	r3, [r7, #8]
}
 8005f28:	bf00      	nop
 8005f2a:	bf00      	nop
 8005f2c:	e7fd      	b.n	8005f2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	021b      	lsls	r3, r3, #8
 8005f34:	4a1c      	ldr	r2, [pc, #112]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005f36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f38:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f40:	4a19      	ldr	r2, [pc, #100]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005f42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f4c:	4b17      	ldr	r3, [pc, #92]	@ (8005fac <xPortStartScheduler+0x13c>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a16      	ldr	r2, [pc, #88]	@ (8005fac <xPortStartScheduler+0x13c>)
 8005f52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005f56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f58:	4b14      	ldr	r3, [pc, #80]	@ (8005fac <xPortStartScheduler+0x13c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a13      	ldr	r2, [pc, #76]	@ (8005fac <xPortStartScheduler+0x13c>)
 8005f5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005f62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f64:	f000 f8da 	bl	800611c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f68:	4b11      	ldr	r3, [pc, #68]	@ (8005fb0 <xPortStartScheduler+0x140>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005f6e:	f000 f8f9 	bl	8006164 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f72:	4b10      	ldr	r3, [pc, #64]	@ (8005fb4 <xPortStartScheduler+0x144>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a0f      	ldr	r2, [pc, #60]	@ (8005fb4 <xPortStartScheduler+0x144>)
 8005f78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005f7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f7e:	f7ff ff63 	bl	8005e48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f82:	f7ff fd41 	bl	8005a08 <vTaskSwitchContext>
	prvTaskExitError();
 8005f86:	f7ff ff19 	bl	8005dbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3718      	adds	r7, #24
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	e000ed00 	.word	0xe000ed00
 8005f98:	410fc271 	.word	0x410fc271
 8005f9c:	410fc270 	.word	0x410fc270
 8005fa0:	e000e400 	.word	0xe000e400
 8005fa4:	20000910 	.word	0x20000910
 8005fa8:	20000914 	.word	0x20000914
 8005fac:	e000ed20 	.word	0xe000ed20
 8005fb0:	2000000c 	.word	0x2000000c
 8005fb4:	e000ef34 	.word	0xe000ef34

08005fb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	607b      	str	r3, [r7, #4]
}
 8005fd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005fd2:	4b10      	ldr	r3, [pc, #64]	@ (8006014 <vPortEnterCritical+0x5c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	4a0e      	ldr	r2, [pc, #56]	@ (8006014 <vPortEnterCritical+0x5c>)
 8005fda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8006014 <vPortEnterCritical+0x5c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d110      	bne.n	8006006 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8006018 <vPortEnterCritical+0x60>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00b      	beq.n	8006006 <vPortEnterCritical+0x4e>
	__asm volatile
 8005fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff2:	f383 8811 	msr	BASEPRI, r3
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	603b      	str	r3, [r7, #0]
}
 8006000:	bf00      	nop
 8006002:	bf00      	nop
 8006004:	e7fd      	b.n	8006002 <vPortEnterCritical+0x4a>
	}
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	2000000c 	.word	0x2000000c
 8006018:	e000ed04 	.word	0xe000ed04

0800601c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006022:	4b12      	ldr	r3, [pc, #72]	@ (800606c <vPortExitCritical+0x50>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10b      	bne.n	8006042 <vPortExitCritical+0x26>
	__asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	607b      	str	r3, [r7, #4]
}
 800603c:	bf00      	nop
 800603e:	bf00      	nop
 8006040:	e7fd      	b.n	800603e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006042:	4b0a      	ldr	r3, [pc, #40]	@ (800606c <vPortExitCritical+0x50>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3b01      	subs	r3, #1
 8006048:	4a08      	ldr	r2, [pc, #32]	@ (800606c <vPortExitCritical+0x50>)
 800604a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800604c:	4b07      	ldr	r3, [pc, #28]	@ (800606c <vPortExitCritical+0x50>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d105      	bne.n	8006060 <vPortExitCritical+0x44>
 8006054:	2300      	movs	r3, #0
 8006056:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800605e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	2000000c 	.word	0x2000000c

08006070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006070:	f3ef 8009 	mrs	r0, PSP
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	4b15      	ldr	r3, [pc, #84]	@ (80060d0 <pxCurrentTCBConst>)
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	f01e 0f10 	tst.w	lr, #16
 8006080:	bf08      	it	eq
 8006082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800608a:	6010      	str	r0, [r2, #0]
 800608c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006090:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006094:	f380 8811 	msr	BASEPRI, r0
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f7ff fcb2 	bl	8005a08 <vTaskSwitchContext>
 80060a4:	f04f 0000 	mov.w	r0, #0
 80060a8:	f380 8811 	msr	BASEPRI, r0
 80060ac:	bc09      	pop	{r0, r3}
 80060ae:	6819      	ldr	r1, [r3, #0]
 80060b0:	6808      	ldr	r0, [r1, #0]
 80060b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b6:	f01e 0f10 	tst.w	lr, #16
 80060ba:	bf08      	it	eq
 80060bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80060c0:	f380 8809 	msr	PSP, r0
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	f3af 8000 	nop.w

080060d0 <pxCurrentTCBConst>:
 80060d0:	200007e4 	.word	0x200007e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80060d4:	bf00      	nop
 80060d6:	bf00      	nop

080060d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
	__asm volatile
 80060de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	607b      	str	r3, [r7, #4]
}
 80060f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80060f2:	f7ff fbcf 	bl	8005894 <xTaskIncrementTick>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d003      	beq.n	8006104 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80060fc:	4b06      	ldr	r3, [pc, #24]	@ (8006118 <SysTick_Handler+0x40>)
 80060fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	2300      	movs	r3, #0
 8006106:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	f383 8811 	msr	BASEPRI, r3
}
 800610e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006110:	bf00      	nop
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	e000ed04 	.word	0xe000ed04

0800611c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800611c:	b480      	push	{r7}
 800611e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006120:	4b0b      	ldr	r3, [pc, #44]	@ (8006150 <vPortSetupTimerInterrupt+0x34>)
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006126:	4b0b      	ldr	r3, [pc, #44]	@ (8006154 <vPortSetupTimerInterrupt+0x38>)
 8006128:	2200      	movs	r2, #0
 800612a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800612c:	4b0a      	ldr	r3, [pc, #40]	@ (8006158 <vPortSetupTimerInterrupt+0x3c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a0a      	ldr	r2, [pc, #40]	@ (800615c <vPortSetupTimerInterrupt+0x40>)
 8006132:	fba2 2303 	umull	r2, r3, r2, r3
 8006136:	099b      	lsrs	r3, r3, #6
 8006138:	4a09      	ldr	r2, [pc, #36]	@ (8006160 <vPortSetupTimerInterrupt+0x44>)
 800613a:	3b01      	subs	r3, #1
 800613c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800613e:	4b04      	ldr	r3, [pc, #16]	@ (8006150 <vPortSetupTimerInterrupt+0x34>)
 8006140:	2207      	movs	r2, #7
 8006142:	601a      	str	r2, [r3, #0]
}
 8006144:	bf00      	nop
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	e000e010 	.word	0xe000e010
 8006154:	e000e018 	.word	0xe000e018
 8006158:	20000000 	.word	0x20000000
 800615c:	10624dd3 	.word	0x10624dd3
 8006160:	e000e014 	.word	0xe000e014

08006164 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006164:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006174 <vPortEnableVFP+0x10>
 8006168:	6801      	ldr	r1, [r0, #0]
 800616a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800616e:	6001      	str	r1, [r0, #0]
 8006170:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006172:	bf00      	nop
 8006174:	e000ed88 	.word	0xe000ed88

08006178 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b08a      	sub	sp, #40	@ 0x28
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006180:	2300      	movs	r3, #0
 8006182:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006184:	f7ff fada 	bl	800573c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006188:	4b5c      	ldr	r3, [pc, #368]	@ (80062fc <pvPortMalloc+0x184>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006190:	f000 f924 	bl	80063dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006194:	4b5a      	ldr	r3, [pc, #360]	@ (8006300 <pvPortMalloc+0x188>)
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4013      	ands	r3, r2
 800619c:	2b00      	cmp	r3, #0
 800619e:	f040 8095 	bne.w	80062cc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d01e      	beq.n	80061e6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80061a8:	2208      	movs	r2, #8
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4413      	add	r3, r2
 80061ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f003 0307 	and.w	r3, r3, #7
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d015      	beq.n	80061e6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f023 0307 	bic.w	r3, r3, #7
 80061c0:	3308      	adds	r3, #8
 80061c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f003 0307 	and.w	r3, r3, #7
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00b      	beq.n	80061e6 <pvPortMalloc+0x6e>
	__asm volatile
 80061ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	617b      	str	r3, [r7, #20]
}
 80061e0:	bf00      	nop
 80061e2:	bf00      	nop
 80061e4:	e7fd      	b.n	80061e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d06f      	beq.n	80062cc <pvPortMalloc+0x154>
 80061ec:	4b45      	ldr	r3, [pc, #276]	@ (8006304 <pvPortMalloc+0x18c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d86a      	bhi.n	80062cc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061f6:	4b44      	ldr	r3, [pc, #272]	@ (8006308 <pvPortMalloc+0x190>)
 80061f8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061fa:	4b43      	ldr	r3, [pc, #268]	@ (8006308 <pvPortMalloc+0x190>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006200:	e004      	b.n	800620c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006204:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800620c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	429a      	cmp	r2, r3
 8006214:	d903      	bls.n	800621e <pvPortMalloc+0xa6>
 8006216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1f1      	bne.n	8006202 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800621e:	4b37      	ldr	r3, [pc, #220]	@ (80062fc <pvPortMalloc+0x184>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006224:	429a      	cmp	r2, r3
 8006226:	d051      	beq.n	80062cc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2208      	movs	r2, #8
 800622e:	4413      	add	r3, r2
 8006230:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800623a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	1ad2      	subs	r2, r2, r3
 8006242:	2308      	movs	r3, #8
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	429a      	cmp	r2, r3
 8006248:	d920      	bls.n	800628c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800624a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4413      	add	r3, r2
 8006250:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	f003 0307 	and.w	r3, r3, #7
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00b      	beq.n	8006274 <pvPortMalloc+0xfc>
	__asm volatile
 800625c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	613b      	str	r3, [r7, #16]
}
 800626e:	bf00      	nop
 8006270:	bf00      	nop
 8006272:	e7fd      	b.n	8006270 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006276:	685a      	ldr	r2, [r3, #4]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	1ad2      	subs	r2, r2, r3
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006286:	69b8      	ldr	r0, [r7, #24]
 8006288:	f000 f90a 	bl	80064a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800628c:	4b1d      	ldr	r3, [pc, #116]	@ (8006304 <pvPortMalloc+0x18c>)
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	4a1b      	ldr	r2, [pc, #108]	@ (8006304 <pvPortMalloc+0x18c>)
 8006298:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800629a:	4b1a      	ldr	r3, [pc, #104]	@ (8006304 <pvPortMalloc+0x18c>)
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	4b1b      	ldr	r3, [pc, #108]	@ (800630c <pvPortMalloc+0x194>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d203      	bcs.n	80062ae <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80062a6:	4b17      	ldr	r3, [pc, #92]	@ (8006304 <pvPortMalloc+0x18c>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a18      	ldr	r2, [pc, #96]	@ (800630c <pvPortMalloc+0x194>)
 80062ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80062ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	4b13      	ldr	r3, [pc, #76]	@ (8006300 <pvPortMalloc+0x188>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	431a      	orrs	r2, r3
 80062b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062be:	2200      	movs	r2, #0
 80062c0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80062c2:	4b13      	ldr	r3, [pc, #76]	@ (8006310 <pvPortMalloc+0x198>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3301      	adds	r3, #1
 80062c8:	4a11      	ldr	r2, [pc, #68]	@ (8006310 <pvPortMalloc+0x198>)
 80062ca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062cc:	f7ff fa44 	bl	8005758 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	f003 0307 	and.w	r3, r3, #7
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00b      	beq.n	80062f2 <pvPortMalloc+0x17a>
	__asm volatile
 80062da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062de:	f383 8811 	msr	BASEPRI, r3
 80062e2:	f3bf 8f6f 	isb	sy
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	60fb      	str	r3, [r7, #12]
}
 80062ec:	bf00      	nop
 80062ee:	bf00      	nop
 80062f0:	e7fd      	b.n	80062ee <pvPortMalloc+0x176>
	return pvReturn;
 80062f2:	69fb      	ldr	r3, [r7, #28]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3728      	adds	r7, #40	@ 0x28
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	200014d8 	.word	0x200014d8
 8006300:	200014ec 	.word	0x200014ec
 8006304:	200014dc 	.word	0x200014dc
 8006308:	200014d0 	.word	0x200014d0
 800630c:	200014e0 	.word	0x200014e0
 8006310:	200014e4 	.word	0x200014e4

08006314 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d04f      	beq.n	80063c6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006326:	2308      	movs	r3, #8
 8006328:	425b      	negs	r3, r3
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	4413      	add	r3, r2
 800632e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	4b25      	ldr	r3, [pc, #148]	@ (80063d0 <vPortFree+0xbc>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4013      	ands	r3, r2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10b      	bne.n	800635a <vPortFree+0x46>
	__asm volatile
 8006342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	60fb      	str	r3, [r7, #12]
}
 8006354:	bf00      	nop
 8006356:	bf00      	nop
 8006358:	e7fd      	b.n	8006356 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00b      	beq.n	800637a <vPortFree+0x66>
	__asm volatile
 8006362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	60bb      	str	r3, [r7, #8]
}
 8006374:	bf00      	nop
 8006376:	bf00      	nop
 8006378:	e7fd      	b.n	8006376 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	4b14      	ldr	r3, [pc, #80]	@ (80063d0 <vPortFree+0xbc>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4013      	ands	r3, r2
 8006384:	2b00      	cmp	r3, #0
 8006386:	d01e      	beq.n	80063c6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d11a      	bne.n	80063c6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	4b0e      	ldr	r3, [pc, #56]	@ (80063d0 <vPortFree+0xbc>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	43db      	mvns	r3, r3
 800639a:	401a      	ands	r2, r3
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80063a0:	f7ff f9cc 	bl	800573c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	4b0a      	ldr	r3, [pc, #40]	@ (80063d4 <vPortFree+0xc0>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4413      	add	r3, r2
 80063ae:	4a09      	ldr	r2, [pc, #36]	@ (80063d4 <vPortFree+0xc0>)
 80063b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063b2:	6938      	ldr	r0, [r7, #16]
 80063b4:	f000 f874 	bl	80064a0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80063b8:	4b07      	ldr	r3, [pc, #28]	@ (80063d8 <vPortFree+0xc4>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3301      	adds	r3, #1
 80063be:	4a06      	ldr	r2, [pc, #24]	@ (80063d8 <vPortFree+0xc4>)
 80063c0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80063c2:	f7ff f9c9 	bl	8005758 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063c6:	bf00      	nop
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	200014ec 	.word	0x200014ec
 80063d4:	200014dc 	.word	0x200014dc
 80063d8:	200014e8 	.word	0x200014e8

080063dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063e2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80063e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063e8:	4b27      	ldr	r3, [pc, #156]	@ (8006488 <prvHeapInit+0xac>)
 80063ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f003 0307 	and.w	r3, r3, #7
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00c      	beq.n	8006410 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	3307      	adds	r3, #7
 80063fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f023 0307 	bic.w	r3, r3, #7
 8006402:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	4a1f      	ldr	r2, [pc, #124]	@ (8006488 <prvHeapInit+0xac>)
 800640c:	4413      	add	r3, r2
 800640e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006414:	4a1d      	ldr	r2, [pc, #116]	@ (800648c <prvHeapInit+0xb0>)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800641a:	4b1c      	ldr	r3, [pc, #112]	@ (800648c <prvHeapInit+0xb0>)
 800641c:	2200      	movs	r2, #0
 800641e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	4413      	add	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006428:	2208      	movs	r2, #8
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	1a9b      	subs	r3, r3, r2
 800642e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f023 0307 	bic.w	r3, r3, #7
 8006436:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4a15      	ldr	r2, [pc, #84]	@ (8006490 <prvHeapInit+0xb4>)
 800643c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800643e:	4b14      	ldr	r3, [pc, #80]	@ (8006490 <prvHeapInit+0xb4>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2200      	movs	r2, #0
 8006444:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006446:	4b12      	ldr	r3, [pc, #72]	@ (8006490 <prvHeapInit+0xb4>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2200      	movs	r2, #0
 800644c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	1ad2      	subs	r2, r2, r3
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800645c:	4b0c      	ldr	r3, [pc, #48]	@ (8006490 <prvHeapInit+0xb4>)
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	4a0a      	ldr	r2, [pc, #40]	@ (8006494 <prvHeapInit+0xb8>)
 800646a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	4a09      	ldr	r2, [pc, #36]	@ (8006498 <prvHeapInit+0xbc>)
 8006472:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006474:	4b09      	ldr	r3, [pc, #36]	@ (800649c <prvHeapInit+0xc0>)
 8006476:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800647a:	601a      	str	r2, [r3, #0]
}
 800647c:	bf00      	nop
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	20000918 	.word	0x20000918
 800648c:	200014d0 	.word	0x200014d0
 8006490:	200014d8 	.word	0x200014d8
 8006494:	200014e0 	.word	0x200014e0
 8006498:	200014dc 	.word	0x200014dc
 800649c:	200014ec 	.word	0x200014ec

080064a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064a8:	4b28      	ldr	r3, [pc, #160]	@ (800654c <prvInsertBlockIntoFreeList+0xac>)
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	e002      	b.n	80064b4 <prvInsertBlockIntoFreeList+0x14>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d8f7      	bhi.n	80064ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	4413      	add	r3, r2
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d108      	bne.n	80064e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	441a      	add	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	441a      	add	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d118      	bne.n	8006528 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	4b15      	ldr	r3, [pc, #84]	@ (8006550 <prvInsertBlockIntoFreeList+0xb0>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d00d      	beq.n	800651e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	441a      	add	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	601a      	str	r2, [r3, #0]
 800651c:	e008      	b.n	8006530 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800651e:	4b0c      	ldr	r3, [pc, #48]	@ (8006550 <prvInsertBlockIntoFreeList+0xb0>)
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	e003      	b.n	8006530 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	429a      	cmp	r2, r3
 8006536:	d002      	beq.n	800653e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800653e:	bf00      	nop
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	200014d0 	.word	0x200014d0
 8006550:	200014d8 	.word	0x200014d8

08006554 <MCP23S17_Write>:
	MCP23S17_Write(MCPGPIOA, 0xff);
	MCP23S17_Write(MCPGPIOB, 0xff);
}

// Fonction pour écrire dans un registre du MCP23S17
void MCP23S17_Write( uint8_t reg, uint8_t value) {
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	4603      	mov	r3, r0
 800655c:	460a      	mov	r2, r1
 800655e:	71fb      	strb	r3, [r7, #7]
 8006560:	4613      	mov	r3, r2
 8006562:	71bb      	strb	r3, [r7, #6]
	uint8_t data[3] = {MCP23S17_ADDR_WRITE, reg, value};
 8006564:	2340      	movs	r3, #64	@ 0x40
 8006566:	733b      	strb	r3, [r7, #12]
 8006568:	79fb      	ldrb	r3, [r7, #7]
 800656a:	737b      	strb	r3, [r7, #13]
 800656c:	79bb      	ldrb	r3, [r7, #6]
 800656e:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // CS Low
 8006570:	2200      	movs	r2, #0
 8006572:	2180      	movs	r1, #128	@ 0x80
 8006574:	4809      	ldr	r0, [pc, #36]	@ (800659c <MCP23S17_Write+0x48>)
 8006576:	f7fb f93d 	bl	80017f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, data, 3, HAL_MAX_DELAY);
 800657a:	f107 010c 	add.w	r1, r7, #12
 800657e:	f04f 33ff 	mov.w	r3, #4294967295
 8006582:	2203      	movs	r2, #3
 8006584:	4806      	ldr	r0, [pc, #24]	@ (80065a0 <MCP23S17_Write+0x4c>)
 8006586:	f7fc fd42 	bl	800300e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);   // CS High
 800658a:	2201      	movs	r2, #1
 800658c:	2180      	movs	r1, #128	@ 0x80
 800658e:	4803      	ldr	r0, [pc, #12]	@ (800659c <MCP23S17_Write+0x48>)
 8006590:	f7fb f930 	bl	80017f4 <HAL_GPIO_WritePin>
}
 8006594:	bf00      	nop
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	48000400 	.word	0x48000400
 80065a0:	200006a4 	.word	0x200006a4

080065a4 <drv_uart2_receive>:
#include "main.h"
#include "drv_uart2.h"
#include "usart.h"

uint8_t drv_uart2_receive(char * pData, uint16_t size)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	460b      	mov	r3, r1
 80065ae:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&huart2, (uint8_t*)(pData), size, HAL_MAX_DELAY);
 80065b0:	887a      	ldrh	r2, [r7, #2]
 80065b2:	f04f 33ff 	mov.w	r3, #4294967295
 80065b6:	6879      	ldr	r1, [r7, #4]
 80065b8:	4803      	ldr	r0, [pc, #12]	@ (80065c8 <drv_uart2_receive+0x24>)
 80065ba:	f7fd fba0 	bl	8003cfe <HAL_UART_Receive>

	return 0;	// Life's too short for error management
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3708      	adds	r7, #8
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	20000758 	.word	0x20000758

080065cc <drv_uart2_transmit>:

uint8_t drv_uart2_transmit(const char * pData, uint16_t size)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	460b      	mov	r3, r1
 80065d6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, size, HAL_MAX_DELAY);
 80065d8:	887a      	ldrh	r2, [r7, #2]
 80065da:	f04f 33ff 	mov.w	r3, #4294967295
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	4803      	ldr	r0, [pc, #12]	@ (80065f0 <drv_uart2_transmit+0x24>)
 80065e2:	f7fd fb03 	bl	8003bec <HAL_UART_Transmit>

	return 0;	// Srsly, don't do that kids
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3708      	adds	r7, #8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	20000758 	.word	0x20000758

080065f4 <sh_help>:
static int uart_write(char * s, uint16_t size) {
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
	return size;
}

static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 80065f4:	b590      	push	{r4, r7, lr}
 80065f6:	b089      	sub	sp, #36	@ 0x24
 80065f8:	af02      	add	r7, sp, #8
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8006600:	2300      	movs	r3, #0
 8006602:	617b      	str	r3, [r7, #20]
 8006604:	e029      	b.n	800665a <sh_help+0x66>
		int size;
		size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->func_list[i].c, h_shell->func_list[i].description);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 800660c:	68f9      	ldr	r1, [r7, #12]
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	4613      	mov	r3, r2
 8006612:	005b      	lsls	r3, r3, #1
 8006614:	4413      	add	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	440b      	add	r3, r1
 800661a:	3304      	adds	r3, #4
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	461c      	mov	r4, r3
 8006620:	68f9      	ldr	r1, [r7, #12]
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	4613      	mov	r3, r2
 8006626:	005b      	lsls	r3, r3, #1
 8006628:	4413      	add	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	440b      	add	r3, r1
 800662e:	330c      	adds	r3, #12
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	4623      	mov	r3, r4
 8006636:	4a0e      	ldr	r2, [pc, #56]	@ (8006670 <sh_help+0x7c>)
 8006638:	2128      	movs	r1, #40	@ 0x28
 800663a:	f000 fb3b 	bl	8006cb4 <sniprintf>
 800663e:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800664c:	6939      	ldr	r1, [r7, #16]
 800664e:	b289      	uxth	r1, r1
 8006650:	4610      	mov	r0, r2
 8006652:	4798      	blx	r3
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	3301      	adds	r3, #1
 8006658:	617b      	str	r3, [r7, #20]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	429a      	cmp	r2, r3
 8006662:	dbd0      	blt.n	8006606 <sh_help+0x12>
	}

	return 0;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	371c      	adds	r7, #28
 800666a:	46bd      	mov	sp, r7
 800666c:	bd90      	pop	{r4, r7, pc}
 800666e:	bf00      	nop
 8006670:	08007ca0 	.word	0x08007ca0

08006674 <shell_init>:

void shell_init(h_shell_t * h_shell) {
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
	int size = 0;
 800667c:	2300      	movs	r3, #0
 800667e:	60fb      	str	r3, [r7, #12]

	h_shell->func_list_size = 0;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	601a      	str	r2, [r3, #0]

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800668c:	4a16      	ldr	r2, [pc, #88]	@ (80066e8 <shell_init+0x74>)
 800668e:	2128      	movs	r1, #40	@ 0x28
 8006690:	4618      	mov	r0, r3
 8006692:	f000 fb0f 	bl	8006cb4 <sniprintf>
 8006696:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80066a4:	68f9      	ldr	r1, [r7, #12]
 80066a6:	b289      	uxth	r1, r1
 80066a8:	4610      	mov	r0, r2
 80066aa:	4798      	blx	r3

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Correction TD (v0.2.1 du coup?)\r\n");
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80066b2:	4a0e      	ldr	r2, [pc, #56]	@ (80066ec <shell_init+0x78>)
 80066b4:	2128      	movs	r1, #40	@ 0x28
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 fafc 	bl	8006cb4 <sniprintf>
 80066bc:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80066ca:	68f9      	ldr	r1, [r7, #12]
 80066cc:	b289      	uxth	r1, r1
 80066ce:	4610      	mov	r0, r2
 80066d0:	4798      	blx	r3

	shell_add(h_shell, 'h', sh_help, "Help");
 80066d2:	4b07      	ldr	r3, [pc, #28]	@ (80066f0 <shell_init+0x7c>)
 80066d4:	4a07      	ldr	r2, [pc, #28]	@ (80066f4 <shell_init+0x80>)
 80066d6:	2168      	movs	r1, #104	@ 0x68
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f80d 	bl	80066f8 <shell_add>
}
 80066de:	bf00      	nop
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	08007cac 	.word	0x08007cac
 80066ec:	08007cd4 	.word	0x08007cd4
 80066f0:	08007cf8 	.word	0x08007cf8
 80066f4:	080065f5 	.word	0x080065f5

080066f8 <shell_add>:

int shell_add(h_shell_t * h_shell, char c, shell_func_pointer_t pfunc, char * description) {
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	607a      	str	r2, [r7, #4]
 8006702:	603b      	str	r3, [r7, #0]
 8006704:	460b      	mov	r3, r1
 8006706:	72fb      	strb	r3, [r7, #11]
	if (h_shell->func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b3f      	cmp	r3, #63	@ 0x3f
 800670e:	dc27      	bgt.n	8006760 <shell_add+0x68>
		h_shell->func_list[h_shell->func_list_size].c = c;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	68f9      	ldr	r1, [r7, #12]
 8006716:	4613      	mov	r3, r2
 8006718:	005b      	lsls	r3, r3, #1
 800671a:	4413      	add	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	440b      	add	r3, r1
 8006720:	3304      	adds	r3, #4
 8006722:	7afa      	ldrb	r2, [r7, #11]
 8006724:	701a      	strb	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].func = pfunc;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	68f9      	ldr	r1, [r7, #12]
 800672c:	4613      	mov	r3, r2
 800672e:	005b      	lsls	r3, r3, #1
 8006730:	4413      	add	r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	440b      	add	r3, r1
 8006736:	3308      	adds	r3, #8
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	601a      	str	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].description = description;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	68f9      	ldr	r1, [r7, #12]
 8006742:	4613      	mov	r3, r2
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	4413      	add	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	440b      	add	r3, r1
 800674c:	330c      	adds	r3, #12
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	601a      	str	r2, [r3, #0]
		h_shell->func_list_size++;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	1c5a      	adds	r2, r3, #1
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	601a      	str	r2, [r3, #0]
		return 0;
 800675c:	2300      	movs	r3, #0
 800675e:	e001      	b.n	8006764 <shell_add+0x6c>
	}

	return -1;
 8006760:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006764:	4618      	mov	r0, r3
 8006766:	3714      	adds	r7, #20
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 8006770:	b580      	push	{r7, lr}
 8006772:	b090      	sub	sp, #64	@ 0x40
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
	int i;

	char c = buf[0];
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8006782:	2300      	movs	r3, #0
 8006784:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006786:	e041      	b.n	800680c <shell_exec+0x9c>
		if (h_shell->func_list[i].c == c) {
 8006788:	6879      	ldr	r1, [r7, #4]
 800678a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800678c:	4613      	mov	r3, r2
 800678e:	005b      	lsls	r3, r3, #1
 8006790:	4413      	add	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	440b      	add	r3, r1
 8006796:	3304      	adds	r3, #4
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800679e:	429a      	cmp	r2, r3
 80067a0:	d131      	bne.n	8006806 <shell_exec+0x96>
			argc = 1;
 80067a2:	2301      	movs	r3, #1
 80067a4:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80067ae:	e013      	b.n	80067d8 <shell_exec+0x68>
				if(*p == ' ') {
 80067b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b20      	cmp	r3, #32
 80067b6:	d10c      	bne.n	80067d2 <shell_exec+0x62>
					*p = '\0';
 80067b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ba:	2200      	movs	r2, #0
 80067bc:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 80067be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067c0:	1c5a      	adds	r2, r3, #1
 80067c2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80067c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067c6:	3201      	adds	r2, #1
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	3340      	adds	r3, #64	@ 0x40
 80067cc:	443b      	add	r3, r7
 80067ce:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80067d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067d4:	3301      	adds	r3, #1
 80067d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80067d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d002      	beq.n	80067e6 <shell_exec+0x76>
 80067e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e2:	2b07      	cmp	r3, #7
 80067e4:	dde4      	ble.n	80067b0 <shell_exec+0x40>
				}
			}

			return h_shell->func_list[i].func(h_shell, argc, argv);
 80067e6:	6879      	ldr	r1, [r7, #4]
 80067e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80067ea:	4613      	mov	r3, r2
 80067ec:	005b      	lsls	r3, r3, #1
 80067ee:	4413      	add	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	440b      	add	r3, r1
 80067f4:	3308      	adds	r3, #8
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f107 020c 	add.w	r2, r7, #12
 80067fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	4798      	blx	r3
 8006802:	4603      	mov	r3, r0
 8006804:	e01d      	b.n	8006842 <shell_exec+0xd2>
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8006806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006808:	3301      	adds	r3, #1
 800680a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006812:	429a      	cmp	r2, r3
 8006814:	dbb8      	blt.n	8006788 <shell_exec+0x18>
		}
	}

	int size;
	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 800681c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006820:	4a0a      	ldr	r2, [pc, #40]	@ (800684c <shell_exec+0xdc>)
 8006822:	2128      	movs	r1, #40	@ 0x28
 8006824:	f000 fa46 	bl	8006cb4 <sniprintf>
 8006828:	62f8      	str	r0, [r7, #44]	@ 0x2c
	h_shell->drv.transmit(h_shell->print_buffer, size);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8006836:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006838:	b289      	uxth	r1, r1
 800683a:	4610      	mov	r0, r2
 800683c:	4798      	blx	r3
	return -1;
 800683e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006842:	4618      	mov	r0, r3
 8006844:	3740      	adds	r7, #64	@ 0x40
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	08007d00 	.word	0x08007d00

08006850 <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run(h_shell_t * h_shell) {
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8006858:	2300      	movs	r3, #0
 800685a:	617b      	str	r3, [r7, #20]
	int pos = 0;
 800685c:	2300      	movs	r3, #0
 800685e:	613b      	str	r3, [r7, #16]

	while (1) {
		h_shell->drv.transmit(prompt, 2);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8006866:	2102      	movs	r1, #2
 8006868:	483a      	ldr	r0, [pc, #232]	@ (8006954 <shell_run+0x104>)
 800686a:	4798      	blx	r3
		reading = 1;
 800686c:	2301      	movs	r3, #1
 800686e:	617b      	str	r3, [r7, #20]

		while(reading) {
 8006870:	e064      	b.n	800693c <shell_run+0xec>
			char c;
			h_shell->drv.receive(&c, 1);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8006878:	f107 020b 	add.w	r2, r7, #11
 800687c:	2101      	movs	r1, #1
 800687e:	4610      	mov	r0, r2
 8006880:	4798      	blx	r3
			int size;

			switch (c) {
 8006882:	7afb      	ldrb	r3, [r7, #11]
 8006884:	2b08      	cmp	r3, #8
 8006886:	d036      	beq.n	80068f6 <shell_run+0xa6>
 8006888:	2b0d      	cmp	r3, #13
 800688a:	d141      	bne.n	8006910 <shell_run+0xc0>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8006892:	4a31      	ldr	r2, [pc, #196]	@ (8006958 <shell_run+0x108>)
 8006894:	2128      	movs	r1, #40	@ 0x28
 8006896:	4618      	mov	r0, r3
 8006898:	f000 fa0c 	bl	8006cb4 <sniprintf>
 800689c:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80068aa:	68f9      	ldr	r1, [r7, #12]
 80068ac:	b289      	uxth	r1, r1
 80068ae:	4610      	mov	r0, r2
 80068b0:	4798      	blx	r3
				h_shell->cmd_buffer[pos++] = 0;     //add \0 char at end of string
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	1c5a      	adds	r2, r3, #1
 80068b6:	613a      	str	r2, [r7, #16]
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	4413      	add	r3, r2
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, ":%s\r\n", h_shell->cmd_buffer);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 80068ce:	4a23      	ldr	r2, [pc, #140]	@ (800695c <shell_run+0x10c>)
 80068d0:	2128      	movs	r1, #40	@ 0x28
 80068d2:	f000 f9ef 	bl	8006cb4 <sniprintf>
 80068d6:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80068e4:	68f9      	ldr	r1, [r7, #12]
 80068e6:	b289      	uxth	r1, r1
 80068e8:	4610      	mov	r0, r2
 80068ea:	4798      	blx	r3
				reading = 0;        //exit read loop
 80068ec:	2300      	movs	r3, #0
 80068ee:	617b      	str	r3, [r7, #20]
				pos = 0;            //reset buffer
 80068f0:	2300      	movs	r3, #0
 80068f2:	613b      	str	r3, [r7, #16]
				break;
 80068f4:	e022      	b.n	800693c <shell_run+0xec>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	dd1e      	ble.n	800693a <shell_run+0xea>
					pos--;          //remove it in buffer
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	3b01      	subs	r3, #1
 8006900:	613b      	str	r3, [r7, #16]

					h_shell->drv.transmit(backspace, 3);	// delete the char on the terminal
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8006908:	2103      	movs	r1, #3
 800690a:	4815      	ldr	r0, [pc, #84]	@ (8006960 <shell_run+0x110>)
 800690c:	4798      	blx	r3
				}
				break;
 800690e:	e014      	b.n	800693a <shell_run+0xea>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	2b27      	cmp	r3, #39	@ 0x27
 8006914:	dc12      	bgt.n	800693c <shell_run+0xec>
					h_shell->drv.transmit(&c, 1);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 800691c:	f107 020b 	add.w	r2, r7, #11
 8006920:	2101      	movs	r1, #1
 8006922:	4610      	mov	r0, r2
 8006924:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c; //store
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	613a      	str	r2, [r7, #16]
 800692c:	7af9      	ldrb	r1, [r7, #11]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	4413      	add	r3, r2
 8006932:	460a      	mov	r2, r1
 8006934:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
 8006938:	e000      	b.n	800693c <shell_run+0xec>
				break;
 800693a:	bf00      	nop
		while(reading) {
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d197      	bne.n	8006872 <shell_run+0x22>
				}
			}
		}
		shell_exec(h_shell, h_shell->cmd_buffer);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8006948:	4619      	mov	r1, r3
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7ff ff10 	bl	8006770 <shell_exec>
		h_shell->drv.transmit(prompt, 2);
 8006950:	e786      	b.n	8006860 <shell_run+0x10>
 8006952:	bf00      	nop
 8006954:	20000014 	.word	0x20000014
 8006958:	08007d18 	.word	0x08007d18
 800695c:	08007d1c 	.word	0x08007d1c
 8006960:	20000010 	.word	0x20000010

08006964 <atoi>:
 8006964:	220a      	movs	r2, #10
 8006966:	2100      	movs	r1, #0
 8006968:	f000 b87a 	b.w	8006a60 <strtol>

0800696c <_strtol_l.constprop.0>:
 800696c:	2b24      	cmp	r3, #36	@ 0x24
 800696e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006972:	4686      	mov	lr, r0
 8006974:	4690      	mov	r8, r2
 8006976:	d801      	bhi.n	800697c <_strtol_l.constprop.0+0x10>
 8006978:	2b01      	cmp	r3, #1
 800697a:	d106      	bne.n	800698a <_strtol_l.constprop.0+0x1e>
 800697c:	f000 fb4a 	bl	8007014 <__errno>
 8006980:	2316      	movs	r3, #22
 8006982:	6003      	str	r3, [r0, #0]
 8006984:	2000      	movs	r0, #0
 8006986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800698a:	4834      	ldr	r0, [pc, #208]	@ (8006a5c <_strtol_l.constprop.0+0xf0>)
 800698c:	460d      	mov	r5, r1
 800698e:	462a      	mov	r2, r5
 8006990:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006994:	5d06      	ldrb	r6, [r0, r4]
 8006996:	f016 0608 	ands.w	r6, r6, #8
 800699a:	d1f8      	bne.n	800698e <_strtol_l.constprop.0+0x22>
 800699c:	2c2d      	cmp	r4, #45	@ 0x2d
 800699e:	d12d      	bne.n	80069fc <_strtol_l.constprop.0+0x90>
 80069a0:	782c      	ldrb	r4, [r5, #0]
 80069a2:	2601      	movs	r6, #1
 80069a4:	1c95      	adds	r5, r2, #2
 80069a6:	f033 0210 	bics.w	r2, r3, #16
 80069aa:	d109      	bne.n	80069c0 <_strtol_l.constprop.0+0x54>
 80069ac:	2c30      	cmp	r4, #48	@ 0x30
 80069ae:	d12a      	bne.n	8006a06 <_strtol_l.constprop.0+0x9a>
 80069b0:	782a      	ldrb	r2, [r5, #0]
 80069b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80069b6:	2a58      	cmp	r2, #88	@ 0x58
 80069b8:	d125      	bne.n	8006a06 <_strtol_l.constprop.0+0x9a>
 80069ba:	786c      	ldrb	r4, [r5, #1]
 80069bc:	2310      	movs	r3, #16
 80069be:	3502      	adds	r5, #2
 80069c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80069c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80069c8:	2200      	movs	r2, #0
 80069ca:	fbbc f9f3 	udiv	r9, ip, r3
 80069ce:	4610      	mov	r0, r2
 80069d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80069d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80069d8:	2f09      	cmp	r7, #9
 80069da:	d81b      	bhi.n	8006a14 <_strtol_l.constprop.0+0xa8>
 80069dc:	463c      	mov	r4, r7
 80069de:	42a3      	cmp	r3, r4
 80069e0:	dd27      	ble.n	8006a32 <_strtol_l.constprop.0+0xc6>
 80069e2:	1c57      	adds	r7, r2, #1
 80069e4:	d007      	beq.n	80069f6 <_strtol_l.constprop.0+0x8a>
 80069e6:	4581      	cmp	r9, r0
 80069e8:	d320      	bcc.n	8006a2c <_strtol_l.constprop.0+0xc0>
 80069ea:	d101      	bne.n	80069f0 <_strtol_l.constprop.0+0x84>
 80069ec:	45a2      	cmp	sl, r4
 80069ee:	db1d      	blt.n	8006a2c <_strtol_l.constprop.0+0xc0>
 80069f0:	fb00 4003 	mla	r0, r0, r3, r4
 80069f4:	2201      	movs	r2, #1
 80069f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069fa:	e7eb      	b.n	80069d4 <_strtol_l.constprop.0+0x68>
 80069fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80069fe:	bf04      	itt	eq
 8006a00:	782c      	ldrbeq	r4, [r5, #0]
 8006a02:	1c95      	addeq	r5, r2, #2
 8006a04:	e7cf      	b.n	80069a6 <_strtol_l.constprop.0+0x3a>
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1da      	bne.n	80069c0 <_strtol_l.constprop.0+0x54>
 8006a0a:	2c30      	cmp	r4, #48	@ 0x30
 8006a0c:	bf0c      	ite	eq
 8006a0e:	2308      	moveq	r3, #8
 8006a10:	230a      	movne	r3, #10
 8006a12:	e7d5      	b.n	80069c0 <_strtol_l.constprop.0+0x54>
 8006a14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006a18:	2f19      	cmp	r7, #25
 8006a1a:	d801      	bhi.n	8006a20 <_strtol_l.constprop.0+0xb4>
 8006a1c:	3c37      	subs	r4, #55	@ 0x37
 8006a1e:	e7de      	b.n	80069de <_strtol_l.constprop.0+0x72>
 8006a20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006a24:	2f19      	cmp	r7, #25
 8006a26:	d804      	bhi.n	8006a32 <_strtol_l.constprop.0+0xc6>
 8006a28:	3c57      	subs	r4, #87	@ 0x57
 8006a2a:	e7d8      	b.n	80069de <_strtol_l.constprop.0+0x72>
 8006a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a30:	e7e1      	b.n	80069f6 <_strtol_l.constprop.0+0x8a>
 8006a32:	1c53      	adds	r3, r2, #1
 8006a34:	d108      	bne.n	8006a48 <_strtol_l.constprop.0+0xdc>
 8006a36:	2322      	movs	r3, #34	@ 0x22
 8006a38:	f8ce 3000 	str.w	r3, [lr]
 8006a3c:	4660      	mov	r0, ip
 8006a3e:	f1b8 0f00 	cmp.w	r8, #0
 8006a42:	d0a0      	beq.n	8006986 <_strtol_l.constprop.0+0x1a>
 8006a44:	1e69      	subs	r1, r5, #1
 8006a46:	e006      	b.n	8006a56 <_strtol_l.constprop.0+0xea>
 8006a48:	b106      	cbz	r6, 8006a4c <_strtol_l.constprop.0+0xe0>
 8006a4a:	4240      	negs	r0, r0
 8006a4c:	f1b8 0f00 	cmp.w	r8, #0
 8006a50:	d099      	beq.n	8006986 <_strtol_l.constprop.0+0x1a>
 8006a52:	2a00      	cmp	r2, #0
 8006a54:	d1f6      	bne.n	8006a44 <_strtol_l.constprop.0+0xd8>
 8006a56:	f8c8 1000 	str.w	r1, [r8]
 8006a5a:	e794      	b.n	8006986 <_strtol_l.constprop.0+0x1a>
 8006a5c:	08007d6d 	.word	0x08007d6d

08006a60 <strtol>:
 8006a60:	4613      	mov	r3, r2
 8006a62:	460a      	mov	r2, r1
 8006a64:	4601      	mov	r1, r0
 8006a66:	4802      	ldr	r0, [pc, #8]	@ (8006a70 <strtol+0x10>)
 8006a68:	6800      	ldr	r0, [r0, #0]
 8006a6a:	f7ff bf7f 	b.w	800696c <_strtol_l.constprop.0>
 8006a6e:	bf00      	nop
 8006a70:	20000024 	.word	0x20000024

08006a74 <std>:
 8006a74:	2300      	movs	r3, #0
 8006a76:	b510      	push	{r4, lr}
 8006a78:	4604      	mov	r4, r0
 8006a7a:	e9c0 3300 	strd	r3, r3, [r0]
 8006a7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a82:	6083      	str	r3, [r0, #8]
 8006a84:	8181      	strh	r1, [r0, #12]
 8006a86:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a88:	81c2      	strh	r2, [r0, #14]
 8006a8a:	6183      	str	r3, [r0, #24]
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	2208      	movs	r2, #8
 8006a90:	305c      	adds	r0, #92	@ 0x5c
 8006a92:	f000 fa1b 	bl	8006ecc <memset>
 8006a96:	4b0d      	ldr	r3, [pc, #52]	@ (8006acc <std+0x58>)
 8006a98:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad0 <std+0x5c>)
 8006a9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad4 <std+0x60>)
 8006aa0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad8 <std+0x64>)
 8006aa4:	6323      	str	r3, [r4, #48]	@ 0x30
 8006aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8006adc <std+0x68>)
 8006aa8:	6224      	str	r4, [r4, #32]
 8006aaa:	429c      	cmp	r4, r3
 8006aac:	d006      	beq.n	8006abc <std+0x48>
 8006aae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ab2:	4294      	cmp	r4, r2
 8006ab4:	d002      	beq.n	8006abc <std+0x48>
 8006ab6:	33d0      	adds	r3, #208	@ 0xd0
 8006ab8:	429c      	cmp	r4, r3
 8006aba:	d105      	bne.n	8006ac8 <std+0x54>
 8006abc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ac4:	f000 bad0 	b.w	8007068 <__retarget_lock_init_recursive>
 8006ac8:	bd10      	pop	{r4, pc}
 8006aca:	bf00      	nop
 8006acc:	08006d1d 	.word	0x08006d1d
 8006ad0:	08006d3f 	.word	0x08006d3f
 8006ad4:	08006d77 	.word	0x08006d77
 8006ad8:	08006d9b 	.word	0x08006d9b
 8006adc:	200014f0 	.word	0x200014f0

08006ae0 <stdio_exit_handler>:
 8006ae0:	4a02      	ldr	r2, [pc, #8]	@ (8006aec <stdio_exit_handler+0xc>)
 8006ae2:	4903      	ldr	r1, [pc, #12]	@ (8006af0 <stdio_exit_handler+0x10>)
 8006ae4:	4803      	ldr	r0, [pc, #12]	@ (8006af4 <stdio_exit_handler+0x14>)
 8006ae6:	f000 b869 	b.w	8006bbc <_fwalk_sglue>
 8006aea:	bf00      	nop
 8006aec:	20000018 	.word	0x20000018
 8006af0:	08007951 	.word	0x08007951
 8006af4:	20000028 	.word	0x20000028

08006af8 <cleanup_stdio>:
 8006af8:	6841      	ldr	r1, [r0, #4]
 8006afa:	4b0c      	ldr	r3, [pc, #48]	@ (8006b2c <cleanup_stdio+0x34>)
 8006afc:	4299      	cmp	r1, r3
 8006afe:	b510      	push	{r4, lr}
 8006b00:	4604      	mov	r4, r0
 8006b02:	d001      	beq.n	8006b08 <cleanup_stdio+0x10>
 8006b04:	f000 ff24 	bl	8007950 <_fflush_r>
 8006b08:	68a1      	ldr	r1, [r4, #8]
 8006b0a:	4b09      	ldr	r3, [pc, #36]	@ (8006b30 <cleanup_stdio+0x38>)
 8006b0c:	4299      	cmp	r1, r3
 8006b0e:	d002      	beq.n	8006b16 <cleanup_stdio+0x1e>
 8006b10:	4620      	mov	r0, r4
 8006b12:	f000 ff1d 	bl	8007950 <_fflush_r>
 8006b16:	68e1      	ldr	r1, [r4, #12]
 8006b18:	4b06      	ldr	r3, [pc, #24]	@ (8006b34 <cleanup_stdio+0x3c>)
 8006b1a:	4299      	cmp	r1, r3
 8006b1c:	d004      	beq.n	8006b28 <cleanup_stdio+0x30>
 8006b1e:	4620      	mov	r0, r4
 8006b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b24:	f000 bf14 	b.w	8007950 <_fflush_r>
 8006b28:	bd10      	pop	{r4, pc}
 8006b2a:	bf00      	nop
 8006b2c:	200014f0 	.word	0x200014f0
 8006b30:	20001558 	.word	0x20001558
 8006b34:	200015c0 	.word	0x200015c0

08006b38 <global_stdio_init.part.0>:
 8006b38:	b510      	push	{r4, lr}
 8006b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b68 <global_stdio_init.part.0+0x30>)
 8006b3c:	4c0b      	ldr	r4, [pc, #44]	@ (8006b6c <global_stdio_init.part.0+0x34>)
 8006b3e:	4a0c      	ldr	r2, [pc, #48]	@ (8006b70 <global_stdio_init.part.0+0x38>)
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	4620      	mov	r0, r4
 8006b44:	2200      	movs	r2, #0
 8006b46:	2104      	movs	r1, #4
 8006b48:	f7ff ff94 	bl	8006a74 <std>
 8006b4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b50:	2201      	movs	r2, #1
 8006b52:	2109      	movs	r1, #9
 8006b54:	f7ff ff8e 	bl	8006a74 <std>
 8006b58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b62:	2112      	movs	r1, #18
 8006b64:	f7ff bf86 	b.w	8006a74 <std>
 8006b68:	20001628 	.word	0x20001628
 8006b6c:	200014f0 	.word	0x200014f0
 8006b70:	08006ae1 	.word	0x08006ae1

08006b74 <__sfp_lock_acquire>:
 8006b74:	4801      	ldr	r0, [pc, #4]	@ (8006b7c <__sfp_lock_acquire+0x8>)
 8006b76:	f000 ba78 	b.w	800706a <__retarget_lock_acquire_recursive>
 8006b7a:	bf00      	nop
 8006b7c:	20001631 	.word	0x20001631

08006b80 <__sfp_lock_release>:
 8006b80:	4801      	ldr	r0, [pc, #4]	@ (8006b88 <__sfp_lock_release+0x8>)
 8006b82:	f000 ba73 	b.w	800706c <__retarget_lock_release_recursive>
 8006b86:	bf00      	nop
 8006b88:	20001631 	.word	0x20001631

08006b8c <__sinit>:
 8006b8c:	b510      	push	{r4, lr}
 8006b8e:	4604      	mov	r4, r0
 8006b90:	f7ff fff0 	bl	8006b74 <__sfp_lock_acquire>
 8006b94:	6a23      	ldr	r3, [r4, #32]
 8006b96:	b11b      	cbz	r3, 8006ba0 <__sinit+0x14>
 8006b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b9c:	f7ff bff0 	b.w	8006b80 <__sfp_lock_release>
 8006ba0:	4b04      	ldr	r3, [pc, #16]	@ (8006bb4 <__sinit+0x28>)
 8006ba2:	6223      	str	r3, [r4, #32]
 8006ba4:	4b04      	ldr	r3, [pc, #16]	@ (8006bb8 <__sinit+0x2c>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1f5      	bne.n	8006b98 <__sinit+0xc>
 8006bac:	f7ff ffc4 	bl	8006b38 <global_stdio_init.part.0>
 8006bb0:	e7f2      	b.n	8006b98 <__sinit+0xc>
 8006bb2:	bf00      	nop
 8006bb4:	08006af9 	.word	0x08006af9
 8006bb8:	20001628 	.word	0x20001628

08006bbc <_fwalk_sglue>:
 8006bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bc0:	4607      	mov	r7, r0
 8006bc2:	4688      	mov	r8, r1
 8006bc4:	4614      	mov	r4, r2
 8006bc6:	2600      	movs	r6, #0
 8006bc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006bcc:	f1b9 0901 	subs.w	r9, r9, #1
 8006bd0:	d505      	bpl.n	8006bde <_fwalk_sglue+0x22>
 8006bd2:	6824      	ldr	r4, [r4, #0]
 8006bd4:	2c00      	cmp	r4, #0
 8006bd6:	d1f7      	bne.n	8006bc8 <_fwalk_sglue+0xc>
 8006bd8:	4630      	mov	r0, r6
 8006bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bde:	89ab      	ldrh	r3, [r5, #12]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d907      	bls.n	8006bf4 <_fwalk_sglue+0x38>
 8006be4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006be8:	3301      	adds	r3, #1
 8006bea:	d003      	beq.n	8006bf4 <_fwalk_sglue+0x38>
 8006bec:	4629      	mov	r1, r5
 8006bee:	4638      	mov	r0, r7
 8006bf0:	47c0      	blx	r8
 8006bf2:	4306      	orrs	r6, r0
 8006bf4:	3568      	adds	r5, #104	@ 0x68
 8006bf6:	e7e9      	b.n	8006bcc <_fwalk_sglue+0x10>

08006bf8 <_puts_r>:
 8006bf8:	6a03      	ldr	r3, [r0, #32]
 8006bfa:	b570      	push	{r4, r5, r6, lr}
 8006bfc:	6884      	ldr	r4, [r0, #8]
 8006bfe:	4605      	mov	r5, r0
 8006c00:	460e      	mov	r6, r1
 8006c02:	b90b      	cbnz	r3, 8006c08 <_puts_r+0x10>
 8006c04:	f7ff ffc2 	bl	8006b8c <__sinit>
 8006c08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c0a:	07db      	lsls	r3, r3, #31
 8006c0c:	d405      	bmi.n	8006c1a <_puts_r+0x22>
 8006c0e:	89a3      	ldrh	r3, [r4, #12]
 8006c10:	0598      	lsls	r0, r3, #22
 8006c12:	d402      	bmi.n	8006c1a <_puts_r+0x22>
 8006c14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c16:	f000 fa28 	bl	800706a <__retarget_lock_acquire_recursive>
 8006c1a:	89a3      	ldrh	r3, [r4, #12]
 8006c1c:	0719      	lsls	r1, r3, #28
 8006c1e:	d502      	bpl.n	8006c26 <_puts_r+0x2e>
 8006c20:	6923      	ldr	r3, [r4, #16]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d135      	bne.n	8006c92 <_puts_r+0x9a>
 8006c26:	4621      	mov	r1, r4
 8006c28:	4628      	mov	r0, r5
 8006c2a:	f000 f8f9 	bl	8006e20 <__swsetup_r>
 8006c2e:	b380      	cbz	r0, 8006c92 <_puts_r+0x9a>
 8006c30:	f04f 35ff 	mov.w	r5, #4294967295
 8006c34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c36:	07da      	lsls	r2, r3, #31
 8006c38:	d405      	bmi.n	8006c46 <_puts_r+0x4e>
 8006c3a:	89a3      	ldrh	r3, [r4, #12]
 8006c3c:	059b      	lsls	r3, r3, #22
 8006c3e:	d402      	bmi.n	8006c46 <_puts_r+0x4e>
 8006c40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c42:	f000 fa13 	bl	800706c <__retarget_lock_release_recursive>
 8006c46:	4628      	mov	r0, r5
 8006c48:	bd70      	pop	{r4, r5, r6, pc}
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	da04      	bge.n	8006c58 <_puts_r+0x60>
 8006c4e:	69a2      	ldr	r2, [r4, #24]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	dc17      	bgt.n	8006c84 <_puts_r+0x8c>
 8006c54:	290a      	cmp	r1, #10
 8006c56:	d015      	beq.n	8006c84 <_puts_r+0x8c>
 8006c58:	6823      	ldr	r3, [r4, #0]
 8006c5a:	1c5a      	adds	r2, r3, #1
 8006c5c:	6022      	str	r2, [r4, #0]
 8006c5e:	7019      	strb	r1, [r3, #0]
 8006c60:	68a3      	ldr	r3, [r4, #8]
 8006c62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c66:	3b01      	subs	r3, #1
 8006c68:	60a3      	str	r3, [r4, #8]
 8006c6a:	2900      	cmp	r1, #0
 8006c6c:	d1ed      	bne.n	8006c4a <_puts_r+0x52>
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	da11      	bge.n	8006c96 <_puts_r+0x9e>
 8006c72:	4622      	mov	r2, r4
 8006c74:	210a      	movs	r1, #10
 8006c76:	4628      	mov	r0, r5
 8006c78:	f000 f893 	bl	8006da2 <__swbuf_r>
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	d0d7      	beq.n	8006c30 <_puts_r+0x38>
 8006c80:	250a      	movs	r5, #10
 8006c82:	e7d7      	b.n	8006c34 <_puts_r+0x3c>
 8006c84:	4622      	mov	r2, r4
 8006c86:	4628      	mov	r0, r5
 8006c88:	f000 f88b 	bl	8006da2 <__swbuf_r>
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	d1e7      	bne.n	8006c60 <_puts_r+0x68>
 8006c90:	e7ce      	b.n	8006c30 <_puts_r+0x38>
 8006c92:	3e01      	subs	r6, #1
 8006c94:	e7e4      	b.n	8006c60 <_puts_r+0x68>
 8006c96:	6823      	ldr	r3, [r4, #0]
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	6022      	str	r2, [r4, #0]
 8006c9c:	220a      	movs	r2, #10
 8006c9e:	701a      	strb	r2, [r3, #0]
 8006ca0:	e7ee      	b.n	8006c80 <_puts_r+0x88>
	...

08006ca4 <puts>:
 8006ca4:	4b02      	ldr	r3, [pc, #8]	@ (8006cb0 <puts+0xc>)
 8006ca6:	4601      	mov	r1, r0
 8006ca8:	6818      	ldr	r0, [r3, #0]
 8006caa:	f7ff bfa5 	b.w	8006bf8 <_puts_r>
 8006cae:	bf00      	nop
 8006cb0:	20000024 	.word	0x20000024

08006cb4 <sniprintf>:
 8006cb4:	b40c      	push	{r2, r3}
 8006cb6:	b530      	push	{r4, r5, lr}
 8006cb8:	4b17      	ldr	r3, [pc, #92]	@ (8006d18 <sniprintf+0x64>)
 8006cba:	1e0c      	subs	r4, r1, #0
 8006cbc:	681d      	ldr	r5, [r3, #0]
 8006cbe:	b09d      	sub	sp, #116	@ 0x74
 8006cc0:	da08      	bge.n	8006cd4 <sniprintf+0x20>
 8006cc2:	238b      	movs	r3, #139	@ 0x8b
 8006cc4:	602b      	str	r3, [r5, #0]
 8006cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8006cca:	b01d      	add	sp, #116	@ 0x74
 8006ccc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cd0:	b002      	add	sp, #8
 8006cd2:	4770      	bx	lr
 8006cd4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006cd8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006cdc:	bf14      	ite	ne
 8006cde:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006ce2:	4623      	moveq	r3, r4
 8006ce4:	9304      	str	r3, [sp, #16]
 8006ce6:	9307      	str	r3, [sp, #28]
 8006ce8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006cec:	9002      	str	r0, [sp, #8]
 8006cee:	9006      	str	r0, [sp, #24]
 8006cf0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006cf4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006cf6:	ab21      	add	r3, sp, #132	@ 0x84
 8006cf8:	a902      	add	r1, sp, #8
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	9301      	str	r3, [sp, #4]
 8006cfe:	f000 fb19 	bl	8007334 <_svfiprintf_r>
 8006d02:	1c43      	adds	r3, r0, #1
 8006d04:	bfbc      	itt	lt
 8006d06:	238b      	movlt	r3, #139	@ 0x8b
 8006d08:	602b      	strlt	r3, [r5, #0]
 8006d0a:	2c00      	cmp	r4, #0
 8006d0c:	d0dd      	beq.n	8006cca <sniprintf+0x16>
 8006d0e:	9b02      	ldr	r3, [sp, #8]
 8006d10:	2200      	movs	r2, #0
 8006d12:	701a      	strb	r2, [r3, #0]
 8006d14:	e7d9      	b.n	8006cca <sniprintf+0x16>
 8006d16:	bf00      	nop
 8006d18:	20000024 	.word	0x20000024

08006d1c <__sread>:
 8006d1c:	b510      	push	{r4, lr}
 8006d1e:	460c      	mov	r4, r1
 8006d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d24:	f000 f952 	bl	8006fcc <_read_r>
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	bfab      	itete	ge
 8006d2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d2e:	89a3      	ldrhlt	r3, [r4, #12]
 8006d30:	181b      	addge	r3, r3, r0
 8006d32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d36:	bfac      	ite	ge
 8006d38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d3a:	81a3      	strhlt	r3, [r4, #12]
 8006d3c:	bd10      	pop	{r4, pc}

08006d3e <__swrite>:
 8006d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d42:	461f      	mov	r7, r3
 8006d44:	898b      	ldrh	r3, [r1, #12]
 8006d46:	05db      	lsls	r3, r3, #23
 8006d48:	4605      	mov	r5, r0
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	4616      	mov	r6, r2
 8006d4e:	d505      	bpl.n	8006d5c <__swrite+0x1e>
 8006d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d54:	2302      	movs	r3, #2
 8006d56:	2200      	movs	r2, #0
 8006d58:	f000 f926 	bl	8006fa8 <_lseek_r>
 8006d5c:	89a3      	ldrh	r3, [r4, #12]
 8006d5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d66:	81a3      	strh	r3, [r4, #12]
 8006d68:	4632      	mov	r2, r6
 8006d6a:	463b      	mov	r3, r7
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d72:	f000 b93d 	b.w	8006ff0 <_write_r>

08006d76 <__sseek>:
 8006d76:	b510      	push	{r4, lr}
 8006d78:	460c      	mov	r4, r1
 8006d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d7e:	f000 f913 	bl	8006fa8 <_lseek_r>
 8006d82:	1c43      	adds	r3, r0, #1
 8006d84:	89a3      	ldrh	r3, [r4, #12]
 8006d86:	bf15      	itete	ne
 8006d88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d92:	81a3      	strheq	r3, [r4, #12]
 8006d94:	bf18      	it	ne
 8006d96:	81a3      	strhne	r3, [r4, #12]
 8006d98:	bd10      	pop	{r4, pc}

08006d9a <__sclose>:
 8006d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d9e:	f000 b89d 	b.w	8006edc <_close_r>

08006da2 <__swbuf_r>:
 8006da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da4:	460e      	mov	r6, r1
 8006da6:	4614      	mov	r4, r2
 8006da8:	4605      	mov	r5, r0
 8006daa:	b118      	cbz	r0, 8006db4 <__swbuf_r+0x12>
 8006dac:	6a03      	ldr	r3, [r0, #32]
 8006dae:	b90b      	cbnz	r3, 8006db4 <__swbuf_r+0x12>
 8006db0:	f7ff feec 	bl	8006b8c <__sinit>
 8006db4:	69a3      	ldr	r3, [r4, #24]
 8006db6:	60a3      	str	r3, [r4, #8]
 8006db8:	89a3      	ldrh	r3, [r4, #12]
 8006dba:	071a      	lsls	r2, r3, #28
 8006dbc:	d501      	bpl.n	8006dc2 <__swbuf_r+0x20>
 8006dbe:	6923      	ldr	r3, [r4, #16]
 8006dc0:	b943      	cbnz	r3, 8006dd4 <__swbuf_r+0x32>
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	f000 f82b 	bl	8006e20 <__swsetup_r>
 8006dca:	b118      	cbz	r0, 8006dd4 <__swbuf_r+0x32>
 8006dcc:	f04f 37ff 	mov.w	r7, #4294967295
 8006dd0:	4638      	mov	r0, r7
 8006dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dd4:	6823      	ldr	r3, [r4, #0]
 8006dd6:	6922      	ldr	r2, [r4, #16]
 8006dd8:	1a98      	subs	r0, r3, r2
 8006dda:	6963      	ldr	r3, [r4, #20]
 8006ddc:	b2f6      	uxtb	r6, r6
 8006dde:	4283      	cmp	r3, r0
 8006de0:	4637      	mov	r7, r6
 8006de2:	dc05      	bgt.n	8006df0 <__swbuf_r+0x4e>
 8006de4:	4621      	mov	r1, r4
 8006de6:	4628      	mov	r0, r5
 8006de8:	f000 fdb2 	bl	8007950 <_fflush_r>
 8006dec:	2800      	cmp	r0, #0
 8006dee:	d1ed      	bne.n	8006dcc <__swbuf_r+0x2a>
 8006df0:	68a3      	ldr	r3, [r4, #8]
 8006df2:	3b01      	subs	r3, #1
 8006df4:	60a3      	str	r3, [r4, #8]
 8006df6:	6823      	ldr	r3, [r4, #0]
 8006df8:	1c5a      	adds	r2, r3, #1
 8006dfa:	6022      	str	r2, [r4, #0]
 8006dfc:	701e      	strb	r6, [r3, #0]
 8006dfe:	6962      	ldr	r2, [r4, #20]
 8006e00:	1c43      	adds	r3, r0, #1
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d004      	beq.n	8006e10 <__swbuf_r+0x6e>
 8006e06:	89a3      	ldrh	r3, [r4, #12]
 8006e08:	07db      	lsls	r3, r3, #31
 8006e0a:	d5e1      	bpl.n	8006dd0 <__swbuf_r+0x2e>
 8006e0c:	2e0a      	cmp	r6, #10
 8006e0e:	d1df      	bne.n	8006dd0 <__swbuf_r+0x2e>
 8006e10:	4621      	mov	r1, r4
 8006e12:	4628      	mov	r0, r5
 8006e14:	f000 fd9c 	bl	8007950 <_fflush_r>
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	d0d9      	beq.n	8006dd0 <__swbuf_r+0x2e>
 8006e1c:	e7d6      	b.n	8006dcc <__swbuf_r+0x2a>
	...

08006e20 <__swsetup_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4b29      	ldr	r3, [pc, #164]	@ (8006ec8 <__swsetup_r+0xa8>)
 8006e24:	4605      	mov	r5, r0
 8006e26:	6818      	ldr	r0, [r3, #0]
 8006e28:	460c      	mov	r4, r1
 8006e2a:	b118      	cbz	r0, 8006e34 <__swsetup_r+0x14>
 8006e2c:	6a03      	ldr	r3, [r0, #32]
 8006e2e:	b90b      	cbnz	r3, 8006e34 <__swsetup_r+0x14>
 8006e30:	f7ff feac 	bl	8006b8c <__sinit>
 8006e34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e38:	0719      	lsls	r1, r3, #28
 8006e3a:	d422      	bmi.n	8006e82 <__swsetup_r+0x62>
 8006e3c:	06da      	lsls	r2, r3, #27
 8006e3e:	d407      	bmi.n	8006e50 <__swsetup_r+0x30>
 8006e40:	2209      	movs	r2, #9
 8006e42:	602a      	str	r2, [r5, #0]
 8006e44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e48:	81a3      	strh	r3, [r4, #12]
 8006e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e4e:	e033      	b.n	8006eb8 <__swsetup_r+0x98>
 8006e50:	0758      	lsls	r0, r3, #29
 8006e52:	d512      	bpl.n	8006e7a <__swsetup_r+0x5a>
 8006e54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e56:	b141      	cbz	r1, 8006e6a <__swsetup_r+0x4a>
 8006e58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e5c:	4299      	cmp	r1, r3
 8006e5e:	d002      	beq.n	8006e66 <__swsetup_r+0x46>
 8006e60:	4628      	mov	r0, r5
 8006e62:	f000 f913 	bl	800708c <_free_r>
 8006e66:	2300      	movs	r3, #0
 8006e68:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e6a:	89a3      	ldrh	r3, [r4, #12]
 8006e6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006e70:	81a3      	strh	r3, [r4, #12]
 8006e72:	2300      	movs	r3, #0
 8006e74:	6063      	str	r3, [r4, #4]
 8006e76:	6923      	ldr	r3, [r4, #16]
 8006e78:	6023      	str	r3, [r4, #0]
 8006e7a:	89a3      	ldrh	r3, [r4, #12]
 8006e7c:	f043 0308 	orr.w	r3, r3, #8
 8006e80:	81a3      	strh	r3, [r4, #12]
 8006e82:	6923      	ldr	r3, [r4, #16]
 8006e84:	b94b      	cbnz	r3, 8006e9a <__swsetup_r+0x7a>
 8006e86:	89a3      	ldrh	r3, [r4, #12]
 8006e88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006e8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e90:	d003      	beq.n	8006e9a <__swsetup_r+0x7a>
 8006e92:	4621      	mov	r1, r4
 8006e94:	4628      	mov	r0, r5
 8006e96:	f000 fda9 	bl	80079ec <__smakebuf_r>
 8006e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e9e:	f013 0201 	ands.w	r2, r3, #1
 8006ea2:	d00a      	beq.n	8006eba <__swsetup_r+0x9a>
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	60a2      	str	r2, [r4, #8]
 8006ea8:	6962      	ldr	r2, [r4, #20]
 8006eaa:	4252      	negs	r2, r2
 8006eac:	61a2      	str	r2, [r4, #24]
 8006eae:	6922      	ldr	r2, [r4, #16]
 8006eb0:	b942      	cbnz	r2, 8006ec4 <__swsetup_r+0xa4>
 8006eb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006eb6:	d1c5      	bne.n	8006e44 <__swsetup_r+0x24>
 8006eb8:	bd38      	pop	{r3, r4, r5, pc}
 8006eba:	0799      	lsls	r1, r3, #30
 8006ebc:	bf58      	it	pl
 8006ebe:	6962      	ldrpl	r2, [r4, #20]
 8006ec0:	60a2      	str	r2, [r4, #8]
 8006ec2:	e7f4      	b.n	8006eae <__swsetup_r+0x8e>
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	e7f7      	b.n	8006eb8 <__swsetup_r+0x98>
 8006ec8:	20000024 	.word	0x20000024

08006ecc <memset>:
 8006ecc:	4402      	add	r2, r0
 8006ece:	4603      	mov	r3, r0
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d100      	bne.n	8006ed6 <memset+0xa>
 8006ed4:	4770      	bx	lr
 8006ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8006eda:	e7f9      	b.n	8006ed0 <memset+0x4>

08006edc <_close_r>:
 8006edc:	b538      	push	{r3, r4, r5, lr}
 8006ede:	4d06      	ldr	r5, [pc, #24]	@ (8006ef8 <_close_r+0x1c>)
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	4608      	mov	r0, r1
 8006ee6:	602b      	str	r3, [r5, #0]
 8006ee8:	f7f9 fffd 	bl	8000ee6 <_close>
 8006eec:	1c43      	adds	r3, r0, #1
 8006eee:	d102      	bne.n	8006ef6 <_close_r+0x1a>
 8006ef0:	682b      	ldr	r3, [r5, #0]
 8006ef2:	b103      	cbz	r3, 8006ef6 <_close_r+0x1a>
 8006ef4:	6023      	str	r3, [r4, #0]
 8006ef6:	bd38      	pop	{r3, r4, r5, pc}
 8006ef8:	2000162c 	.word	0x2000162c

08006efc <_reclaim_reent>:
 8006efc:	4b29      	ldr	r3, [pc, #164]	@ (8006fa4 <_reclaim_reent+0xa8>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4283      	cmp	r3, r0
 8006f02:	b570      	push	{r4, r5, r6, lr}
 8006f04:	4604      	mov	r4, r0
 8006f06:	d04b      	beq.n	8006fa0 <_reclaim_reent+0xa4>
 8006f08:	69c3      	ldr	r3, [r0, #28]
 8006f0a:	b1ab      	cbz	r3, 8006f38 <_reclaim_reent+0x3c>
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	b16b      	cbz	r3, 8006f2c <_reclaim_reent+0x30>
 8006f10:	2500      	movs	r5, #0
 8006f12:	69e3      	ldr	r3, [r4, #28]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	5959      	ldr	r1, [r3, r5]
 8006f18:	2900      	cmp	r1, #0
 8006f1a:	d13b      	bne.n	8006f94 <_reclaim_reent+0x98>
 8006f1c:	3504      	adds	r5, #4
 8006f1e:	2d80      	cmp	r5, #128	@ 0x80
 8006f20:	d1f7      	bne.n	8006f12 <_reclaim_reent+0x16>
 8006f22:	69e3      	ldr	r3, [r4, #28]
 8006f24:	4620      	mov	r0, r4
 8006f26:	68d9      	ldr	r1, [r3, #12]
 8006f28:	f000 f8b0 	bl	800708c <_free_r>
 8006f2c:	69e3      	ldr	r3, [r4, #28]
 8006f2e:	6819      	ldr	r1, [r3, #0]
 8006f30:	b111      	cbz	r1, 8006f38 <_reclaim_reent+0x3c>
 8006f32:	4620      	mov	r0, r4
 8006f34:	f000 f8aa 	bl	800708c <_free_r>
 8006f38:	6961      	ldr	r1, [r4, #20]
 8006f3a:	b111      	cbz	r1, 8006f42 <_reclaim_reent+0x46>
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f000 f8a5 	bl	800708c <_free_r>
 8006f42:	69e1      	ldr	r1, [r4, #28]
 8006f44:	b111      	cbz	r1, 8006f4c <_reclaim_reent+0x50>
 8006f46:	4620      	mov	r0, r4
 8006f48:	f000 f8a0 	bl	800708c <_free_r>
 8006f4c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006f4e:	b111      	cbz	r1, 8006f56 <_reclaim_reent+0x5a>
 8006f50:	4620      	mov	r0, r4
 8006f52:	f000 f89b 	bl	800708c <_free_r>
 8006f56:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f58:	b111      	cbz	r1, 8006f60 <_reclaim_reent+0x64>
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f000 f896 	bl	800708c <_free_r>
 8006f60:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006f62:	b111      	cbz	r1, 8006f6a <_reclaim_reent+0x6e>
 8006f64:	4620      	mov	r0, r4
 8006f66:	f000 f891 	bl	800708c <_free_r>
 8006f6a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006f6c:	b111      	cbz	r1, 8006f74 <_reclaim_reent+0x78>
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f000 f88c 	bl	800708c <_free_r>
 8006f74:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006f76:	b111      	cbz	r1, 8006f7e <_reclaim_reent+0x82>
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f000 f887 	bl	800708c <_free_r>
 8006f7e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006f80:	b111      	cbz	r1, 8006f88 <_reclaim_reent+0x8c>
 8006f82:	4620      	mov	r0, r4
 8006f84:	f000 f882 	bl	800708c <_free_r>
 8006f88:	6a23      	ldr	r3, [r4, #32]
 8006f8a:	b14b      	cbz	r3, 8006fa0 <_reclaim_reent+0xa4>
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006f92:	4718      	bx	r3
 8006f94:	680e      	ldr	r6, [r1, #0]
 8006f96:	4620      	mov	r0, r4
 8006f98:	f000 f878 	bl	800708c <_free_r>
 8006f9c:	4631      	mov	r1, r6
 8006f9e:	e7bb      	b.n	8006f18 <_reclaim_reent+0x1c>
 8006fa0:	bd70      	pop	{r4, r5, r6, pc}
 8006fa2:	bf00      	nop
 8006fa4:	20000024 	.word	0x20000024

08006fa8 <_lseek_r>:
 8006fa8:	b538      	push	{r3, r4, r5, lr}
 8006faa:	4d07      	ldr	r5, [pc, #28]	@ (8006fc8 <_lseek_r+0x20>)
 8006fac:	4604      	mov	r4, r0
 8006fae:	4608      	mov	r0, r1
 8006fb0:	4611      	mov	r1, r2
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	602a      	str	r2, [r5, #0]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	f7f9 ffbc 	bl	8000f34 <_lseek>
 8006fbc:	1c43      	adds	r3, r0, #1
 8006fbe:	d102      	bne.n	8006fc6 <_lseek_r+0x1e>
 8006fc0:	682b      	ldr	r3, [r5, #0]
 8006fc2:	b103      	cbz	r3, 8006fc6 <_lseek_r+0x1e>
 8006fc4:	6023      	str	r3, [r4, #0]
 8006fc6:	bd38      	pop	{r3, r4, r5, pc}
 8006fc8:	2000162c 	.word	0x2000162c

08006fcc <_read_r>:
 8006fcc:	b538      	push	{r3, r4, r5, lr}
 8006fce:	4d07      	ldr	r5, [pc, #28]	@ (8006fec <_read_r+0x20>)
 8006fd0:	4604      	mov	r4, r0
 8006fd2:	4608      	mov	r0, r1
 8006fd4:	4611      	mov	r1, r2
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	602a      	str	r2, [r5, #0]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	f7f9 ff4a 	bl	8000e74 <_read>
 8006fe0:	1c43      	adds	r3, r0, #1
 8006fe2:	d102      	bne.n	8006fea <_read_r+0x1e>
 8006fe4:	682b      	ldr	r3, [r5, #0]
 8006fe6:	b103      	cbz	r3, 8006fea <_read_r+0x1e>
 8006fe8:	6023      	str	r3, [r4, #0]
 8006fea:	bd38      	pop	{r3, r4, r5, pc}
 8006fec:	2000162c 	.word	0x2000162c

08006ff0 <_write_r>:
 8006ff0:	b538      	push	{r3, r4, r5, lr}
 8006ff2:	4d07      	ldr	r5, [pc, #28]	@ (8007010 <_write_r+0x20>)
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	4608      	mov	r0, r1
 8006ff8:	4611      	mov	r1, r2
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	602a      	str	r2, [r5, #0]
 8006ffe:	461a      	mov	r2, r3
 8007000:	f7f9 ff55 	bl	8000eae <_write>
 8007004:	1c43      	adds	r3, r0, #1
 8007006:	d102      	bne.n	800700e <_write_r+0x1e>
 8007008:	682b      	ldr	r3, [r5, #0]
 800700a:	b103      	cbz	r3, 800700e <_write_r+0x1e>
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	bd38      	pop	{r3, r4, r5, pc}
 8007010:	2000162c 	.word	0x2000162c

08007014 <__errno>:
 8007014:	4b01      	ldr	r3, [pc, #4]	@ (800701c <__errno+0x8>)
 8007016:	6818      	ldr	r0, [r3, #0]
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	20000024 	.word	0x20000024

08007020 <__libc_init_array>:
 8007020:	b570      	push	{r4, r5, r6, lr}
 8007022:	4d0d      	ldr	r5, [pc, #52]	@ (8007058 <__libc_init_array+0x38>)
 8007024:	4c0d      	ldr	r4, [pc, #52]	@ (800705c <__libc_init_array+0x3c>)
 8007026:	1b64      	subs	r4, r4, r5
 8007028:	10a4      	asrs	r4, r4, #2
 800702a:	2600      	movs	r6, #0
 800702c:	42a6      	cmp	r6, r4
 800702e:	d109      	bne.n	8007044 <__libc_init_array+0x24>
 8007030:	4d0b      	ldr	r5, [pc, #44]	@ (8007060 <__libc_init_array+0x40>)
 8007032:	4c0c      	ldr	r4, [pc, #48]	@ (8007064 <__libc_init_array+0x44>)
 8007034:	f000 fd98 	bl	8007b68 <_init>
 8007038:	1b64      	subs	r4, r4, r5
 800703a:	10a4      	asrs	r4, r4, #2
 800703c:	2600      	movs	r6, #0
 800703e:	42a6      	cmp	r6, r4
 8007040:	d105      	bne.n	800704e <__libc_init_array+0x2e>
 8007042:	bd70      	pop	{r4, r5, r6, pc}
 8007044:	f855 3b04 	ldr.w	r3, [r5], #4
 8007048:	4798      	blx	r3
 800704a:	3601      	adds	r6, #1
 800704c:	e7ee      	b.n	800702c <__libc_init_array+0xc>
 800704e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007052:	4798      	blx	r3
 8007054:	3601      	adds	r6, #1
 8007056:	e7f2      	b.n	800703e <__libc_init_array+0x1e>
 8007058:	08007ea8 	.word	0x08007ea8
 800705c:	08007ea8 	.word	0x08007ea8
 8007060:	08007ea8 	.word	0x08007ea8
 8007064:	08007eac 	.word	0x08007eac

08007068 <__retarget_lock_init_recursive>:
 8007068:	4770      	bx	lr

0800706a <__retarget_lock_acquire_recursive>:
 800706a:	4770      	bx	lr

0800706c <__retarget_lock_release_recursive>:
 800706c:	4770      	bx	lr

0800706e <memcpy>:
 800706e:	440a      	add	r2, r1
 8007070:	4291      	cmp	r1, r2
 8007072:	f100 33ff 	add.w	r3, r0, #4294967295
 8007076:	d100      	bne.n	800707a <memcpy+0xc>
 8007078:	4770      	bx	lr
 800707a:	b510      	push	{r4, lr}
 800707c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007080:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007084:	4291      	cmp	r1, r2
 8007086:	d1f9      	bne.n	800707c <memcpy+0xe>
 8007088:	bd10      	pop	{r4, pc}
	...

0800708c <_free_r>:
 800708c:	b538      	push	{r3, r4, r5, lr}
 800708e:	4605      	mov	r5, r0
 8007090:	2900      	cmp	r1, #0
 8007092:	d041      	beq.n	8007118 <_free_r+0x8c>
 8007094:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007098:	1f0c      	subs	r4, r1, #4
 800709a:	2b00      	cmp	r3, #0
 800709c:	bfb8      	it	lt
 800709e:	18e4      	addlt	r4, r4, r3
 80070a0:	f000 f8e0 	bl	8007264 <__malloc_lock>
 80070a4:	4a1d      	ldr	r2, [pc, #116]	@ (800711c <_free_r+0x90>)
 80070a6:	6813      	ldr	r3, [r2, #0]
 80070a8:	b933      	cbnz	r3, 80070b8 <_free_r+0x2c>
 80070aa:	6063      	str	r3, [r4, #4]
 80070ac:	6014      	str	r4, [r2, #0]
 80070ae:	4628      	mov	r0, r5
 80070b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070b4:	f000 b8dc 	b.w	8007270 <__malloc_unlock>
 80070b8:	42a3      	cmp	r3, r4
 80070ba:	d908      	bls.n	80070ce <_free_r+0x42>
 80070bc:	6820      	ldr	r0, [r4, #0]
 80070be:	1821      	adds	r1, r4, r0
 80070c0:	428b      	cmp	r3, r1
 80070c2:	bf01      	itttt	eq
 80070c4:	6819      	ldreq	r1, [r3, #0]
 80070c6:	685b      	ldreq	r3, [r3, #4]
 80070c8:	1809      	addeq	r1, r1, r0
 80070ca:	6021      	streq	r1, [r4, #0]
 80070cc:	e7ed      	b.n	80070aa <_free_r+0x1e>
 80070ce:	461a      	mov	r2, r3
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	b10b      	cbz	r3, 80070d8 <_free_r+0x4c>
 80070d4:	42a3      	cmp	r3, r4
 80070d6:	d9fa      	bls.n	80070ce <_free_r+0x42>
 80070d8:	6811      	ldr	r1, [r2, #0]
 80070da:	1850      	adds	r0, r2, r1
 80070dc:	42a0      	cmp	r0, r4
 80070de:	d10b      	bne.n	80070f8 <_free_r+0x6c>
 80070e0:	6820      	ldr	r0, [r4, #0]
 80070e2:	4401      	add	r1, r0
 80070e4:	1850      	adds	r0, r2, r1
 80070e6:	4283      	cmp	r3, r0
 80070e8:	6011      	str	r1, [r2, #0]
 80070ea:	d1e0      	bne.n	80070ae <_free_r+0x22>
 80070ec:	6818      	ldr	r0, [r3, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	6053      	str	r3, [r2, #4]
 80070f2:	4408      	add	r0, r1
 80070f4:	6010      	str	r0, [r2, #0]
 80070f6:	e7da      	b.n	80070ae <_free_r+0x22>
 80070f8:	d902      	bls.n	8007100 <_free_r+0x74>
 80070fa:	230c      	movs	r3, #12
 80070fc:	602b      	str	r3, [r5, #0]
 80070fe:	e7d6      	b.n	80070ae <_free_r+0x22>
 8007100:	6820      	ldr	r0, [r4, #0]
 8007102:	1821      	adds	r1, r4, r0
 8007104:	428b      	cmp	r3, r1
 8007106:	bf04      	itt	eq
 8007108:	6819      	ldreq	r1, [r3, #0]
 800710a:	685b      	ldreq	r3, [r3, #4]
 800710c:	6063      	str	r3, [r4, #4]
 800710e:	bf04      	itt	eq
 8007110:	1809      	addeq	r1, r1, r0
 8007112:	6021      	streq	r1, [r4, #0]
 8007114:	6054      	str	r4, [r2, #4]
 8007116:	e7ca      	b.n	80070ae <_free_r+0x22>
 8007118:	bd38      	pop	{r3, r4, r5, pc}
 800711a:	bf00      	nop
 800711c:	20001638 	.word	0x20001638

08007120 <sbrk_aligned>:
 8007120:	b570      	push	{r4, r5, r6, lr}
 8007122:	4e0f      	ldr	r6, [pc, #60]	@ (8007160 <sbrk_aligned+0x40>)
 8007124:	460c      	mov	r4, r1
 8007126:	6831      	ldr	r1, [r6, #0]
 8007128:	4605      	mov	r5, r0
 800712a:	b911      	cbnz	r1, 8007132 <sbrk_aligned+0x12>
 800712c:	f000 fcd6 	bl	8007adc <_sbrk_r>
 8007130:	6030      	str	r0, [r6, #0]
 8007132:	4621      	mov	r1, r4
 8007134:	4628      	mov	r0, r5
 8007136:	f000 fcd1 	bl	8007adc <_sbrk_r>
 800713a:	1c43      	adds	r3, r0, #1
 800713c:	d103      	bne.n	8007146 <sbrk_aligned+0x26>
 800713e:	f04f 34ff 	mov.w	r4, #4294967295
 8007142:	4620      	mov	r0, r4
 8007144:	bd70      	pop	{r4, r5, r6, pc}
 8007146:	1cc4      	adds	r4, r0, #3
 8007148:	f024 0403 	bic.w	r4, r4, #3
 800714c:	42a0      	cmp	r0, r4
 800714e:	d0f8      	beq.n	8007142 <sbrk_aligned+0x22>
 8007150:	1a21      	subs	r1, r4, r0
 8007152:	4628      	mov	r0, r5
 8007154:	f000 fcc2 	bl	8007adc <_sbrk_r>
 8007158:	3001      	adds	r0, #1
 800715a:	d1f2      	bne.n	8007142 <sbrk_aligned+0x22>
 800715c:	e7ef      	b.n	800713e <sbrk_aligned+0x1e>
 800715e:	bf00      	nop
 8007160:	20001634 	.word	0x20001634

08007164 <_malloc_r>:
 8007164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007168:	1ccd      	adds	r5, r1, #3
 800716a:	f025 0503 	bic.w	r5, r5, #3
 800716e:	3508      	adds	r5, #8
 8007170:	2d0c      	cmp	r5, #12
 8007172:	bf38      	it	cc
 8007174:	250c      	movcc	r5, #12
 8007176:	2d00      	cmp	r5, #0
 8007178:	4606      	mov	r6, r0
 800717a:	db01      	blt.n	8007180 <_malloc_r+0x1c>
 800717c:	42a9      	cmp	r1, r5
 800717e:	d904      	bls.n	800718a <_malloc_r+0x26>
 8007180:	230c      	movs	r3, #12
 8007182:	6033      	str	r3, [r6, #0]
 8007184:	2000      	movs	r0, #0
 8007186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800718a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007260 <_malloc_r+0xfc>
 800718e:	f000 f869 	bl	8007264 <__malloc_lock>
 8007192:	f8d8 3000 	ldr.w	r3, [r8]
 8007196:	461c      	mov	r4, r3
 8007198:	bb44      	cbnz	r4, 80071ec <_malloc_r+0x88>
 800719a:	4629      	mov	r1, r5
 800719c:	4630      	mov	r0, r6
 800719e:	f7ff ffbf 	bl	8007120 <sbrk_aligned>
 80071a2:	1c43      	adds	r3, r0, #1
 80071a4:	4604      	mov	r4, r0
 80071a6:	d158      	bne.n	800725a <_malloc_r+0xf6>
 80071a8:	f8d8 4000 	ldr.w	r4, [r8]
 80071ac:	4627      	mov	r7, r4
 80071ae:	2f00      	cmp	r7, #0
 80071b0:	d143      	bne.n	800723a <_malloc_r+0xd6>
 80071b2:	2c00      	cmp	r4, #0
 80071b4:	d04b      	beq.n	800724e <_malloc_r+0xea>
 80071b6:	6823      	ldr	r3, [r4, #0]
 80071b8:	4639      	mov	r1, r7
 80071ba:	4630      	mov	r0, r6
 80071bc:	eb04 0903 	add.w	r9, r4, r3
 80071c0:	f000 fc8c 	bl	8007adc <_sbrk_r>
 80071c4:	4581      	cmp	r9, r0
 80071c6:	d142      	bne.n	800724e <_malloc_r+0xea>
 80071c8:	6821      	ldr	r1, [r4, #0]
 80071ca:	1a6d      	subs	r5, r5, r1
 80071cc:	4629      	mov	r1, r5
 80071ce:	4630      	mov	r0, r6
 80071d0:	f7ff ffa6 	bl	8007120 <sbrk_aligned>
 80071d4:	3001      	adds	r0, #1
 80071d6:	d03a      	beq.n	800724e <_malloc_r+0xea>
 80071d8:	6823      	ldr	r3, [r4, #0]
 80071da:	442b      	add	r3, r5
 80071dc:	6023      	str	r3, [r4, #0]
 80071de:	f8d8 3000 	ldr.w	r3, [r8]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	bb62      	cbnz	r2, 8007240 <_malloc_r+0xdc>
 80071e6:	f8c8 7000 	str.w	r7, [r8]
 80071ea:	e00f      	b.n	800720c <_malloc_r+0xa8>
 80071ec:	6822      	ldr	r2, [r4, #0]
 80071ee:	1b52      	subs	r2, r2, r5
 80071f0:	d420      	bmi.n	8007234 <_malloc_r+0xd0>
 80071f2:	2a0b      	cmp	r2, #11
 80071f4:	d917      	bls.n	8007226 <_malloc_r+0xc2>
 80071f6:	1961      	adds	r1, r4, r5
 80071f8:	42a3      	cmp	r3, r4
 80071fa:	6025      	str	r5, [r4, #0]
 80071fc:	bf18      	it	ne
 80071fe:	6059      	strne	r1, [r3, #4]
 8007200:	6863      	ldr	r3, [r4, #4]
 8007202:	bf08      	it	eq
 8007204:	f8c8 1000 	streq.w	r1, [r8]
 8007208:	5162      	str	r2, [r4, r5]
 800720a:	604b      	str	r3, [r1, #4]
 800720c:	4630      	mov	r0, r6
 800720e:	f000 f82f 	bl	8007270 <__malloc_unlock>
 8007212:	f104 000b 	add.w	r0, r4, #11
 8007216:	1d23      	adds	r3, r4, #4
 8007218:	f020 0007 	bic.w	r0, r0, #7
 800721c:	1ac2      	subs	r2, r0, r3
 800721e:	bf1c      	itt	ne
 8007220:	1a1b      	subne	r3, r3, r0
 8007222:	50a3      	strne	r3, [r4, r2]
 8007224:	e7af      	b.n	8007186 <_malloc_r+0x22>
 8007226:	6862      	ldr	r2, [r4, #4]
 8007228:	42a3      	cmp	r3, r4
 800722a:	bf0c      	ite	eq
 800722c:	f8c8 2000 	streq.w	r2, [r8]
 8007230:	605a      	strne	r2, [r3, #4]
 8007232:	e7eb      	b.n	800720c <_malloc_r+0xa8>
 8007234:	4623      	mov	r3, r4
 8007236:	6864      	ldr	r4, [r4, #4]
 8007238:	e7ae      	b.n	8007198 <_malloc_r+0x34>
 800723a:	463c      	mov	r4, r7
 800723c:	687f      	ldr	r7, [r7, #4]
 800723e:	e7b6      	b.n	80071ae <_malloc_r+0x4a>
 8007240:	461a      	mov	r2, r3
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	42a3      	cmp	r3, r4
 8007246:	d1fb      	bne.n	8007240 <_malloc_r+0xdc>
 8007248:	2300      	movs	r3, #0
 800724a:	6053      	str	r3, [r2, #4]
 800724c:	e7de      	b.n	800720c <_malloc_r+0xa8>
 800724e:	230c      	movs	r3, #12
 8007250:	6033      	str	r3, [r6, #0]
 8007252:	4630      	mov	r0, r6
 8007254:	f000 f80c 	bl	8007270 <__malloc_unlock>
 8007258:	e794      	b.n	8007184 <_malloc_r+0x20>
 800725a:	6005      	str	r5, [r0, #0]
 800725c:	e7d6      	b.n	800720c <_malloc_r+0xa8>
 800725e:	bf00      	nop
 8007260:	20001638 	.word	0x20001638

08007264 <__malloc_lock>:
 8007264:	4801      	ldr	r0, [pc, #4]	@ (800726c <__malloc_lock+0x8>)
 8007266:	f7ff bf00 	b.w	800706a <__retarget_lock_acquire_recursive>
 800726a:	bf00      	nop
 800726c:	20001630 	.word	0x20001630

08007270 <__malloc_unlock>:
 8007270:	4801      	ldr	r0, [pc, #4]	@ (8007278 <__malloc_unlock+0x8>)
 8007272:	f7ff befb 	b.w	800706c <__retarget_lock_release_recursive>
 8007276:	bf00      	nop
 8007278:	20001630 	.word	0x20001630

0800727c <__ssputs_r>:
 800727c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007280:	688e      	ldr	r6, [r1, #8]
 8007282:	461f      	mov	r7, r3
 8007284:	42be      	cmp	r6, r7
 8007286:	680b      	ldr	r3, [r1, #0]
 8007288:	4682      	mov	sl, r0
 800728a:	460c      	mov	r4, r1
 800728c:	4690      	mov	r8, r2
 800728e:	d82d      	bhi.n	80072ec <__ssputs_r+0x70>
 8007290:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007294:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007298:	d026      	beq.n	80072e8 <__ssputs_r+0x6c>
 800729a:	6965      	ldr	r5, [r4, #20]
 800729c:	6909      	ldr	r1, [r1, #16]
 800729e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072a2:	eba3 0901 	sub.w	r9, r3, r1
 80072a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072aa:	1c7b      	adds	r3, r7, #1
 80072ac:	444b      	add	r3, r9
 80072ae:	106d      	asrs	r5, r5, #1
 80072b0:	429d      	cmp	r5, r3
 80072b2:	bf38      	it	cc
 80072b4:	461d      	movcc	r5, r3
 80072b6:	0553      	lsls	r3, r2, #21
 80072b8:	d527      	bpl.n	800730a <__ssputs_r+0x8e>
 80072ba:	4629      	mov	r1, r5
 80072bc:	f7ff ff52 	bl	8007164 <_malloc_r>
 80072c0:	4606      	mov	r6, r0
 80072c2:	b360      	cbz	r0, 800731e <__ssputs_r+0xa2>
 80072c4:	6921      	ldr	r1, [r4, #16]
 80072c6:	464a      	mov	r2, r9
 80072c8:	f7ff fed1 	bl	800706e <memcpy>
 80072cc:	89a3      	ldrh	r3, [r4, #12]
 80072ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80072d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072d6:	81a3      	strh	r3, [r4, #12]
 80072d8:	6126      	str	r6, [r4, #16]
 80072da:	6165      	str	r5, [r4, #20]
 80072dc:	444e      	add	r6, r9
 80072de:	eba5 0509 	sub.w	r5, r5, r9
 80072e2:	6026      	str	r6, [r4, #0]
 80072e4:	60a5      	str	r5, [r4, #8]
 80072e6:	463e      	mov	r6, r7
 80072e8:	42be      	cmp	r6, r7
 80072ea:	d900      	bls.n	80072ee <__ssputs_r+0x72>
 80072ec:	463e      	mov	r6, r7
 80072ee:	6820      	ldr	r0, [r4, #0]
 80072f0:	4632      	mov	r2, r6
 80072f2:	4641      	mov	r1, r8
 80072f4:	f000 fbb6 	bl	8007a64 <memmove>
 80072f8:	68a3      	ldr	r3, [r4, #8]
 80072fa:	1b9b      	subs	r3, r3, r6
 80072fc:	60a3      	str	r3, [r4, #8]
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	4433      	add	r3, r6
 8007302:	6023      	str	r3, [r4, #0]
 8007304:	2000      	movs	r0, #0
 8007306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800730a:	462a      	mov	r2, r5
 800730c:	f000 fbf6 	bl	8007afc <_realloc_r>
 8007310:	4606      	mov	r6, r0
 8007312:	2800      	cmp	r0, #0
 8007314:	d1e0      	bne.n	80072d8 <__ssputs_r+0x5c>
 8007316:	6921      	ldr	r1, [r4, #16]
 8007318:	4650      	mov	r0, sl
 800731a:	f7ff feb7 	bl	800708c <_free_r>
 800731e:	230c      	movs	r3, #12
 8007320:	f8ca 3000 	str.w	r3, [sl]
 8007324:	89a3      	ldrh	r3, [r4, #12]
 8007326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800732a:	81a3      	strh	r3, [r4, #12]
 800732c:	f04f 30ff 	mov.w	r0, #4294967295
 8007330:	e7e9      	b.n	8007306 <__ssputs_r+0x8a>
	...

08007334 <_svfiprintf_r>:
 8007334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007338:	4698      	mov	r8, r3
 800733a:	898b      	ldrh	r3, [r1, #12]
 800733c:	061b      	lsls	r3, r3, #24
 800733e:	b09d      	sub	sp, #116	@ 0x74
 8007340:	4607      	mov	r7, r0
 8007342:	460d      	mov	r5, r1
 8007344:	4614      	mov	r4, r2
 8007346:	d510      	bpl.n	800736a <_svfiprintf_r+0x36>
 8007348:	690b      	ldr	r3, [r1, #16]
 800734a:	b973      	cbnz	r3, 800736a <_svfiprintf_r+0x36>
 800734c:	2140      	movs	r1, #64	@ 0x40
 800734e:	f7ff ff09 	bl	8007164 <_malloc_r>
 8007352:	6028      	str	r0, [r5, #0]
 8007354:	6128      	str	r0, [r5, #16]
 8007356:	b930      	cbnz	r0, 8007366 <_svfiprintf_r+0x32>
 8007358:	230c      	movs	r3, #12
 800735a:	603b      	str	r3, [r7, #0]
 800735c:	f04f 30ff 	mov.w	r0, #4294967295
 8007360:	b01d      	add	sp, #116	@ 0x74
 8007362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007366:	2340      	movs	r3, #64	@ 0x40
 8007368:	616b      	str	r3, [r5, #20]
 800736a:	2300      	movs	r3, #0
 800736c:	9309      	str	r3, [sp, #36]	@ 0x24
 800736e:	2320      	movs	r3, #32
 8007370:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007374:	f8cd 800c 	str.w	r8, [sp, #12]
 8007378:	2330      	movs	r3, #48	@ 0x30
 800737a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007518 <_svfiprintf_r+0x1e4>
 800737e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007382:	f04f 0901 	mov.w	r9, #1
 8007386:	4623      	mov	r3, r4
 8007388:	469a      	mov	sl, r3
 800738a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800738e:	b10a      	cbz	r2, 8007394 <_svfiprintf_r+0x60>
 8007390:	2a25      	cmp	r2, #37	@ 0x25
 8007392:	d1f9      	bne.n	8007388 <_svfiprintf_r+0x54>
 8007394:	ebba 0b04 	subs.w	fp, sl, r4
 8007398:	d00b      	beq.n	80073b2 <_svfiprintf_r+0x7e>
 800739a:	465b      	mov	r3, fp
 800739c:	4622      	mov	r2, r4
 800739e:	4629      	mov	r1, r5
 80073a0:	4638      	mov	r0, r7
 80073a2:	f7ff ff6b 	bl	800727c <__ssputs_r>
 80073a6:	3001      	adds	r0, #1
 80073a8:	f000 80a7 	beq.w	80074fa <_svfiprintf_r+0x1c6>
 80073ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073ae:	445a      	add	r2, fp
 80073b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80073b2:	f89a 3000 	ldrb.w	r3, [sl]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f000 809f 	beq.w	80074fa <_svfiprintf_r+0x1c6>
 80073bc:	2300      	movs	r3, #0
 80073be:	f04f 32ff 	mov.w	r2, #4294967295
 80073c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073c6:	f10a 0a01 	add.w	sl, sl, #1
 80073ca:	9304      	str	r3, [sp, #16]
 80073cc:	9307      	str	r3, [sp, #28]
 80073ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80073d4:	4654      	mov	r4, sl
 80073d6:	2205      	movs	r2, #5
 80073d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073dc:	484e      	ldr	r0, [pc, #312]	@ (8007518 <_svfiprintf_r+0x1e4>)
 80073de:	f7f8 fef7 	bl	80001d0 <memchr>
 80073e2:	9a04      	ldr	r2, [sp, #16]
 80073e4:	b9d8      	cbnz	r0, 800741e <_svfiprintf_r+0xea>
 80073e6:	06d0      	lsls	r0, r2, #27
 80073e8:	bf44      	itt	mi
 80073ea:	2320      	movmi	r3, #32
 80073ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073f0:	0711      	lsls	r1, r2, #28
 80073f2:	bf44      	itt	mi
 80073f4:	232b      	movmi	r3, #43	@ 0x2b
 80073f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073fa:	f89a 3000 	ldrb.w	r3, [sl]
 80073fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8007400:	d015      	beq.n	800742e <_svfiprintf_r+0xfa>
 8007402:	9a07      	ldr	r2, [sp, #28]
 8007404:	4654      	mov	r4, sl
 8007406:	2000      	movs	r0, #0
 8007408:	f04f 0c0a 	mov.w	ip, #10
 800740c:	4621      	mov	r1, r4
 800740e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007412:	3b30      	subs	r3, #48	@ 0x30
 8007414:	2b09      	cmp	r3, #9
 8007416:	d94b      	bls.n	80074b0 <_svfiprintf_r+0x17c>
 8007418:	b1b0      	cbz	r0, 8007448 <_svfiprintf_r+0x114>
 800741a:	9207      	str	r2, [sp, #28]
 800741c:	e014      	b.n	8007448 <_svfiprintf_r+0x114>
 800741e:	eba0 0308 	sub.w	r3, r0, r8
 8007422:	fa09 f303 	lsl.w	r3, r9, r3
 8007426:	4313      	orrs	r3, r2
 8007428:	9304      	str	r3, [sp, #16]
 800742a:	46a2      	mov	sl, r4
 800742c:	e7d2      	b.n	80073d4 <_svfiprintf_r+0xa0>
 800742e:	9b03      	ldr	r3, [sp, #12]
 8007430:	1d19      	adds	r1, r3, #4
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	9103      	str	r1, [sp, #12]
 8007436:	2b00      	cmp	r3, #0
 8007438:	bfbb      	ittet	lt
 800743a:	425b      	neglt	r3, r3
 800743c:	f042 0202 	orrlt.w	r2, r2, #2
 8007440:	9307      	strge	r3, [sp, #28]
 8007442:	9307      	strlt	r3, [sp, #28]
 8007444:	bfb8      	it	lt
 8007446:	9204      	strlt	r2, [sp, #16]
 8007448:	7823      	ldrb	r3, [r4, #0]
 800744a:	2b2e      	cmp	r3, #46	@ 0x2e
 800744c:	d10a      	bne.n	8007464 <_svfiprintf_r+0x130>
 800744e:	7863      	ldrb	r3, [r4, #1]
 8007450:	2b2a      	cmp	r3, #42	@ 0x2a
 8007452:	d132      	bne.n	80074ba <_svfiprintf_r+0x186>
 8007454:	9b03      	ldr	r3, [sp, #12]
 8007456:	1d1a      	adds	r2, r3, #4
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	9203      	str	r2, [sp, #12]
 800745c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007460:	3402      	adds	r4, #2
 8007462:	9305      	str	r3, [sp, #20]
 8007464:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007528 <_svfiprintf_r+0x1f4>
 8007468:	7821      	ldrb	r1, [r4, #0]
 800746a:	2203      	movs	r2, #3
 800746c:	4650      	mov	r0, sl
 800746e:	f7f8 feaf 	bl	80001d0 <memchr>
 8007472:	b138      	cbz	r0, 8007484 <_svfiprintf_r+0x150>
 8007474:	9b04      	ldr	r3, [sp, #16]
 8007476:	eba0 000a 	sub.w	r0, r0, sl
 800747a:	2240      	movs	r2, #64	@ 0x40
 800747c:	4082      	lsls	r2, r0
 800747e:	4313      	orrs	r3, r2
 8007480:	3401      	adds	r4, #1
 8007482:	9304      	str	r3, [sp, #16]
 8007484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007488:	4824      	ldr	r0, [pc, #144]	@ (800751c <_svfiprintf_r+0x1e8>)
 800748a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800748e:	2206      	movs	r2, #6
 8007490:	f7f8 fe9e 	bl	80001d0 <memchr>
 8007494:	2800      	cmp	r0, #0
 8007496:	d036      	beq.n	8007506 <_svfiprintf_r+0x1d2>
 8007498:	4b21      	ldr	r3, [pc, #132]	@ (8007520 <_svfiprintf_r+0x1ec>)
 800749a:	bb1b      	cbnz	r3, 80074e4 <_svfiprintf_r+0x1b0>
 800749c:	9b03      	ldr	r3, [sp, #12]
 800749e:	3307      	adds	r3, #7
 80074a0:	f023 0307 	bic.w	r3, r3, #7
 80074a4:	3308      	adds	r3, #8
 80074a6:	9303      	str	r3, [sp, #12]
 80074a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074aa:	4433      	add	r3, r6
 80074ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80074ae:	e76a      	b.n	8007386 <_svfiprintf_r+0x52>
 80074b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80074b4:	460c      	mov	r4, r1
 80074b6:	2001      	movs	r0, #1
 80074b8:	e7a8      	b.n	800740c <_svfiprintf_r+0xd8>
 80074ba:	2300      	movs	r3, #0
 80074bc:	3401      	adds	r4, #1
 80074be:	9305      	str	r3, [sp, #20]
 80074c0:	4619      	mov	r1, r3
 80074c2:	f04f 0c0a 	mov.w	ip, #10
 80074c6:	4620      	mov	r0, r4
 80074c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074cc:	3a30      	subs	r2, #48	@ 0x30
 80074ce:	2a09      	cmp	r2, #9
 80074d0:	d903      	bls.n	80074da <_svfiprintf_r+0x1a6>
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d0c6      	beq.n	8007464 <_svfiprintf_r+0x130>
 80074d6:	9105      	str	r1, [sp, #20]
 80074d8:	e7c4      	b.n	8007464 <_svfiprintf_r+0x130>
 80074da:	fb0c 2101 	mla	r1, ip, r1, r2
 80074de:	4604      	mov	r4, r0
 80074e0:	2301      	movs	r3, #1
 80074e2:	e7f0      	b.n	80074c6 <_svfiprintf_r+0x192>
 80074e4:	ab03      	add	r3, sp, #12
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	462a      	mov	r2, r5
 80074ea:	4b0e      	ldr	r3, [pc, #56]	@ (8007524 <_svfiprintf_r+0x1f0>)
 80074ec:	a904      	add	r1, sp, #16
 80074ee:	4638      	mov	r0, r7
 80074f0:	f3af 8000 	nop.w
 80074f4:	1c42      	adds	r2, r0, #1
 80074f6:	4606      	mov	r6, r0
 80074f8:	d1d6      	bne.n	80074a8 <_svfiprintf_r+0x174>
 80074fa:	89ab      	ldrh	r3, [r5, #12]
 80074fc:	065b      	lsls	r3, r3, #25
 80074fe:	f53f af2d 	bmi.w	800735c <_svfiprintf_r+0x28>
 8007502:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007504:	e72c      	b.n	8007360 <_svfiprintf_r+0x2c>
 8007506:	ab03      	add	r3, sp, #12
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	462a      	mov	r2, r5
 800750c:	4b05      	ldr	r3, [pc, #20]	@ (8007524 <_svfiprintf_r+0x1f0>)
 800750e:	a904      	add	r1, sp, #16
 8007510:	4638      	mov	r0, r7
 8007512:	f000 f879 	bl	8007608 <_printf_i>
 8007516:	e7ed      	b.n	80074f4 <_svfiprintf_r+0x1c0>
 8007518:	08007e6d 	.word	0x08007e6d
 800751c:	08007e77 	.word	0x08007e77
 8007520:	00000000 	.word	0x00000000
 8007524:	0800727d 	.word	0x0800727d
 8007528:	08007e73 	.word	0x08007e73

0800752c <_printf_common>:
 800752c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007530:	4616      	mov	r6, r2
 8007532:	4698      	mov	r8, r3
 8007534:	688a      	ldr	r2, [r1, #8]
 8007536:	690b      	ldr	r3, [r1, #16]
 8007538:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800753c:	4293      	cmp	r3, r2
 800753e:	bfb8      	it	lt
 8007540:	4613      	movlt	r3, r2
 8007542:	6033      	str	r3, [r6, #0]
 8007544:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007548:	4607      	mov	r7, r0
 800754a:	460c      	mov	r4, r1
 800754c:	b10a      	cbz	r2, 8007552 <_printf_common+0x26>
 800754e:	3301      	adds	r3, #1
 8007550:	6033      	str	r3, [r6, #0]
 8007552:	6823      	ldr	r3, [r4, #0]
 8007554:	0699      	lsls	r1, r3, #26
 8007556:	bf42      	ittt	mi
 8007558:	6833      	ldrmi	r3, [r6, #0]
 800755a:	3302      	addmi	r3, #2
 800755c:	6033      	strmi	r3, [r6, #0]
 800755e:	6825      	ldr	r5, [r4, #0]
 8007560:	f015 0506 	ands.w	r5, r5, #6
 8007564:	d106      	bne.n	8007574 <_printf_common+0x48>
 8007566:	f104 0a19 	add.w	sl, r4, #25
 800756a:	68e3      	ldr	r3, [r4, #12]
 800756c:	6832      	ldr	r2, [r6, #0]
 800756e:	1a9b      	subs	r3, r3, r2
 8007570:	42ab      	cmp	r3, r5
 8007572:	dc26      	bgt.n	80075c2 <_printf_common+0x96>
 8007574:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007578:	6822      	ldr	r2, [r4, #0]
 800757a:	3b00      	subs	r3, #0
 800757c:	bf18      	it	ne
 800757e:	2301      	movne	r3, #1
 8007580:	0692      	lsls	r2, r2, #26
 8007582:	d42b      	bmi.n	80075dc <_printf_common+0xb0>
 8007584:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007588:	4641      	mov	r1, r8
 800758a:	4638      	mov	r0, r7
 800758c:	47c8      	blx	r9
 800758e:	3001      	adds	r0, #1
 8007590:	d01e      	beq.n	80075d0 <_printf_common+0xa4>
 8007592:	6823      	ldr	r3, [r4, #0]
 8007594:	6922      	ldr	r2, [r4, #16]
 8007596:	f003 0306 	and.w	r3, r3, #6
 800759a:	2b04      	cmp	r3, #4
 800759c:	bf02      	ittt	eq
 800759e:	68e5      	ldreq	r5, [r4, #12]
 80075a0:	6833      	ldreq	r3, [r6, #0]
 80075a2:	1aed      	subeq	r5, r5, r3
 80075a4:	68a3      	ldr	r3, [r4, #8]
 80075a6:	bf0c      	ite	eq
 80075a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075ac:	2500      	movne	r5, #0
 80075ae:	4293      	cmp	r3, r2
 80075b0:	bfc4      	itt	gt
 80075b2:	1a9b      	subgt	r3, r3, r2
 80075b4:	18ed      	addgt	r5, r5, r3
 80075b6:	2600      	movs	r6, #0
 80075b8:	341a      	adds	r4, #26
 80075ba:	42b5      	cmp	r5, r6
 80075bc:	d11a      	bne.n	80075f4 <_printf_common+0xc8>
 80075be:	2000      	movs	r0, #0
 80075c0:	e008      	b.n	80075d4 <_printf_common+0xa8>
 80075c2:	2301      	movs	r3, #1
 80075c4:	4652      	mov	r2, sl
 80075c6:	4641      	mov	r1, r8
 80075c8:	4638      	mov	r0, r7
 80075ca:	47c8      	blx	r9
 80075cc:	3001      	adds	r0, #1
 80075ce:	d103      	bne.n	80075d8 <_printf_common+0xac>
 80075d0:	f04f 30ff 	mov.w	r0, #4294967295
 80075d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d8:	3501      	adds	r5, #1
 80075da:	e7c6      	b.n	800756a <_printf_common+0x3e>
 80075dc:	18e1      	adds	r1, r4, r3
 80075de:	1c5a      	adds	r2, r3, #1
 80075e0:	2030      	movs	r0, #48	@ 0x30
 80075e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80075e6:	4422      	add	r2, r4
 80075e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075f0:	3302      	adds	r3, #2
 80075f2:	e7c7      	b.n	8007584 <_printf_common+0x58>
 80075f4:	2301      	movs	r3, #1
 80075f6:	4622      	mov	r2, r4
 80075f8:	4641      	mov	r1, r8
 80075fa:	4638      	mov	r0, r7
 80075fc:	47c8      	blx	r9
 80075fe:	3001      	adds	r0, #1
 8007600:	d0e6      	beq.n	80075d0 <_printf_common+0xa4>
 8007602:	3601      	adds	r6, #1
 8007604:	e7d9      	b.n	80075ba <_printf_common+0x8e>
	...

08007608 <_printf_i>:
 8007608:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800760c:	7e0f      	ldrb	r7, [r1, #24]
 800760e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007610:	2f78      	cmp	r7, #120	@ 0x78
 8007612:	4691      	mov	r9, r2
 8007614:	4680      	mov	r8, r0
 8007616:	460c      	mov	r4, r1
 8007618:	469a      	mov	sl, r3
 800761a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800761e:	d807      	bhi.n	8007630 <_printf_i+0x28>
 8007620:	2f62      	cmp	r7, #98	@ 0x62
 8007622:	d80a      	bhi.n	800763a <_printf_i+0x32>
 8007624:	2f00      	cmp	r7, #0
 8007626:	f000 80d2 	beq.w	80077ce <_printf_i+0x1c6>
 800762a:	2f58      	cmp	r7, #88	@ 0x58
 800762c:	f000 80b9 	beq.w	80077a2 <_printf_i+0x19a>
 8007630:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007634:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007638:	e03a      	b.n	80076b0 <_printf_i+0xa8>
 800763a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800763e:	2b15      	cmp	r3, #21
 8007640:	d8f6      	bhi.n	8007630 <_printf_i+0x28>
 8007642:	a101      	add	r1, pc, #4	@ (adr r1, 8007648 <_printf_i+0x40>)
 8007644:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007648:	080076a1 	.word	0x080076a1
 800764c:	080076b5 	.word	0x080076b5
 8007650:	08007631 	.word	0x08007631
 8007654:	08007631 	.word	0x08007631
 8007658:	08007631 	.word	0x08007631
 800765c:	08007631 	.word	0x08007631
 8007660:	080076b5 	.word	0x080076b5
 8007664:	08007631 	.word	0x08007631
 8007668:	08007631 	.word	0x08007631
 800766c:	08007631 	.word	0x08007631
 8007670:	08007631 	.word	0x08007631
 8007674:	080077b5 	.word	0x080077b5
 8007678:	080076df 	.word	0x080076df
 800767c:	0800776f 	.word	0x0800776f
 8007680:	08007631 	.word	0x08007631
 8007684:	08007631 	.word	0x08007631
 8007688:	080077d7 	.word	0x080077d7
 800768c:	08007631 	.word	0x08007631
 8007690:	080076df 	.word	0x080076df
 8007694:	08007631 	.word	0x08007631
 8007698:	08007631 	.word	0x08007631
 800769c:	08007777 	.word	0x08007777
 80076a0:	6833      	ldr	r3, [r6, #0]
 80076a2:	1d1a      	adds	r2, r3, #4
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	6032      	str	r2, [r6, #0]
 80076a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80076b0:	2301      	movs	r3, #1
 80076b2:	e09d      	b.n	80077f0 <_printf_i+0x1e8>
 80076b4:	6833      	ldr	r3, [r6, #0]
 80076b6:	6820      	ldr	r0, [r4, #0]
 80076b8:	1d19      	adds	r1, r3, #4
 80076ba:	6031      	str	r1, [r6, #0]
 80076bc:	0606      	lsls	r6, r0, #24
 80076be:	d501      	bpl.n	80076c4 <_printf_i+0xbc>
 80076c0:	681d      	ldr	r5, [r3, #0]
 80076c2:	e003      	b.n	80076cc <_printf_i+0xc4>
 80076c4:	0645      	lsls	r5, r0, #25
 80076c6:	d5fb      	bpl.n	80076c0 <_printf_i+0xb8>
 80076c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80076cc:	2d00      	cmp	r5, #0
 80076ce:	da03      	bge.n	80076d8 <_printf_i+0xd0>
 80076d0:	232d      	movs	r3, #45	@ 0x2d
 80076d2:	426d      	negs	r5, r5
 80076d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076d8:	4859      	ldr	r0, [pc, #356]	@ (8007840 <_printf_i+0x238>)
 80076da:	230a      	movs	r3, #10
 80076dc:	e011      	b.n	8007702 <_printf_i+0xfa>
 80076de:	6821      	ldr	r1, [r4, #0]
 80076e0:	6833      	ldr	r3, [r6, #0]
 80076e2:	0608      	lsls	r0, r1, #24
 80076e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80076e8:	d402      	bmi.n	80076f0 <_printf_i+0xe8>
 80076ea:	0649      	lsls	r1, r1, #25
 80076ec:	bf48      	it	mi
 80076ee:	b2ad      	uxthmi	r5, r5
 80076f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80076f2:	4853      	ldr	r0, [pc, #332]	@ (8007840 <_printf_i+0x238>)
 80076f4:	6033      	str	r3, [r6, #0]
 80076f6:	bf14      	ite	ne
 80076f8:	230a      	movne	r3, #10
 80076fa:	2308      	moveq	r3, #8
 80076fc:	2100      	movs	r1, #0
 80076fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007702:	6866      	ldr	r6, [r4, #4]
 8007704:	60a6      	str	r6, [r4, #8]
 8007706:	2e00      	cmp	r6, #0
 8007708:	bfa2      	ittt	ge
 800770a:	6821      	ldrge	r1, [r4, #0]
 800770c:	f021 0104 	bicge.w	r1, r1, #4
 8007710:	6021      	strge	r1, [r4, #0]
 8007712:	b90d      	cbnz	r5, 8007718 <_printf_i+0x110>
 8007714:	2e00      	cmp	r6, #0
 8007716:	d04b      	beq.n	80077b0 <_printf_i+0x1a8>
 8007718:	4616      	mov	r6, r2
 800771a:	fbb5 f1f3 	udiv	r1, r5, r3
 800771e:	fb03 5711 	mls	r7, r3, r1, r5
 8007722:	5dc7      	ldrb	r7, [r0, r7]
 8007724:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007728:	462f      	mov	r7, r5
 800772a:	42bb      	cmp	r3, r7
 800772c:	460d      	mov	r5, r1
 800772e:	d9f4      	bls.n	800771a <_printf_i+0x112>
 8007730:	2b08      	cmp	r3, #8
 8007732:	d10b      	bne.n	800774c <_printf_i+0x144>
 8007734:	6823      	ldr	r3, [r4, #0]
 8007736:	07df      	lsls	r7, r3, #31
 8007738:	d508      	bpl.n	800774c <_printf_i+0x144>
 800773a:	6923      	ldr	r3, [r4, #16]
 800773c:	6861      	ldr	r1, [r4, #4]
 800773e:	4299      	cmp	r1, r3
 8007740:	bfde      	ittt	le
 8007742:	2330      	movle	r3, #48	@ 0x30
 8007744:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007748:	f106 36ff 	addle.w	r6, r6, #4294967295
 800774c:	1b92      	subs	r2, r2, r6
 800774e:	6122      	str	r2, [r4, #16]
 8007750:	f8cd a000 	str.w	sl, [sp]
 8007754:	464b      	mov	r3, r9
 8007756:	aa03      	add	r2, sp, #12
 8007758:	4621      	mov	r1, r4
 800775a:	4640      	mov	r0, r8
 800775c:	f7ff fee6 	bl	800752c <_printf_common>
 8007760:	3001      	adds	r0, #1
 8007762:	d14a      	bne.n	80077fa <_printf_i+0x1f2>
 8007764:	f04f 30ff 	mov.w	r0, #4294967295
 8007768:	b004      	add	sp, #16
 800776a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800776e:	6823      	ldr	r3, [r4, #0]
 8007770:	f043 0320 	orr.w	r3, r3, #32
 8007774:	6023      	str	r3, [r4, #0]
 8007776:	4833      	ldr	r0, [pc, #204]	@ (8007844 <_printf_i+0x23c>)
 8007778:	2778      	movs	r7, #120	@ 0x78
 800777a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	6831      	ldr	r1, [r6, #0]
 8007782:	061f      	lsls	r7, r3, #24
 8007784:	f851 5b04 	ldr.w	r5, [r1], #4
 8007788:	d402      	bmi.n	8007790 <_printf_i+0x188>
 800778a:	065f      	lsls	r7, r3, #25
 800778c:	bf48      	it	mi
 800778e:	b2ad      	uxthmi	r5, r5
 8007790:	6031      	str	r1, [r6, #0]
 8007792:	07d9      	lsls	r1, r3, #31
 8007794:	bf44      	itt	mi
 8007796:	f043 0320 	orrmi.w	r3, r3, #32
 800779a:	6023      	strmi	r3, [r4, #0]
 800779c:	b11d      	cbz	r5, 80077a6 <_printf_i+0x19e>
 800779e:	2310      	movs	r3, #16
 80077a0:	e7ac      	b.n	80076fc <_printf_i+0xf4>
 80077a2:	4827      	ldr	r0, [pc, #156]	@ (8007840 <_printf_i+0x238>)
 80077a4:	e7e9      	b.n	800777a <_printf_i+0x172>
 80077a6:	6823      	ldr	r3, [r4, #0]
 80077a8:	f023 0320 	bic.w	r3, r3, #32
 80077ac:	6023      	str	r3, [r4, #0]
 80077ae:	e7f6      	b.n	800779e <_printf_i+0x196>
 80077b0:	4616      	mov	r6, r2
 80077b2:	e7bd      	b.n	8007730 <_printf_i+0x128>
 80077b4:	6833      	ldr	r3, [r6, #0]
 80077b6:	6825      	ldr	r5, [r4, #0]
 80077b8:	6961      	ldr	r1, [r4, #20]
 80077ba:	1d18      	adds	r0, r3, #4
 80077bc:	6030      	str	r0, [r6, #0]
 80077be:	062e      	lsls	r6, r5, #24
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	d501      	bpl.n	80077c8 <_printf_i+0x1c0>
 80077c4:	6019      	str	r1, [r3, #0]
 80077c6:	e002      	b.n	80077ce <_printf_i+0x1c6>
 80077c8:	0668      	lsls	r0, r5, #25
 80077ca:	d5fb      	bpl.n	80077c4 <_printf_i+0x1bc>
 80077cc:	8019      	strh	r1, [r3, #0]
 80077ce:	2300      	movs	r3, #0
 80077d0:	6123      	str	r3, [r4, #16]
 80077d2:	4616      	mov	r6, r2
 80077d4:	e7bc      	b.n	8007750 <_printf_i+0x148>
 80077d6:	6833      	ldr	r3, [r6, #0]
 80077d8:	1d1a      	adds	r2, r3, #4
 80077da:	6032      	str	r2, [r6, #0]
 80077dc:	681e      	ldr	r6, [r3, #0]
 80077de:	6862      	ldr	r2, [r4, #4]
 80077e0:	2100      	movs	r1, #0
 80077e2:	4630      	mov	r0, r6
 80077e4:	f7f8 fcf4 	bl	80001d0 <memchr>
 80077e8:	b108      	cbz	r0, 80077ee <_printf_i+0x1e6>
 80077ea:	1b80      	subs	r0, r0, r6
 80077ec:	6060      	str	r0, [r4, #4]
 80077ee:	6863      	ldr	r3, [r4, #4]
 80077f0:	6123      	str	r3, [r4, #16]
 80077f2:	2300      	movs	r3, #0
 80077f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077f8:	e7aa      	b.n	8007750 <_printf_i+0x148>
 80077fa:	6923      	ldr	r3, [r4, #16]
 80077fc:	4632      	mov	r2, r6
 80077fe:	4649      	mov	r1, r9
 8007800:	4640      	mov	r0, r8
 8007802:	47d0      	blx	sl
 8007804:	3001      	adds	r0, #1
 8007806:	d0ad      	beq.n	8007764 <_printf_i+0x15c>
 8007808:	6823      	ldr	r3, [r4, #0]
 800780a:	079b      	lsls	r3, r3, #30
 800780c:	d413      	bmi.n	8007836 <_printf_i+0x22e>
 800780e:	68e0      	ldr	r0, [r4, #12]
 8007810:	9b03      	ldr	r3, [sp, #12]
 8007812:	4298      	cmp	r0, r3
 8007814:	bfb8      	it	lt
 8007816:	4618      	movlt	r0, r3
 8007818:	e7a6      	b.n	8007768 <_printf_i+0x160>
 800781a:	2301      	movs	r3, #1
 800781c:	4632      	mov	r2, r6
 800781e:	4649      	mov	r1, r9
 8007820:	4640      	mov	r0, r8
 8007822:	47d0      	blx	sl
 8007824:	3001      	adds	r0, #1
 8007826:	d09d      	beq.n	8007764 <_printf_i+0x15c>
 8007828:	3501      	adds	r5, #1
 800782a:	68e3      	ldr	r3, [r4, #12]
 800782c:	9903      	ldr	r1, [sp, #12]
 800782e:	1a5b      	subs	r3, r3, r1
 8007830:	42ab      	cmp	r3, r5
 8007832:	dcf2      	bgt.n	800781a <_printf_i+0x212>
 8007834:	e7eb      	b.n	800780e <_printf_i+0x206>
 8007836:	2500      	movs	r5, #0
 8007838:	f104 0619 	add.w	r6, r4, #25
 800783c:	e7f5      	b.n	800782a <_printf_i+0x222>
 800783e:	bf00      	nop
 8007840:	08007e7e 	.word	0x08007e7e
 8007844:	08007e8f 	.word	0x08007e8f

08007848 <__sflush_r>:
 8007848:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800784c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007850:	0716      	lsls	r6, r2, #28
 8007852:	4605      	mov	r5, r0
 8007854:	460c      	mov	r4, r1
 8007856:	d454      	bmi.n	8007902 <__sflush_r+0xba>
 8007858:	684b      	ldr	r3, [r1, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	dc02      	bgt.n	8007864 <__sflush_r+0x1c>
 800785e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007860:	2b00      	cmp	r3, #0
 8007862:	dd48      	ble.n	80078f6 <__sflush_r+0xae>
 8007864:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007866:	2e00      	cmp	r6, #0
 8007868:	d045      	beq.n	80078f6 <__sflush_r+0xae>
 800786a:	2300      	movs	r3, #0
 800786c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007870:	682f      	ldr	r7, [r5, #0]
 8007872:	6a21      	ldr	r1, [r4, #32]
 8007874:	602b      	str	r3, [r5, #0]
 8007876:	d030      	beq.n	80078da <__sflush_r+0x92>
 8007878:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800787a:	89a3      	ldrh	r3, [r4, #12]
 800787c:	0759      	lsls	r1, r3, #29
 800787e:	d505      	bpl.n	800788c <__sflush_r+0x44>
 8007880:	6863      	ldr	r3, [r4, #4]
 8007882:	1ad2      	subs	r2, r2, r3
 8007884:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007886:	b10b      	cbz	r3, 800788c <__sflush_r+0x44>
 8007888:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800788a:	1ad2      	subs	r2, r2, r3
 800788c:	2300      	movs	r3, #0
 800788e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007890:	6a21      	ldr	r1, [r4, #32]
 8007892:	4628      	mov	r0, r5
 8007894:	47b0      	blx	r6
 8007896:	1c43      	adds	r3, r0, #1
 8007898:	89a3      	ldrh	r3, [r4, #12]
 800789a:	d106      	bne.n	80078aa <__sflush_r+0x62>
 800789c:	6829      	ldr	r1, [r5, #0]
 800789e:	291d      	cmp	r1, #29
 80078a0:	d82b      	bhi.n	80078fa <__sflush_r+0xb2>
 80078a2:	4a2a      	ldr	r2, [pc, #168]	@ (800794c <__sflush_r+0x104>)
 80078a4:	410a      	asrs	r2, r1
 80078a6:	07d6      	lsls	r6, r2, #31
 80078a8:	d427      	bmi.n	80078fa <__sflush_r+0xb2>
 80078aa:	2200      	movs	r2, #0
 80078ac:	6062      	str	r2, [r4, #4]
 80078ae:	04d9      	lsls	r1, r3, #19
 80078b0:	6922      	ldr	r2, [r4, #16]
 80078b2:	6022      	str	r2, [r4, #0]
 80078b4:	d504      	bpl.n	80078c0 <__sflush_r+0x78>
 80078b6:	1c42      	adds	r2, r0, #1
 80078b8:	d101      	bne.n	80078be <__sflush_r+0x76>
 80078ba:	682b      	ldr	r3, [r5, #0]
 80078bc:	b903      	cbnz	r3, 80078c0 <__sflush_r+0x78>
 80078be:	6560      	str	r0, [r4, #84]	@ 0x54
 80078c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078c2:	602f      	str	r7, [r5, #0]
 80078c4:	b1b9      	cbz	r1, 80078f6 <__sflush_r+0xae>
 80078c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078ca:	4299      	cmp	r1, r3
 80078cc:	d002      	beq.n	80078d4 <__sflush_r+0x8c>
 80078ce:	4628      	mov	r0, r5
 80078d0:	f7ff fbdc 	bl	800708c <_free_r>
 80078d4:	2300      	movs	r3, #0
 80078d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80078d8:	e00d      	b.n	80078f6 <__sflush_r+0xae>
 80078da:	2301      	movs	r3, #1
 80078dc:	4628      	mov	r0, r5
 80078de:	47b0      	blx	r6
 80078e0:	4602      	mov	r2, r0
 80078e2:	1c50      	adds	r0, r2, #1
 80078e4:	d1c9      	bne.n	800787a <__sflush_r+0x32>
 80078e6:	682b      	ldr	r3, [r5, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d0c6      	beq.n	800787a <__sflush_r+0x32>
 80078ec:	2b1d      	cmp	r3, #29
 80078ee:	d001      	beq.n	80078f4 <__sflush_r+0xac>
 80078f0:	2b16      	cmp	r3, #22
 80078f2:	d11e      	bne.n	8007932 <__sflush_r+0xea>
 80078f4:	602f      	str	r7, [r5, #0]
 80078f6:	2000      	movs	r0, #0
 80078f8:	e022      	b.n	8007940 <__sflush_r+0xf8>
 80078fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078fe:	b21b      	sxth	r3, r3
 8007900:	e01b      	b.n	800793a <__sflush_r+0xf2>
 8007902:	690f      	ldr	r7, [r1, #16]
 8007904:	2f00      	cmp	r7, #0
 8007906:	d0f6      	beq.n	80078f6 <__sflush_r+0xae>
 8007908:	0793      	lsls	r3, r2, #30
 800790a:	680e      	ldr	r6, [r1, #0]
 800790c:	bf08      	it	eq
 800790e:	694b      	ldreq	r3, [r1, #20]
 8007910:	600f      	str	r7, [r1, #0]
 8007912:	bf18      	it	ne
 8007914:	2300      	movne	r3, #0
 8007916:	eba6 0807 	sub.w	r8, r6, r7
 800791a:	608b      	str	r3, [r1, #8]
 800791c:	f1b8 0f00 	cmp.w	r8, #0
 8007920:	dde9      	ble.n	80078f6 <__sflush_r+0xae>
 8007922:	6a21      	ldr	r1, [r4, #32]
 8007924:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007926:	4643      	mov	r3, r8
 8007928:	463a      	mov	r2, r7
 800792a:	4628      	mov	r0, r5
 800792c:	47b0      	blx	r6
 800792e:	2800      	cmp	r0, #0
 8007930:	dc08      	bgt.n	8007944 <__sflush_r+0xfc>
 8007932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800793a:	81a3      	strh	r3, [r4, #12]
 800793c:	f04f 30ff 	mov.w	r0, #4294967295
 8007940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007944:	4407      	add	r7, r0
 8007946:	eba8 0800 	sub.w	r8, r8, r0
 800794a:	e7e7      	b.n	800791c <__sflush_r+0xd4>
 800794c:	dfbffffe 	.word	0xdfbffffe

08007950 <_fflush_r>:
 8007950:	b538      	push	{r3, r4, r5, lr}
 8007952:	690b      	ldr	r3, [r1, #16]
 8007954:	4605      	mov	r5, r0
 8007956:	460c      	mov	r4, r1
 8007958:	b913      	cbnz	r3, 8007960 <_fflush_r+0x10>
 800795a:	2500      	movs	r5, #0
 800795c:	4628      	mov	r0, r5
 800795e:	bd38      	pop	{r3, r4, r5, pc}
 8007960:	b118      	cbz	r0, 800796a <_fflush_r+0x1a>
 8007962:	6a03      	ldr	r3, [r0, #32]
 8007964:	b90b      	cbnz	r3, 800796a <_fflush_r+0x1a>
 8007966:	f7ff f911 	bl	8006b8c <__sinit>
 800796a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d0f3      	beq.n	800795a <_fflush_r+0xa>
 8007972:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007974:	07d0      	lsls	r0, r2, #31
 8007976:	d404      	bmi.n	8007982 <_fflush_r+0x32>
 8007978:	0599      	lsls	r1, r3, #22
 800797a:	d402      	bmi.n	8007982 <_fflush_r+0x32>
 800797c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800797e:	f7ff fb74 	bl	800706a <__retarget_lock_acquire_recursive>
 8007982:	4628      	mov	r0, r5
 8007984:	4621      	mov	r1, r4
 8007986:	f7ff ff5f 	bl	8007848 <__sflush_r>
 800798a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800798c:	07da      	lsls	r2, r3, #31
 800798e:	4605      	mov	r5, r0
 8007990:	d4e4      	bmi.n	800795c <_fflush_r+0xc>
 8007992:	89a3      	ldrh	r3, [r4, #12]
 8007994:	059b      	lsls	r3, r3, #22
 8007996:	d4e1      	bmi.n	800795c <_fflush_r+0xc>
 8007998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800799a:	f7ff fb67 	bl	800706c <__retarget_lock_release_recursive>
 800799e:	e7dd      	b.n	800795c <_fflush_r+0xc>

080079a0 <__swhatbuf_r>:
 80079a0:	b570      	push	{r4, r5, r6, lr}
 80079a2:	460c      	mov	r4, r1
 80079a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a8:	2900      	cmp	r1, #0
 80079aa:	b096      	sub	sp, #88	@ 0x58
 80079ac:	4615      	mov	r5, r2
 80079ae:	461e      	mov	r6, r3
 80079b0:	da0d      	bge.n	80079ce <__swhatbuf_r+0x2e>
 80079b2:	89a3      	ldrh	r3, [r4, #12]
 80079b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80079b8:	f04f 0100 	mov.w	r1, #0
 80079bc:	bf14      	ite	ne
 80079be:	2340      	movne	r3, #64	@ 0x40
 80079c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80079c4:	2000      	movs	r0, #0
 80079c6:	6031      	str	r1, [r6, #0]
 80079c8:	602b      	str	r3, [r5, #0]
 80079ca:	b016      	add	sp, #88	@ 0x58
 80079cc:	bd70      	pop	{r4, r5, r6, pc}
 80079ce:	466a      	mov	r2, sp
 80079d0:	f000 f862 	bl	8007a98 <_fstat_r>
 80079d4:	2800      	cmp	r0, #0
 80079d6:	dbec      	blt.n	80079b2 <__swhatbuf_r+0x12>
 80079d8:	9901      	ldr	r1, [sp, #4]
 80079da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80079de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80079e2:	4259      	negs	r1, r3
 80079e4:	4159      	adcs	r1, r3
 80079e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079ea:	e7eb      	b.n	80079c4 <__swhatbuf_r+0x24>

080079ec <__smakebuf_r>:
 80079ec:	898b      	ldrh	r3, [r1, #12]
 80079ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079f0:	079d      	lsls	r5, r3, #30
 80079f2:	4606      	mov	r6, r0
 80079f4:	460c      	mov	r4, r1
 80079f6:	d507      	bpl.n	8007a08 <__smakebuf_r+0x1c>
 80079f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80079fc:	6023      	str	r3, [r4, #0]
 80079fe:	6123      	str	r3, [r4, #16]
 8007a00:	2301      	movs	r3, #1
 8007a02:	6163      	str	r3, [r4, #20]
 8007a04:	b003      	add	sp, #12
 8007a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a08:	ab01      	add	r3, sp, #4
 8007a0a:	466a      	mov	r2, sp
 8007a0c:	f7ff ffc8 	bl	80079a0 <__swhatbuf_r>
 8007a10:	9f00      	ldr	r7, [sp, #0]
 8007a12:	4605      	mov	r5, r0
 8007a14:	4639      	mov	r1, r7
 8007a16:	4630      	mov	r0, r6
 8007a18:	f7ff fba4 	bl	8007164 <_malloc_r>
 8007a1c:	b948      	cbnz	r0, 8007a32 <__smakebuf_r+0x46>
 8007a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a22:	059a      	lsls	r2, r3, #22
 8007a24:	d4ee      	bmi.n	8007a04 <__smakebuf_r+0x18>
 8007a26:	f023 0303 	bic.w	r3, r3, #3
 8007a2a:	f043 0302 	orr.w	r3, r3, #2
 8007a2e:	81a3      	strh	r3, [r4, #12]
 8007a30:	e7e2      	b.n	80079f8 <__smakebuf_r+0xc>
 8007a32:	89a3      	ldrh	r3, [r4, #12]
 8007a34:	6020      	str	r0, [r4, #0]
 8007a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a3a:	81a3      	strh	r3, [r4, #12]
 8007a3c:	9b01      	ldr	r3, [sp, #4]
 8007a3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a42:	b15b      	cbz	r3, 8007a5c <__smakebuf_r+0x70>
 8007a44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a48:	4630      	mov	r0, r6
 8007a4a:	f000 f837 	bl	8007abc <_isatty_r>
 8007a4e:	b128      	cbz	r0, 8007a5c <__smakebuf_r+0x70>
 8007a50:	89a3      	ldrh	r3, [r4, #12]
 8007a52:	f023 0303 	bic.w	r3, r3, #3
 8007a56:	f043 0301 	orr.w	r3, r3, #1
 8007a5a:	81a3      	strh	r3, [r4, #12]
 8007a5c:	89a3      	ldrh	r3, [r4, #12]
 8007a5e:	431d      	orrs	r5, r3
 8007a60:	81a5      	strh	r5, [r4, #12]
 8007a62:	e7cf      	b.n	8007a04 <__smakebuf_r+0x18>

08007a64 <memmove>:
 8007a64:	4288      	cmp	r0, r1
 8007a66:	b510      	push	{r4, lr}
 8007a68:	eb01 0402 	add.w	r4, r1, r2
 8007a6c:	d902      	bls.n	8007a74 <memmove+0x10>
 8007a6e:	4284      	cmp	r4, r0
 8007a70:	4623      	mov	r3, r4
 8007a72:	d807      	bhi.n	8007a84 <memmove+0x20>
 8007a74:	1e43      	subs	r3, r0, #1
 8007a76:	42a1      	cmp	r1, r4
 8007a78:	d008      	beq.n	8007a8c <memmove+0x28>
 8007a7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a82:	e7f8      	b.n	8007a76 <memmove+0x12>
 8007a84:	4402      	add	r2, r0
 8007a86:	4601      	mov	r1, r0
 8007a88:	428a      	cmp	r2, r1
 8007a8a:	d100      	bne.n	8007a8e <memmove+0x2a>
 8007a8c:	bd10      	pop	{r4, pc}
 8007a8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a96:	e7f7      	b.n	8007a88 <memmove+0x24>

08007a98 <_fstat_r>:
 8007a98:	b538      	push	{r3, r4, r5, lr}
 8007a9a:	4d07      	ldr	r5, [pc, #28]	@ (8007ab8 <_fstat_r+0x20>)
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	4608      	mov	r0, r1
 8007aa2:	4611      	mov	r1, r2
 8007aa4:	602b      	str	r3, [r5, #0]
 8007aa6:	f7f9 fa2a 	bl	8000efe <_fstat>
 8007aaa:	1c43      	adds	r3, r0, #1
 8007aac:	d102      	bne.n	8007ab4 <_fstat_r+0x1c>
 8007aae:	682b      	ldr	r3, [r5, #0]
 8007ab0:	b103      	cbz	r3, 8007ab4 <_fstat_r+0x1c>
 8007ab2:	6023      	str	r3, [r4, #0]
 8007ab4:	bd38      	pop	{r3, r4, r5, pc}
 8007ab6:	bf00      	nop
 8007ab8:	2000162c 	.word	0x2000162c

08007abc <_isatty_r>:
 8007abc:	b538      	push	{r3, r4, r5, lr}
 8007abe:	4d06      	ldr	r5, [pc, #24]	@ (8007ad8 <_isatty_r+0x1c>)
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	4608      	mov	r0, r1
 8007ac6:	602b      	str	r3, [r5, #0]
 8007ac8:	f7f9 fa29 	bl	8000f1e <_isatty>
 8007acc:	1c43      	adds	r3, r0, #1
 8007ace:	d102      	bne.n	8007ad6 <_isatty_r+0x1a>
 8007ad0:	682b      	ldr	r3, [r5, #0]
 8007ad2:	b103      	cbz	r3, 8007ad6 <_isatty_r+0x1a>
 8007ad4:	6023      	str	r3, [r4, #0]
 8007ad6:	bd38      	pop	{r3, r4, r5, pc}
 8007ad8:	2000162c 	.word	0x2000162c

08007adc <_sbrk_r>:
 8007adc:	b538      	push	{r3, r4, r5, lr}
 8007ade:	4d06      	ldr	r5, [pc, #24]	@ (8007af8 <_sbrk_r+0x1c>)
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	4608      	mov	r0, r1
 8007ae6:	602b      	str	r3, [r5, #0]
 8007ae8:	f7f9 fa32 	bl	8000f50 <_sbrk>
 8007aec:	1c43      	adds	r3, r0, #1
 8007aee:	d102      	bne.n	8007af6 <_sbrk_r+0x1a>
 8007af0:	682b      	ldr	r3, [r5, #0]
 8007af2:	b103      	cbz	r3, 8007af6 <_sbrk_r+0x1a>
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	bd38      	pop	{r3, r4, r5, pc}
 8007af8:	2000162c 	.word	0x2000162c

08007afc <_realloc_r>:
 8007afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b00:	4680      	mov	r8, r0
 8007b02:	4615      	mov	r5, r2
 8007b04:	460c      	mov	r4, r1
 8007b06:	b921      	cbnz	r1, 8007b12 <_realloc_r+0x16>
 8007b08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	f7ff bb29 	b.w	8007164 <_malloc_r>
 8007b12:	b92a      	cbnz	r2, 8007b20 <_realloc_r+0x24>
 8007b14:	f7ff faba 	bl	800708c <_free_r>
 8007b18:	2400      	movs	r4, #0
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b20:	f000 f81a 	bl	8007b58 <_malloc_usable_size_r>
 8007b24:	4285      	cmp	r5, r0
 8007b26:	4606      	mov	r6, r0
 8007b28:	d802      	bhi.n	8007b30 <_realloc_r+0x34>
 8007b2a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007b2e:	d8f4      	bhi.n	8007b1a <_realloc_r+0x1e>
 8007b30:	4629      	mov	r1, r5
 8007b32:	4640      	mov	r0, r8
 8007b34:	f7ff fb16 	bl	8007164 <_malloc_r>
 8007b38:	4607      	mov	r7, r0
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	d0ec      	beq.n	8007b18 <_realloc_r+0x1c>
 8007b3e:	42b5      	cmp	r5, r6
 8007b40:	462a      	mov	r2, r5
 8007b42:	4621      	mov	r1, r4
 8007b44:	bf28      	it	cs
 8007b46:	4632      	movcs	r2, r6
 8007b48:	f7ff fa91 	bl	800706e <memcpy>
 8007b4c:	4621      	mov	r1, r4
 8007b4e:	4640      	mov	r0, r8
 8007b50:	f7ff fa9c 	bl	800708c <_free_r>
 8007b54:	463c      	mov	r4, r7
 8007b56:	e7e0      	b.n	8007b1a <_realloc_r+0x1e>

08007b58 <_malloc_usable_size_r>:
 8007b58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b5c:	1f18      	subs	r0, r3, #4
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	bfbc      	itt	lt
 8007b62:	580b      	ldrlt	r3, [r1, r0]
 8007b64:	18c0      	addlt	r0, r0, r3
 8007b66:	4770      	bx	lr

08007b68 <_init>:
 8007b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6a:	bf00      	nop
 8007b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b6e:	bc08      	pop	{r3}
 8007b70:	469e      	mov	lr, r3
 8007b72:	4770      	bx	lr

08007b74 <_fini>:
 8007b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b76:	bf00      	nop
 8007b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b7a:	bc08      	pop	{r3}
 8007b7c:	469e      	mov	lr, r3
 8007b7e:	4770      	bx	lr
