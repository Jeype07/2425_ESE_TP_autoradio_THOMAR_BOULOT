
TP-autoradio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a40c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  0800a59c  0800a59c  0000b59c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a92c  0800a92c  0000c078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a92c  0800a92c  0000b92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a934  0800a934  0000c078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a934  0800a934  0000b934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a938  0800a938  0000b938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800a93c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017ec  20000078  0800a9b4  0000c078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001864  0800a9b4  0000c864  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000228de  00000000  00000000  0000c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f76  00000000  00000000  0002e986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d10  00000000  00000000  00033900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001692  00000000  00000000  00035610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c494  00000000  00000000  00036ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000262aa  00000000  00000000  00063136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001051b0  00000000  00000000  000893e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018e590  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008134  00000000  00000000  0018e5d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  00196708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a584 	.word	0x0800a584

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800a584 	.word	0x0800a584

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000576:	4b10      	ldr	r3, [pc, #64]	@ (80005b8 <MX_DMA_Init+0x48>)
 8000578:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800057a:	4a0f      	ldr	r2, [pc, #60]	@ (80005b8 <MX_DMA_Init+0x48>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6493      	str	r3, [r2, #72]	@ 0x48
 8000582:	4b0d      	ldr	r3, [pc, #52]	@ (80005b8 <MX_DMA_Init+0x48>)
 8000584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2105      	movs	r1, #5
 8000592:	2010      	movs	r0, #16
 8000594:	f001 f9a2 	bl	80018dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000598:	2010      	movs	r0, #16
 800059a:	f001 f9bb 	bl	8001914 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2105      	movs	r1, #5
 80005a2:	2011      	movs	r0, #17
 80005a4:	f001 f99a 	bl	80018dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80005a8:	2011      	movs	r0, #17
 80005aa:	f001 f9b3 	bl	8001914 <HAL_NVIC_EnableIRQ>

}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000

080005bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4a07      	ldr	r2, [pc, #28]	@ (80005e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4a06      	ldr	r2, [pc, #24]	@ (80005ec <vApplicationGetIdleTaskMemory+0x30>)
 80005d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2280      	movs	r2, #128	@ 0x80
 80005d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000098 	.word	0x20000098
 80005ec:	20000138 	.word	0x20000138

080005f0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000620 <MX_FREERTOS_Init+0x30>)
 80005f8:	1d3c      	adds	r4, r7, #4
 80005fa:	461d      	mov	r5, r3
 80005fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000600:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000604:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f007 f945 	bl	800789c <osThreadCreate>
 8000612:	4603      	mov	r3, r0
 8000614:	4a03      	ldr	r2, [pc, #12]	@ (8000624 <MX_FREERTOS_Init+0x34>)
 8000616:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000618:	bf00      	nop
 800061a:	3720      	adds	r7, #32
 800061c:	46bd      	mov	sp, r7
 800061e:	bdb0      	pop	{r4, r5, r7, pc}
 8000620:	0800a5a8 	.word	0x0800a5a8
 8000624:	20000094 	.word	0x20000094

08000628 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000630:	2001      	movs	r0, #1
 8000632:	f007 f97f 	bl	8007934 <osDelay>
 8000636:	e7fb      	b.n	8000630 <StartDefaultTask+0x8>

08000638 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	@ 0x28
 800063c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	4b35      	ldr	r3, [pc, #212]	@ (8000724 <MX_GPIO_Init+0xec>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000652:	4a34      	ldr	r2, [pc, #208]	@ (8000724 <MX_GPIO_Init+0xec>)
 8000654:	f043 0304 	orr.w	r3, r3, #4
 8000658:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800065a:	4b32      	ldr	r3, [pc, #200]	@ (8000724 <MX_GPIO_Init+0xec>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065e:	f003 0304 	and.w	r3, r3, #4
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000666:	4b2f      	ldr	r3, [pc, #188]	@ (8000724 <MX_GPIO_Init+0xec>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066a:	4a2e      	ldr	r2, [pc, #184]	@ (8000724 <MX_GPIO_Init+0xec>)
 800066c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000670:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000672:	4b2c      	ldr	r3, [pc, #176]	@ (8000724 <MX_GPIO_Init+0xec>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b29      	ldr	r3, [pc, #164]	@ (8000724 <MX_GPIO_Init+0xec>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000682:	4a28      	ldr	r2, [pc, #160]	@ (8000724 <MX_GPIO_Init+0xec>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068a:	4b26      	ldr	r3, [pc, #152]	@ (8000724 <MX_GPIO_Init+0xec>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	4b23      	ldr	r3, [pc, #140]	@ (8000724 <MX_GPIO_Init+0xec>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069a:	4a22      	ldr	r2, [pc, #136]	@ (8000724 <MX_GPIO_Init+0xec>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006a2:	4b20      	ldr	r3, [pc, #128]	@ (8000724 <MX_GPIO_Init+0xec>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2121      	movs	r1, #33	@ 0x21
 80006b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b6:	f001 fccb 	bl	8002050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2180      	movs	r1, #128	@ 0x80
 80006be:	481a      	ldr	r0, [pc, #104]	@ (8000728 <MX_GPIO_Init+0xf0>)
 80006c0:	f001 fcc6 	bl	8002050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ca:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	4619      	mov	r1, r3
 80006da:	4814      	ldr	r0, [pc, #80]	@ (800072c <MX_GPIO_Init+0xf4>)
 80006dc:	f001 fb0e 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 80006e0:	2321      	movs	r3, #33	@ 0x21
 80006e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	2301      	movs	r3, #1
 80006e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2300      	movs	r3, #0
 80006ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4619      	mov	r1, r3
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006fa:	f001 faff 	bl	8001cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006fe:	2380      	movs	r3, #128	@ 0x80
 8000700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000702:	2301      	movs	r3, #1
 8000704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	2300      	movs	r3, #0
 800070c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	4619      	mov	r1, r3
 8000714:	4804      	ldr	r0, [pc, #16]	@ (8000728 <MX_GPIO_Init+0xf0>)
 8000716:	f001 faf1 	bl	8001cfc <HAL_GPIO_Init>

}
 800071a:	bf00      	nop
 800071c:	3728      	adds	r7, #40	@ 0x28
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40021000 	.word	0x40021000
 8000728:	48000400 	.word	0x48000400
 800072c:	48000800 	.word	0x48000800

08000730 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000734:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <MX_I2C2_Init+0x74>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	@ (80007a8 <MX_I2C2_Init+0x78>)
 8000738:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800073a:	4b1a      	ldr	r3, [pc, #104]	@ (80007a4 <MX_I2C2_Init+0x74>)
 800073c:	4a1b      	ldr	r2, [pc, #108]	@ (80007ac <MX_I2C2_Init+0x7c>)
 800073e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000740:	4b18      	ldr	r3, [pc, #96]	@ (80007a4 <MX_I2C2_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000746:	4b17      	ldr	r3, [pc, #92]	@ (80007a4 <MX_I2C2_Init+0x74>)
 8000748:	2201      	movs	r2, #1
 800074a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800074c:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <MX_I2C2_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000752:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <MX_I2C2_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000758:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <MX_I2C2_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075e:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_I2C2_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <MX_I2C2_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800076a:	480e      	ldr	r0, [pc, #56]	@ (80007a4 <MX_I2C2_Init+0x74>)
 800076c:	f001 fc88 	bl	8002080 <HAL_I2C_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000776:	f000 fb73 	bl	8000e60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800077a:	2100      	movs	r1, #0
 800077c:	4809      	ldr	r0, [pc, #36]	@ (80007a4 <MX_I2C2_Init+0x74>)
 800077e:	f002 f8a3 	bl	80028c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000788:	f000 fb6a 	bl	8000e60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800078c:	2100      	movs	r1, #0
 800078e:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <MX_I2C2_Init+0x74>)
 8000790:	f002 f8e5 	bl	800295e <HAL_I2CEx_ConfigDigitalFilter>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800079a:	f000 fb61 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000338 	.word	0x20000338
 80007a8:	40005800 	.word	0x40005800
 80007ac:	10d19ce4 	.word	0x10d19ce4

080007b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b0ac      	sub	sp, #176	@ 0xb0
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	2288      	movs	r2, #136	@ 0x88
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f009 f889 	bl	80098e8 <memset>
  if(i2cHandle->Instance==I2C2)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a21      	ldr	r2, [pc, #132]	@ (8000860 <HAL_I2C_MspInit+0xb0>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d13b      	bne.n	8000858 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80007e0:	2380      	movs	r3, #128	@ 0x80
 80007e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4618      	mov	r0, r3
 80007ee:	f002 ff99 	bl	8003724 <HAL_RCCEx_PeriphCLKConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80007f8:	f000 fb32 	bl	8000e60 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fc:	4b19      	ldr	r3, [pc, #100]	@ (8000864 <HAL_I2C_MspInit+0xb4>)
 80007fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000800:	4a18      	ldr	r2, [pc, #96]	@ (8000864 <HAL_I2C_MspInit+0xb4>)
 8000802:	f043 0302 	orr.w	r3, r3, #2
 8000806:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000808:	4b16      	ldr	r3, [pc, #88]	@ (8000864 <HAL_I2C_MspInit+0xb4>)
 800080a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080c:	f003 0302 	and.w	r3, r3, #2
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000814:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000818:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800081c:	2312      	movs	r3, #18
 800081e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000828:	2303      	movs	r3, #3
 800082a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800082e:	2304      	movs	r3, #4
 8000830:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000834:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000838:	4619      	mov	r1, r3
 800083a:	480b      	ldr	r0, [pc, #44]	@ (8000868 <HAL_I2C_MspInit+0xb8>)
 800083c:	f001 fa5e 	bl	8001cfc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000840:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <HAL_I2C_MspInit+0xb4>)
 8000842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000844:	4a07      	ldr	r2, [pc, #28]	@ (8000864 <HAL_I2C_MspInit+0xb4>)
 8000846:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800084a:	6593      	str	r3, [r2, #88]	@ 0x58
 800084c:	4b05      	ldr	r3, [pc, #20]	@ (8000864 <HAL_I2C_MspInit+0xb4>)
 800084e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000850:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000858:	bf00      	nop
 800085a:	37b0      	adds	r7, #176	@ 0xb0
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40005800 	.word	0x40005800
 8000864:	40021000 	.word	0x40021000
 8000868:	48000400 	.word	0x48000400

0800086c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000874:	1d39      	adds	r1, r7, #4
 8000876:	f04f 33ff 	mov.w	r3, #4294967295
 800087a:	2201      	movs	r2, #1
 800087c:	4803      	ldr	r0, [pc, #12]	@ (800088c <__io_putchar+0x20>)
 800087e:	f005 fe59 	bl	8006534 <HAL_UART_Transmit>

	return ch;
 8000882:	687b      	ldr	r3, [r7, #4]
}
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000980 	.word	0x20000980

08000890 <fonction>:
		shell_uart_receive_irq_cb();	// C'est la fonction qui donne le sémaphore!
	}
}

int fonction(h_shell_t * h_shell, int argc, char ** argv)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
	int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Je suis une fonction bidon\r\n");
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80008a2:	4a0a      	ldr	r2, [pc, #40]	@ (80008cc <fonction+0x3c>)
 80008a4:	213c      	movs	r1, #60	@ 0x3c
 80008a6:	4618      	mov	r0, r3
 80008a8:	f008 ff12 	bl	80096d0 <sniprintf>
 80008ac:	6178      	str	r0, [r7, #20]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80008b4:	68fa      	ldr	r2, [r7, #12]
 80008b6:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80008ba:	6979      	ldr	r1, [r7, #20]
 80008bc:	b289      	uxth	r1, r1
 80008be:	4610      	mov	r0, r2
 80008c0:	4798      	blx	r3

	return 0;
 80008c2:	2300      	movs	r3, #0
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	0800a5c4 	.word	0x0800a5c4

080008d0 <addition>:

int addition(h_shell_t * h_shell, int argc, char ** argv)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	@ 0x28
 80008d4:	af02      	add	r7, sp, #8
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
	if (argc == 3)
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	2b03      	cmp	r3, #3
 80008e0:	d128      	bne.n	8000934 <addition+0x64>
	{
		int a, b;
		a = atoi(argv[1]);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3304      	adds	r3, #4
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f008 fd49 	bl	8009380 <atoi>
 80008ee:	61b8      	str	r0, [r7, #24]
		b = atoi(argv[2]);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3308      	adds	r3, #8
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f008 fd42 	bl	8009380 <atoi>
 80008fc:	6178      	str	r0, [r7, #20]
		int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%d + %d = %d\r\n", a, b, a+b);
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8000904:	69ba      	ldr	r2, [r7, #24]
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	4413      	add	r3, r2
 800090a:	9301      	str	r3, [sp, #4]
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	9300      	str	r3, [sp, #0]
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	4a15      	ldr	r2, [pc, #84]	@ (8000968 <addition+0x98>)
 8000914:	213c      	movs	r1, #60	@ 0x3c
 8000916:	f008 fedb 	bl	80096d0 <sniprintf>
 800091a:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000928:	6939      	ldr	r1, [r7, #16]
 800092a:	b289      	uxth	r1, r1
 800092c:	4610      	mov	r0, r2
 800092e:	4798      	blx	r3

		return 0;
 8000930:	2300      	movs	r3, #0
 8000932:	e014      	b.n	800095e <addition+0x8e>
	}
	else
	{
		int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Erreur, pas le bon nombre d'arguments\r\n");
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800093a:	4a0c      	ldr	r2, [pc, #48]	@ (800096c <addition+0x9c>)
 800093c:	213c      	movs	r1, #60	@ 0x3c
 800093e:	4618      	mov	r0, r3
 8000940:	f008 fec6 	bl	80096d0 <sniprintf>
 8000944:	61f8      	str	r0, [r7, #28]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000952:	69f9      	ldr	r1, [r7, #28]
 8000954:	b289      	uxth	r1, r1
 8000956:	4610      	mov	r0, r2
 8000958:	4798      	blx	r3
		return -1;
 800095a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800095e:	4618      	mov	r0, r3
 8000960:	3720      	adds	r7, #32
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	0800a5e4 	.word	0x0800a5e4
 800096c:	0800a5f4 	.word	0x0800a5f4

08000970 <ledToggle>:

int ledToggle(h_shell_t * h_shell, int argc, char ** argv)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]

	if (argc == 3)
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	2b03      	cmp	r3, #3
 8000980:	d14e      	bne.n	8000a20 <ledToggle+0xb0>
	{

		int a = atoi(argv[1]);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	3304      	adds	r3, #4
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4618      	mov	r0, r3
 800098a:	f008 fcf9 	bl	8009380 <atoi>
 800098e:	61b8      	str	r0, [r7, #24]
		int b = atoi(argv[2]);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3308      	adds	r3, #8
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4618      	mov	r0, r3
 8000998:	f008 fcf2 	bl	8009380 <atoi>
 800099c:	6178      	str	r0, [r7, #20]
		if(a>=0 && a<=7){
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	db3b      	blt.n	8000a1c <ledToggle+0xac>
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	2b07      	cmp	r3, #7
 80009a8:	dc38      	bgt.n	8000a1c <ledToggle+0xac>
			if(b==0){
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d10d      	bne.n	80009cc <ledToggle+0x5c>

				h_shell->drv.led(h_shell->led_num = a,MCPGPIOA);
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 80009b6:	69ba      	ldr	r2, [r7, #24]
 80009b8:	b2d1      	uxtb	r1, r2
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	f882 137c 	strb.w	r1, [r2, #892]	@ 0x37c
 80009c0:	68fa      	ldr	r2, [r7, #12]
 80009c2:	f892 237c 	ldrb.w	r2, [r2, #892]	@ 0x37c
 80009c6:	2112      	movs	r1, #18
 80009c8:	4610      	mov	r0, r2
 80009ca:	4798      	blx	r3
			}
			if(b==1){
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d10e      	bne.n	80009f0 <ledToggle+0x80>

				h_shell->drv.led(h_shell->led_num = a,MCPGPIOB);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	b2d1      	uxtb	r1, r2
 80009dc:	68fa      	ldr	r2, [r7, #12]
 80009de:	f882 137c 	strb.w	r1, [r2, #892]	@ 0x37c
 80009e2:	68fa      	ldr	r2, [r7, #12]
 80009e4:	f892 237c 	ldrb.w	r2, [r2, #892]	@ 0x37c
 80009e8:	2113      	movs	r1, #19
 80009ea:	4610      	mov	r0, r2
 80009ec:	4798      	blx	r3
 80009ee:	e015      	b.n	8000a1c <ledToggle+0xac>
			}
			else{
				int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Erreur, verifier la led ou le gpio\r\n");
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80009f6:	4a17      	ldr	r2, [pc, #92]	@ (8000a54 <ledToggle+0xe4>)
 80009f8:	213c      	movs	r1, #60	@ 0x3c
 80009fa:	4618      	mov	r0, r3
 80009fc:	f008 fe68 	bl	80096d0 <sniprintf>
 8000a00:	6138      	str	r0, [r7, #16]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000a0e:	6939      	ldr	r1, [r7, #16]
 8000a10:	b289      	uxth	r1, r1
 8000a12:	4610      	mov	r0, r2
 8000a14:	4798      	blx	r3
				return -2;
 8000a16:	f06f 0301 	mvn.w	r3, #1
 8000a1a:	e016      	b.n	8000a4a <ledToggle+0xda>
			}
		}

		return 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	e014      	b.n	8000a4a <ledToggle+0xda>
	}
	else
	{
		int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Erreur, pas le bon nombre d'arguments\r\n");
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8000a26:	4a0c      	ldr	r2, [pc, #48]	@ (8000a58 <ledToggle+0xe8>)
 8000a28:	213c      	movs	r1, #60	@ 0x3c
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f008 fe50 	bl	80096d0 <sniprintf>
 8000a30:	61f8      	str	r0, [r7, #28]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8000a38:	68fa      	ldr	r2, [r7, #12]
 8000a3a:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000a3e:	69f9      	ldr	r1, [r7, #28]
 8000a40:	b289      	uxth	r1, r1
 8000a42:	4610      	mov	r0, r2
 8000a44:	4798      	blx	r3
		return -1;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3720      	adds	r7, #32
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	0800a61c 	.word	0x0800a61c
 8000a58:	0800a5f4 	.word	0x0800a5f4

08000a5c <ledReset>:

int ledReset(h_shell_t * h_shell, int argc, char ** argv){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
	MCP23S17_Write(MCPGPIOA, -1);
 8000a68:	21ff      	movs	r1, #255	@ 0xff
 8000a6a:	2012      	movs	r0, #18
 8000a6c:	f008 fa34 	bl	8008ed8 <MCP23S17_Write>
	MCP23S17_Write(MCPGPIOB, -1);
 8000a70:	21ff      	movs	r1, #255	@ 0xff
 8000a72:	2013      	movs	r0, #19
 8000a74:	f008 fa30 	bl	8008ed8 <MCP23S17_Write>
	return 0;
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <task_chenillard>:

void task_chenillard(void *params) {
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b084      	sub	sp, #16
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
	h_shell_t *h_shell = (h_shell_t *)params;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	60bb      	str	r3, [r7, #8]
	uint8_t current_led_a = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	73fb      	strb	r3, [r7, #15]
	uint8_t current_led_b = 4;
 8000a92:	2304      	movs	r3, #4
 8000a94:	73bb      	strb	r3, [r7, #14]
	while (1) {

		h_shell->drv.led(h_shell->led_num = current_led_a,MCPGPIOA);
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 8000a9c:	68ba      	ldr	r2, [r7, #8]
 8000a9e:	7bf9      	ldrb	r1, [r7, #15]
 8000aa0:	f882 137c 	strb.w	r1, [r2, #892]	@ 0x37c
 8000aa4:	68ba      	ldr	r2, [r7, #8]
 8000aa6:	f892 237c 	ldrb.w	r2, [r2, #892]	@ 0x37c
 8000aaa:	2112      	movs	r1, #18
 8000aac:	4610      	mov	r0, r2
 8000aae:	4798      	blx	r3
		h_shell->drv.led(h_shell->led_num = current_led_b,MCPGPIOB);
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	7bb9      	ldrb	r1, [r7, #14]
 8000aba:	f882 137c 	strb.w	r1, [r2, #892]	@ 0x37c
 8000abe:	68ba      	ldr	r2, [r7, #8]
 8000ac0:	f892 237c 	ldrb.w	r2, [r2, #892]	@ 0x37c
 8000ac4:	2113      	movs	r1, #19
 8000ac6:	4610      	mov	r0, r2
 8000ac8:	4798      	blx	r3
		current_led_a = (current_led_a + 1) % NUM_LEDS; // Passer à la LED suivante
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	3301      	adds	r3, #1
 8000ace:	425a      	negs	r2, r3
 8000ad0:	f003 0307 	and.w	r3, r3, #7
 8000ad4:	f002 0207 	and.w	r2, r2, #7
 8000ad8:	bf58      	it	pl
 8000ada:	4253      	negpl	r3, r2
 8000adc:	73fb      	strb	r3, [r7, #15]
		current_led_b = (current_led_b + 1) % NUM_LEDS;
 8000ade:	7bbb      	ldrb	r3, [r7, #14]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	425a      	negs	r2, r3
 8000ae4:	f003 0307 	and.w	r3, r3, #7
 8000ae8:	f002 0207 	and.w	r2, r2, #7
 8000aec:	bf58      	it	pl
 8000aee:	4253      	negpl	r3, r2
 8000af0:	73bb      	strb	r3, [r7, #14]
		osDelay(200); // Délai entre deux LEDs (200 ms)
 8000af2:	20c8      	movs	r0, #200	@ 0xc8
 8000af4:	f006 ff1e 	bl	8007934 <osDelay>
		h_shell->drv.led(h_shell->led_num = current_led_a,MCPGPIOA);
 8000af8:	bf00      	nop
 8000afa:	e7cc      	b.n	8000a96 <task_chenillard+0x14>

08000afc <startchenillard>:
	}
}

int startchenillard(h_shell_t * h_shell, int argc, char ** argv){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af02      	add	r7, sp, #8
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]

	chenillard_running = 1; // Activer le chenillard
 8000b08:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <startchenillard+0x58>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
	if (ChenillardTaskHandle == NULL) {
 8000b0e:	4b12      	ldr	r3, [pc, #72]	@ (8000b58 <startchenillard+0x5c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d10a      	bne.n	8000b2c <startchenillard+0x30>
		// Créer la tâche si elle n'existe pas
		xTaskCreate(task_chenillard, "ChenillardTask", 128,(void *)h_shell, 2, &ChenillardTaskHandle);
 8000b16:	4b10      	ldr	r3, [pc, #64]	@ (8000b58 <startchenillard+0x5c>)
 8000b18:	9301      	str	r3, [sp, #4]
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	2280      	movs	r2, #128	@ 0x80
 8000b22:	490e      	ldr	r1, [pc, #56]	@ (8000b5c <startchenillard+0x60>)
 8000b24:	480e      	ldr	r0, [pc, #56]	@ (8000b60 <startchenillard+0x64>)
 8000b26:	f007 f82d 	bl	8007b84 <xTaskCreate>
 8000b2a:	e00e      	b.n	8000b4a <startchenillard+0x4e>
	}
	else{
		chenillard_running = 0;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <startchenillard+0x58>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
		if (ChenillardTaskHandle != NULL) {
 8000b32:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <startchenillard+0x5c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d007      	beq.n	8000b4a <startchenillard+0x4e>
			vTaskDelete(ChenillardTaskHandle); // Supprimer la tâche
 8000b3a:	4b07      	ldr	r3, [pc, #28]	@ (8000b58 <startchenillard+0x5c>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f007 f970 	bl	8007e24 <vTaskDelete>
			ChenillardTaskHandle = NULL;
 8000b44:	4b04      	ldr	r3, [pc, #16]	@ (8000b58 <startchenillard+0x5c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
		}
	}


	return 0;
 8000b4a:	2300      	movs	r3, #0
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000394 	.word	0x20000394
 8000b58:	20000390 	.word	0x20000390
 8000b5c:	0800a644 	.word	0x0800a644
 8000b60:	08000a83 	.word	0x08000a83

08000b64 <sglt5000_get_CHIP_ID_val>:

int sglt5000_get_CHIP_ID_val(h_shell_t * h_shell, int argc, char ** argv){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08c      	sub	sp, #48	@ 0x30
 8000b68:	af04      	add	r7, sp, #16
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
	uint8_t pData[2];
	if (HAL_I2C_Mem_Read(&hi2c2, SGTL5000_ADDR, CHIP_ID,CHIP_ID_REG_SIZE, pData, sizeof(pData), HAL_MAX_DELAY)== HAL_OK){
 8000b70:	f04f 33ff 	mov.w	r3, #4294967295
 8000b74:	9302      	str	r3, [sp, #8]
 8000b76:	2302      	movs	r3, #2
 8000b78:	9301      	str	r3, [sp, #4]
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	2301      	movs	r3, #1
 8000b82:	2200      	movs	r2, #0
 8000b84:	2114      	movs	r1, #20
 8000b86:	481a      	ldr	r0, [pc, #104]	@ (8000bf0 <sglt5000_get_CHIP_ID_val+0x8c>)
 8000b88:	f001 fb16 	bl	80021b8 <HAL_I2C_Mem_Read>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d114      	bne.n	8000bbc <sglt5000_get_CHIP_ID_val+0x58>
		int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "CHIP_ID value : %d\r\n", pData[1]);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8000b98:	7d7b      	ldrb	r3, [r7, #21]
 8000b9a:	4a16      	ldr	r2, [pc, #88]	@ (8000bf4 <sglt5000_get_CHIP_ID_val+0x90>)
 8000b9c:	213c      	movs	r1, #60	@ 0x3c
 8000b9e:	f008 fd97 	bl	80096d0 <sniprintf>
 8000ba2:	61b8      	str	r0, [r7, #24]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000bb0:	69b9      	ldr	r1, [r7, #24]
 8000bb2:	b289      	uxth	r1, r1
 8000bb4:	4610      	mov	r0, r2
 8000bb6:	4798      	blx	r3
		return 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	e014      	b.n	8000be6 <sglt5000_get_CHIP_ID_val+0x82>
	}
	else{
		int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Error\r\n");
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8000bc2:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf8 <sglt5000_get_CHIP_ID_val+0x94>)
 8000bc4:	213c      	movs	r1, #60	@ 0x3c
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f008 fd82 	bl	80096d0 <sniprintf>
 8000bcc:	61f8      	str	r0, [r7, #28]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8000bd4:	68fa      	ldr	r2, [r7, #12]
 8000bd6:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000bda:	69f9      	ldr	r1, [r7, #28]
 8000bdc:	b289      	uxth	r1, r1
 8000bde:	4610      	mov	r0, r2
 8000be0:	4798      	blx	r3

		return -1;
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3720      	adds	r7, #32
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000338 	.word	0x20000338
 8000bf4:	0800a654 	.word	0x0800a654
 8000bf8:	0800a66c 	.word	0x0800a66c

08000bfc <task_shell>:

void task_shell(void * unused)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	shell_init(&h_shell);
 8000c04:	4816      	ldr	r0, [pc, #88]	@ (8000c60 <task_shell+0x64>)
 8000c06:	f008 fa3d 	bl	8009084 <shell_init>
	shell_add(&h_shell, 'f', fonction, "Une fonction inutile");
 8000c0a:	4b16      	ldr	r3, [pc, #88]	@ (8000c64 <task_shell+0x68>)
 8000c0c:	4a16      	ldr	r2, [pc, #88]	@ (8000c68 <task_shell+0x6c>)
 8000c0e:	2166      	movs	r1, #102	@ 0x66
 8000c10:	4813      	ldr	r0, [pc, #76]	@ (8000c60 <task_shell+0x64>)
 8000c12:	f008 fa79 	bl	8009108 <shell_add>
	shell_add(&h_shell, 'a', addition, "Effectue une somme");
 8000c16:	4b15      	ldr	r3, [pc, #84]	@ (8000c6c <task_shell+0x70>)
 8000c18:	4a15      	ldr	r2, [pc, #84]	@ (8000c70 <task_shell+0x74>)
 8000c1a:	2161      	movs	r1, #97	@ 0x61
 8000c1c:	4810      	ldr	r0, [pc, #64]	@ (8000c60 <task_shell+0x64>)
 8000c1e:	f008 fa73 	bl	8009108 <shell_add>
	shell_add(&h_shell, 'b', ledToggle, "Allumer une led");
 8000c22:	4b14      	ldr	r3, [pc, #80]	@ (8000c74 <task_shell+0x78>)
 8000c24:	4a14      	ldr	r2, [pc, #80]	@ (8000c78 <task_shell+0x7c>)
 8000c26:	2162      	movs	r1, #98	@ 0x62
 8000c28:	480d      	ldr	r0, [pc, #52]	@ (8000c60 <task_shell+0x64>)
 8000c2a:	f008 fa6d 	bl	8009108 <shell_add>
	shell_add(&h_shell, 'c', ledReset, "Eteindre toutes les leds");
 8000c2e:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <task_shell+0x80>)
 8000c30:	4a13      	ldr	r2, [pc, #76]	@ (8000c80 <task_shell+0x84>)
 8000c32:	2163      	movs	r1, #99	@ 0x63
 8000c34:	480a      	ldr	r0, [pc, #40]	@ (8000c60 <task_shell+0x64>)
 8000c36:	f008 fa67 	bl	8009108 <shell_add>
	shell_add(&h_shell, 'd',startchenillard, "Lancer chenillard/Arreter chenillard");
 8000c3a:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <task_shell+0x88>)
 8000c3c:	4a12      	ldr	r2, [pc, #72]	@ (8000c88 <task_shell+0x8c>)
 8000c3e:	2164      	movs	r1, #100	@ 0x64
 8000c40:	4807      	ldr	r0, [pc, #28]	@ (8000c60 <task_shell+0x64>)
 8000c42:	f008 fa61 	bl	8009108 <shell_add>
	shell_add(&h_shell, 'e',sglt5000_get_CHIP_ID_val, "ID Codec");
 8000c46:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <task_shell+0x90>)
 8000c48:	4a11      	ldr	r2, [pc, #68]	@ (8000c90 <task_shell+0x94>)
 8000c4a:	2165      	movs	r1, #101	@ 0x65
 8000c4c:	4804      	ldr	r0, [pc, #16]	@ (8000c60 <task_shell+0x64>)
 8000c4e:	f008 fa5b 	bl	8009108 <shell_add>
	shell_run(&h_shell);	// boucle infinie
 8000c52:	4803      	ldr	r0, [pc, #12]	@ (8000c60 <task_shell+0x64>)
 8000c54:	f008 fb0a 	bl	800926c <shell_run>
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000398 	.word	0x20000398
 8000c64:	0800a674 	.word	0x0800a674
 8000c68:	08000891 	.word	0x08000891
 8000c6c:	0800a68c 	.word	0x0800a68c
 8000c70:	080008d1 	.word	0x080008d1
 8000c74:	0800a6a0 	.word	0x0800a6a0
 8000c78:	08000971 	.word	0x08000971
 8000c7c:	0800a6b0 	.word	0x0800a6b0
 8000c80:	08000a5d 	.word	0x08000a5d
 8000c84:	0800a6cc 	.word	0x0800a6cc
 8000c88:	08000afd 	.word	0x08000afd
 8000c8c:	0800a6f4 	.word	0x0800a6f4
 8000c90:	08000b65 	.word	0x08000b65

08000c94 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c9a:	f000 fd27 	bl	80016ec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c9e:	f000 f851 	bl	8000d44 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000ca2:	f000 f8a0 	bl	8000de6 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ca6:	f7ff fcc7 	bl	8000638 <MX_GPIO_Init>
	MX_DMA_Init();
 8000caa:	f7ff fc61 	bl	8000570 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000cae:	f000 fc5f 	bl	8001570 <MX_USART2_UART_Init>
	MX_SPI3_Init();
 8000cb2:	f000 fa1f 	bl	80010f4 <MX_SPI3_Init>
	MX_I2C2_Init();
 8000cb6:	f7ff fd3b 	bl	8000730 <MX_I2C2_Init>
	MX_SAI2_Init();
 8000cba:	f000 f8d7 	bl	8000e6c <MX_SAI2_Init>
	/* USER CODE BEGIN 2 */
	MCP23S17_Init();
 8000cbe:	f008 f8e9 	bl	8008e94 <MCP23S17_Init>
	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8000cc2:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <main+0x8c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <main+0x8c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000cd0:	601a      	str	r2, [r3, #0]


	h_shell.drv.receive = drv_uart2_receive;
 8000cd2:	4b14      	ldr	r3, [pc, #80]	@ (8000d24 <main+0x90>)
 8000cd4:	4a14      	ldr	r2, [pc, #80]	@ (8000d28 <main+0x94>)
 8000cd6:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
	h_shell.drv.transmit = drv_uart2_transmit;
 8000cda:	4b12      	ldr	r3, [pc, #72]	@ (8000d24 <main+0x90>)
 8000cdc:	4a13      	ldr	r2, [pc, #76]	@ (8000d2c <main+0x98>)
 8000cde:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
	h_shell.drv.led = drv_led;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <main+0x90>)
 8000ce4:	4a12      	ldr	r2, [pc, #72]	@ (8000d30 <main+0x9c>)
 8000ce6:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390

	if (xTaskCreate(task_shell, "Shell", TASK_SHELL_STACK_DEPTH, NULL, TASK_SHELL_PRIORITY, &h_task_shell) != pdPASS)
 8000cea:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <main+0xa0>)
 8000cec:	9301      	str	r3, [sp, #4]
 8000cee:	2301      	movs	r3, #1
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cf8:	490f      	ldr	r1, [pc, #60]	@ (8000d38 <main+0xa4>)
 8000cfa:	4810      	ldr	r0, [pc, #64]	@ (8000d3c <main+0xa8>)
 8000cfc:	f006 ff42 	bl	8007b84 <xTaskCreate>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d004      	beq.n	8000d10 <main+0x7c>
	{
		printf("Error creating task shell\r\n");
 8000d06:	480e      	ldr	r0, [pc, #56]	@ (8000d40 <main+0xac>)
 8000d08:	f008 fcda 	bl	80096c0 <puts>
		Error_Handler();
 8000d0c:	f000 f8a8 	bl	8000e60 <Error_Handler>
	}

	vTaskStartScheduler();
 8000d10:	f007 f94e 	bl	8007fb0 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 8000d14:	f7ff fc6c 	bl	80005f0 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8000d18:	f006 fdb9 	bl	800788e <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <main+0x88>
 8000d20:	20000730 	.word	0x20000730
 8000d24:	20000398 	.word	0x20000398
 8000d28:	08008fb5 	.word	0x08008fb5
 8000d2c:	08008fdd 	.word	0x08008fdd
 8000d30:	08008f29 	.word	0x08008f29
 8000d34:	2000038c 	.word	0x2000038c
 8000d38:	0800a700 	.word	0x0800a700
 8000d3c:	08000bfd 	.word	0x08000bfd
 8000d40:	0800a708 	.word	0x0800a708

08000d44 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b096      	sub	sp, #88	@ 0x58
 8000d48:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	2244      	movs	r2, #68	@ 0x44
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f008 fdc8 	bl	80098e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d58:	463b      	mov	r3, r7
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d66:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d6a:	f001 fe53 	bl	8002a14 <HAL_PWREx_ControlVoltageScaling>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000d74:	f000 f874 	bl	8000e60 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d80:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d82:	2310      	movs	r3, #16
 8000d84:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d86:	2302      	movs	r3, #2
 8000d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000d92:	230a      	movs	r3, #10
 8000d94:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d96:	2307      	movs	r3, #7
 8000d98:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4618      	mov	r0, r3
 8000da8:	f001 fe8a 	bl	8002ac0 <HAL_RCC_OscConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <SystemClock_Config+0x72>
	{
		Error_Handler();
 8000db2:	f000 f855 	bl	8000e60 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db6:	230f      	movs	r3, #15
 8000db8:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dca:	463b      	mov	r3, r7
 8000dcc:	2104      	movs	r1, #4
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f002 fa52 	bl	8003278 <HAL_RCC_ClockConfig>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000dda:	f000 f841 	bl	8000e60 <Error_Handler>
	}
}
 8000dde:	bf00      	nop
 8000de0:	3758      	adds	r7, #88	@ 0x58
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b0a2      	sub	sp, #136	@ 0x88
 8000dea:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dec:	463b      	mov	r3, r7
 8000dee:	2288      	movs	r2, #136	@ 0x88
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f008 fd78 	bl	80098e8 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000df8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dfc:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	66bb      	str	r3, [r7, #104]	@ 0x68
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000e02:	2302      	movs	r3, #2
 8000e04:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e06:	2301      	movs	r3, #1
 8000e08:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 8000e0a:	230d      	movs	r3, #13
 8000e0c:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8000e0e:	2311      	movs	r3, #17
 8000e10:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e12:	2302      	movs	r3, #2
 8000e14:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e16:	2302      	movs	r3, #2
 8000e18:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000e1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e1e:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e20:	463b      	mov	r3, r7
 8000e22:	4618      	mov	r0, r3
 8000e24:	f002 fc7e 	bl	8003724 <HAL_RCCEx_PeriphCLKConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <PeriphCommonClock_Config+0x4c>
	{
		Error_Handler();
 8000e2e:	f000 f817 	bl	8000e60 <Error_Handler>
	}
}
 8000e32:	bf00      	nop
 8000e34:	3788      	adds	r7, #136	@ 0x88
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a04      	ldr	r2, [pc, #16]	@ (8000e5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d101      	bne.n	8000e52 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000e4e:	f000 fc6d 	bl	800172c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40012c00 	.word	0x40012c00

08000e60 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e64:	b672      	cpsid	i
}
 8000e66:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <Error_Handler+0x8>

08000e6c <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8000e70:	4b2a      	ldr	r3, [pc, #168]	@ (8000f1c <MX_SAI2_Init+0xb0>)
 8000e72:	4a2b      	ldr	r2, [pc, #172]	@ (8000f20 <MX_SAI2_Init+0xb4>)
 8000e74:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000e76:	4b29      	ldr	r3, [pc, #164]	@ (8000f1c <MX_SAI2_Init+0xb0>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000e7c:	4b27      	ldr	r3, [pc, #156]	@ (8000f1c <MX_SAI2_Init+0xb0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e82:	4b26      	ldr	r3, [pc, #152]	@ (8000f1c <MX_SAI2_Init+0xb0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000e88:	4b24      	ldr	r3, [pc, #144]	@ (8000f1c <MX_SAI2_Init+0xb0>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e8e:	4b23      	ldr	r3, [pc, #140]	@ (8000f1c <MX_SAI2_Init+0xb0>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000e94:	4b21      	ldr	r3, [pc, #132]	@ (8000f1c <MX_SAI2_Init+0xb0>)
 8000e96:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000e9a:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f1c <MX_SAI2_Init+0xb0>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f1c <MX_SAI2_Init+0xb0>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f1c <MX_SAI2_Init+0xb0>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000eae:	4b1b      	ldr	r3, [pc, #108]	@ (8000f1c <MX_SAI2_Init+0xb0>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4818      	ldr	r0, [pc, #96]	@ (8000f1c <MX_SAI2_Init+0xb0>)
 8000ebc:	f003 ff4c 	bl	8004d58 <HAL_SAI_InitProtocol>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 8000ec6:	f7ff ffcb 	bl	8000e60 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000eca:	4b16      	ldr	r3, [pc, #88]	@ (8000f24 <MX_SAI2_Init+0xb8>)
 8000ecc:	4a16      	ldr	r2, [pc, #88]	@ (8000f28 <MX_SAI2_Init+0xbc>)
 8000ece:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000ed0:	4b14      	ldr	r3, [pc, #80]	@ (8000f24 <MX_SAI2_Init+0xb8>)
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000ed6:	4b13      	ldr	r3, [pc, #76]	@ (8000f24 <MX_SAI2_Init+0xb8>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000edc:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <MX_SAI2_Init+0xb8>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ee2:	4b10      	ldr	r3, [pc, #64]	@ (8000f24 <MX_SAI2_Init+0xb8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <MX_SAI2_Init+0xb8>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000eee:	4b0d      	ldr	r3, [pc, #52]	@ (8000f24 <MX_SAI2_Init+0xb8>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <MX_SAI2_Init+0xb8>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000efa:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <MX_SAI2_Init+0xb8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000f00:	2302      	movs	r3, #2
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	4807      	ldr	r0, [pc, #28]	@ (8000f24 <MX_SAI2_Init+0xb8>)
 8000f08:	f003 ff26 	bl	8004d58 <HAL_SAI_InitProtocol>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8000f12:	f7ff ffa5 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000730 	.word	0x20000730
 8000f20:	40015804 	.word	0x40015804
 8000f24:	200007b4 	.word	0x200007b4
 8000f28:	40015824 	.word	0x40015824

08000f2c <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	@ 0x28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a64      	ldr	r2, [pc, #400]	@ (80010cc <HAL_SAI_MspInit+0x1a0>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d15e      	bne.n	8000ffc <HAL_SAI_MspInit+0xd0>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8000f3e:	4b64      	ldr	r3, [pc, #400]	@ (80010d0 <HAL_SAI_MspInit+0x1a4>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d113      	bne.n	8000f6e <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000f46:	4b63      	ldr	r3, [pc, #396]	@ (80010d4 <HAL_SAI_MspInit+0x1a8>)
 8000f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f4a:	4a62      	ldr	r2, [pc, #392]	@ (80010d4 <HAL_SAI_MspInit+0x1a8>)
 8000f4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f50:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f52:	4b60      	ldr	r3, [pc, #384]	@ (80010d4 <HAL_SAI_MspInit+0x1a8>)
 8000f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2105      	movs	r1, #5
 8000f62:	204b      	movs	r0, #75	@ 0x4b
 8000f64:	f000 fcba 	bl	80018dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000f68:	204b      	movs	r0, #75	@ 0x4b
 8000f6a:	f000 fcd3 	bl	8001914 <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8000f6e:	4b58      	ldr	r3, [pc, #352]	@ (80010d0 <HAL_SAI_MspInit+0x1a4>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	3301      	adds	r3, #1
 8000f74:	4a56      	ldr	r2, [pc, #344]	@ (80010d0 <HAL_SAI_MspInit+0x1a4>)
 8000f76:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f78:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000f8a:	230d      	movs	r3, #13
 8000f8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	4850      	ldr	r0, [pc, #320]	@ (80010d8 <HAL_SAI_MspInit+0x1ac>)
 8000f96:	f000 feb1 	bl	8001cfc <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000f9a:	4b50      	ldr	r3, [pc, #320]	@ (80010dc <HAL_SAI_MspInit+0x1b0>)
 8000f9c:	4a50      	ldr	r2, [pc, #320]	@ (80010e0 <HAL_SAI_MspInit+0x1b4>)
 8000f9e:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000fa0:	4b4e      	ldr	r3, [pc, #312]	@ (80010dc <HAL_SAI_MspInit+0x1b0>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fa6:	4b4d      	ldr	r3, [pc, #308]	@ (80010dc <HAL_SAI_MspInit+0x1b0>)
 8000fa8:	2210      	movs	r2, #16
 8000faa:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fac:	4b4b      	ldr	r3, [pc, #300]	@ (80010dc <HAL_SAI_MspInit+0x1b0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000fb2:	4b4a      	ldr	r3, [pc, #296]	@ (80010dc <HAL_SAI_MspInit+0x1b0>)
 8000fb4:	2280      	movs	r2, #128	@ 0x80
 8000fb6:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fb8:	4b48      	ldr	r3, [pc, #288]	@ (80010dc <HAL_SAI_MspInit+0x1b0>)
 8000fba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fbe:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fc0:	4b46      	ldr	r3, [pc, #280]	@ (80010dc <HAL_SAI_MspInit+0x1b0>)
 8000fc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000fc6:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000fc8:	4b44      	ldr	r3, [pc, #272]	@ (80010dc <HAL_SAI_MspInit+0x1b0>)
 8000fca:	2220      	movs	r2, #32
 8000fcc:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8000fce:	4b43      	ldr	r3, [pc, #268]	@ (80010dc <HAL_SAI_MspInit+0x1b0>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000fd4:	4841      	ldr	r0, [pc, #260]	@ (80010dc <HAL_SAI_MspInit+0x1b0>)
 8000fd6:	f000 fcab 	bl	8001930 <HAL_DMA_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000fe0:	f7ff ff3e 	bl	8000e60 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a3d      	ldr	r2, [pc, #244]	@ (80010dc <HAL_SAI_MspInit+0x1b0>)
 8000fe8:	671a      	str	r2, [r3, #112]	@ 0x70
 8000fea:	4a3c      	ldr	r2, [pc, #240]	@ (80010dc <HAL_SAI_MspInit+0x1b0>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a3a      	ldr	r2, [pc, #232]	@ (80010dc <HAL_SAI_MspInit+0x1b0>)
 8000ff4:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000ff6:	4a39      	ldr	r2, [pc, #228]	@ (80010dc <HAL_SAI_MspInit+0x1b0>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a38      	ldr	r2, [pc, #224]	@ (80010e4 <HAL_SAI_MspInit+0x1b8>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d15e      	bne.n	80010c4 <HAL_SAI_MspInit+0x198>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8001006:	4b32      	ldr	r3, [pc, #200]	@ (80010d0 <HAL_SAI_MspInit+0x1a4>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d113      	bne.n	8001036 <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800100e:	4b31      	ldr	r3, [pc, #196]	@ (80010d4 <HAL_SAI_MspInit+0x1a8>)
 8001010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001012:	4a30      	ldr	r2, [pc, #192]	@ (80010d4 <HAL_SAI_MspInit+0x1a8>)
 8001014:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001018:	6613      	str	r3, [r2, #96]	@ 0x60
 800101a:	4b2e      	ldr	r3, [pc, #184]	@ (80010d4 <HAL_SAI_MspInit+0x1a8>)
 800101c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800101e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2105      	movs	r1, #5
 800102a:	204b      	movs	r0, #75	@ 0x4b
 800102c:	f000 fc56 	bl	80018dc <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8001030:	204b      	movs	r0, #75	@ 0x4b
 8001032:	f000 fc6f 	bl	8001914 <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8001036:	4b26      	ldr	r3, [pc, #152]	@ (80010d0 <HAL_SAI_MspInit+0x1a4>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	3301      	adds	r3, #1
 800103c:	4a24      	ldr	r2, [pc, #144]	@ (80010d0 <HAL_SAI_MspInit+0x1a4>)
 800103e:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001040:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001052:	230d      	movs	r3, #13
 8001054:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	4822      	ldr	r0, [pc, #136]	@ (80010e8 <HAL_SAI_MspInit+0x1bc>)
 800105e:	f000 fe4d 	bl	8001cfc <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8001062:	4b22      	ldr	r3, [pc, #136]	@ (80010ec <HAL_SAI_MspInit+0x1c0>)
 8001064:	4a22      	ldr	r2, [pc, #136]	@ (80010f0 <HAL_SAI_MspInit+0x1c4>)
 8001066:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8001068:	4b20      	ldr	r3, [pc, #128]	@ (80010ec <HAL_SAI_MspInit+0x1c0>)
 800106a:	2201      	movs	r2, #1
 800106c:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800106e:	4b1f      	ldr	r3, [pc, #124]	@ (80010ec <HAL_SAI_MspInit+0x1c0>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001074:	4b1d      	ldr	r3, [pc, #116]	@ (80010ec <HAL_SAI_MspInit+0x1c0>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 800107a:	4b1c      	ldr	r3, [pc, #112]	@ (80010ec <HAL_SAI_MspInit+0x1c0>)
 800107c:	2280      	movs	r2, #128	@ 0x80
 800107e:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001080:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <HAL_SAI_MspInit+0x1c0>)
 8001082:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001086:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001088:	4b18      	ldr	r3, [pc, #96]	@ (80010ec <HAL_SAI_MspInit+0x1c0>)
 800108a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800108e:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8001090:	4b16      	ldr	r3, [pc, #88]	@ (80010ec <HAL_SAI_MspInit+0x1c0>)
 8001092:	2220      	movs	r2, #32
 8001094:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8001096:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <HAL_SAI_MspInit+0x1c0>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 800109c:	4813      	ldr	r0, [pc, #76]	@ (80010ec <HAL_SAI_MspInit+0x1c0>)
 800109e:	f000 fc47 	bl	8001930 <HAL_DMA_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 80010a8:	f7ff feda 	bl	8000e60 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a0f      	ldr	r2, [pc, #60]	@ (80010ec <HAL_SAI_MspInit+0x1c0>)
 80010b0:	671a      	str	r2, [r3, #112]	@ 0x70
 80010b2:	4a0e      	ldr	r2, [pc, #56]	@ (80010ec <HAL_SAI_MspInit+0x1c0>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a0c      	ldr	r2, [pc, #48]	@ (80010ec <HAL_SAI_MspInit+0x1c0>)
 80010bc:	66da      	str	r2, [r3, #108]	@ 0x6c
 80010be:	4a0b      	ldr	r2, [pc, #44]	@ (80010ec <HAL_SAI_MspInit+0x1c0>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 80010c4:	bf00      	nop
 80010c6:	3728      	adds	r7, #40	@ 0x28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40015804 	.word	0x40015804
 80010d0:	200008c8 	.word	0x200008c8
 80010d4:	40021000 	.word	0x40021000
 80010d8:	48000400 	.word	0x48000400
 80010dc:	20000838 	.word	0x20000838
 80010e0:	4002006c 	.word	0x4002006c
 80010e4:	40015824 	.word	0x40015824
 80010e8:	48000800 	.word	0x48000800
 80010ec:	20000880 	.word	0x20000880
 80010f0:	40020080 	.word	0x40020080

080010f4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80010f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001168 <MX_SPI3_Init+0x74>)
 80010fa:	4a1c      	ldr	r2, [pc, #112]	@ (800116c <MX_SPI3_Init+0x78>)
 80010fc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80010fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001168 <MX_SPI3_Init+0x74>)
 8001100:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001104:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001106:	4b18      	ldr	r3, [pc, #96]	@ (8001168 <MX_SPI3_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800110c:	4b16      	ldr	r3, [pc, #88]	@ (8001168 <MX_SPI3_Init+0x74>)
 800110e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001112:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001114:	4b14      	ldr	r3, [pc, #80]	@ (8001168 <MX_SPI3_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800111a:	4b13      	ldr	r3, [pc, #76]	@ (8001168 <MX_SPI3_Init+0x74>)
 800111c:	2200      	movs	r2, #0
 800111e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001120:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <MX_SPI3_Init+0x74>)
 8001122:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001126:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001128:	4b0f      	ldr	r3, [pc, #60]	@ (8001168 <MX_SPI3_Init+0x74>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800112e:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <MX_SPI3_Init+0x74>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001134:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <MX_SPI3_Init+0x74>)
 8001136:	2200      	movs	r2, #0
 8001138:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800113a:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <MX_SPI3_Init+0x74>)
 800113c:	2200      	movs	r2, #0
 800113e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001140:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <MX_SPI3_Init+0x74>)
 8001142:	2207      	movs	r2, #7
 8001144:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001146:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <MX_SPI3_Init+0x74>)
 8001148:	2200      	movs	r2, #0
 800114a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <MX_SPI3_Init+0x74>)
 800114e:	2208      	movs	r2, #8
 8001150:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001152:	4805      	ldr	r0, [pc, #20]	@ (8001168 <MX_SPI3_Init+0x74>)
 8001154:	f004 fb5d 	bl	8005812 <HAL_SPI_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800115e:	f7ff fe7f 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200008cc 	.word	0x200008cc
 800116c:	40003c00 	.word	0x40003c00

08001170 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	@ 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a25      	ldr	r2, [pc, #148]	@ (8001224 <HAL_SPI_MspInit+0xb4>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d144      	bne.n	800121c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001192:	4b25      	ldr	r3, [pc, #148]	@ (8001228 <HAL_SPI_MspInit+0xb8>)
 8001194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001196:	4a24      	ldr	r2, [pc, #144]	@ (8001228 <HAL_SPI_MspInit+0xb8>)
 8001198:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800119c:	6593      	str	r3, [r2, #88]	@ 0x58
 800119e:	4b22      	ldr	r3, [pc, #136]	@ (8001228 <HAL_SPI_MspInit+0xb8>)
 80011a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001228 <HAL_SPI_MspInit+0xb8>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001228 <HAL_SPI_MspInit+0xb8>)
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001228 <HAL_SPI_MspInit+0xb8>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	4b19      	ldr	r3, [pc, #100]	@ (8001228 <HAL_SPI_MspInit+0xb8>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	4a18      	ldr	r2, [pc, #96]	@ (8001228 <HAL_SPI_MspInit+0xb8>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ce:	4b16      	ldr	r3, [pc, #88]	@ (8001228 <HAL_SPI_MspInit+0xb8>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011da:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e8:	2303      	movs	r3, #3
 80011ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011ec:	2306      	movs	r3, #6
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	480d      	ldr	r0, [pc, #52]	@ (800122c <HAL_SPI_MspInit+0xbc>)
 80011f8:	f000 fd80 	bl	8001cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011fc:	2320      	movs	r3, #32
 80011fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	2302      	movs	r3, #2
 8001202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001208:	2303      	movs	r3, #3
 800120a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800120c:	2306      	movs	r3, #6
 800120e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	4806      	ldr	r0, [pc, #24]	@ (8001230 <HAL_SPI_MspInit+0xc0>)
 8001218:	f000 fd70 	bl	8001cfc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	@ 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40003c00 	.word	0x40003c00
 8001228:	40021000 	.word	0x40021000
 800122c:	48000800 	.word	0x48000800
 8001230:	48000400 	.word	0x48000400

08001234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <HAL_MspInit+0x4c>)
 800123c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800123e:	4a10      	ldr	r2, [pc, #64]	@ (8001280 <HAL_MspInit+0x4c>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6613      	str	r3, [r2, #96]	@ 0x60
 8001246:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <HAL_MspInit+0x4c>)
 8001248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001252:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <HAL_MspInit+0x4c>)
 8001254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001256:	4a0a      	ldr	r2, [pc, #40]	@ (8001280 <HAL_MspInit+0x4c>)
 8001258:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800125c:	6593      	str	r3, [r2, #88]	@ 0x58
 800125e:	4b08      	ldr	r3, [pc, #32]	@ (8001280 <HAL_MspInit+0x4c>)
 8001260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	210f      	movs	r1, #15
 800126e:	f06f 0001 	mvn.w	r0, #1
 8001272:	f000 fb33 	bl	80018dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40021000 	.word	0x40021000

08001284 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08c      	sub	sp, #48	@ 0x30
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800128c:	2300      	movs	r3, #0
 800128e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001292:	4b2e      	ldr	r3, [pc, #184]	@ (800134c <HAL_InitTick+0xc8>)
 8001294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001296:	4a2d      	ldr	r2, [pc, #180]	@ (800134c <HAL_InitTick+0xc8>)
 8001298:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800129c:	6613      	str	r3, [r2, #96]	@ 0x60
 800129e:	4b2b      	ldr	r3, [pc, #172]	@ (800134c <HAL_InitTick+0xc8>)
 80012a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012aa:	f107 020c 	add.w	r2, r7, #12
 80012ae:	f107 0310 	add.w	r3, r7, #16
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f002 f9a3 	bl	8003600 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80012ba:	f002 f98b 	bl	80035d4 <HAL_RCC_GetPCLK2Freq>
 80012be:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012c2:	4a23      	ldr	r2, [pc, #140]	@ (8001350 <HAL_InitTick+0xcc>)
 80012c4:	fba2 2303 	umull	r2, r3, r2, r3
 80012c8:	0c9b      	lsrs	r3, r3, #18
 80012ca:	3b01      	subs	r3, #1
 80012cc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80012ce:	4b21      	ldr	r3, [pc, #132]	@ (8001354 <HAL_InitTick+0xd0>)
 80012d0:	4a21      	ldr	r2, [pc, #132]	@ (8001358 <HAL_InitTick+0xd4>)
 80012d2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80012d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001354 <HAL_InitTick+0xd0>)
 80012d6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012da:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80012dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001354 <HAL_InitTick+0xd0>)
 80012de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80012e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <HAL_InitTick+0xd0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001354 <HAL_InitTick+0xd0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ee:	4b19      	ldr	r3, [pc, #100]	@ (8001354 <HAL_InitTick+0xd0>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80012f4:	4817      	ldr	r0, [pc, #92]	@ (8001354 <HAL_InitTick+0xd0>)
 80012f6:	f004 fe09 	bl	8005f0c <HAL_TIM_Base_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001300:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001304:	2b00      	cmp	r3, #0
 8001306:	d11b      	bne.n	8001340 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001308:	4812      	ldr	r0, [pc, #72]	@ (8001354 <HAL_InitTick+0xd0>)
 800130a:	f004 fe61 	bl	8005fd0 <HAL_TIM_Base_Start_IT>
 800130e:	4603      	mov	r3, r0
 8001310:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001314:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001318:	2b00      	cmp	r3, #0
 800131a:	d111      	bne.n	8001340 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800131c:	2019      	movs	r0, #25
 800131e:	f000 faf9 	bl	8001914 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b0f      	cmp	r3, #15
 8001326:	d808      	bhi.n	800133a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001328:	2200      	movs	r2, #0
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	2019      	movs	r0, #25
 800132e:	f000 fad5 	bl	80018dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001332:	4a0a      	ldr	r2, [pc, #40]	@ (800135c <HAL_InitTick+0xd8>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	e002      	b.n	8001340 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001340:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001344:	4618      	mov	r0, r3
 8001346:	3730      	adds	r7, #48	@ 0x30
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40021000 	.word	0x40021000
 8001350:	431bde83 	.word	0x431bde83
 8001354:	20000930 	.word	0x20000930
 8001358:	40012c00 	.word	0x40012c00
 800135c:	20000004 	.word	0x20000004

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <NMI_Handler+0x4>

08001368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <HardFault_Handler+0x4>

08001370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <MemManage_Handler+0x4>

08001378 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <BusFault_Handler+0x4>

08001380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <UsageFault_Handler+0x4>

08001388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 800139c:	4802      	ldr	r0, [pc, #8]	@ (80013a8 <DMA1_Channel6_IRQHandler+0x10>)
 800139e:	f000 fbfe 	bl	8001b9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000838 	.word	0x20000838

080013ac <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80013b0:	4802      	ldr	r0, [pc, #8]	@ (80013bc <DMA1_Channel7_IRQHandler+0x10>)
 80013b2:	f000 fbf4 	bl	8001b9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000880 	.word	0x20000880

080013c0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013c4:	4802      	ldr	r0, [pc, #8]	@ (80013d0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80013c6:	f004 fe73 	bl	80060b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000930 	.word	0x20000930

080013d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013d8:	4802      	ldr	r0, [pc, #8]	@ (80013e4 <USART2_IRQHandler+0x10>)
 80013da:	f005 f9fd 	bl	80067d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000980 	.word	0x20000980

080013e8 <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 80013ec:	4803      	ldr	r0, [pc, #12]	@ (80013fc <SAI2_IRQHandler+0x14>)
 80013ee:	f003 febd 	bl	800516c <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 80013f2:	4803      	ldr	r0, [pc, #12]	@ (8001400 <SAI2_IRQHandler+0x18>)
 80013f4:	f003 feba 	bl	800516c <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000730 	.word	0x20000730
 8001400:	200007b4 	.word	0x200007b4

08001404 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	e00a      	b.n	800142c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001416:	f3af 8000 	nop.w
 800141a:	4601      	mov	r1, r0
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	60ba      	str	r2, [r7, #8]
 8001422:	b2ca      	uxtb	r2, r1
 8001424:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3301      	adds	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	429a      	cmp	r2, r3
 8001432:	dbf0      	blt.n	8001416 <_read+0x12>
  }

  return len;
 8001434:	687b      	ldr	r3, [r7, #4]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b086      	sub	sp, #24
 8001442:	af00      	add	r7, sp, #0
 8001444:	60f8      	str	r0, [r7, #12]
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	e009      	b.n	8001464 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	60ba      	str	r2, [r7, #8]
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fa07 	bl	800086c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3301      	adds	r3, #1
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	dbf1      	blt.n	8001450 <_write+0x12>
  }
  return len;
 800146c:	687b      	ldr	r3, [r7, #4]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <_close>:

int _close(int file)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800149e:	605a      	str	r2, [r3, #4]
  return 0;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <_isatty>:

int _isatty(int file)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e8:	4a14      	ldr	r2, [pc, #80]	@ (800153c <_sbrk+0x5c>)
 80014ea:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <_sbrk+0x60>)
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f4:	4b13      	ldr	r3, [pc, #76]	@ (8001544 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d102      	bne.n	8001502 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014fc:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <_sbrk+0x64>)
 80014fe:	4a12      	ldr	r2, [pc, #72]	@ (8001548 <_sbrk+0x68>)
 8001500:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001502:	4b10      	ldr	r3, [pc, #64]	@ (8001544 <_sbrk+0x64>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	429a      	cmp	r2, r3
 800150e:	d207      	bcs.n	8001520 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001510:	f008 fa8e 	bl	8009a30 <__errno>
 8001514:	4603      	mov	r3, r0
 8001516:	220c      	movs	r2, #12
 8001518:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
 800151e:	e009      	b.n	8001534 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001520:	4b08      	ldr	r3, [pc, #32]	@ (8001544 <_sbrk+0x64>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001526:	4b07      	ldr	r3, [pc, #28]	@ (8001544 <_sbrk+0x64>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4413      	add	r3, r2
 800152e:	4a05      	ldr	r2, [pc, #20]	@ (8001544 <_sbrk+0x64>)
 8001530:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001532:	68fb      	ldr	r3, [r7, #12]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20018000 	.word	0x20018000
 8001540:	00000400 	.word	0x00000400
 8001544:	2000097c 	.word	0x2000097c
 8001548:	20001868 	.word	0x20001868

0800154c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001550:	4b06      	ldr	r3, [pc, #24]	@ (800156c <SystemInit+0x20>)
 8001552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001556:	4a05      	ldr	r2, [pc, #20]	@ (800156c <SystemInit+0x20>)
 8001558:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800155c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001574:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <MX_USART2_UART_Init+0x58>)
 8001576:	4a15      	ldr	r2, [pc, #84]	@ (80015cc <MX_USART2_UART_Init+0x5c>)
 8001578:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800157a:	4b13      	ldr	r3, [pc, #76]	@ (80015c8 <MX_USART2_UART_Init+0x58>)
 800157c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001580:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001582:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <MX_USART2_UART_Init+0x58>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001588:	4b0f      	ldr	r3, [pc, #60]	@ (80015c8 <MX_USART2_UART_Init+0x58>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800158e:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <MX_USART2_UART_Init+0x58>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001594:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <MX_USART2_UART_Init+0x58>)
 8001596:	220c      	movs	r2, #12
 8001598:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159a:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <MX_USART2_UART_Init+0x58>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a0:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <MX_USART2_UART_Init+0x58>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015a6:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <MX_USART2_UART_Init+0x58>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ac:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <MX_USART2_UART_Init+0x58>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015b2:	4805      	ldr	r0, [pc, #20]	@ (80015c8 <MX_USART2_UART_Init+0x58>)
 80015b4:	f004 ff70 	bl	8006498 <HAL_UART_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015be:	f7ff fc4f 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000980 	.word	0x20000980
 80015cc:	40004400 	.word	0x40004400

080015d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b0ac      	sub	sp, #176	@ 0xb0
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	2288      	movs	r2, #136	@ 0x88
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f008 f979 	bl	80098e8 <memset>
  if(uartHandle->Instance==USART2)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a25      	ldr	r2, [pc, #148]	@ (8001690 <HAL_UART_MspInit+0xc0>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d143      	bne.n	8001688 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001600:	2302      	movs	r3, #2
 8001602:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001604:	2300      	movs	r3, #0
 8001606:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4618      	mov	r0, r3
 800160e:	f002 f889 	bl	8003724 <HAL_RCCEx_PeriphCLKConfig>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001618:	f7ff fc22 	bl	8000e60 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800161c:	4b1d      	ldr	r3, [pc, #116]	@ (8001694 <HAL_UART_MspInit+0xc4>)
 800161e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001620:	4a1c      	ldr	r2, [pc, #112]	@ (8001694 <HAL_UART_MspInit+0xc4>)
 8001622:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001626:	6593      	str	r3, [r2, #88]	@ 0x58
 8001628:	4b1a      	ldr	r3, [pc, #104]	@ (8001694 <HAL_UART_MspInit+0xc4>)
 800162a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800162c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001634:	4b17      	ldr	r3, [pc, #92]	@ (8001694 <HAL_UART_MspInit+0xc4>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001638:	4a16      	ldr	r2, [pc, #88]	@ (8001694 <HAL_UART_MspInit+0xc4>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001640:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <HAL_UART_MspInit+0xc4>)
 8001642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800164c:	230c      	movs	r3, #12
 800164e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165e:	2303      	movs	r3, #3
 8001660:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001664:	2307      	movs	r3, #7
 8001666:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800166e:	4619      	mov	r1, r3
 8001670:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001674:	f000 fb42 	bl	8001cfc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001678:	2200      	movs	r2, #0
 800167a:	2105      	movs	r1, #5
 800167c:	2026      	movs	r0, #38	@ 0x26
 800167e:	f000 f92d 	bl	80018dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001682:	2026      	movs	r0, #38	@ 0x26
 8001684:	f000 f946 	bl	8001914 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001688:	bf00      	nop
 800168a:	37b0      	adds	r7, #176	@ 0xb0
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40004400 	.word	0x40004400
 8001694:	40021000 	.word	0x40021000

08001698 <Reset_Handler>:
 8001698:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016d0 <LoopForever+0x2>
 800169c:	f7ff ff56 	bl	800154c <SystemInit>
 80016a0:	480c      	ldr	r0, [pc, #48]	@ (80016d4 <LoopForever+0x6>)
 80016a2:	490d      	ldr	r1, [pc, #52]	@ (80016d8 <LoopForever+0xa>)
 80016a4:	4a0d      	ldr	r2, [pc, #52]	@ (80016dc <LoopForever+0xe>)
 80016a6:	2300      	movs	r3, #0
 80016a8:	e002      	b.n	80016b0 <LoopCopyDataInit>

080016aa <CopyDataInit>:
 80016aa:	58d4      	ldr	r4, [r2, r3]
 80016ac:	50c4      	str	r4, [r0, r3]
 80016ae:	3304      	adds	r3, #4

080016b0 <LoopCopyDataInit>:
 80016b0:	18c4      	adds	r4, r0, r3
 80016b2:	428c      	cmp	r4, r1
 80016b4:	d3f9      	bcc.n	80016aa <CopyDataInit>
 80016b6:	4a0a      	ldr	r2, [pc, #40]	@ (80016e0 <LoopForever+0x12>)
 80016b8:	4c0a      	ldr	r4, [pc, #40]	@ (80016e4 <LoopForever+0x16>)
 80016ba:	2300      	movs	r3, #0
 80016bc:	e001      	b.n	80016c2 <LoopFillZerobss>

080016be <FillZerobss>:
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	3204      	adds	r2, #4

080016c2 <LoopFillZerobss>:
 80016c2:	42a2      	cmp	r2, r4
 80016c4:	d3fb      	bcc.n	80016be <FillZerobss>
 80016c6:	f008 f9b9 	bl	8009a3c <__libc_init_array>
 80016ca:	f7ff fae3 	bl	8000c94 <main>

080016ce <LoopForever>:
 80016ce:	e7fe      	b.n	80016ce <LoopForever>
 80016d0:	20018000 	.word	0x20018000
 80016d4:	20000000 	.word	0x20000000
 80016d8:	20000078 	.word	0x20000078
 80016dc:	0800a93c 	.word	0x0800a93c
 80016e0:	20000078 	.word	0x20000078
 80016e4:	20001864 	.word	0x20001864

080016e8 <ADC1_2_IRQHandler>:
 80016e8:	e7fe      	b.n	80016e8 <ADC1_2_IRQHandler>
	...

080016ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <HAL_Init+0x3c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001728 <HAL_Init+0x3c>)
 80016fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001700:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001702:	2003      	movs	r0, #3
 8001704:	f000 f8df 	bl	80018c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001708:	200f      	movs	r0, #15
 800170a:	f7ff fdbb 	bl	8001284 <HAL_InitTick>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d002      	beq.n	800171a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	71fb      	strb	r3, [r7, #7]
 8001718:	e001      	b.n	800171e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800171a:	f7ff fd8b 	bl	8001234 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800171e:	79fb      	ldrb	r3, [r7, #7]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40022000 	.word	0x40022000

0800172c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001730:	4b06      	ldr	r3, [pc, #24]	@ (800174c <HAL_IncTick+0x20>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <HAL_IncTick+0x24>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4413      	add	r3, r2
 800173c:	4a04      	ldr	r2, [pc, #16]	@ (8001750 <HAL_IncTick+0x24>)
 800173e:	6013      	str	r3, [r2, #0]
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	20000008 	.word	0x20000008
 8001750:	20000a08 	.word	0x20000a08

08001754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return uwTick;
 8001758:	4b03      	ldr	r3, [pc, #12]	@ (8001768 <HAL_GetTick+0x14>)
 800175a:	681b      	ldr	r3, [r3, #0]
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	20000a08 	.word	0x20000a08

0800176c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800177c:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001788:	4013      	ands	r3, r2
 800178a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001794:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800179c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179e:	4a04      	ldr	r2, [pc, #16]	@ (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	60d3      	str	r3, [r2, #12]
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b8:	4b04      	ldr	r3, [pc, #16]	@ (80017cc <__NVIC_GetPriorityGrouping+0x18>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	0a1b      	lsrs	r3, r3, #8
 80017be:	f003 0307 	and.w	r3, r3, #7
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	db0b      	blt.n	80017fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	f003 021f 	and.w	r2, r3, #31
 80017e8:	4907      	ldr	r1, [pc, #28]	@ (8001808 <__NVIC_EnableIRQ+0x38>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	095b      	lsrs	r3, r3, #5
 80017f0:	2001      	movs	r0, #1
 80017f2:	fa00 f202 	lsl.w	r2, r0, r2
 80017f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000e100 	.word	0xe000e100

0800180c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	6039      	str	r1, [r7, #0]
 8001816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	2b00      	cmp	r3, #0
 800181e:	db0a      	blt.n	8001836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	b2da      	uxtb	r2, r3
 8001824:	490c      	ldr	r1, [pc, #48]	@ (8001858 <__NVIC_SetPriority+0x4c>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	0112      	lsls	r2, r2, #4
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	440b      	add	r3, r1
 8001830:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001834:	e00a      	b.n	800184c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4908      	ldr	r1, [pc, #32]	@ (800185c <__NVIC_SetPriority+0x50>)
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	3b04      	subs	r3, #4
 8001844:	0112      	lsls	r2, r2, #4
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	440b      	add	r3, r1
 800184a:	761a      	strb	r2, [r3, #24]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000e100 	.word	0xe000e100
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	@ 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f1c3 0307 	rsb	r3, r3, #7
 800187a:	2b04      	cmp	r3, #4
 800187c:	bf28      	it	cs
 800187e:	2304      	movcs	r3, #4
 8001880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3304      	adds	r3, #4
 8001886:	2b06      	cmp	r3, #6
 8001888:	d902      	bls.n	8001890 <NVIC_EncodePriority+0x30>
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3b03      	subs	r3, #3
 800188e:	e000      	b.n	8001892 <NVIC_EncodePriority+0x32>
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	f04f 32ff 	mov.w	r2, #4294967295
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43da      	mvns	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	401a      	ands	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa01 f303 	lsl.w	r3, r1, r3
 80018b2:	43d9      	mvns	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	4313      	orrs	r3, r2
         );
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3724      	adds	r7, #36	@ 0x24
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff ff4c 	bl	800176c <__NVIC_SetPriorityGrouping>
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018ee:	f7ff ff61 	bl	80017b4 <__NVIC_GetPriorityGrouping>
 80018f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	68b9      	ldr	r1, [r7, #8]
 80018f8:	6978      	ldr	r0, [r7, #20]
 80018fa:	f7ff ffb1 	bl	8001860 <NVIC_EncodePriority>
 80018fe:	4602      	mov	r2, r0
 8001900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001904:	4611      	mov	r1, r2
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff ff80 	bl	800180c <__NVIC_SetPriority>
}
 800190c:	bf00      	nop
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff ff54 	bl	80017d0 <__NVIC_EnableIRQ>
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e098      	b.n	8001a74 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	4b4d      	ldr	r3, [pc, #308]	@ (8001a80 <HAL_DMA_Init+0x150>)
 800194a:	429a      	cmp	r2, r3
 800194c:	d80f      	bhi.n	800196e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	4b4b      	ldr	r3, [pc, #300]	@ (8001a84 <HAL_DMA_Init+0x154>)
 8001956:	4413      	add	r3, r2
 8001958:	4a4b      	ldr	r2, [pc, #300]	@ (8001a88 <HAL_DMA_Init+0x158>)
 800195a:	fba2 2303 	umull	r2, r3, r2, r3
 800195e:	091b      	lsrs	r3, r3, #4
 8001960:	009a      	lsls	r2, r3, #2
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a48      	ldr	r2, [pc, #288]	@ (8001a8c <HAL_DMA_Init+0x15c>)
 800196a:	641a      	str	r2, [r3, #64]	@ 0x40
 800196c:	e00e      	b.n	800198c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	4b46      	ldr	r3, [pc, #280]	@ (8001a90 <HAL_DMA_Init+0x160>)
 8001976:	4413      	add	r3, r2
 8001978:	4a43      	ldr	r2, [pc, #268]	@ (8001a88 <HAL_DMA_Init+0x158>)
 800197a:	fba2 2303 	umull	r2, r3, r2, r3
 800197e:	091b      	lsrs	r3, r3, #4
 8001980:	009a      	lsls	r2, r3, #2
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a42      	ldr	r2, [pc, #264]	@ (8001a94 <HAL_DMA_Init+0x164>)
 800198a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2202      	movs	r2, #2
 8001990:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80019a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80019b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80019e6:	d039      	beq.n	8001a5c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ec:	4a27      	ldr	r2, [pc, #156]	@ (8001a8c <HAL_DMA_Init+0x15c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d11a      	bne.n	8001a28 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019f2:	4b29      	ldr	r3, [pc, #164]	@ (8001a98 <HAL_DMA_Init+0x168>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fa:	f003 031c 	and.w	r3, r3, #28
 80019fe:	210f      	movs	r1, #15
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	4924      	ldr	r1, [pc, #144]	@ (8001a98 <HAL_DMA_Init+0x168>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a0c:	4b22      	ldr	r3, [pc, #136]	@ (8001a98 <HAL_DMA_Init+0x168>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6859      	ldr	r1, [r3, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a18:	f003 031c 	and.w	r3, r3, #28
 8001a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a20:	491d      	ldr	r1, [pc, #116]	@ (8001a98 <HAL_DMA_Init+0x168>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	600b      	str	r3, [r1, #0]
 8001a26:	e019      	b.n	8001a5c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a28:	4b1c      	ldr	r3, [pc, #112]	@ (8001a9c <HAL_DMA_Init+0x16c>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a30:	f003 031c 	and.w	r3, r3, #28
 8001a34:	210f      	movs	r1, #15
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	4917      	ldr	r1, [pc, #92]	@ (8001a9c <HAL_DMA_Init+0x16c>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a42:	4b16      	ldr	r3, [pc, #88]	@ (8001a9c <HAL_DMA_Init+0x16c>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6859      	ldr	r1, [r3, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4e:	f003 031c 	and.w	r3, r3, #28
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	4911      	ldr	r1, [pc, #68]	@ (8001a9c <HAL_DMA_Init+0x16c>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	40020407 	.word	0x40020407
 8001a84:	bffdfff8 	.word	0xbffdfff8
 8001a88:	cccccccd 	.word	0xcccccccd
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	bffdfbf8 	.word	0xbffdfbf8
 8001a94:	40020400 	.word	0x40020400
 8001a98:	400200a8 	.word	0x400200a8
 8001a9c:	400204a8 	.word	0x400204a8

08001aa0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d008      	beq.n	8001aca <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2204      	movs	r2, #4
 8001abc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e022      	b.n	8001b10 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 020e 	bic.w	r2, r2, #14
 8001ad8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0201 	bic.w	r2, r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aee:	f003 021c 	and.w	r2, r3, #28
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af6:	2101      	movs	r1, #1
 8001af8:	fa01 f202 	lsl.w	r2, r1, r2
 8001afc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d005      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2204      	movs	r2, #4
 8001b38:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	73fb      	strb	r3, [r7, #15]
 8001b3e:	e029      	b.n	8001b94 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 020e 	bic.w	r2, r2, #14
 8001b4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0201 	bic.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b64:	f003 021c 	and.w	r2, r3, #28
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b72:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	4798      	blx	r3
    }
  }
  return status;
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b084      	sub	sp, #16
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bba:	f003 031c 	and.w	r3, r3, #28
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d026      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x7a>
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d021      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0320 	and.w	r3, r3, #32
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d107      	bne.n	8001bf2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0204 	bic.w	r2, r2, #4
 8001bf0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf6:	f003 021c 	and.w	r2, r3, #28
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	2104      	movs	r1, #4
 8001c00:	fa01 f202 	lsl.w	r2, r1, r2
 8001c04:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d071      	beq.n	8001cf2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001c16:	e06c      	b.n	8001cf2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1c:	f003 031c 	and.w	r3, r3, #28
 8001c20:	2202      	movs	r2, #2
 8001c22:	409a      	lsls	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d02e      	beq.n	8001c8a <HAL_DMA_IRQHandler+0xec>
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d029      	beq.n	8001c8a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0320 	and.w	r3, r3, #32
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10b      	bne.n	8001c5c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 020a 	bic.w	r2, r2, #10
 8001c52:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c60:	f003 021c 	and.w	r2, r3, #28
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c68:	2102      	movs	r1, #2
 8001c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d038      	beq.n	8001cf2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001c88:	e033      	b.n	8001cf2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	f003 031c 	and.w	r3, r3, #28
 8001c92:	2208      	movs	r2, #8
 8001c94:	409a      	lsls	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d02a      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x156>
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d025      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 020e 	bic.w	r2, r2, #14
 8001cb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbc:	f003 021c 	and.w	r2, r3, #28
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d004      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001cf2:	bf00      	nop
 8001cf4:	bf00      	nop
}
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b087      	sub	sp, #28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d0a:	e17f      	b.n	800200c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	2101      	movs	r1, #1
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 8171 	beq.w	8002006 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d005      	beq.n	8001d3c <HAL_GPIO_Init+0x40>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d130      	bne.n	8001d9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d72:	2201      	movs	r2, #1
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	091b      	lsrs	r3, r3, #4
 8001d88:	f003 0201 	and.w	r2, r3, #1
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d118      	bne.n	8001ddc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001db0:	2201      	movs	r2, #1
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	08db      	lsrs	r3, r3, #3
 8001dc6:	f003 0201 	and.w	r2, r3, #1
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d017      	beq.n	8001e18 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	2203      	movs	r2, #3
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d123      	bne.n	8001e6c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	08da      	lsrs	r2, r3, #3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3208      	adds	r2, #8
 8001e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	220f      	movs	r2, #15
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	691a      	ldr	r2, [r3, #16]
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	08da      	lsrs	r2, r3, #3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3208      	adds	r2, #8
 8001e66:	6939      	ldr	r1, [r7, #16]
 8001e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	2203      	movs	r2, #3
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0203 	and.w	r2, r3, #3
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 80ac 	beq.w	8002006 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eae:	4b5f      	ldr	r3, [pc, #380]	@ (800202c <HAL_GPIO_Init+0x330>)
 8001eb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eb2:	4a5e      	ldr	r2, [pc, #376]	@ (800202c <HAL_GPIO_Init+0x330>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eba:	4b5c      	ldr	r3, [pc, #368]	@ (800202c <HAL_GPIO_Init+0x330>)
 8001ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ec6:	4a5a      	ldr	r2, [pc, #360]	@ (8002030 <HAL_GPIO_Init+0x334>)
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	089b      	lsrs	r3, r3, #2
 8001ecc:	3302      	adds	r3, #2
 8001ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	220f      	movs	r2, #15
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ef0:	d025      	beq.n	8001f3e <HAL_GPIO_Init+0x242>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a4f      	ldr	r2, [pc, #316]	@ (8002034 <HAL_GPIO_Init+0x338>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d01f      	beq.n	8001f3a <HAL_GPIO_Init+0x23e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a4e      	ldr	r2, [pc, #312]	@ (8002038 <HAL_GPIO_Init+0x33c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d019      	beq.n	8001f36 <HAL_GPIO_Init+0x23a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a4d      	ldr	r2, [pc, #308]	@ (800203c <HAL_GPIO_Init+0x340>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d013      	beq.n	8001f32 <HAL_GPIO_Init+0x236>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a4c      	ldr	r2, [pc, #304]	@ (8002040 <HAL_GPIO_Init+0x344>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00d      	beq.n	8001f2e <HAL_GPIO_Init+0x232>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a4b      	ldr	r2, [pc, #300]	@ (8002044 <HAL_GPIO_Init+0x348>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d007      	beq.n	8001f2a <HAL_GPIO_Init+0x22e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a4a      	ldr	r2, [pc, #296]	@ (8002048 <HAL_GPIO_Init+0x34c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d101      	bne.n	8001f26 <HAL_GPIO_Init+0x22a>
 8001f22:	2306      	movs	r3, #6
 8001f24:	e00c      	b.n	8001f40 <HAL_GPIO_Init+0x244>
 8001f26:	2307      	movs	r3, #7
 8001f28:	e00a      	b.n	8001f40 <HAL_GPIO_Init+0x244>
 8001f2a:	2305      	movs	r3, #5
 8001f2c:	e008      	b.n	8001f40 <HAL_GPIO_Init+0x244>
 8001f2e:	2304      	movs	r3, #4
 8001f30:	e006      	b.n	8001f40 <HAL_GPIO_Init+0x244>
 8001f32:	2303      	movs	r3, #3
 8001f34:	e004      	b.n	8001f40 <HAL_GPIO_Init+0x244>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e002      	b.n	8001f40 <HAL_GPIO_Init+0x244>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <HAL_GPIO_Init+0x244>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	f002 0203 	and.w	r2, r2, #3
 8001f46:	0092      	lsls	r2, r2, #2
 8001f48:	4093      	lsls	r3, r2
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f50:	4937      	ldr	r1, [pc, #220]	@ (8002030 <HAL_GPIO_Init+0x334>)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	089b      	lsrs	r3, r3, #2
 8001f56:	3302      	adds	r3, #2
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800204c <HAL_GPIO_Init+0x350>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	43db      	mvns	r3, r3
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f82:	4a32      	ldr	r2, [pc, #200]	@ (800204c <HAL_GPIO_Init+0x350>)
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f88:	4b30      	ldr	r3, [pc, #192]	@ (800204c <HAL_GPIO_Init+0x350>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fac:	4a27      	ldr	r2, [pc, #156]	@ (800204c <HAL_GPIO_Init+0x350>)
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fb2:	4b26      	ldr	r3, [pc, #152]	@ (800204c <HAL_GPIO_Init+0x350>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fd6:	4a1d      	ldr	r2, [pc, #116]	@ (800204c <HAL_GPIO_Init+0x350>)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800204c <HAL_GPIO_Init+0x350>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002000:	4a12      	ldr	r2, [pc, #72]	@ (800204c <HAL_GPIO_Init+0x350>)
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	3301      	adds	r3, #1
 800200a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	fa22 f303 	lsr.w	r3, r2, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	f47f ae78 	bne.w	8001d0c <HAL_GPIO_Init+0x10>
  }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	371c      	adds	r7, #28
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000
 8002030:	40010000 	.word	0x40010000
 8002034:	48000400 	.word	0x48000400
 8002038:	48000800 	.word	0x48000800
 800203c:	48000c00 	.word	0x48000c00
 8002040:	48001000 	.word	0x48001000
 8002044:	48001400 	.word	0x48001400
 8002048:	48001800 	.word	0x48001800
 800204c:	40010400 	.word	0x40010400

08002050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	807b      	strh	r3, [r7, #2]
 800205c:	4613      	mov	r3, r2
 800205e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002060:	787b      	ldrb	r3, [r7, #1]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002066:	887a      	ldrh	r2, [r7, #2]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800206c:	e002      	b.n	8002074 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800206e:	887a      	ldrh	r2, [r7, #2]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e08d      	b.n	80021ae <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d106      	bne.n	80020ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7fe fb82 	bl	80007b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2224      	movs	r2, #36	@ 0x24
 80020b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0201 	bic.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d107      	bne.n	80020fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	e006      	b.n	8002108 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002106:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d108      	bne.n	8002122 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	e007      	b.n	8002132 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002130:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002140:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002144:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002154:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691a      	ldr	r2, [r3, #16]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69d9      	ldr	r1, [r3, #28]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a1a      	ldr	r2, [r3, #32]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2220      	movs	r2, #32
 800219a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af02      	add	r7, sp, #8
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	4608      	mov	r0, r1
 80021c2:	4611      	mov	r1, r2
 80021c4:	461a      	mov	r2, r3
 80021c6:	4603      	mov	r3, r0
 80021c8:	817b      	strh	r3, [r7, #10]
 80021ca:	460b      	mov	r3, r1
 80021cc:	813b      	strh	r3, [r7, #8]
 80021ce:	4613      	mov	r3, r2
 80021d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b20      	cmp	r3, #32
 80021dc:	f040 80fd 	bne.w	80023da <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d002      	beq.n	80021ec <HAL_I2C_Mem_Read+0x34>
 80021e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d105      	bne.n	80021f8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021f2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0f1      	b.n	80023dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d101      	bne.n	8002206 <HAL_I2C_Mem_Read+0x4e>
 8002202:	2302      	movs	r3, #2
 8002204:	e0ea      	b.n	80023dc <HAL_I2C_Mem_Read+0x224>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800220e:	f7ff faa1 	bl	8001754 <HAL_GetTick>
 8002212:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	2319      	movs	r3, #25
 800221a:	2201      	movs	r2, #1
 800221c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 f95b 	bl	80024dc <I2C_WaitOnFlagUntilTimeout>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0d5      	b.n	80023dc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2222      	movs	r2, #34	@ 0x22
 8002234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2240      	movs	r2, #64	@ 0x40
 800223c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a3a      	ldr	r2, [r7, #32]
 800224a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002250:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002258:	88f8      	ldrh	r0, [r7, #6]
 800225a:	893a      	ldrh	r2, [r7, #8]
 800225c:	8979      	ldrh	r1, [r7, #10]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	4603      	mov	r3, r0
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 f8bf 	bl	80023ec <I2C_RequestMemoryRead>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d005      	beq.n	8002280 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0ad      	b.n	80023dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002284:	b29b      	uxth	r3, r3
 8002286:	2bff      	cmp	r3, #255	@ 0xff
 8002288:	d90e      	bls.n	80022a8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2201      	movs	r2, #1
 800228e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002294:	b2da      	uxtb	r2, r3
 8002296:	8979      	ldrh	r1, [r7, #10]
 8002298:	4b52      	ldr	r3, [pc, #328]	@ (80023e4 <HAL_I2C_Mem_Read+0x22c>)
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 fadf 	bl	8002864 <I2C_TransferConfig>
 80022a6:	e00f      	b.n	80022c8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	8979      	ldrh	r1, [r7, #10]
 80022ba:	4b4a      	ldr	r3, [pc, #296]	@ (80023e4 <HAL_I2C_Mem_Read+0x22c>)
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 face 	bl	8002864 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ce:	2200      	movs	r2, #0
 80022d0:	2104      	movs	r1, #4
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 f902 	bl	80024dc <I2C_WaitOnFlagUntilTimeout>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e07c      	b.n	80023dc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022fe:	3b01      	subs	r3, #1
 8002300:	b29a      	uxth	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800230a:	b29b      	uxth	r3, r3
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002318:	b29b      	uxth	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d034      	beq.n	8002388 <HAL_I2C_Mem_Read+0x1d0>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002322:	2b00      	cmp	r3, #0
 8002324:	d130      	bne.n	8002388 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800232c:	2200      	movs	r2, #0
 800232e:	2180      	movs	r1, #128	@ 0x80
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 f8d3 	bl	80024dc <I2C_WaitOnFlagUntilTimeout>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e04d      	b.n	80023dc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002344:	b29b      	uxth	r3, r3
 8002346:	2bff      	cmp	r3, #255	@ 0xff
 8002348:	d90e      	bls.n	8002368 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2201      	movs	r2, #1
 800234e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002354:	b2da      	uxtb	r2, r3
 8002356:	8979      	ldrh	r1, [r7, #10]
 8002358:	2300      	movs	r3, #0
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 fa7f 	bl	8002864 <I2C_TransferConfig>
 8002366:	e00f      	b.n	8002388 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800236c:	b29a      	uxth	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002376:	b2da      	uxtb	r2, r3
 8002378:	8979      	ldrh	r1, [r7, #10]
 800237a:	2300      	movs	r3, #0
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 fa6e 	bl	8002864 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800238c:	b29b      	uxth	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d19a      	bne.n	80022c8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 f940 	bl	800261c <I2C_WaitOnSTOPFlagUntilTimeout>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e01a      	b.n	80023dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2220      	movs	r2, #32
 80023ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6859      	ldr	r1, [r3, #4]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4b0b      	ldr	r3, [pc, #44]	@ (80023e8 <HAL_I2C_Mem_Read+0x230>)
 80023ba:	400b      	ands	r3, r1
 80023bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2220      	movs	r2, #32
 80023c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	e000      	b.n	80023dc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80023da:	2302      	movs	r3, #2
  }
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	80002400 	.word	0x80002400
 80023e8:	fe00e800 	.word	0xfe00e800

080023ec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	4608      	mov	r0, r1
 80023f6:	4611      	mov	r1, r2
 80023f8:	461a      	mov	r2, r3
 80023fa:	4603      	mov	r3, r0
 80023fc:	817b      	strh	r3, [r7, #10]
 80023fe:	460b      	mov	r3, r1
 8002400:	813b      	strh	r3, [r7, #8]
 8002402:	4613      	mov	r3, r2
 8002404:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002406:	88fb      	ldrh	r3, [r7, #6]
 8002408:	b2da      	uxtb	r2, r3
 800240a:	8979      	ldrh	r1, [r7, #10]
 800240c:	4b20      	ldr	r3, [pc, #128]	@ (8002490 <I2C_RequestMemoryRead+0xa4>)
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	2300      	movs	r3, #0
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 fa26 	bl	8002864 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002418:	69fa      	ldr	r2, [r7, #28]
 800241a:	69b9      	ldr	r1, [r7, #24]
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 f8b6 	bl	800258e <I2C_WaitOnTXISFlagUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e02c      	b.n	8002486 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d105      	bne.n	800243e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002432:	893b      	ldrh	r3, [r7, #8]
 8002434:	b2da      	uxtb	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	629a      	str	r2, [r3, #40]	@ 0x28
 800243c:	e015      	b.n	800246a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800243e:	893b      	ldrh	r3, [r7, #8]
 8002440:	0a1b      	lsrs	r3, r3, #8
 8002442:	b29b      	uxth	r3, r3
 8002444:	b2da      	uxtb	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	69b9      	ldr	r1, [r7, #24]
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 f89c 	bl	800258e <I2C_WaitOnTXISFlagUntilTimeout>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e012      	b.n	8002486 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002460:	893b      	ldrh	r3, [r7, #8]
 8002462:	b2da      	uxtb	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	2200      	movs	r2, #0
 8002472:	2140      	movs	r1, #64	@ 0x40
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 f831 	bl	80024dc <I2C_WaitOnFlagUntilTimeout>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e000      	b.n	8002486 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	80002000 	.word	0x80002000

08002494 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d103      	bne.n	80024b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2200      	movs	r2, #0
 80024b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d007      	beq.n	80024d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699a      	ldr	r2, [r3, #24]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0201 	orr.w	r2, r2, #1
 80024ce:	619a      	str	r2, [r3, #24]
  }
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	4613      	mov	r3, r2
 80024ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024ec:	e03b      	b.n	8002566 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	6839      	ldr	r1, [r7, #0]
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 f8d6 	bl	80026a4 <I2C_IsErrorOccurred>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e041      	b.n	8002586 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002508:	d02d      	beq.n	8002566 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800250a:	f7ff f923 	bl	8001754 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d302      	bcc.n	8002520 <I2C_WaitOnFlagUntilTimeout+0x44>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d122      	bne.n	8002566 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	699a      	ldr	r2, [r3, #24]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	4013      	ands	r3, r2
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	429a      	cmp	r2, r3
 800252e:	bf0c      	ite	eq
 8002530:	2301      	moveq	r3, #1
 8002532:	2300      	movne	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	461a      	mov	r2, r3
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	429a      	cmp	r2, r3
 800253c:	d113      	bne.n	8002566 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002542:	f043 0220 	orr.w	r2, r3, #32
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e00f      	b.n	8002586 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	699a      	ldr	r2, [r3, #24]
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	4013      	ands	r3, r2
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	429a      	cmp	r2, r3
 8002574:	bf0c      	ite	eq
 8002576:	2301      	moveq	r3, #1
 8002578:	2300      	movne	r3, #0
 800257a:	b2db      	uxtb	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	429a      	cmp	r2, r3
 8002582:	d0b4      	beq.n	80024ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b084      	sub	sp, #16
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800259a:	e033      	b.n	8002604 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	68b9      	ldr	r1, [r7, #8]
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 f87f 	bl	80026a4 <I2C_IsErrorOccurred>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e031      	b.n	8002614 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b6:	d025      	beq.n	8002604 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b8:	f7ff f8cc 	bl	8001754 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d302      	bcc.n	80025ce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d11a      	bne.n	8002604 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d013      	beq.n	8002604 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e0:	f043 0220 	orr.w	r2, r3, #32
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e007      	b.n	8002614 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b02      	cmp	r3, #2
 8002610:	d1c4      	bne.n	800259c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002628:	e02f      	b.n	800268a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 f838 	bl	80026a4 <I2C_IsErrorOccurred>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e02d      	b.n	800269a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800263e:	f7ff f889 	bl	8001754 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	429a      	cmp	r2, r3
 800264c:	d302      	bcc.n	8002654 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d11a      	bne.n	800268a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	f003 0320 	and.w	r3, r3, #32
 800265e:	2b20      	cmp	r3, #32
 8002660:	d013      	beq.n	800268a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002666:	f043 0220 	orr.w	r2, r3, #32
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2220      	movs	r2, #32
 8002672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e007      	b.n	800269a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	f003 0320 	and.w	r3, r3, #32
 8002694:	2b20      	cmp	r3, #32
 8002696:	d1c8      	bne.n	800262a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08a      	sub	sp, #40	@ 0x28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	f003 0310 	and.w	r3, r3, #16
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d068      	beq.n	80027a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2210      	movs	r2, #16
 80026d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026d8:	e049      	b.n	800276e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e0:	d045      	beq.n	800276e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026e2:	f7ff f837 	bl	8001754 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d302      	bcc.n	80026f8 <I2C_IsErrorOccurred+0x54>
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d13a      	bne.n	800276e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002702:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800270a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002716:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800271a:	d121      	bne.n	8002760 <I2C_IsErrorOccurred+0xbc>
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002722:	d01d      	beq.n	8002760 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002724:	7cfb      	ldrb	r3, [r7, #19]
 8002726:	2b20      	cmp	r3, #32
 8002728:	d01a      	beq.n	8002760 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002738:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800273a:	f7ff f80b 	bl	8001754 <HAL_GetTick>
 800273e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002740:	e00e      	b.n	8002760 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002742:	f7ff f807 	bl	8001754 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b19      	cmp	r3, #25
 800274e:	d907      	bls.n	8002760 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	f043 0320 	orr.w	r3, r3, #32
 8002756:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800275e:	e006      	b.n	800276e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b20      	cmp	r3, #32
 800276c:	d1e9      	bne.n	8002742 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	f003 0320 	and.w	r3, r3, #32
 8002778:	2b20      	cmp	r3, #32
 800277a:	d003      	beq.n	8002784 <I2C_IsErrorOccurred+0xe0>
 800277c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0aa      	beq.n	80026da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002784:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002788:	2b00      	cmp	r3, #0
 800278a:	d103      	bne.n	8002794 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2220      	movs	r2, #32
 8002792:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	f043 0304 	orr.w	r3, r3, #4
 800279a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00b      	beq.n	80027cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00b      	beq.n	80027ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	f043 0308 	orr.w	r3, r3, #8
 80027dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00b      	beq.n	8002810 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	f043 0302 	orr.w	r3, r3, #2
 80027fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002808:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002810:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002814:	2b00      	cmp	r3, #0
 8002816:	d01c      	beq.n	8002852 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f7ff fe3b 	bl	8002494 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4b0d      	ldr	r3, [pc, #52]	@ (8002860 <I2C_IsErrorOccurred+0x1bc>)
 800282a:	400b      	ands	r3, r1
 800282c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	431a      	orrs	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2220      	movs	r2, #32
 800283e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002852:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002856:	4618      	mov	r0, r3
 8002858:	3728      	adds	r7, #40	@ 0x28
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	fe00e800 	.word	0xfe00e800

08002864 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	607b      	str	r3, [r7, #4]
 800286e:	460b      	mov	r3, r1
 8002870:	817b      	strh	r3, [r7, #10]
 8002872:	4613      	mov	r3, r2
 8002874:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002876:	897b      	ldrh	r3, [r7, #10]
 8002878:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800287c:	7a7b      	ldrb	r3, [r7, #9]
 800287e:	041b      	lsls	r3, r3, #16
 8002880:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002884:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	4313      	orrs	r3, r2
 800288e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002892:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	0d5b      	lsrs	r3, r3, #21
 800289e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80028a2:	4b08      	ldr	r3, [pc, #32]	@ (80028c4 <I2C_TransferConfig+0x60>)
 80028a4:	430b      	orrs	r3, r1
 80028a6:	43db      	mvns	r3, r3
 80028a8:	ea02 0103 	and.w	r1, r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80028b6:	bf00      	nop
 80028b8:	371c      	adds	r7, #28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	03ff63ff 	.word	0x03ff63ff

080028c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b20      	cmp	r3, #32
 80028dc:	d138      	bne.n	8002950 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e032      	b.n	8002952 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2224      	movs	r2, #36	@ 0x24
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0201 	bic.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800291a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6819      	ldr	r1, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0201 	orr.w	r2, r2, #1
 800293a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800294c:	2300      	movs	r3, #0
 800294e:	e000      	b.n	8002952 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002950:	2302      	movs	r3, #2
  }
}
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800295e:	b480      	push	{r7}
 8002960:	b085      	sub	sp, #20
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b20      	cmp	r3, #32
 8002972:	d139      	bne.n	80029e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800297a:	2b01      	cmp	r3, #1
 800297c:	d101      	bne.n	8002982 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800297e:	2302      	movs	r3, #2
 8002980:	e033      	b.n	80029ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2224      	movs	r2, #36	@ 0x24
 800298e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0201 	bic.w	r2, r2, #1
 80029a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80029b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	021b      	lsls	r3, r3, #8
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	e000      	b.n	80029ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029e8:	2302      	movs	r3, #2
  }
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
	...

080029f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80029fc:	4b04      	ldr	r3, [pc, #16]	@ (8002a10 <HAL_PWREx_GetVoltageRange+0x18>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40007000 	.word	0x40007000

08002a14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a22:	d130      	bne.n	8002a86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a24:	4b23      	ldr	r3, [pc, #140]	@ (8002ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a30:	d038      	beq.n	8002aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a32:	4b20      	ldr	r3, [pc, #128]	@ (8002ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a42:	4b1d      	ldr	r3, [pc, #116]	@ (8002ab8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2232      	movs	r2, #50	@ 0x32
 8002a48:	fb02 f303 	mul.w	r3, r2, r3
 8002a4c:	4a1b      	ldr	r2, [pc, #108]	@ (8002abc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	0c9b      	lsrs	r3, r3, #18
 8002a54:	3301      	adds	r3, #1
 8002a56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a58:	e002      	b.n	8002a60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a60:	4b14      	ldr	r3, [pc, #80]	@ (8002ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a6c:	d102      	bne.n	8002a74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f2      	bne.n	8002a5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a74:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a80:	d110      	bne.n	8002aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e00f      	b.n	8002aa6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a86:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a92:	d007      	beq.n	8002aa4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a94:	4b07      	ldr	r3, [pc, #28]	@ (8002ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a9c:	4a05      	ldr	r2, [pc, #20]	@ (8002ab4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002aa2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40007000 	.word	0x40007000
 8002ab8:	20000000 	.word	0x20000000
 8002abc:	431bde83 	.word	0x431bde83

08002ac0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e3ca      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ad2:	4b97      	ldr	r3, [pc, #604]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002adc:	4b94      	ldr	r3, [pc, #592]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0310 	and.w	r3, r3, #16
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 80e4 	beq.w	8002cbc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d007      	beq.n	8002b0a <HAL_RCC_OscConfig+0x4a>
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	2b0c      	cmp	r3, #12
 8002afe:	f040 808b 	bne.w	8002c18 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	f040 8087 	bne.w	8002c18 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b0a:	4b89      	ldr	r3, [pc, #548]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d005      	beq.n	8002b22 <HAL_RCC_OscConfig+0x62>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e3a2      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1a      	ldr	r2, [r3, #32]
 8002b26:	4b82      	ldr	r3, [pc, #520]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d004      	beq.n	8002b3c <HAL_RCC_OscConfig+0x7c>
 8002b32:	4b7f      	ldr	r3, [pc, #508]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b3a:	e005      	b.n	8002b48 <HAL_RCC_OscConfig+0x88>
 8002b3c:	4b7c      	ldr	r3, [pc, #496]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b42:	091b      	lsrs	r3, r3, #4
 8002b44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d223      	bcs.n	8002b94 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 fd87 	bl	8003664 <RCC_SetFlashLatencyFromMSIRange>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e383      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b60:	4b73      	ldr	r3, [pc, #460]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a72      	ldr	r2, [pc, #456]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b66:	f043 0308 	orr.w	r3, r3, #8
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	4b70      	ldr	r3, [pc, #448]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	496d      	ldr	r1, [pc, #436]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b7e:	4b6c      	ldr	r3, [pc, #432]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	021b      	lsls	r3, r3, #8
 8002b8c:	4968      	ldr	r1, [pc, #416]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	604b      	str	r3, [r1, #4]
 8002b92:	e025      	b.n	8002be0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b94:	4b66      	ldr	r3, [pc, #408]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a65      	ldr	r2, [pc, #404]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002b9a:	f043 0308 	orr.w	r3, r3, #8
 8002b9e:	6013      	str	r3, [r2, #0]
 8002ba0:	4b63      	ldr	r3, [pc, #396]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	4960      	ldr	r1, [pc, #384]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bb2:	4b5f      	ldr	r3, [pc, #380]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	495b      	ldr	r1, [pc, #364]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d109      	bne.n	8002be0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 fd47 	bl	8003664 <RCC_SetFlashLatencyFromMSIRange>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e343      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002be0:	f000 fc4a 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 8002be4:	4602      	mov	r2, r0
 8002be6:	4b52      	ldr	r3, [pc, #328]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	091b      	lsrs	r3, r3, #4
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	4950      	ldr	r1, [pc, #320]	@ (8002d34 <HAL_RCC_OscConfig+0x274>)
 8002bf2:	5ccb      	ldrb	r3, [r1, r3]
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfc:	4a4e      	ldr	r2, [pc, #312]	@ (8002d38 <HAL_RCC_OscConfig+0x278>)
 8002bfe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c00:	4b4e      	ldr	r3, [pc, #312]	@ (8002d3c <HAL_RCC_OscConfig+0x27c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fe fb3d 	bl	8001284 <HAL_InitTick>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d052      	beq.n	8002cba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	e327      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d032      	beq.n	8002c86 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c20:	4b43      	ldr	r3, [pc, #268]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a42      	ldr	r2, [pc, #264]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c2c:	f7fe fd92 	bl	8001754 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c34:	f7fe fd8e 	bl	8001754 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e310      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c46:	4b3a      	ldr	r3, [pc, #232]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c52:	4b37      	ldr	r3, [pc, #220]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a36      	ldr	r2, [pc, #216]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c58:	f043 0308 	orr.w	r3, r3, #8
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	4b34      	ldr	r3, [pc, #208]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	4931      	ldr	r1, [pc, #196]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c70:	4b2f      	ldr	r3, [pc, #188]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	021b      	lsls	r3, r3, #8
 8002c7e:	492c      	ldr	r1, [pc, #176]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	604b      	str	r3, [r1, #4]
 8002c84:	e01a      	b.n	8002cbc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c86:	4b2a      	ldr	r3, [pc, #168]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a29      	ldr	r2, [pc, #164]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002c8c:	f023 0301 	bic.w	r3, r3, #1
 8002c90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c92:	f7fe fd5f 	bl	8001754 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c9a:	f7fe fd5b 	bl	8001754 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e2dd      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cac:	4b20      	ldr	r3, [pc, #128]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1f0      	bne.n	8002c9a <HAL_RCC_OscConfig+0x1da>
 8002cb8:	e000      	b.n	8002cbc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d074      	beq.n	8002db2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d005      	beq.n	8002cda <HAL_RCC_OscConfig+0x21a>
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	2b0c      	cmp	r3, #12
 8002cd2:	d10e      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d10b      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cda:	4b15      	ldr	r3, [pc, #84]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d064      	beq.n	8002db0 <HAL_RCC_OscConfig+0x2f0>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d160      	bne.n	8002db0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e2ba      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cfa:	d106      	bne.n	8002d0a <HAL_RCC_OscConfig+0x24a>
 8002cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a0b      	ldr	r2, [pc, #44]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002d02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	e026      	b.n	8002d58 <HAL_RCC_OscConfig+0x298>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d12:	d115      	bne.n	8002d40 <HAL_RCC_OscConfig+0x280>
 8002d14:	4b06      	ldr	r3, [pc, #24]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a05      	ldr	r2, [pc, #20]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002d1a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d1e:	6013      	str	r3, [r2, #0]
 8002d20:	4b03      	ldr	r3, [pc, #12]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a02      	ldr	r2, [pc, #8]	@ (8002d30 <HAL_RCC_OscConfig+0x270>)
 8002d26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	e014      	b.n	8002d58 <HAL_RCC_OscConfig+0x298>
 8002d2e:	bf00      	nop
 8002d30:	40021000 	.word	0x40021000
 8002d34:	0800a7b0 	.word	0x0800a7b0
 8002d38:	20000000 	.word	0x20000000
 8002d3c:	20000004 	.word	0x20000004
 8002d40:	4ba0      	ldr	r3, [pc, #640]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a9f      	ldr	r2, [pc, #636]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002d46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	4b9d      	ldr	r3, [pc, #628]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a9c      	ldr	r2, [pc, #624]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002d52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d013      	beq.n	8002d88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d60:	f7fe fcf8 	bl	8001754 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d68:	f7fe fcf4 	bl	8001754 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	@ 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e276      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d7a:	4b92      	ldr	r3, [pc, #584]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0x2a8>
 8002d86:	e014      	b.n	8002db2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7fe fce4 	bl	8001754 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d90:	f7fe fce0 	bl	8001754 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b64      	cmp	r3, #100	@ 0x64
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e262      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002da2:	4b88      	ldr	r3, [pc, #544]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x2d0>
 8002dae:	e000      	b.n	8002db2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d060      	beq.n	8002e80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d005      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x310>
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	2b0c      	cmp	r3, #12
 8002dc8:	d119      	bne.n	8002dfe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d116      	bne.n	8002dfe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dd0:	4b7c      	ldr	r3, [pc, #496]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_OscConfig+0x328>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e23f      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de8:	4b76      	ldr	r3, [pc, #472]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	061b      	lsls	r3, r3, #24
 8002df6:	4973      	ldr	r1, [pc, #460]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dfc:	e040      	b.n	8002e80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d023      	beq.n	8002e4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e06:	4b6f      	ldr	r3, [pc, #444]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a6e      	ldr	r2, [pc, #440]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e12:	f7fe fc9f 	bl	8001754 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e1a:	f7fe fc9b 	bl	8001754 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e21d      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e2c:	4b65      	ldr	r3, [pc, #404]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e38:	4b62      	ldr	r3, [pc, #392]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	061b      	lsls	r3, r3, #24
 8002e46:	495f      	ldr	r1, [pc, #380]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	604b      	str	r3, [r1, #4]
 8002e4c:	e018      	b.n	8002e80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e4e:	4b5d      	ldr	r3, [pc, #372]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a5c      	ldr	r2, [pc, #368]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002e54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5a:	f7fe fc7b 	bl	8001754 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e62:	f7fe fc77 	bl	8001754 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e1f9      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e74:	4b53      	ldr	r3, [pc, #332]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f0      	bne.n	8002e62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d03c      	beq.n	8002f06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d01c      	beq.n	8002ece <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e94:	4b4b      	ldr	r3, [pc, #300]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e9a:	4a4a      	ldr	r2, [pc, #296]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea4:	f7fe fc56 	bl	8001754 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eac:	f7fe fc52 	bl	8001754 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e1d4      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ebe:	4b41      	ldr	r3, [pc, #260]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0ef      	beq.n	8002eac <HAL_RCC_OscConfig+0x3ec>
 8002ecc:	e01b      	b.n	8002f06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ece:	4b3d      	ldr	r3, [pc, #244]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ed4:	4a3b      	ldr	r2, [pc, #236]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002ed6:	f023 0301 	bic.w	r3, r3, #1
 8002eda:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ede:	f7fe fc39 	bl	8001754 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ee6:	f7fe fc35 	bl	8001754 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e1b7      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ef8:	4b32      	ldr	r3, [pc, #200]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1ef      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 80a6 	beq.w	8003060 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f14:	2300      	movs	r3, #0
 8002f16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f18:	4b2a      	ldr	r3, [pc, #168]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10d      	bne.n	8002f40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f24:	4b27      	ldr	r3, [pc, #156]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f28:	4a26      	ldr	r2, [pc, #152]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002f2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f30:	4b24      	ldr	r3, [pc, #144]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f40:	4b21      	ldr	r3, [pc, #132]	@ (8002fc8 <HAL_RCC_OscConfig+0x508>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d118      	bne.n	8002f7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc8 <HAL_RCC_OscConfig+0x508>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a1d      	ldr	r2, [pc, #116]	@ (8002fc8 <HAL_RCC_OscConfig+0x508>)
 8002f52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f58:	f7fe fbfc 	bl	8001754 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f60:	f7fe fbf8 	bl	8001754 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e17a      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f72:	4b15      	ldr	r3, [pc, #84]	@ (8002fc8 <HAL_RCC_OscConfig+0x508>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d108      	bne.n	8002f98 <HAL_RCC_OscConfig+0x4d8>
 8002f86:	4b0f      	ldr	r3, [pc, #60]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f96:	e029      	b.n	8002fec <HAL_RCC_OscConfig+0x52c>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2b05      	cmp	r3, #5
 8002f9e:	d115      	bne.n	8002fcc <HAL_RCC_OscConfig+0x50c>
 8002fa0:	4b08      	ldr	r3, [pc, #32]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fa6:	4a07      	ldr	r2, [pc, #28]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002fa8:	f043 0304 	orr.w	r3, r3, #4
 8002fac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fb0:	4b04      	ldr	r3, [pc, #16]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb6:	4a03      	ldr	r2, [pc, #12]	@ (8002fc4 <HAL_RCC_OscConfig+0x504>)
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fc0:	e014      	b.n	8002fec <HAL_RCC_OscConfig+0x52c>
 8002fc2:	bf00      	nop
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40007000 	.word	0x40007000
 8002fcc:	4b9c      	ldr	r3, [pc, #624]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 8002fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fd2:	4a9b      	ldr	r2, [pc, #620]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 8002fd4:	f023 0301 	bic.w	r3, r3, #1
 8002fd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fdc:	4b98      	ldr	r3, [pc, #608]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 8002fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe2:	4a97      	ldr	r2, [pc, #604]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 8002fe4:	f023 0304 	bic.w	r3, r3, #4
 8002fe8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d016      	beq.n	8003022 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff4:	f7fe fbae 	bl	8001754 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ffa:	e00a      	b.n	8003012 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffc:	f7fe fbaa 	bl	8001754 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800300a:	4293      	cmp	r3, r2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e12a      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003012:	4b8b      	ldr	r3, [pc, #556]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 8003014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0ed      	beq.n	8002ffc <HAL_RCC_OscConfig+0x53c>
 8003020:	e015      	b.n	800304e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003022:	f7fe fb97 	bl	8001754 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003028:	e00a      	b.n	8003040 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302a:	f7fe fb93 	bl	8001754 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003038:	4293      	cmp	r3, r2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e113      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003040:	4b7f      	ldr	r3, [pc, #508]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 8003042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1ed      	bne.n	800302a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800304e:	7ffb      	ldrb	r3, [r7, #31]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d105      	bne.n	8003060 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003054:	4b7a      	ldr	r3, [pc, #488]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 8003056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003058:	4a79      	ldr	r2, [pc, #484]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 800305a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800305e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 80fe 	beq.w	8003266 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800306e:	2b02      	cmp	r3, #2
 8003070:	f040 80d0 	bne.w	8003214 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003074:	4b72      	ldr	r3, [pc, #456]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f003 0203 	and.w	r2, r3, #3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003084:	429a      	cmp	r2, r3
 8003086:	d130      	bne.n	80030ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003092:	3b01      	subs	r3, #1
 8003094:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003096:	429a      	cmp	r2, r3
 8003098:	d127      	bne.n	80030ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d11f      	bne.n	80030ea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80030b4:	2a07      	cmp	r2, #7
 80030b6:	bf14      	ite	ne
 80030b8:	2201      	movne	r2, #1
 80030ba:	2200      	moveq	r2, #0
 80030bc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030be:	4293      	cmp	r3, r2
 80030c0:	d113      	bne.n	80030ea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030cc:	085b      	lsrs	r3, r3, #1
 80030ce:	3b01      	subs	r3, #1
 80030d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d109      	bne.n	80030ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e0:	085b      	lsrs	r3, r3, #1
 80030e2:	3b01      	subs	r3, #1
 80030e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d06e      	beq.n	80031c8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	2b0c      	cmp	r3, #12
 80030ee:	d069      	beq.n	80031c4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030f0:	4b53      	ldr	r3, [pc, #332]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d105      	bne.n	8003108 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80030fc:	4b50      	ldr	r3, [pc, #320]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0ad      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800310c:	4b4c      	ldr	r3, [pc, #304]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a4b      	ldr	r2, [pc, #300]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 8003112:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003116:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003118:	f7fe fb1c 	bl	8001754 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003120:	f7fe fb18 	bl	8001754 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e09a      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003132:	4b43      	ldr	r3, [pc, #268]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800313e:	4b40      	ldr	r3, [pc, #256]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	4b40      	ldr	r3, [pc, #256]	@ (8003244 <HAL_RCC_OscConfig+0x784>)
 8003144:	4013      	ands	r3, r2
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800314e:	3a01      	subs	r2, #1
 8003150:	0112      	lsls	r2, r2, #4
 8003152:	4311      	orrs	r1, r2
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003158:	0212      	lsls	r2, r2, #8
 800315a:	4311      	orrs	r1, r2
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003160:	0852      	lsrs	r2, r2, #1
 8003162:	3a01      	subs	r2, #1
 8003164:	0552      	lsls	r2, r2, #21
 8003166:	4311      	orrs	r1, r2
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800316c:	0852      	lsrs	r2, r2, #1
 800316e:	3a01      	subs	r2, #1
 8003170:	0652      	lsls	r2, r2, #25
 8003172:	4311      	orrs	r1, r2
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003178:	0912      	lsrs	r2, r2, #4
 800317a:	0452      	lsls	r2, r2, #17
 800317c:	430a      	orrs	r2, r1
 800317e:	4930      	ldr	r1, [pc, #192]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 8003180:	4313      	orrs	r3, r2
 8003182:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003184:	4b2e      	ldr	r3, [pc, #184]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a2d      	ldr	r2, [pc, #180]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 800318a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800318e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003190:	4b2b      	ldr	r3, [pc, #172]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	4a2a      	ldr	r2, [pc, #168]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 8003196:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800319a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800319c:	f7fe fada 	bl	8001754 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a4:	f7fe fad6 	bl	8001754 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e058      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b6:	4b22      	ldr	r3, [pc, #136]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031c2:	e050      	b.n	8003266 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e04f      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d148      	bne.n	8003266 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a19      	ldr	r2, [pc, #100]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 80031da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031e0:	4b17      	ldr	r3, [pc, #92]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	4a16      	ldr	r2, [pc, #88]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 80031e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031ec:	f7fe fab2 	bl	8001754 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f4:	f7fe faae 	bl	8001754 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e030      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003206:	4b0e      	ldr	r3, [pc, #56]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0x734>
 8003212:	e028      	b.n	8003266 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2b0c      	cmp	r3, #12
 8003218:	d023      	beq.n	8003262 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800321a:	4b09      	ldr	r3, [pc, #36]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a08      	ldr	r2, [pc, #32]	@ (8003240 <HAL_RCC_OscConfig+0x780>)
 8003220:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003226:	f7fe fa95 	bl	8001754 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800322c:	e00c      	b.n	8003248 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800322e:	f7fe fa91 	bl	8001754 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d905      	bls.n	8003248 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e013      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
 8003240:	40021000 	.word	0x40021000
 8003244:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003248:	4b09      	ldr	r3, [pc, #36]	@ (8003270 <HAL_RCC_OscConfig+0x7b0>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1ec      	bne.n	800322e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003254:	4b06      	ldr	r3, [pc, #24]	@ (8003270 <HAL_RCC_OscConfig+0x7b0>)
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	4905      	ldr	r1, [pc, #20]	@ (8003270 <HAL_RCC_OscConfig+0x7b0>)
 800325a:	4b06      	ldr	r3, [pc, #24]	@ (8003274 <HAL_RCC_OscConfig+0x7b4>)
 800325c:	4013      	ands	r3, r2
 800325e:	60cb      	str	r3, [r1, #12]
 8003260:	e001      	b.n	8003266 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3720      	adds	r7, #32
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40021000 	.word	0x40021000
 8003274:	feeefffc 	.word	0xfeeefffc

08003278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0e7      	b.n	800345c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800328c:	4b75      	ldr	r3, [pc, #468]	@ (8003464 <HAL_RCC_ClockConfig+0x1ec>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d910      	bls.n	80032bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329a:	4b72      	ldr	r3, [pc, #456]	@ (8003464 <HAL_RCC_ClockConfig+0x1ec>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f023 0207 	bic.w	r2, r3, #7
 80032a2:	4970      	ldr	r1, [pc, #448]	@ (8003464 <HAL_RCC_ClockConfig+0x1ec>)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032aa:	4b6e      	ldr	r3, [pc, #440]	@ (8003464 <HAL_RCC_ClockConfig+0x1ec>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d001      	beq.n	80032bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0cf      	b.n	800345c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d010      	beq.n	80032ea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	4b66      	ldr	r3, [pc, #408]	@ (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d908      	bls.n	80032ea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d8:	4b63      	ldr	r3, [pc, #396]	@ (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	4960      	ldr	r1, [pc, #384]	@ (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d04c      	beq.n	8003390 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d107      	bne.n	800330e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032fe:	4b5a      	ldr	r3, [pc, #360]	@ (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d121      	bne.n	800334e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e0a6      	b.n	800345c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d107      	bne.n	8003326 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003316:	4b54      	ldr	r3, [pc, #336]	@ (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d115      	bne.n	800334e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e09a      	b.n	800345c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d107      	bne.n	800333e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800332e:	4b4e      	ldr	r3, [pc, #312]	@ (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d109      	bne.n	800334e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e08e      	b.n	800345c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800333e:	4b4a      	ldr	r3, [pc, #296]	@ (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e086      	b.n	800345c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800334e:	4b46      	ldr	r3, [pc, #280]	@ (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f023 0203 	bic.w	r2, r3, #3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	4943      	ldr	r1, [pc, #268]	@ (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 800335c:	4313      	orrs	r3, r2
 800335e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003360:	f7fe f9f8 	bl	8001754 <HAL_GetTick>
 8003364:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003366:	e00a      	b.n	800337e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003368:	f7fe f9f4 	bl	8001754 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003376:	4293      	cmp	r3, r2
 8003378:	d901      	bls.n	800337e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e06e      	b.n	800345c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337e:	4b3a      	ldr	r3, [pc, #232]	@ (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 020c 	and.w	r2, r3, #12
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	429a      	cmp	r2, r3
 800338e:	d1eb      	bne.n	8003368 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d010      	beq.n	80033be <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	4b31      	ldr	r3, [pc, #196]	@ (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d208      	bcs.n	80033be <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ac:	4b2e      	ldr	r3, [pc, #184]	@ (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	492b      	ldr	r1, [pc, #172]	@ (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033be:	4b29      	ldr	r3, [pc, #164]	@ (8003464 <HAL_RCC_ClockConfig+0x1ec>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d210      	bcs.n	80033ee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033cc:	4b25      	ldr	r3, [pc, #148]	@ (8003464 <HAL_RCC_ClockConfig+0x1ec>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f023 0207 	bic.w	r2, r3, #7
 80033d4:	4923      	ldr	r1, [pc, #140]	@ (8003464 <HAL_RCC_ClockConfig+0x1ec>)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	4313      	orrs	r3, r2
 80033da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033dc:	4b21      	ldr	r3, [pc, #132]	@ (8003464 <HAL_RCC_ClockConfig+0x1ec>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d001      	beq.n	80033ee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e036      	b.n	800345c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d008      	beq.n	800340c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	4918      	ldr	r1, [pc, #96]	@ (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 8003408:	4313      	orrs	r3, r2
 800340a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b00      	cmp	r3, #0
 8003416:	d009      	beq.n	800342c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003418:	4b13      	ldr	r3, [pc, #76]	@ (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	4910      	ldr	r1, [pc, #64]	@ (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 8003428:	4313      	orrs	r3, r2
 800342a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800342c:	f000 f824 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 8003430:	4602      	mov	r2, r0
 8003432:	4b0d      	ldr	r3, [pc, #52]	@ (8003468 <HAL_RCC_ClockConfig+0x1f0>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	091b      	lsrs	r3, r3, #4
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	490b      	ldr	r1, [pc, #44]	@ (800346c <HAL_RCC_ClockConfig+0x1f4>)
 800343e:	5ccb      	ldrb	r3, [r1, r3]
 8003440:	f003 031f 	and.w	r3, r3, #31
 8003444:	fa22 f303 	lsr.w	r3, r2, r3
 8003448:	4a09      	ldr	r2, [pc, #36]	@ (8003470 <HAL_RCC_ClockConfig+0x1f8>)
 800344a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800344c:	4b09      	ldr	r3, [pc, #36]	@ (8003474 <HAL_RCC_ClockConfig+0x1fc>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f7fd ff17 	bl	8001284 <HAL_InitTick>
 8003456:	4603      	mov	r3, r0
 8003458:	72fb      	strb	r3, [r7, #11]

  return status;
 800345a:	7afb      	ldrb	r3, [r7, #11]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40022000 	.word	0x40022000
 8003468:	40021000 	.word	0x40021000
 800346c:	0800a7b0 	.word	0x0800a7b0
 8003470:	20000000 	.word	0x20000000
 8003474:	20000004 	.word	0x20000004

08003478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003478:	b480      	push	{r7}
 800347a:	b089      	sub	sp, #36	@ 0x24
 800347c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800347e:	2300      	movs	r3, #0
 8003480:	61fb      	str	r3, [r7, #28]
 8003482:	2300      	movs	r3, #0
 8003484:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003486:	4b3e      	ldr	r3, [pc, #248]	@ (8003580 <HAL_RCC_GetSysClockFreq+0x108>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003490:	4b3b      	ldr	r3, [pc, #236]	@ (8003580 <HAL_RCC_GetSysClockFreq+0x108>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0303 	and.w	r3, r3, #3
 8003498:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0x34>
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	2b0c      	cmp	r3, #12
 80034a4:	d121      	bne.n	80034ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d11e      	bne.n	80034ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80034ac:	4b34      	ldr	r3, [pc, #208]	@ (8003580 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d107      	bne.n	80034c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034b8:	4b31      	ldr	r3, [pc, #196]	@ (8003580 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034be:	0a1b      	lsrs	r3, r3, #8
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	61fb      	str	r3, [r7, #28]
 80034c6:	e005      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003580 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10d      	bne.n	8003500 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034e8:	e00a      	b.n	8003500 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d102      	bne.n	80034f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034f0:	4b25      	ldr	r3, [pc, #148]	@ (8003588 <HAL_RCC_GetSysClockFreq+0x110>)
 80034f2:	61bb      	str	r3, [r7, #24]
 80034f4:	e004      	b.n	8003500 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d101      	bne.n	8003500 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034fc:	4b23      	ldr	r3, [pc, #140]	@ (800358c <HAL_RCC_GetSysClockFreq+0x114>)
 80034fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	2b0c      	cmp	r3, #12
 8003504:	d134      	bne.n	8003570 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003506:	4b1e      	ldr	r3, [pc, #120]	@ (8003580 <HAL_RCC_GetSysClockFreq+0x108>)
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d003      	beq.n	800351e <HAL_RCC_GetSysClockFreq+0xa6>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b03      	cmp	r3, #3
 800351a:	d003      	beq.n	8003524 <HAL_RCC_GetSysClockFreq+0xac>
 800351c:	e005      	b.n	800352a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800351e:	4b1a      	ldr	r3, [pc, #104]	@ (8003588 <HAL_RCC_GetSysClockFreq+0x110>)
 8003520:	617b      	str	r3, [r7, #20]
      break;
 8003522:	e005      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003524:	4b19      	ldr	r3, [pc, #100]	@ (800358c <HAL_RCC_GetSysClockFreq+0x114>)
 8003526:	617b      	str	r3, [r7, #20]
      break;
 8003528:	e002      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	617b      	str	r3, [r7, #20]
      break;
 800352e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003530:	4b13      	ldr	r3, [pc, #76]	@ (8003580 <HAL_RCC_GetSysClockFreq+0x108>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	091b      	lsrs	r3, r3, #4
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	3301      	adds	r3, #1
 800353c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800353e:	4b10      	ldr	r3, [pc, #64]	@ (8003580 <HAL_RCC_GetSysClockFreq+0x108>)
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	0a1b      	lsrs	r3, r3, #8
 8003544:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	fb03 f202 	mul.w	r2, r3, r2
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	fbb2 f3f3 	udiv	r3, r2, r3
 8003554:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003556:	4b0a      	ldr	r3, [pc, #40]	@ (8003580 <HAL_RCC_GetSysClockFreq+0x108>)
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	0e5b      	lsrs	r3, r3, #25
 800355c:	f003 0303 	and.w	r3, r3, #3
 8003560:	3301      	adds	r3, #1
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	fbb2 f3f3 	udiv	r3, r2, r3
 800356e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003570:	69bb      	ldr	r3, [r7, #24]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3724      	adds	r7, #36	@ 0x24
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	40021000 	.word	0x40021000
 8003584:	0800a7c8 	.word	0x0800a7c8
 8003588:	00f42400 	.word	0x00f42400
 800358c:	007a1200 	.word	0x007a1200

08003590 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003594:	4b03      	ldr	r3, [pc, #12]	@ (80035a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003596:	681b      	ldr	r3, [r3, #0]
}
 8003598:	4618      	mov	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	20000000 	.word	0x20000000

080035a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80035ac:	f7ff fff0 	bl	8003590 <HAL_RCC_GetHCLKFreq>
 80035b0:	4602      	mov	r2, r0
 80035b2:	4b06      	ldr	r3, [pc, #24]	@ (80035cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	0a1b      	lsrs	r3, r3, #8
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	4904      	ldr	r1, [pc, #16]	@ (80035d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035be:	5ccb      	ldrb	r3, [r1, r3]
 80035c0:	f003 031f 	and.w	r3, r3, #31
 80035c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40021000 	.word	0x40021000
 80035d0:	0800a7c0 	.word	0x0800a7c0

080035d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035d8:	f7ff ffda 	bl	8003590 <HAL_RCC_GetHCLKFreq>
 80035dc:	4602      	mov	r2, r0
 80035de:	4b06      	ldr	r3, [pc, #24]	@ (80035f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	0adb      	lsrs	r3, r3, #11
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	4904      	ldr	r1, [pc, #16]	@ (80035fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80035ea:	5ccb      	ldrb	r3, [r1, r3]
 80035ec:	f003 031f 	and.w	r3, r3, #31
 80035f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40021000 	.word	0x40021000
 80035fc:	0800a7c0 	.word	0x0800a7c0

08003600 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	220f      	movs	r2, #15
 800360e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003610:	4b12      	ldr	r3, [pc, #72]	@ (800365c <HAL_RCC_GetClockConfig+0x5c>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 0203 	and.w	r2, r3, #3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800361c:	4b0f      	ldr	r3, [pc, #60]	@ (800365c <HAL_RCC_GetClockConfig+0x5c>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003628:	4b0c      	ldr	r3, [pc, #48]	@ (800365c <HAL_RCC_GetClockConfig+0x5c>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003634:	4b09      	ldr	r3, [pc, #36]	@ (800365c <HAL_RCC_GetClockConfig+0x5c>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	08db      	lsrs	r3, r3, #3
 800363a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003642:	4b07      	ldr	r3, [pc, #28]	@ (8003660 <HAL_RCC_GetClockConfig+0x60>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0207 	and.w	r2, r3, #7
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	601a      	str	r2, [r3, #0]
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	40021000 	.word	0x40021000
 8003660:	40022000 	.word	0x40022000

08003664 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800366c:	2300      	movs	r3, #0
 800366e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003670:	4b2a      	ldr	r3, [pc, #168]	@ (800371c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800367c:	f7ff f9bc 	bl	80029f8 <HAL_PWREx_GetVoltageRange>
 8003680:	6178      	str	r0, [r7, #20]
 8003682:	e014      	b.n	80036ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003684:	4b25      	ldr	r3, [pc, #148]	@ (800371c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003688:	4a24      	ldr	r2, [pc, #144]	@ (800371c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800368a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800368e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003690:	4b22      	ldr	r3, [pc, #136]	@ (800371c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800369c:	f7ff f9ac 	bl	80029f8 <HAL_PWREx_GetVoltageRange>
 80036a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80036a2:	4b1e      	ldr	r3, [pc, #120]	@ (800371c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a6:	4a1d      	ldr	r2, [pc, #116]	@ (800371c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036b4:	d10b      	bne.n	80036ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b80      	cmp	r3, #128	@ 0x80
 80036ba:	d919      	bls.n	80036f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2ba0      	cmp	r3, #160	@ 0xa0
 80036c0:	d902      	bls.n	80036c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036c2:	2302      	movs	r3, #2
 80036c4:	613b      	str	r3, [r7, #16]
 80036c6:	e013      	b.n	80036f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036c8:	2301      	movs	r3, #1
 80036ca:	613b      	str	r3, [r7, #16]
 80036cc:	e010      	b.n	80036f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b80      	cmp	r3, #128	@ 0x80
 80036d2:	d902      	bls.n	80036da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80036d4:	2303      	movs	r3, #3
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	e00a      	b.n	80036f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b80      	cmp	r3, #128	@ 0x80
 80036de:	d102      	bne.n	80036e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036e0:	2302      	movs	r3, #2
 80036e2:	613b      	str	r3, [r7, #16]
 80036e4:	e004      	b.n	80036f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b70      	cmp	r3, #112	@ 0x70
 80036ea:	d101      	bne.n	80036f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036ec:	2301      	movs	r3, #1
 80036ee:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003720 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f023 0207 	bic.w	r2, r3, #7
 80036f8:	4909      	ldr	r1, [pc, #36]	@ (8003720 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003700:	4b07      	ldr	r3, [pc, #28]	@ (8003720 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	429a      	cmp	r2, r3
 800370c:	d001      	beq.n	8003712 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40021000 	.word	0x40021000
 8003720:	40022000 	.word	0x40022000

08003724 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800372c:	2300      	movs	r3, #0
 800372e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003730:	2300      	movs	r3, #0
 8003732:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800373c:	2b00      	cmp	r3, #0
 800373e:	d041      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003744:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003748:	d02a      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800374a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800374e:	d824      	bhi.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003750:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003754:	d008      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003756:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800375a:	d81e      	bhi.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00a      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003760:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003764:	d010      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003766:	e018      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003768:	4b86      	ldr	r3, [pc, #536]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4a85      	ldr	r2, [pc, #532]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800376e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003772:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003774:	e015      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3304      	adds	r3, #4
 800377a:	2100      	movs	r1, #0
 800377c:	4618      	mov	r0, r3
 800377e:	f001 f829 	bl	80047d4 <RCCEx_PLLSAI1_Config>
 8003782:	4603      	mov	r3, r0
 8003784:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003786:	e00c      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3320      	adds	r3, #32
 800378c:	2100      	movs	r1, #0
 800378e:	4618      	mov	r0, r3
 8003790:	f001 f914 	bl	80049bc <RCCEx_PLLSAI2_Config>
 8003794:	4603      	mov	r3, r0
 8003796:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003798:	e003      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	74fb      	strb	r3, [r7, #19]
      break;
 800379e:	e000      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80037a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037a2:	7cfb      	ldrb	r3, [r7, #19]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10b      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037a8:	4b76      	ldr	r3, [pc, #472]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037b6:	4973      	ldr	r1, [pc, #460]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80037be:	e001      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c0:	7cfb      	ldrb	r3, [r7, #19]
 80037c2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d041      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037d8:	d02a      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80037da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037de:	d824      	bhi.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80037e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037e4:	d008      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037ea:	d81e      	bhi.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00a      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80037f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037f4:	d010      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80037f6:	e018      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037f8:	4b62      	ldr	r3, [pc, #392]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	4a61      	ldr	r2, [pc, #388]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003802:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003804:	e015      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3304      	adds	r3, #4
 800380a:	2100      	movs	r1, #0
 800380c:	4618      	mov	r0, r3
 800380e:	f000 ffe1 	bl	80047d4 <RCCEx_PLLSAI1_Config>
 8003812:	4603      	mov	r3, r0
 8003814:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003816:	e00c      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3320      	adds	r3, #32
 800381c:	2100      	movs	r1, #0
 800381e:	4618      	mov	r0, r3
 8003820:	f001 f8cc 	bl	80049bc <RCCEx_PLLSAI2_Config>
 8003824:	4603      	mov	r3, r0
 8003826:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003828:	e003      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	74fb      	strb	r3, [r7, #19]
      break;
 800382e:	e000      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003830:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003832:	7cfb      	ldrb	r3, [r7, #19]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10b      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003838:	4b52      	ldr	r3, [pc, #328]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800383e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003846:	494f      	ldr	r1, [pc, #316]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003848:	4313      	orrs	r3, r2
 800384a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800384e:	e001      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003850:	7cfb      	ldrb	r3, [r7, #19]
 8003852:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 80a0 	beq.w	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003862:	2300      	movs	r3, #0
 8003864:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003866:	4b47      	ldr	r3, [pc, #284]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003876:	2300      	movs	r3, #0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00d      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800387c:	4b41      	ldr	r3, [pc, #260]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800387e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003880:	4a40      	ldr	r2, [pc, #256]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003882:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003886:	6593      	str	r3, [r2, #88]	@ 0x58
 8003888:	4b3e      	ldr	r3, [pc, #248]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800388a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800388c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003890:	60bb      	str	r3, [r7, #8]
 8003892:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003894:	2301      	movs	r3, #1
 8003896:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003898:	4b3b      	ldr	r3, [pc, #236]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a3a      	ldr	r2, [pc, #232]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800389e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038a4:	f7fd ff56 	bl	8001754 <HAL_GetTick>
 80038a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038aa:	e009      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ac:	f7fd ff52 	bl	8001754 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d902      	bls.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	74fb      	strb	r3, [r7, #19]
        break;
 80038be:	e005      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038c0:	4b31      	ldr	r3, [pc, #196]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0ef      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80038cc:	7cfb      	ldrb	r3, [r7, #19]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d15c      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038d2:	4b2c      	ldr	r3, [pc, #176]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d01f      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d019      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038f0:	4b24      	ldr	r3, [pc, #144]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038fc:	4b21      	ldr	r3, [pc, #132]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003902:	4a20      	ldr	r2, [pc, #128]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003908:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800390c:	4b1d      	ldr	r3, [pc, #116]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800390e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003912:	4a1c      	ldr	r2, [pc, #112]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003914:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003918:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800391c:	4a19      	ldr	r2, [pc, #100]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d016      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392e:	f7fd ff11 	bl	8001754 <HAL_GetTick>
 8003932:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003934:	e00b      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003936:	f7fd ff0d 	bl	8001754 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003944:	4293      	cmp	r3, r2
 8003946:	d902      	bls.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	74fb      	strb	r3, [r7, #19]
            break;
 800394c:	e006      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800394e:	4b0d      	ldr	r3, [pc, #52]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0ec      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800395c:	7cfb      	ldrb	r3, [r7, #19]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10c      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003962:	4b08      	ldr	r3, [pc, #32]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003968:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003972:	4904      	ldr	r1, [pc, #16]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800397a:	e009      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800397c:	7cfb      	ldrb	r3, [r7, #19]
 800397e:	74bb      	strb	r3, [r7, #18]
 8003980:	e006      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003982:	bf00      	nop
 8003984:	40021000 	.word	0x40021000
 8003988:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398c:	7cfb      	ldrb	r3, [r7, #19]
 800398e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003990:	7c7b      	ldrb	r3, [r7, #17]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d105      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003996:	4b9e      	ldr	r3, [pc, #632]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800399a:	4a9d      	ldr	r2, [pc, #628]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039a0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039ae:	4b98      	ldr	r3, [pc, #608]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b4:	f023 0203 	bic.w	r2, r3, #3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039bc:	4994      	ldr	r1, [pc, #592]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039d0:	4b8f      	ldr	r3, [pc, #572]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d6:	f023 020c 	bic.w	r2, r3, #12
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039de:	498c      	ldr	r1, [pc, #560]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039f2:	4b87      	ldr	r3, [pc, #540]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a00:	4983      	ldr	r1, [pc, #524]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0308 	and.w	r3, r3, #8
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00a      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a14:	4b7e      	ldr	r3, [pc, #504]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a1a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a22:	497b      	ldr	r1, [pc, #492]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0310 	and.w	r3, r3, #16
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a36:	4b76      	ldr	r3, [pc, #472]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a44:	4972      	ldr	r1, [pc, #456]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0320 	and.w	r3, r3, #32
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00a      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a58:	4b6d      	ldr	r3, [pc, #436]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a5e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a66:	496a      	ldr	r1, [pc, #424]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00a      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a7a:	4b65      	ldr	r3, [pc, #404]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a80:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a88:	4961      	ldr	r1, [pc, #388]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00a      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a9c:	4b5c      	ldr	r3, [pc, #368]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aaa:	4959      	ldr	r1, [pc, #356]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003abe:	4b54      	ldr	r3, [pc, #336]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003acc:	4950      	ldr	r1, [pc, #320]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00a      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ae0:	4b4b      	ldr	r3, [pc, #300]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aee:	4948      	ldr	r1, [pc, #288]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b02:	4b43      	ldr	r3, [pc, #268]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b10:	493f      	ldr	r1, [pc, #252]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d028      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b24:	4b3a      	ldr	r3, [pc, #232]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b32:	4937      	ldr	r1, [pc, #220]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b42:	d106      	bne.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b44:	4b32      	ldr	r3, [pc, #200]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	4a31      	ldr	r2, [pc, #196]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b4e:	60d3      	str	r3, [r2, #12]
 8003b50:	e011      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b5a:	d10c      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3304      	adds	r3, #4
 8003b60:	2101      	movs	r1, #1
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fe36 	bl	80047d4 <RCCEx_PLLSAI1_Config>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b6c:	7cfb      	ldrb	r3, [r7, #19]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003b72:	7cfb      	ldrb	r3, [r7, #19]
 8003b74:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d028      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b82:	4b23      	ldr	r3, [pc, #140]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b88:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b90:	491f      	ldr	r1, [pc, #124]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ba0:	d106      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	4a1a      	ldr	r2, [pc, #104]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bac:	60d3      	str	r3, [r2, #12]
 8003bae:	e011      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 fe07 	bl	80047d4 <RCCEx_PLLSAI1_Config>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bca:	7cfb      	ldrb	r3, [r7, #19]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003bd0:	7cfb      	ldrb	r3, [r7, #19]
 8003bd2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d02b      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003be0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bee:	4908      	ldr	r1, [pc, #32]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bfe:	d109      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c00:	4b03      	ldr	r3, [pc, #12]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	4a02      	ldr	r2, [pc, #8]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c0a:	60d3      	str	r3, [r2, #12]
 8003c0c:	e014      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003c0e:	bf00      	nop
 8003c10:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c1c:	d10c      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3304      	adds	r3, #4
 8003c22:	2101      	movs	r1, #1
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 fdd5 	bl	80047d4 <RCCEx_PLLSAI1_Config>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c2e:	7cfb      	ldrb	r3, [r7, #19]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003c34:	7cfb      	ldrb	r3, [r7, #19]
 8003c36:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d02f      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c44:	4b2b      	ldr	r3, [pc, #172]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c4a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c52:	4928      	ldr	r1, [pc, #160]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c62:	d10d      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3304      	adds	r3, #4
 8003c68:	2102      	movs	r1, #2
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fdb2 	bl	80047d4 <RCCEx_PLLSAI1_Config>
 8003c70:	4603      	mov	r3, r0
 8003c72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c74:	7cfb      	ldrb	r3, [r7, #19]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d014      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c7a:	7cfb      	ldrb	r3, [r7, #19]
 8003c7c:	74bb      	strb	r3, [r7, #18]
 8003c7e:	e011      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c88:	d10c      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3320      	adds	r3, #32
 8003c8e:	2102      	movs	r1, #2
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fe93 	bl	80049bc <RCCEx_PLLSAI2_Config>
 8003c96:	4603      	mov	r3, r0
 8003c98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c9a:	7cfb      	ldrb	r3, [r7, #19]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ca0:	7cfb      	ldrb	r3, [r7, #19]
 8003ca2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003cb0:	4b10      	ldr	r3, [pc, #64]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cbe:	490d      	ldr	r1, [pc, #52]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00b      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cd2:	4b08      	ldr	r3, [pc, #32]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ce2:	4904      	ldr	r1, [pc, #16]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003cea:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3718      	adds	r7, #24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40021000 	.word	0x40021000

08003cf8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d0a:	d13e      	bne.n	8003d8a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003d0c:	4bb2      	ldr	r3, [pc, #712]	@ (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d16:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d1e:	d028      	beq.n	8003d72 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d26:	f200 8542 	bhi.w	80047ae <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d30:	d005      	beq.n	8003d3e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d38:	d00e      	beq.n	8003d58 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003d3a:	f000 bd38 	b.w	80047ae <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003d3e:	4ba6      	ldr	r3, [pc, #664]	@ (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	f040 8532 	bne.w	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8003d4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d52:	61fb      	str	r3, [r7, #28]
      break;
 8003d54:	f000 bd2d 	b.w	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003d58:	4b9f      	ldr	r3, [pc, #636]	@ (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	f040 8527 	bne.w	80047b6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8003d68:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003d6c:	61fb      	str	r3, [r7, #28]
      break;
 8003d6e:	f000 bd22 	b.w	80047b6 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003d72:	4b99      	ldr	r3, [pc, #612]	@ (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d7e:	f040 851c 	bne.w	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8003d82:	4b96      	ldr	r3, [pc, #600]	@ (8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003d84:	61fb      	str	r3, [r7, #28]
      break;
 8003d86:	f000 bd18 	b.w	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d8a:	4b93      	ldr	r3, [pc, #588]	@ (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2b03      	cmp	r3, #3
 8003d98:	d036      	beq.n	8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d840      	bhi.n	8003e22 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d003      	beq.n	8003dae <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d020      	beq.n	8003dee <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003dac:	e039      	b.n	8003e22 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003dae:	4b8a      	ldr	r3, [pc, #552]	@ (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d116      	bne.n	8003de8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003dba:	4b87      	ldr	r3, [pc, #540]	@ (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d005      	beq.n	8003dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003dc6:	4b84      	ldr	r3, [pc, #528]	@ (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	091b      	lsrs	r3, r3, #4
 8003dcc:	f003 030f 	and.w	r3, r3, #15
 8003dd0:	e005      	b.n	8003dde <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003dd2:	4b81      	ldr	r3, [pc, #516]	@ (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dd8:	0a1b      	lsrs	r3, r3, #8
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	4a80      	ldr	r2, [pc, #512]	@ (8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003de6:	e01f      	b.n	8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	61bb      	str	r3, [r7, #24]
      break;
 8003dec:	e01c      	b.n	8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003dee:	4b7a      	ldr	r3, [pc, #488]	@ (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003df6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dfa:	d102      	bne.n	8003e02 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8003dfc:	4b79      	ldr	r3, [pc, #484]	@ (8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003dfe:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003e00:	e012      	b.n	8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	61bb      	str	r3, [r7, #24]
      break;
 8003e06:	e00f      	b.n	8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003e08:	4b73      	ldr	r3, [pc, #460]	@ (8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e14:	d102      	bne.n	8003e1c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8003e16:	4b74      	ldr	r3, [pc, #464]	@ (8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003e18:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003e1a:	e005      	b.n	8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	61bb      	str	r3, [r7, #24]
      break;
 8003e20:	e002      	b.n	8003e28 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	61bb      	str	r3, [r7, #24]
      break;
 8003e26:	bf00      	nop
    }

    switch(PeriphClk)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e2e:	f000 80dd 	beq.w	8003fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e38:	f200 84c1 	bhi.w	80047be <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e42:	f000 80d3 	beq.w	8003fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e4c:	f200 84b7 	bhi.w	80047be <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e56:	f000 835f 	beq.w	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e60:	f200 84ad 	bhi.w	80047be <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e6a:	f000 847e 	beq.w	800476a <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e74:	f200 84a3 	bhi.w	80047be <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e7e:	f000 82cd 	beq.w	800441c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e88:	f200 8499 	bhi.w	80047be <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e92:	f000 80ab 	beq.w	8003fec <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e9c:	f200 848f 	bhi.w	80047be <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ea6:	f000 8090 	beq.w	8003fca <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eb0:	f200 8485 	bhi.w	80047be <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eba:	d07f      	beq.n	8003fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ec2:	f200 847c 	bhi.w	80047be <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ecc:	f000 8403 	beq.w	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ed6:	f200 8472 	bhi.w	80047be <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ee0:	f000 83af 	beq.w	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eea:	f200 8468 	bhi.w	80047be <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ef4:	f000 8379 	beq.w	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003efe:	f200 845e 	bhi.w	80047be <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b80      	cmp	r3, #128	@ 0x80
 8003f06:	f000 8344 	beq.w	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b80      	cmp	r3, #128	@ 0x80
 8003f0e:	f200 8456 	bhi.w	80047be <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b20      	cmp	r3, #32
 8003f16:	d84b      	bhi.n	8003fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 844f 	beq.w	80047be <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	2b1f      	cmp	r3, #31
 8003f26:	f200 844a 	bhi.w	80047be <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8003f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f30:	08004119 	.word	0x08004119
 8003f34:	08004187 	.word	0x08004187
 8003f38:	080047bf 	.word	0x080047bf
 8003f3c:	0800421b 	.word	0x0800421b
 8003f40:	080047bf 	.word	0x080047bf
 8003f44:	080047bf 	.word	0x080047bf
 8003f48:	080047bf 	.word	0x080047bf
 8003f4c:	080042a1 	.word	0x080042a1
 8003f50:	080047bf 	.word	0x080047bf
 8003f54:	080047bf 	.word	0x080047bf
 8003f58:	080047bf 	.word	0x080047bf
 8003f5c:	080047bf 	.word	0x080047bf
 8003f60:	080047bf 	.word	0x080047bf
 8003f64:	080047bf 	.word	0x080047bf
 8003f68:	080047bf 	.word	0x080047bf
 8003f6c:	08004319 	.word	0x08004319
 8003f70:	080047bf 	.word	0x080047bf
 8003f74:	080047bf 	.word	0x080047bf
 8003f78:	080047bf 	.word	0x080047bf
 8003f7c:	080047bf 	.word	0x080047bf
 8003f80:	080047bf 	.word	0x080047bf
 8003f84:	080047bf 	.word	0x080047bf
 8003f88:	080047bf 	.word	0x080047bf
 8003f8c:	080047bf 	.word	0x080047bf
 8003f90:	080047bf 	.word	0x080047bf
 8003f94:	080047bf 	.word	0x080047bf
 8003f98:	080047bf 	.word	0x080047bf
 8003f9c:	080047bf 	.word	0x080047bf
 8003fa0:	080047bf 	.word	0x080047bf
 8003fa4:	080047bf 	.word	0x080047bf
 8003fa8:	080047bf 	.word	0x080047bf
 8003fac:	0800439b 	.word	0x0800439b
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b40      	cmp	r3, #64	@ 0x40
 8003fb4:	f000 82c1 	beq.w	800453a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003fb8:	f000 bc01 	b.w	80047be <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003fbc:	69b9      	ldr	r1, [r7, #24]
 8003fbe:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003fc2:	f000 fdd9 	bl	8004b78 <RCCEx_GetSAIxPeriphCLKFreq>
 8003fc6:	61f8      	str	r0, [r7, #28]
      break;
 8003fc8:	e3fa      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003fca:	69b9      	ldr	r1, [r7, #24]
 8003fcc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003fd0:	f000 fdd2 	bl	8004b78 <RCCEx_GetSAIxPeriphCLKFreq>
 8003fd4:	61f8      	str	r0, [r7, #28]
      break;
 8003fd6:	e3f3      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	0003d090 	.word	0x0003d090
 8003fe0:	0800a7c8 	.word	0x0800a7c8
 8003fe4:	00f42400 	.word	0x00f42400
 8003fe8:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003fec:	4ba9      	ldr	r3, [pc, #676]	@ (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003ff6:	613b      	str	r3, [r7, #16]
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003ffe:	d00c      	beq.n	800401a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004006:	d87f      	bhi.n	8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800400e:	d04e      	beq.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004016:	d01d      	beq.n	8004054 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8004018:	e076      	b.n	8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800401a:	4b9e      	ldr	r3, [pc, #632]	@ (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b02      	cmp	r3, #2
 8004024:	d172      	bne.n	800410c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004026:	4b9b      	ldr	r3, [pc, #620]	@ (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8004032:	4b98      	ldr	r3, [pc, #608]	@ (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	091b      	lsrs	r3, r3, #4
 8004038:	f003 030f 	and.w	r3, r3, #15
 800403c:	e005      	b.n	800404a <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 800403e:	4b95      	ldr	r3, [pc, #596]	@ (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004040:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004044:	0a1b      	lsrs	r3, r3, #8
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	4a93      	ldr	r2, [pc, #588]	@ (8004298 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800404c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004050:	61fb      	str	r3, [r7, #28]
          break;
 8004052:	e05b      	b.n	800410c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004054:	4b8f      	ldr	r3, [pc, #572]	@ (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800405c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004060:	d156      	bne.n	8004110 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004062:	4b8c      	ldr	r3, [pc, #560]	@ (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800406a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800406e:	d14f      	bne.n	8004110 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004070:	4b88      	ldr	r3, [pc, #544]	@ (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	0a1b      	lsrs	r3, r3, #8
 8004076:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800407a:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	fb03 f202 	mul.w	r2, r3, r2
 8004084:	4b83      	ldr	r3, [pc, #524]	@ (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	091b      	lsrs	r3, r3, #4
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	3301      	adds	r3, #1
 8004090:	fbb2 f3f3 	udiv	r3, r2, r3
 8004094:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004096:	4b7f      	ldr	r3, [pc, #508]	@ (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	0d5b      	lsrs	r3, r3, #21
 800409c:	f003 0303 	and.w	r3, r3, #3
 80040a0:	3301      	adds	r3, #1
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040aa:	61fb      	str	r3, [r7, #28]
          break;
 80040ac:	e030      	b.n	8004110 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80040ae:	4b79      	ldr	r3, [pc, #484]	@ (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040ba:	d12b      	bne.n	8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80040bc:	4b75      	ldr	r3, [pc, #468]	@ (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040c8:	d124      	bne.n	8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80040ca:	4b72      	ldr	r3, [pc, #456]	@ (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	0a1b      	lsrs	r3, r3, #8
 80040d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040d4:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	fb03 f202 	mul.w	r2, r3, r2
 80040de:	4b6d      	ldr	r3, [pc, #436]	@ (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	091b      	lsrs	r3, r3, #4
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	3301      	adds	r3, #1
 80040ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ee:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80040f0:	4b68      	ldr	r3, [pc, #416]	@ (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	0d5b      	lsrs	r3, r3, #21
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	3301      	adds	r3, #1
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	fbb2 f3f3 	udiv	r3, r2, r3
 8004104:	61fb      	str	r3, [r7, #28]
          break;
 8004106:	e005      	b.n	8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8004108:	bf00      	nop
 800410a:	e359      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800410c:	bf00      	nop
 800410e:	e357      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004110:	bf00      	nop
 8004112:	e355      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004114:	bf00      	nop
        break;
 8004116:	e353      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004118:	4b5e      	ldr	r3, [pc, #376]	@ (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800411a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	613b      	str	r3, [r7, #16]
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	2b03      	cmp	r3, #3
 8004128:	d827      	bhi.n	800417a <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 800412a:	a201      	add	r2, pc, #4	@ (adr r2, 8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 800412c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004130:	08004141 	.word	0x08004141
 8004134:	08004149 	.word	0x08004149
 8004138:	08004151 	.word	0x08004151
 800413c:	08004165 	.word	0x08004165
          frequency = HAL_RCC_GetPCLK2Freq();
 8004140:	f7ff fa48 	bl	80035d4 <HAL_RCC_GetPCLK2Freq>
 8004144:	61f8      	str	r0, [r7, #28]
          break;
 8004146:	e01d      	b.n	8004184 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004148:	f7ff f996 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 800414c:	61f8      	str	r0, [r7, #28]
          break;
 800414e:	e019      	b.n	8004184 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004150:	4b50      	ldr	r3, [pc, #320]	@ (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004158:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800415c:	d10f      	bne.n	800417e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 800415e:	4b4f      	ldr	r3, [pc, #316]	@ (800429c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004160:	61fb      	str	r3, [r7, #28]
          break;
 8004162:	e00c      	b.n	800417e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004164:	4b4b      	ldr	r3, [pc, #300]	@ (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b02      	cmp	r3, #2
 8004170:	d107      	bne.n	8004182 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8004172:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004176:	61fb      	str	r3, [r7, #28]
          break;
 8004178:	e003      	b.n	8004182 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 800417a:	bf00      	nop
 800417c:	e320      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800417e:	bf00      	nop
 8004180:	e31e      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004182:	bf00      	nop
        break;
 8004184:	e31c      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004186:	4b43      	ldr	r3, [pc, #268]	@ (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800418c:	f003 030c 	and.w	r3, r3, #12
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	2b0c      	cmp	r3, #12
 8004196:	d83a      	bhi.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8004198:	a201      	add	r2, pc, #4	@ (adr r2, 80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 800419a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419e:	bf00      	nop
 80041a0:	080041d5 	.word	0x080041d5
 80041a4:	0800420f 	.word	0x0800420f
 80041a8:	0800420f 	.word	0x0800420f
 80041ac:	0800420f 	.word	0x0800420f
 80041b0:	080041dd 	.word	0x080041dd
 80041b4:	0800420f 	.word	0x0800420f
 80041b8:	0800420f 	.word	0x0800420f
 80041bc:	0800420f 	.word	0x0800420f
 80041c0:	080041e5 	.word	0x080041e5
 80041c4:	0800420f 	.word	0x0800420f
 80041c8:	0800420f 	.word	0x0800420f
 80041cc:	0800420f 	.word	0x0800420f
 80041d0:	080041f9 	.word	0x080041f9
          frequency = HAL_RCC_GetPCLK1Freq();
 80041d4:	f7ff f9e8 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 80041d8:	61f8      	str	r0, [r7, #28]
          break;
 80041da:	e01d      	b.n	8004218 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 80041dc:	f7ff f94c 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 80041e0:	61f8      	str	r0, [r7, #28]
          break;
 80041e2:	e019      	b.n	8004218 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80041e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041f0:	d10f      	bne.n	8004212 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 80041f2:	4b2a      	ldr	r3, [pc, #168]	@ (800429c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80041f4:	61fb      	str	r3, [r7, #28]
          break;
 80041f6:	e00c      	b.n	8004212 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80041f8:	4b26      	ldr	r3, [pc, #152]	@ (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80041fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b02      	cmp	r3, #2
 8004204:	d107      	bne.n	8004216 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8004206:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800420a:	61fb      	str	r3, [r7, #28]
          break;
 800420c:	e003      	b.n	8004216 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 800420e:	bf00      	nop
 8004210:	e2d6      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004212:	bf00      	nop
 8004214:	e2d4      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004216:	bf00      	nop
        break;
 8004218:	e2d2      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800421a:	4b1e      	ldr	r3, [pc, #120]	@ (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800421c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004220:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	2b30      	cmp	r3, #48	@ 0x30
 800422a:	d021      	beq.n	8004270 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	2b30      	cmp	r3, #48	@ 0x30
 8004230:	d829      	bhi.n	8004286 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	2b20      	cmp	r3, #32
 8004236:	d011      	beq.n	800425c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	2b20      	cmp	r3, #32
 800423c:	d823      	bhi.n	8004286 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	2b10      	cmp	r3, #16
 8004248:	d004      	beq.n	8004254 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 800424a:	e01c      	b.n	8004286 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800424c:	f7ff f9ac 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 8004250:	61f8      	str	r0, [r7, #28]
          break;
 8004252:	e01d      	b.n	8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8004254:	f7ff f910 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 8004258:	61f8      	str	r0, [r7, #28]
          break;
 800425a:	e019      	b.n	8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800425c:	4b0d      	ldr	r3, [pc, #52]	@ (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004264:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004268:	d10f      	bne.n	800428a <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 800426a:	4b0c      	ldr	r3, [pc, #48]	@ (800429c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800426c:	61fb      	str	r3, [r7, #28]
          break;
 800426e:	e00c      	b.n	800428a <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004270:	4b08      	ldr	r3, [pc, #32]	@ (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b02      	cmp	r3, #2
 800427c:	d107      	bne.n	800428e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 800427e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004282:	61fb      	str	r3, [r7, #28]
          break;
 8004284:	e003      	b.n	800428e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8004286:	bf00      	nop
 8004288:	e29a      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800428a:	bf00      	nop
 800428c:	e298      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800428e:	bf00      	nop
        break;
 8004290:	e296      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004292:	bf00      	nop
 8004294:	40021000 	.word	0x40021000
 8004298:	0800a7c8 	.word	0x0800a7c8
 800429c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80042a0:	4b9b      	ldr	r3, [pc, #620]	@ (8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80042a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80042aa:	613b      	str	r3, [r7, #16]
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80042b0:	d021      	beq.n	80042f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	2bc0      	cmp	r3, #192	@ 0xc0
 80042b6:	d829      	bhi.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	2b80      	cmp	r3, #128	@ 0x80
 80042bc:	d011      	beq.n	80042e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	2b80      	cmp	r3, #128	@ 0x80
 80042c2:	d823      	bhi.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	2b40      	cmp	r3, #64	@ 0x40
 80042ce:	d004      	beq.n	80042da <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 80042d0:	e01c      	b.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 80042d2:	f7ff f969 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 80042d6:	61f8      	str	r0, [r7, #28]
          break;
 80042d8:	e01d      	b.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 80042da:	f7ff f8cd 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 80042de:	61f8      	str	r0, [r7, #28]
          break;
 80042e0:	e019      	b.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042e2:	4b8b      	ldr	r3, [pc, #556]	@ (8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042ee:	d10f      	bne.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 80042f0:	4b88      	ldr	r3, [pc, #544]	@ (8004514 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80042f2:	61fb      	str	r3, [r7, #28]
          break;
 80042f4:	e00c      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80042f6:	4b86      	ldr	r3, [pc, #536]	@ (8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80042f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b02      	cmp	r3, #2
 8004302:	d107      	bne.n	8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8004304:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004308:	61fb      	str	r3, [r7, #28]
          break;
 800430a:	e003      	b.n	8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 800430c:	bf00      	nop
 800430e:	e257      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004310:	bf00      	nop
 8004312:	e255      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004314:	bf00      	nop
        break;
 8004316:	e253      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004318:	4b7d      	ldr	r3, [pc, #500]	@ (8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800431e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004322:	613b      	str	r3, [r7, #16]
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800432a:	d025      	beq.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004332:	d82c      	bhi.n	800438e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800433a:	d013      	beq.n	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004342:	d824      	bhi.n	800438e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d004      	beq.n	8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004350:	d004      	beq.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8004352:	e01c      	b.n	800438e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004354:	f7ff f928 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 8004358:	61f8      	str	r0, [r7, #28]
          break;
 800435a:	e01d      	b.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 800435c:	f7ff f88c 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 8004360:	61f8      	str	r0, [r7, #28]
          break;
 8004362:	e019      	b.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004364:	4b6a      	ldr	r3, [pc, #424]	@ (8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800436c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004370:	d10f      	bne.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8004372:	4b68      	ldr	r3, [pc, #416]	@ (8004514 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004374:	61fb      	str	r3, [r7, #28]
          break;
 8004376:	e00c      	b.n	8004392 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004378:	4b65      	ldr	r3, [pc, #404]	@ (8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800437a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b02      	cmp	r3, #2
 8004384:	d107      	bne.n	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8004386:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800438a:	61fb      	str	r3, [r7, #28]
          break;
 800438c:	e003      	b.n	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 800438e:	bf00      	nop
 8004390:	e216      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004392:	bf00      	nop
 8004394:	e214      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004396:	bf00      	nop
        break;
 8004398:	e212      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800439a:	4b5d      	ldr	r3, [pc, #372]	@ (8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800439c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80043a4:	613b      	str	r3, [r7, #16]
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043ac:	d025      	beq.n	80043fa <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043b4:	d82c      	bhi.n	8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043bc:	d013      	beq.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043c4:	d824      	bhi.n	8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d004      	beq.n	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043d2:	d004      	beq.n	80043de <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 80043d4:	e01c      	b.n	8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 80043d6:	f7ff f8e7 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 80043da:	61f8      	str	r0, [r7, #28]
          break;
 80043dc:	e01d      	b.n	800441a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 80043de:	f7ff f84b 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 80043e2:	61f8      	str	r0, [r7, #28]
          break;
 80043e4:	e019      	b.n	800441a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043f2:	d10f      	bne.n	8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 80043f4:	4b47      	ldr	r3, [pc, #284]	@ (8004514 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80043f6:	61fb      	str	r3, [r7, #28]
          break;
 80043f8:	e00c      	b.n	8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80043fa:	4b45      	ldr	r3, [pc, #276]	@ (8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80043fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b02      	cmp	r3, #2
 8004406:	d107      	bne.n	8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8004408:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800440c:	61fb      	str	r3, [r7, #28]
          break;
 800440e:	e003      	b.n	8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8004410:	bf00      	nop
 8004412:	e1d5      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004414:	bf00      	nop
 8004416:	e1d3      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004418:	bf00      	nop
        break;
 800441a:	e1d1      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800441c:	4b3c      	ldr	r3, [pc, #240]	@ (8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800441e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004422:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004426:	613b      	str	r3, [r7, #16]
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800442e:	d00c      	beq.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004436:	d864      	bhi.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800443e:	d008      	beq.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004446:	d030      	beq.n	80044aa <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004448:	e05b      	b.n	8004502 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 800444a:	f7ff f815 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 800444e:	61f8      	str	r0, [r7, #28]
          break;
 8004450:	e05c      	b.n	800450c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8004452:	4b2f      	ldr	r3, [pc, #188]	@ (8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800445a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800445e:	d152      	bne.n	8004506 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8004460:	4b2b      	ldr	r3, [pc, #172]	@ (8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d04c      	beq.n	8004506 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800446c:	4b28      	ldr	r3, [pc, #160]	@ (8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	0a1b      	lsrs	r3, r3, #8
 8004472:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004476:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	fb03 f202 	mul.w	r2, r3, r2
 8004480:	4b23      	ldr	r3, [pc, #140]	@ (8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	091b      	lsrs	r3, r3, #4
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	3301      	adds	r3, #1
 800448c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004490:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004492:	4b1f      	ldr	r3, [pc, #124]	@ (8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	0e5b      	lsrs	r3, r3, #25
 8004498:	f003 0303 	and.w	r3, r3, #3
 800449c:	3301      	adds	r3, #1
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a6:	61fb      	str	r3, [r7, #28]
          break;
 80044a8:	e02d      	b.n	8004506 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 80044aa:	4b19      	ldr	r3, [pc, #100]	@ (8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044b6:	d128      	bne.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80044b8:	4b15      	ldr	r3, [pc, #84]	@ (8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d022      	beq.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80044c4:	4b12      	ldr	r3, [pc, #72]	@ (8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	0a1b      	lsrs	r3, r3, #8
 80044ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044ce:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	fb03 f202 	mul.w	r2, r3, r2
 80044d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	091b      	lsrs	r3, r3, #4
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	3301      	adds	r3, #1
 80044e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80044ea:	4b09      	ldr	r3, [pc, #36]	@ (8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	0e5b      	lsrs	r3, r3, #25
 80044f0:	f003 0303 	and.w	r3, r3, #3
 80044f4:	3301      	adds	r3, #1
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fe:	61fb      	str	r3, [r7, #28]
          break;
 8004500:	e003      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8004502:	bf00      	nop
 8004504:	e15c      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004506:	bf00      	nop
 8004508:	e15a      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800450a:	bf00      	nop
        break;
 800450c:	e158      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800450e:	bf00      	nop
 8004510:	40021000 	.word	0x40021000
 8004514:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004518:	4b9d      	ldr	r3, [pc, #628]	@ (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004522:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d103      	bne.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 800452a:	f7ff f853 	bl	80035d4 <HAL_RCC_GetPCLK2Freq>
 800452e:	61f8      	str	r0, [r7, #28]
        break;
 8004530:	e146      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8004532:	f7fe ffa1 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 8004536:	61f8      	str	r0, [r7, #28]
        break;
 8004538:	e142      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800453a:	4b95      	ldr	r3, [pc, #596]	@ (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800453c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004540:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004544:	613b      	str	r3, [r7, #16]
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800454c:	d013      	beq.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004554:	d819      	bhi.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d004      	beq.n	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004562:	d004      	beq.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8004564:	e011      	b.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004566:	f7ff f81f 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 800456a:	61f8      	str	r0, [r7, #28]
          break;
 800456c:	e010      	b.n	8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 800456e:	f7fe ff83 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 8004572:	61f8      	str	r0, [r7, #28]
          break;
 8004574:	e00c      	b.n	8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004576:	4b86      	ldr	r3, [pc, #536]	@ (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800457e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004582:	d104      	bne.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8004584:	4b83      	ldr	r3, [pc, #524]	@ (8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004586:	61fb      	str	r3, [r7, #28]
          break;
 8004588:	e001      	b.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 800458a:	bf00      	nop
 800458c:	e118      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800458e:	bf00      	nop
        break;
 8004590:	e116      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004592:	4b7f      	ldr	r3, [pc, #508]	@ (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004598:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045a4:	d013      	beq.n	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045ac:	d819      	bhi.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d004      	beq.n	80045be <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045ba:	d004      	beq.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 80045bc:	e011      	b.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 80045be:	f7fe fff3 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 80045c2:	61f8      	str	r0, [r7, #28]
          break;
 80045c4:	e010      	b.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80045c6:	f7fe ff57 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 80045ca:	61f8      	str	r0, [r7, #28]
          break;
 80045cc:	e00c      	b.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80045ce:	4b70      	ldr	r3, [pc, #448]	@ (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045da:	d104      	bne.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 80045dc:	4b6d      	ldr	r3, [pc, #436]	@ (8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80045de:	61fb      	str	r3, [r7, #28]
          break;
 80045e0:	e001      	b.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 80045e2:	bf00      	nop
 80045e4:	e0ec      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80045e6:	bf00      	nop
        break;
 80045e8:	e0ea      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80045ea:	4b69      	ldr	r3, [pc, #420]	@ (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80045ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045f4:	613b      	str	r3, [r7, #16]
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045fc:	d013      	beq.n	8004626 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004604:	d819      	bhi.n	800463a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d004      	beq.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004612:	d004      	beq.n	800461e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8004614:	e011      	b.n	800463a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004616:	f7fe ffc7 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 800461a:	61f8      	str	r0, [r7, #28]
          break;
 800461c:	e010      	b.n	8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 800461e:	f7fe ff2b 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 8004622:	61f8      	str	r0, [r7, #28]
          break;
 8004624:	e00c      	b.n	8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004626:	4b5a      	ldr	r3, [pc, #360]	@ (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800462e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004632:	d104      	bne.n	800463e <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8004634:	4b57      	ldr	r3, [pc, #348]	@ (8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004636:	61fb      	str	r3, [r7, #28]
          break;
 8004638:	e001      	b.n	800463e <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 800463a:	bf00      	nop
 800463c:	e0c0      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800463e:	bf00      	nop
        break;
 8004640:	e0be      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004642:	4b53      	ldr	r3, [pc, #332]	@ (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004648:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004654:	d02c      	beq.n	80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800465c:	d833      	bhi.n	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004664:	d01a      	beq.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800466c:	d82b      	bhi.n	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d004      	beq.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800467a:	d004      	beq.n	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 800467c:	e023      	b.n	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 800467e:	f7fe ff93 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 8004682:	61f8      	str	r0, [r7, #28]
          break;
 8004684:	e026      	b.n	80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004686:	4b42      	ldr	r3, [pc, #264]	@ (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004688:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b02      	cmp	r3, #2
 8004692:	d11a      	bne.n	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8004694:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004698:	61fb      	str	r3, [r7, #28]
          break;
 800469a:	e016      	b.n	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800469c:	4b3c      	ldr	r3, [pc, #240]	@ (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046a8:	d111      	bne.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 80046aa:	4b3a      	ldr	r3, [pc, #232]	@ (8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80046ac:	61fb      	str	r3, [r7, #28]
          break;
 80046ae:	e00e      	b.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80046b0:	4b37      	ldr	r3, [pc, #220]	@ (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80046b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d109      	bne.n	80046d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 80046be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046c2:	61fb      	str	r3, [r7, #28]
          break;
 80046c4:	e005      	b.n	80046d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 80046c6:	bf00      	nop
 80046c8:	e07a      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80046ca:	bf00      	nop
 80046cc:	e078      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80046ce:	bf00      	nop
 80046d0:	e076      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80046d2:	bf00      	nop
        break;
 80046d4:	e074      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80046d6:	4b2e      	ldr	r3, [pc, #184]	@ (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80046d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046dc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80046e0:	613b      	str	r3, [r7, #16]
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80046e8:	d02c      	beq.n	8004744 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80046f0:	d833      	bhi.n	800475a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046f8:	d01a      	beq.n	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004700:	d82b      	bhi.n	800475a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d004      	beq.n	8004712 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800470e:	d004      	beq.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8004710:	e023      	b.n	800475a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004712:	f7fe ff49 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 8004716:	61f8      	str	r0, [r7, #28]
          break;
 8004718:	e026      	b.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800471a:	4b1d      	ldr	r3, [pc, #116]	@ (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800471c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b02      	cmp	r3, #2
 8004726:	d11a      	bne.n	800475e <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8004728:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800472c:	61fb      	str	r3, [r7, #28]
          break;
 800472e:	e016      	b.n	800475e <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004730:	4b17      	ldr	r3, [pc, #92]	@ (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800473c:	d111      	bne.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 800473e:	4b15      	ldr	r3, [pc, #84]	@ (8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004740:	61fb      	str	r3, [r7, #28]
          break;
 8004742:	e00e      	b.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004744:	4b12      	ldr	r3, [pc, #72]	@ (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b02      	cmp	r3, #2
 8004750:	d109      	bne.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8004752:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004756:	61fb      	str	r3, [r7, #28]
          break;
 8004758:	e005      	b.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 800475a:	bf00      	nop
 800475c:	e030      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800475e:	bf00      	nop
 8004760:	e02e      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004762:	bf00      	nop
 8004764:	e02c      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004766:	bf00      	nop
        break;
 8004768:	e02a      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800476a:	4b09      	ldr	r3, [pc, #36]	@ (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800476c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004770:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004774:	613b      	str	r3, [r7, #16]
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d004      	beq.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004782:	d009      	beq.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8004784:	e012      	b.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004786:	f7fe ff0f 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 800478a:	61f8      	str	r0, [r7, #28]
          break;
 800478c:	e00e      	b.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 800478e:	bf00      	nop
 8004790:	40021000 	.word	0x40021000
 8004794:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004798:	4b0c      	ldr	r3, [pc, #48]	@ (80047cc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047a4:	d101      	bne.n	80047aa <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 80047a6:	4b0a      	ldr	r3, [pc, #40]	@ (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80047a8:	61fb      	str	r3, [r7, #28]
          break;
 80047aa:	bf00      	nop
        break;
 80047ac:	e008      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80047ae:	bf00      	nop
 80047b0:	e006      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80047b2:	bf00      	nop
 80047b4:	e004      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80047b6:	bf00      	nop
 80047b8:	e002      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80047ba:	bf00      	nop
 80047bc:	e000      	b.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80047be:	bf00      	nop
    }
  }

  return(frequency);
 80047c0:	69fb      	ldr	r3, [r7, #28]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3720      	adds	r7, #32
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	40021000 	.word	0x40021000
 80047d0:	00f42400 	.word	0x00f42400

080047d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047e2:	4b75      	ldr	r3, [pc, #468]	@ (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d018      	beq.n	8004820 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047ee:	4b72      	ldr	r3, [pc, #456]	@ (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f003 0203 	and.w	r2, r3, #3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d10d      	bne.n	800481a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
       ||
 8004802:	2b00      	cmp	r3, #0
 8004804:	d009      	beq.n	800481a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004806:	4b6c      	ldr	r3, [pc, #432]	@ (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	091b      	lsrs	r3, r3, #4
 800480c:	f003 0307 	and.w	r3, r3, #7
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
       ||
 8004816:	429a      	cmp	r2, r3
 8004818:	d047      	beq.n	80048aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	73fb      	strb	r3, [r7, #15]
 800481e:	e044      	b.n	80048aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b03      	cmp	r3, #3
 8004826:	d018      	beq.n	800485a <RCCEx_PLLSAI1_Config+0x86>
 8004828:	2b03      	cmp	r3, #3
 800482a:	d825      	bhi.n	8004878 <RCCEx_PLLSAI1_Config+0xa4>
 800482c:	2b01      	cmp	r3, #1
 800482e:	d002      	beq.n	8004836 <RCCEx_PLLSAI1_Config+0x62>
 8004830:	2b02      	cmp	r3, #2
 8004832:	d009      	beq.n	8004848 <RCCEx_PLLSAI1_Config+0x74>
 8004834:	e020      	b.n	8004878 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004836:	4b60      	ldr	r3, [pc, #384]	@ (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d11d      	bne.n	800487e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004846:	e01a      	b.n	800487e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004848:	4b5b      	ldr	r3, [pc, #364]	@ (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004850:	2b00      	cmp	r3, #0
 8004852:	d116      	bne.n	8004882 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004858:	e013      	b.n	8004882 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800485a:	4b57      	ldr	r3, [pc, #348]	@ (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10f      	bne.n	8004886 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004866:	4b54      	ldr	r3, [pc, #336]	@ (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d109      	bne.n	8004886 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004876:	e006      	b.n	8004886 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	73fb      	strb	r3, [r7, #15]
      break;
 800487c:	e004      	b.n	8004888 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800487e:	bf00      	nop
 8004880:	e002      	b.n	8004888 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004882:	bf00      	nop
 8004884:	e000      	b.n	8004888 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004886:	bf00      	nop
    }

    if(status == HAL_OK)
 8004888:	7bfb      	ldrb	r3, [r7, #15]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10d      	bne.n	80048aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800488e:	4b4a      	ldr	r3, [pc, #296]	@ (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6819      	ldr	r1, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	3b01      	subs	r3, #1
 80048a0:	011b      	lsls	r3, r3, #4
 80048a2:	430b      	orrs	r3, r1
 80048a4:	4944      	ldr	r1, [pc, #272]	@ (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048aa:	7bfb      	ldrb	r3, [r7, #15]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d17d      	bne.n	80049ac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048b0:	4b41      	ldr	r3, [pc, #260]	@ (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a40      	ldr	r2, [pc, #256]	@ (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80048ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048bc:	f7fc ff4a 	bl	8001754 <HAL_GetTick>
 80048c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048c2:	e009      	b.n	80048d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048c4:	f7fc ff46 	bl	8001754 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d902      	bls.n	80048d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	73fb      	strb	r3, [r7, #15]
        break;
 80048d6:	e005      	b.n	80048e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048d8:	4b37      	ldr	r3, [pc, #220]	@ (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1ef      	bne.n	80048c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d160      	bne.n	80049ac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d111      	bne.n	8004914 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048f0:	4b31      	ldr	r3, [pc, #196]	@ (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80048f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6892      	ldr	r2, [r2, #8]
 8004900:	0211      	lsls	r1, r2, #8
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	68d2      	ldr	r2, [r2, #12]
 8004906:	0912      	lsrs	r2, r2, #4
 8004908:	0452      	lsls	r2, r2, #17
 800490a:	430a      	orrs	r2, r1
 800490c:	492a      	ldr	r1, [pc, #168]	@ (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800490e:	4313      	orrs	r3, r2
 8004910:	610b      	str	r3, [r1, #16]
 8004912:	e027      	b.n	8004964 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d112      	bne.n	8004940 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800491a:	4b27      	ldr	r3, [pc, #156]	@ (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004922:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	6892      	ldr	r2, [r2, #8]
 800492a:	0211      	lsls	r1, r2, #8
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6912      	ldr	r2, [r2, #16]
 8004930:	0852      	lsrs	r2, r2, #1
 8004932:	3a01      	subs	r2, #1
 8004934:	0552      	lsls	r2, r2, #21
 8004936:	430a      	orrs	r2, r1
 8004938:	491f      	ldr	r1, [pc, #124]	@ (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800493a:	4313      	orrs	r3, r2
 800493c:	610b      	str	r3, [r1, #16]
 800493e:	e011      	b.n	8004964 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004940:	4b1d      	ldr	r3, [pc, #116]	@ (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004948:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6892      	ldr	r2, [r2, #8]
 8004950:	0211      	lsls	r1, r2, #8
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6952      	ldr	r2, [r2, #20]
 8004956:	0852      	lsrs	r2, r2, #1
 8004958:	3a01      	subs	r2, #1
 800495a:	0652      	lsls	r2, r2, #25
 800495c:	430a      	orrs	r2, r1
 800495e:	4916      	ldr	r1, [pc, #88]	@ (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004960:	4313      	orrs	r3, r2
 8004962:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004964:	4b14      	ldr	r3, [pc, #80]	@ (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a13      	ldr	r2, [pc, #76]	@ (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800496a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800496e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004970:	f7fc fef0 	bl	8001754 <HAL_GetTick>
 8004974:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004976:	e009      	b.n	800498c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004978:	f7fc feec 	bl	8001754 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d902      	bls.n	800498c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	73fb      	strb	r3, [r7, #15]
          break;
 800498a:	e005      	b.n	8004998 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800498c:	4b0a      	ldr	r3, [pc, #40]	@ (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0ef      	beq.n	8004978 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004998:	7bfb      	ldrb	r3, [r7, #15]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d106      	bne.n	80049ac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800499e:	4b06      	ldr	r3, [pc, #24]	@ (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a0:	691a      	ldr	r2, [r3, #16]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	4904      	ldr	r1, [pc, #16]	@ (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	40021000 	.word	0x40021000

080049bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049ca:	4b6a      	ldr	r3, [pc, #424]	@ (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d018      	beq.n	8004a08 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80049d6:	4b67      	ldr	r3, [pc, #412]	@ (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f003 0203 	and.w	r2, r3, #3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d10d      	bne.n	8004a02 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
       ||
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d009      	beq.n	8004a02 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80049ee:	4b61      	ldr	r3, [pc, #388]	@ (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	091b      	lsrs	r3, r3, #4
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
       ||
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d047      	beq.n	8004a92 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	73fb      	strb	r3, [r7, #15]
 8004a06:	e044      	b.n	8004a92 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b03      	cmp	r3, #3
 8004a0e:	d018      	beq.n	8004a42 <RCCEx_PLLSAI2_Config+0x86>
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	d825      	bhi.n	8004a60 <RCCEx_PLLSAI2_Config+0xa4>
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d002      	beq.n	8004a1e <RCCEx_PLLSAI2_Config+0x62>
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d009      	beq.n	8004a30 <RCCEx_PLLSAI2_Config+0x74>
 8004a1c:	e020      	b.n	8004a60 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a1e:	4b55      	ldr	r3, [pc, #340]	@ (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d11d      	bne.n	8004a66 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a2e:	e01a      	b.n	8004a66 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a30:	4b50      	ldr	r3, [pc, #320]	@ (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d116      	bne.n	8004a6a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a40:	e013      	b.n	8004a6a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a42:	4b4c      	ldr	r3, [pc, #304]	@ (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10f      	bne.n	8004a6e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a4e:	4b49      	ldr	r3, [pc, #292]	@ (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d109      	bne.n	8004a6e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a5e:	e006      	b.n	8004a6e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	73fb      	strb	r3, [r7, #15]
      break;
 8004a64:	e004      	b.n	8004a70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a66:	bf00      	nop
 8004a68:	e002      	b.n	8004a70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a6a:	bf00      	nop
 8004a6c:	e000      	b.n	8004a70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10d      	bne.n	8004a92 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a76:	4b3f      	ldr	r3, [pc, #252]	@ (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6819      	ldr	r1, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	3b01      	subs	r3, #1
 8004a88:	011b      	lsls	r3, r3, #4
 8004a8a:	430b      	orrs	r3, r1
 8004a8c:	4939      	ldr	r1, [pc, #228]	@ (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d167      	bne.n	8004b68 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a98:	4b36      	ldr	r3, [pc, #216]	@ (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a35      	ldr	r2, [pc, #212]	@ (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004aa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aa4:	f7fc fe56 	bl	8001754 <HAL_GetTick>
 8004aa8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004aaa:	e009      	b.n	8004ac0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004aac:	f7fc fe52 	bl	8001754 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d902      	bls.n	8004ac0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	73fb      	strb	r3, [r7, #15]
        break;
 8004abe:	e005      	b.n	8004acc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ac0:	4b2c      	ldr	r3, [pc, #176]	@ (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1ef      	bne.n	8004aac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d14a      	bne.n	8004b68 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d111      	bne.n	8004afc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ad8:	4b26      	ldr	r3, [pc, #152]	@ (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004ae0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6892      	ldr	r2, [r2, #8]
 8004ae8:	0211      	lsls	r1, r2, #8
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	68d2      	ldr	r2, [r2, #12]
 8004aee:	0912      	lsrs	r2, r2, #4
 8004af0:	0452      	lsls	r2, r2, #17
 8004af2:	430a      	orrs	r2, r1
 8004af4:	491f      	ldr	r1, [pc, #124]	@ (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	614b      	str	r3, [r1, #20]
 8004afa:	e011      	b.n	8004b20 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004afc:	4b1d      	ldr	r3, [pc, #116]	@ (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004b04:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6892      	ldr	r2, [r2, #8]
 8004b0c:	0211      	lsls	r1, r2, #8
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6912      	ldr	r2, [r2, #16]
 8004b12:	0852      	lsrs	r2, r2, #1
 8004b14:	3a01      	subs	r2, #1
 8004b16:	0652      	lsls	r2, r2, #25
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	4916      	ldr	r1, [pc, #88]	@ (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b20:	4b14      	ldr	r3, [pc, #80]	@ (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a13      	ldr	r2, [pc, #76]	@ (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b2c:	f7fc fe12 	bl	8001754 <HAL_GetTick>
 8004b30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b32:	e009      	b.n	8004b48 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b34:	f7fc fe0e 	bl	8001754 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d902      	bls.n	8004b48 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	73fb      	strb	r3, [r7, #15]
          break;
 8004b46:	e005      	b.n	8004b54 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b48:	4b0a      	ldr	r3, [pc, #40]	@ (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0ef      	beq.n	8004b34 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d106      	bne.n	8004b68 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b5a:	4b06      	ldr	r3, [pc, #24]	@ (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b5c:	695a      	ldr	r2, [r3, #20]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	4904      	ldr	r1, [pc, #16]	@ (8004b74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	40021000 	.word	0x40021000

08004b78 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b089      	sub	sp, #36	@ 0x24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b94:	d10c      	bne.n	8004bb0 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004b96:	4b6e      	ldr	r3, [pc, #440]	@ (8004d50 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b9c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004ba0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004ba8:	d112      	bne.n	8004bd0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004baa:	4b6a      	ldr	r3, [pc, #424]	@ (8004d54 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004bac:	61fb      	str	r3, [r7, #28]
 8004bae:	e00f      	b.n	8004bd0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bb6:	d10b      	bne.n	8004bd0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004bb8:	4b65      	ldr	r3, [pc, #404]	@ (8004d50 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bbe:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004bc2:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004bca:	d101      	bne.n	8004bd0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004bcc:	4b61      	ldr	r3, [pc, #388]	@ (8004d54 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004bce:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f040 80b4 	bne.w	8004d40 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004be2:	d003      	beq.n	8004bec <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bea:	d135      	bne.n	8004c58 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004bec:	4b58      	ldr	r3, [pc, #352]	@ (8004d50 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bf4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bf8:	f040 80a1 	bne.w	8004d3e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8004bfc:	4b54      	ldr	r3, [pc, #336]	@ (8004d50 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 809a 	beq.w	8004d3e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004c0a:	4b51      	ldr	r3, [pc, #324]	@ (8004d50 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	091b      	lsrs	r3, r3, #4
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	3301      	adds	r3, #1
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004c1e:	4b4c      	ldr	r3, [pc, #304]	@ (8004d50 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	0a1b      	lsrs	r3, r3, #8
 8004c24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c28:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10a      	bne.n	8004c46 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004c30:	4b47      	ldr	r3, [pc, #284]	@ (8004d50 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8004c3c:	2311      	movs	r3, #17
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	e001      	b.n	8004c46 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8004c42:	2307      	movs	r3, #7
 8004c44:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	fb03 f202 	mul.w	r2, r3, r2
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c54:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004c56:	e072      	b.n	8004d3e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d133      	bne.n	8004cc6 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004c5e:	4b3c      	ldr	r3, [pc, #240]	@ (8004d50 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c6a:	d169      	bne.n	8004d40 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004c6c:	4b38      	ldr	r3, [pc, #224]	@ (8004d50 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d063      	beq.n	8004d40 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004c78:	4b35      	ldr	r3, [pc, #212]	@ (8004d50 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	091b      	lsrs	r3, r3, #4
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	3301      	adds	r3, #1
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004c8c:	4b30      	ldr	r3, [pc, #192]	@ (8004d50 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	0a1b      	lsrs	r3, r3, #8
 8004c92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c96:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10a      	bne.n	8004cb4 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004c9e:	4b2c      	ldr	r3, [pc, #176]	@ (8004d50 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d002      	beq.n	8004cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8004caa:	2311      	movs	r3, #17
 8004cac:	617b      	str	r3, [r7, #20]
 8004cae:	e001      	b.n	8004cb4 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8004cb0:	2307      	movs	r3, #7
 8004cb2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	fb03 f202 	mul.w	r2, r3, r2
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc2:	61fb      	str	r3, [r7, #28]
 8004cc4:	e03c      	b.n	8004d40 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ccc:	d003      	beq.n	8004cd6 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cd4:	d134      	bne.n	8004d40 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8004cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8004d50 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ce2:	d12d      	bne.n	8004d40 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8004d50 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d027      	beq.n	8004d40 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004cf0:	4b17      	ldr	r3, [pc, #92]	@ (8004d50 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	091b      	lsrs	r3, r3, #4
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d02:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004d04:	4b12      	ldr	r3, [pc, #72]	@ (8004d50 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	0a1b      	lsrs	r3, r3, #8
 8004d0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d0e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10a      	bne.n	8004d2c <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8004d16:	4b0e      	ldr	r3, [pc, #56]	@ (8004d50 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d002      	beq.n	8004d28 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8004d22:	2311      	movs	r3, #17
 8004d24:	617b      	str	r3, [r7, #20]
 8004d26:	e001      	b.n	8004d2c <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8004d28:	2307      	movs	r3, #7
 8004d2a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	fb03 f202 	mul.w	r2, r3, r2
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3a:	61fb      	str	r3, [r7, #28]
 8004d3c:	e000      	b.n	8004d40 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004d3e:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004d40:	69fb      	ldr	r3, [r7, #28]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3724      	adds	r7, #36	@ 0x24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	40021000 	.word	0x40021000
 8004d54:	001fff68 	.word	0x001fff68

08004d58 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d904      	bls.n	8004d76 <HAL_SAI_InitProtocol+0x1e>
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	3b03      	subs	r3, #3
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d812      	bhi.n	8004d9a <HAL_SAI_InitProtocol+0x42>
 8004d74:	e008      	b.n	8004d88 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 fba3 	bl	80054c8 <SAI_InitI2S>
 8004d82:	4603      	mov	r3, r0
 8004d84:	75fb      	strb	r3, [r7, #23]
      break;
 8004d86:	e00b      	b.n	8004da0 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	68b9      	ldr	r1, [r7, #8]
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 fc4c 	bl	800562c <SAI_InitPCM>
 8004d94:	4603      	mov	r3, r0
 8004d96:	75fb      	strb	r3, [r7, #23]
      break;
 8004d98:	e002      	b.n	8004da0 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d9e:	bf00      	nop
  }

  if (status == HAL_OK)
 8004da0:	7dfb      	ldrb	r3, [r7, #23]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d104      	bne.n	8004db0 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 f808 	bl	8004dbc <HAL_SAI_Init>
 8004dac:	4603      	mov	r3, r0
 8004dae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e155      	b.n	800507a <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d106      	bne.n	8004de8 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7fc f8a2 	bl	8000f2c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 fca1 	bl	8005730 <SAI_Disable>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e140      	b.n	800507a <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d00c      	beq.n	8004e22 <HAL_SAI_Init+0x66>
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d80d      	bhi.n	8004e28 <HAL_SAI_Init+0x6c>
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <HAL_SAI_Init+0x5a>
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d003      	beq.n	8004e1c <HAL_SAI_Init+0x60>
 8004e14:	e008      	b.n	8004e28 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004e16:	2300      	movs	r3, #0
 8004e18:	61fb      	str	r3, [r7, #28]
      break;
 8004e1a:	e008      	b.n	8004e2e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004e1c:	2310      	movs	r3, #16
 8004e1e:	61fb      	str	r3, [r7, #28]
      break;
 8004e20:	e005      	b.n	8004e2e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004e22:	2320      	movs	r3, #32
 8004e24:	61fb      	str	r3, [r7, #28]
      break;
 8004e26:	e002      	b.n	8004e2e <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	61fb      	str	r3, [r7, #28]
      break;
 8004e2c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	2b03      	cmp	r3, #3
 8004e34:	d81d      	bhi.n	8004e72 <HAL_SAI_Init+0xb6>
 8004e36:	a201      	add	r2, pc, #4	@ (adr r2, 8004e3c <HAL_SAI_Init+0x80>)
 8004e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3c:	08004e4d 	.word	0x08004e4d
 8004e40:	08004e53 	.word	0x08004e53
 8004e44:	08004e5b 	.word	0x08004e5b
 8004e48:	08004e63 	.word	0x08004e63
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	617b      	str	r3, [r7, #20]
      break;
 8004e50:	e012      	b.n	8004e78 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004e52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e56:	617b      	str	r3, [r7, #20]
      break;
 8004e58:	e00e      	b.n	8004e78 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004e5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004e5e:	617b      	str	r3, [r7, #20]
      break;
 8004e60:	e00a      	b.n	8004e78 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004e62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004e66:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	f043 0301 	orr.w	r3, r3, #1
 8004e6e:	61fb      	str	r3, [r7, #28]
      break;
 8004e70:	e002      	b.n	8004e78 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8004e72:	2300      	movs	r3, #0
 8004e74:	617b      	str	r3, [r7, #20]
      break;
 8004e76:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a81      	ldr	r2, [pc, #516]	@ (8005084 <HAL_SAI_Init+0x2c8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d004      	beq.n	8004e8c <HAL_SAI_Init+0xd0>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a80      	ldr	r2, [pc, #512]	@ (8005088 <HAL_SAI_Init+0x2cc>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d103      	bne.n	8004e94 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8004e8c:	4a7f      	ldr	r2, [pc, #508]	@ (800508c <HAL_SAI_Init+0x2d0>)
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	e002      	b.n	8004e9a <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004e94:	4a7e      	ldr	r2, [pc, #504]	@ (8005090 <HAL_SAI_Init+0x2d4>)
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d041      	beq.n	8004f26 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a77      	ldr	r2, [pc, #476]	@ (8005084 <HAL_SAI_Init+0x2c8>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d004      	beq.n	8004eb6 <HAL_SAI_Init+0xfa>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a75      	ldr	r2, [pc, #468]	@ (8005088 <HAL_SAI_Init+0x2cc>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d105      	bne.n	8004ec2 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004eb6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004eba:	f7fe ff1d 	bl	8003cf8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ebe:	6138      	str	r0, [r7, #16]
 8004ec0:	e004      	b.n	8004ecc <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004ec2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004ec6:	f7fe ff17 	bl	8003cf8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004eca:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	025b      	lsls	r3, r3, #9
 8004ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee2:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4a6b      	ldr	r2, [pc, #428]	@ (8005094 <HAL_SAI_Init+0x2d8>)
 8004ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8004eec:	08da      	lsrs	r2, r3, #3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004ef2:	68f9      	ldr	r1, [r7, #12]
 8004ef4:	4b67      	ldr	r3, [pc, #412]	@ (8005094 <HAL_SAI_Init+0x2d8>)
 8004ef6:	fba3 2301 	umull	r2, r3, r3, r1
 8004efa:	08da      	lsrs	r2, r3, #3
 8004efc:	4613      	mov	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	1aca      	subs	r2, r1, r3
 8004f06:	2a08      	cmp	r2, #8
 8004f08:	d904      	bls.n	8004f14 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d104      	bne.n	8004f26 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	085a      	lsrs	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_SAI_Init+0x17a>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d109      	bne.n	8004f4a <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d101      	bne.n	8004f42 <HAL_SAI_Init+0x186>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	e001      	b.n	8004f46 <HAL_SAI_Init+0x18a>
 8004f42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f46:	61bb      	str	r3, [r7, #24]
 8004f48:	e008      	b.n	8004f5c <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d102      	bne.n	8004f58 <HAL_SAI_Init+0x19c>
 8004f52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f56:	e000      	b.n	8004f5a <HAL_SAI_Init+0x19e>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6819      	ldr	r1, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4b4c      	ldr	r3, [pc, #304]	@ (8005098 <HAL_SAI_Init+0x2dc>)
 8004f68:	400b      	ands	r3, r1
 8004f6a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6819      	ldr	r1, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f7a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f80:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f86:	431a      	orrs	r2, r3
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 8004f94:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004fa0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	051b      	lsls	r3, r3, #20
 8004fa8:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	6812      	ldr	r2, [r2, #0]
 8004fbc:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004fc0:	f023 030f 	bic.w	r3, r3, #15
 8004fc4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6859      	ldr	r1, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	699a      	ldr	r2, [r3, #24]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6899      	ldr	r1, [r3, #8]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	4b2b      	ldr	r3, [pc, #172]	@ (800509c <HAL_SAI_Init+0x2e0>)
 8004ff0:	400b      	ands	r3, r1
 8004ff2:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6899      	ldr	r1, [r3, #8]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffe:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005004:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800500a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8005010:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005016:	3b01      	subs	r3, #1
 8005018:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800501a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68d9      	ldr	r1, [r3, #12]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8005032:	400b      	ands	r3, r1
 8005034:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68d9      	ldr	r1, [r3, #12]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005044:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800504a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800504c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005052:	3b01      	subs	r3, #1
 8005054:	021b      	lsls	r3, r3, #8
 8005056:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3720      	adds	r7, #32
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	40015404 	.word	0x40015404
 8005088:	40015424 	.word	0x40015424
 800508c:	40015400 	.word	0x40015400
 8005090:	40015800 	.word	0x40015800
 8005094:	cccccccd 	.word	0xcccccccd
 8005098:	ff05c010 	.word	0xff05c010
 800509c:	fff88000 	.word	0xfff88000

080050a0 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050a8:	2300      	movs	r3, #0
 80050aa:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d101      	bne.n	80050ba <HAL_SAI_Abort+0x1a>
 80050b6:	2302      	movs	r3, #2
 80050b8:	e053      	b.n	8005162 <HAL_SAI_Abort+0xc2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 fb34 	bl	8005730 <SAI_Disable>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050e0:	d125      	bne.n	800512e <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80050f0:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b12      	cmp	r3, #18
 80050fc:	d108      	bne.n	8005110 <HAL_SAI_Abort+0x70>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005102:	2b00      	cmp	r3, #0
 8005104:	d004      	beq.n	8005110 <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800510a:	4618      	mov	r0, r3
 800510c:	f7fc fcc8 	bl	8001aa0 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b22      	cmp	r3, #34	@ 0x22
 800511a:	d108      	bne.n	800512e <HAL_SAI_Abort+0x8e>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005120:	2b00      	cmp	r3, #0
 8005122:	d004      	beq.n	800512e <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005128:	4618      	mov	r0, r3
 800512a:	f7fc fcb9 	bl	8001aa0 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2200      	movs	r2, #0
 8005134:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f04f 32ff 	mov.w	r2, #4294967295
 800513e:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f042 0208 	orr.w	r2, r2, #8
 800514e:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8005160:	7bfb      	ldrb	r3, [r7, #15]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
	...

0800516c <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 8192 	beq.w	80054a6 <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f003 0308 	and.w	r3, r3, #8
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d009      	beq.n	80051b8 <HAL_SAI_IRQHandler+0x4c>
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f003 0308 	and.w	r3, r3, #8
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d004      	beq.n	80051b8 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	4798      	blx	r3
 80051b6:	e176      	b.n	80054a6 <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d01e      	beq.n	8005200 <HAL_SAI_IRQHandler+0x94>
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d019      	beq.n	8005200 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2201      	movs	r2, #1
 80051d2:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b22      	cmp	r3, #34	@ 0x22
 80051de:	d101      	bne.n	80051e4 <HAL_SAI_IRQHandler+0x78>
 80051e0:	2301      	movs	r3, #1
 80051e2:	e000      	b.n	80051e6 <HAL_SAI_IRQHandler+0x7a>
 80051e4:	2302      	movs	r3, #2
 80051e6:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	431a      	orrs	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f95b 	bl	80054b4 <HAL_SAI_ErrorCallback>
 80051fe:	e152      	b.n	80054a6 <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d011      	beq.n	800522e <HAL_SAI_IRQHandler+0xc2>
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00c      	beq.n	800522e <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2202      	movs	r2, #2
 800521a:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 8140 	beq.w	80054a6 <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800522a:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 800522c:	e13b      	b.n	80054a6 <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f003 0320 	and.w	r3, r3, #32
 8005234:	2b00      	cmp	r3, #0
 8005236:	d055      	beq.n	80052e4 <HAL_SAI_IRQHandler+0x178>
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f003 0320 	and.w	r3, r3, #32
 800523e:	2b00      	cmp	r3, #0
 8005240:	d050      	beq.n	80052e4 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2220      	movs	r2, #32
 8005248:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005250:	f043 0204 	orr.w	r2, r3, #4
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d038      	beq.n	80052d6 <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005268:	2b00      	cmp	r3, #0
 800526a:	d016      	beq.n	800529a <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005270:	4a8f      	ldr	r2, [pc, #572]	@ (80054b0 <HAL_SAI_IRQHandler+0x344>)
 8005272:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005278:	4618      	mov	r0, r3
 800527a:	f7fc fc4f 	bl	8001b1c <HAL_DMA_Abort_IT>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00a      	beq.n	800529a <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800528a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f90d 	bl	80054b4 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 80fc 	beq.w	800549c <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a8:	4a81      	ldr	r2, [pc, #516]	@ (80054b0 <HAL_SAI_IRQHandler+0x344>)
 80052aa:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7fc fc33 	bl	8001b1c <HAL_DMA_Abort_IT>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 80ef 	beq.w	800549c <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052c4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f8f0 	bl	80054b4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80052d4:	e0e2      	b.n	800549c <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7ff fee2 	bl	80050a0 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f8e9 	bl	80054b4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80052e2:	e0db      	b.n	800549c <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d055      	beq.n	800539a <HAL_SAI_IRQHandler+0x22e>
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d050      	beq.n	800539a <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2240      	movs	r2, #64	@ 0x40
 80052fe:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005306:	f043 0208 	orr.w	r2, r3, #8
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d038      	beq.n	800538c <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800531e:	2b00      	cmp	r3, #0
 8005320:	d016      	beq.n	8005350 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005326:	4a62      	ldr	r2, [pc, #392]	@ (80054b0 <HAL_SAI_IRQHandler+0x344>)
 8005328:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800532e:	4618      	mov	r0, r3
 8005330:	f7fc fbf4 	bl	8001b1c <HAL_DMA_Abort_IT>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005340:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f8b2 	bl	80054b4 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 80a3 	beq.w	80054a0 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800535e:	4a54      	ldr	r2, [pc, #336]	@ (80054b0 <HAL_SAI_IRQHandler+0x344>)
 8005360:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005366:	4618      	mov	r0, r3
 8005368:	f7fc fbd8 	bl	8001b1c <HAL_DMA_Abort_IT>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	f000 8096 	beq.w	80054a0 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800537a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f895 	bl	80054b4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800538a:	e089      	b.n	80054a0 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f7ff fe87 	bl	80050a0 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f88e 	bl	80054b4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005398:	e082      	b.n	80054a0 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d061      	beq.n	8005468 <HAL_SAI_IRQHandler+0x2fc>
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f003 0304 	and.w	r3, r3, #4
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d05c      	beq.n	8005468 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2204      	movs	r2, #4
 80053b4:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053bc:	f043 0220 	orr.w	r2, r3, #32
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d036      	beq.n	800543e <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d016      	beq.n	8005406 <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053dc:	4a34      	ldr	r2, [pc, #208]	@ (80054b0 <HAL_SAI_IRQHandler+0x344>)
 80053de:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7fc fb99 	bl	8001b1c <HAL_DMA_Abort_IT>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00a      	beq.n	8005406 <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053f6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f857 	bl	80054b4 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800540a:	2b00      	cmp	r3, #0
 800540c:	d04a      	beq.n	80054a4 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005412:	4a27      	ldr	r2, [pc, #156]	@ (80054b0 <HAL_SAI_IRQHandler+0x344>)
 8005414:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800541a:	4618      	mov	r0, r3
 800541c:	f7fc fb7e 	bl	8001b1c <HAL_DMA_Abort_IT>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d03e      	beq.n	80054a4 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800542c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f83c 	bl	80054b4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800543c:	e032      	b.n	80054a4 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2200      	movs	r2, #0
 8005444:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f04f 32ff 	mov.w	r2, #4294967295
 800544e:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f827 	bl	80054b4 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005466:	e01d      	b.n	80054a4 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f003 0310 	and.w	r3, r3, #16
 800546e:	2b00      	cmp	r3, #0
 8005470:	d019      	beq.n	80054a6 <HAL_SAI_IRQHandler+0x33a>
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f003 0310 	and.w	r3, r3, #16
 8005478:	2b00      	cmp	r3, #0
 800547a:	d014      	beq.n	80054a6 <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2210      	movs	r2, #16
 8005482:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800548a:	f043 0210 	orr.w	r2, r3, #16
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 f80d 	bl	80054b4 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800549a:	e004      	b.n	80054a6 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800549c:	bf00      	nop
 800549e:	e002      	b.n	80054a6 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80054a0:	bf00      	nop
 80054a2:	e000      	b.n	80054a6 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80054a4:	bf00      	nop
}
 80054a6:	bf00      	nop
 80054a8:	3718      	adds	r7, #24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	080057a5 	.word	0x080057a5

080054b4 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b087      	sub	sp, #28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
 80054d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <SAI_InitI2S+0x2e>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d103      	bne.n	80054fe <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80054fc:	e002      	b.n	8005504 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2201      	movs	r2, #1
 8005502:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800550a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005512:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e077      	b.n	800561e <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d107      	bne.n	8005544 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005540:	651a      	str	r2, [r3, #80]	@ 0x50
 8005542:	e006      	b.n	8005552 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800554a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b03      	cmp	r3, #3
 8005556:	d84f      	bhi.n	80055f8 <SAI_InitI2S+0x130>
 8005558:	a201      	add	r2, pc, #4	@ (adr r2, 8005560 <SAI_InitI2S+0x98>)
 800555a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555e:	bf00      	nop
 8005560:	08005571 	.word	0x08005571
 8005564:	08005593 	.word	0x08005593
 8005568:	080055b5 	.word	0x080055b5
 800556c:	080055d7 	.word	0x080055d7
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2280      	movs	r2, #128	@ 0x80
 8005574:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	085b      	lsrs	r3, r3, #1
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	085b      	lsrs	r3, r3, #1
 8005584:	011a      	lsls	r2, r3, #4
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2240      	movs	r2, #64	@ 0x40
 800558e:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005590:	e035      	b.n	80055fe <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2280      	movs	r2, #128	@ 0x80
 8005596:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	085b      	lsrs	r3, r3, #1
 800559c:	019a      	lsls	r2, r3, #6
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	085b      	lsrs	r3, r3, #1
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2280      	movs	r2, #128	@ 0x80
 80055b0:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80055b2:	e024      	b.n	80055fe <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	22c0      	movs	r2, #192	@ 0xc0
 80055b8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	085b      	lsrs	r3, r3, #1
 80055be:	019a      	lsls	r2, r3, #6
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	085b      	lsrs	r3, r3, #1
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2280      	movs	r2, #128	@ 0x80
 80055d2:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80055d4:	e013      	b.n	80055fe <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	22e0      	movs	r2, #224	@ 0xe0
 80055da:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	085b      	lsrs	r3, r3, #1
 80055e0:	019a      	lsls	r2, r3, #6
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	085b      	lsrs	r3, r3, #1
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2280      	movs	r2, #128	@ 0x80
 80055f4:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80055f6:	e002      	b.n	80055fe <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	75fb      	strb	r3, [r7, #23]
      break;
 80055fc:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	2b02      	cmp	r3, #2
 8005602:	d10b      	bne.n	800561c <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d102      	bne.n	8005610 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2210      	movs	r2, #16
 800560e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d102      	bne.n	800561c <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2208      	movs	r2, #8
 800561a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 800561c:	7dfb      	ldrb	r3, [r7, #23]
}
 800561e:	4618      	mov	r0, r3
 8005620:	371c      	adds	r7, #28
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop

0800562c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <SAI_InitPCM+0x2e>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2b02      	cmp	r3, #2
 8005658:	d103      	bne.n	8005662 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2201      	movs	r2, #1
 800565e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005660:	e002      	b.n	8005668 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005674:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800567c:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005690:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b04      	cmp	r3, #4
 8005696:	d103      	bne.n	80056a0 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2201      	movs	r2, #1
 800569c:	645a      	str	r2, [r3, #68]	@ 0x44
 800569e:	e002      	b.n	80056a6 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	220d      	movs	r2, #13
 80056a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	d837      	bhi.n	800571c <SAI_InitPCM+0xf0>
 80056ac:	a201      	add	r2, pc, #4	@ (adr r2, 80056b4 <SAI_InitPCM+0x88>)
 80056ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b2:	bf00      	nop
 80056b4:	080056c5 	.word	0x080056c5
 80056b8:	080056db 	.word	0x080056db
 80056bc:	080056f1 	.word	0x080056f1
 80056c0:	08005707 	.word	0x08005707
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2280      	movs	r2, #128	@ 0x80
 80056c8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	011a      	lsls	r2, r3, #4
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2240      	movs	r2, #64	@ 0x40
 80056d6:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80056d8:	e023      	b.n	8005722 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2280      	movs	r2, #128	@ 0x80
 80056de:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2280      	movs	r2, #128	@ 0x80
 80056ec:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80056ee:	e018      	b.n	8005722 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	22c0      	movs	r2, #192	@ 0xc0
 80056f4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2280      	movs	r2, #128	@ 0x80
 8005702:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005704:	e00d      	b.n	8005722 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	22e0      	movs	r2, #224	@ 0xe0
 800570a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2280      	movs	r2, #128	@ 0x80
 8005718:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800571a:	e002      	b.n	8005722 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	75fb      	strb	r3, [r7, #23]
      break;
 8005720:	bf00      	nop
  }

  return status;
 8005722:	7dfb      	ldrb	r3, [r7, #23]
}
 8005724:	4618      	mov	r0, r3
 8005726:	371c      	adds	r7, #28
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005738:	4b18      	ldr	r3, [pc, #96]	@ (800579c <SAI_Disable+0x6c>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a18      	ldr	r2, [pc, #96]	@ (80057a0 <SAI_Disable+0x70>)
 800573e:	fba2 2303 	umull	r2, r3, r2, r3
 8005742:	0b1b      	lsrs	r3, r3, #12
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005748:	2300      	movs	r3, #0
 800574a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800575a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10a      	bne.n	8005778 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005768:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	72fb      	strb	r3, [r7, #11]
      break;
 8005776:	e009      	b.n	800578c <SAI_Disable+0x5c>
    }
    count--;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	3b01      	subs	r3, #1
 800577c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1e7      	bne.n	800575c <SAI_Disable+0x2c>

  return status;
 800578c:	7afb      	ldrb	r3, [r7, #11]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	20000000 	.word	0x20000000
 80057a0:	95cbec1b 	.word	0x95cbec1b

080057a4 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80057c0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2200      	movs	r2, #0
 80057c8:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f04f 32ff 	mov.w	r2, #4294967295
 80057d2:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057da:	2b20      	cmp	r3, #32
 80057dc:	d00a      	beq.n	80057f4 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f7ff ffa6 	bl	8005730 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 0208 	orr.w	r2, r2, #8
 80057f2:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f7ff fe55 	bl	80054b4 <HAL_SAI_ErrorCallback>
#endif
}
 800580a:	bf00      	nop
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e095      	b.n	8005950 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005828:	2b00      	cmp	r3, #0
 800582a:	d108      	bne.n	800583e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005834:	d009      	beq.n	800584a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	61da      	str	r2, [r3, #28]
 800583c:	e005      	b.n	800584a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b00      	cmp	r3, #0
 800585a:	d106      	bne.n	800586a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f7fb fc83 	bl	8001170 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2202      	movs	r2, #2
 800586e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005880:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800588a:	d902      	bls.n	8005892 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800588c:	2300      	movs	r3, #0
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	e002      	b.n	8005898 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005892:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005896:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80058a0:	d007      	beq.n	80058b2 <HAL_SPI_Init+0xa0>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058aa:	d002      	beq.n	80058b2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	431a      	orrs	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058e0:	431a      	orrs	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058ea:	431a      	orrs	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f4:	ea42 0103 	orr.w	r1, r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058fc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	430a      	orrs	r2, r1
 8005906:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	0c1b      	lsrs	r3, r3, #16
 800590e:	f003 0204 	and.w	r2, r3, #4
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005916:	f003 0310 	and.w	r3, r3, #16
 800591a:	431a      	orrs	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005920:	f003 0308 	and.w	r3, r3, #8
 8005924:	431a      	orrs	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800592e:	ea42 0103 	orr.w	r1, r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b088      	sub	sp, #32
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	603b      	str	r3, [r7, #0]
 8005964:	4613      	mov	r3, r2
 8005966:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005968:	f7fb fef4 	bl	8001754 <HAL_GetTick>
 800596c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800596e:	88fb      	ldrh	r3, [r7, #6]
 8005970:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b01      	cmp	r3, #1
 800597c:	d001      	beq.n	8005982 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800597e:	2302      	movs	r3, #2
 8005980:	e15c      	b.n	8005c3c <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <HAL_SPI_Transmit+0x36>
 8005988:	88fb      	ldrh	r3, [r7, #6]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e154      	b.n	8005c3c <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005998:	2b01      	cmp	r3, #1
 800599a:	d101      	bne.n	80059a0 <HAL_SPI_Transmit+0x48>
 800599c:	2302      	movs	r3, #2
 800599e:	e14d      	b.n	8005c3c <HAL_SPI_Transmit+0x2e4>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2203      	movs	r2, #3
 80059ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	88fa      	ldrh	r2, [r7, #6]
 80059c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	88fa      	ldrh	r2, [r7, #6]
 80059c6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059f2:	d10f      	bne.n	8005a14 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a12:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a1e:	2b40      	cmp	r3, #64	@ 0x40
 8005a20:	d007      	beq.n	8005a32 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a3a:	d952      	bls.n	8005ae2 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <HAL_SPI_Transmit+0xf2>
 8005a44:	8b7b      	ldrh	r3, [r7, #26]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d145      	bne.n	8005ad6 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a4e:	881a      	ldrh	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a5a:	1c9a      	adds	r2, r3, #2
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	3b01      	subs	r3, #1
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a6e:	e032      	b.n	8005ad6 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d112      	bne.n	8005aa4 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a82:	881a      	ldrh	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a8e:	1c9a      	adds	r2, r3, #2
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005aa2:	e018      	b.n	8005ad6 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005aa4:	f7fb fe56 	bl	8001754 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d803      	bhi.n	8005abc <HAL_SPI_Transmit+0x164>
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aba:	d102      	bne.n	8005ac2 <HAL_SPI_Transmit+0x16a>
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d109      	bne.n	8005ad6 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e0b2      	b.n	8005c3c <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1c7      	bne.n	8005a70 <HAL_SPI_Transmit+0x118>
 8005ae0:	e083      	b.n	8005bea <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d002      	beq.n	8005af0 <HAL_SPI_Transmit+0x198>
 8005aea:	8b7b      	ldrh	r3, [r7, #26]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d177      	bne.n	8005be0 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d912      	bls.n	8005b20 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005afe:	881a      	ldrh	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b0a:	1c9a      	adds	r2, r3, #2
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	3b02      	subs	r3, #2
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b1e:	e05f      	b.n	8005be0 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	330c      	adds	r3, #12
 8005b2a:	7812      	ldrb	r2, [r2, #0]
 8005b2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b32:	1c5a      	adds	r2, r3, #1
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005b46:	e04b      	b.n	8005be0 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d12b      	bne.n	8005bae <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d912      	bls.n	8005b86 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b64:	881a      	ldrh	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b70:	1c9a      	adds	r2, r3, #2
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	3b02      	subs	r3, #2
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b84:	e02c      	b.n	8005be0 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	330c      	adds	r3, #12
 8005b90:	7812      	ldrb	r2, [r2, #0]
 8005b92:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005bac:	e018      	b.n	8005be0 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bae:	f7fb fdd1 	bl	8001754 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d803      	bhi.n	8005bc6 <HAL_SPI_Transmit+0x26e>
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc4:	d102      	bne.n	8005bcc <HAL_SPI_Transmit+0x274>
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d109      	bne.n	8005be0 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e02d      	b.n	8005c3c <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1ae      	bne.n	8005b48 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bea:	69fa      	ldr	r2, [r7, #28]
 8005bec:	6839      	ldr	r1, [r7, #0]
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 f946 	bl	8005e80 <SPI_EndRxTxTransaction>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10a      	bne.n	8005c1e <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c08:	2300      	movs	r3, #0
 8005c0a:	617b      	str	r3, [r7, #20]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	617b      	str	r3, [r7, #20]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	617b      	str	r3, [r7, #20]
 8005c1c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e000      	b.n	8005c3c <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
  }
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3720      	adds	r7, #32
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	603b      	str	r3, [r7, #0]
 8005c50:	4613      	mov	r3, r2
 8005c52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c54:	f7fb fd7e 	bl	8001754 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5c:	1a9b      	subs	r3, r3, r2
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	4413      	add	r3, r2
 8005c62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c64:	f7fb fd76 	bl	8001754 <HAL_GetTick>
 8005c68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c6a:	4b39      	ldr	r3, [pc, #228]	@ (8005d50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	015b      	lsls	r3, r3, #5
 8005c70:	0d1b      	lsrs	r3, r3, #20
 8005c72:	69fa      	ldr	r2, [r7, #28]
 8005c74:	fb02 f303 	mul.w	r3, r2, r3
 8005c78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c7a:	e054      	b.n	8005d26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c82:	d050      	beq.n	8005d26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c84:	f7fb fd66 	bl	8001754 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	69fa      	ldr	r2, [r7, #28]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d902      	bls.n	8005c9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d13d      	bne.n	8005d16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ca8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cb2:	d111      	bne.n	8005cd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cbc:	d004      	beq.n	8005cc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cc6:	d107      	bne.n	8005cd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ce0:	d10f      	bne.n	8005d02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005cf0:	601a      	str	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e017      	b.n	8005d46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	3b01      	subs	r3, #1
 8005d24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	4013      	ands	r3, r2
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	bf0c      	ite	eq
 8005d36:	2301      	moveq	r3, #1
 8005d38:	2300      	movne	r3, #0
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	79fb      	ldrb	r3, [r7, #7]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d19b      	bne.n	8005c7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3720      	adds	r7, #32
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	20000000 	.word	0x20000000

08005d54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08a      	sub	sp, #40	@ 0x28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
 8005d60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005d62:	2300      	movs	r3, #0
 8005d64:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005d66:	f7fb fcf5 	bl	8001754 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d6e:	1a9b      	subs	r3, r3, r2
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	4413      	add	r3, r2
 8005d74:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005d76:	f7fb fced 	bl	8001754 <HAL_GetTick>
 8005d7a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	330c      	adds	r3, #12
 8005d82:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005d84:	4b3d      	ldr	r3, [pc, #244]	@ (8005e7c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4413      	add	r3, r2
 8005d8e:	00da      	lsls	r2, r3, #3
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	0d1b      	lsrs	r3, r3, #20
 8005d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d96:	fb02 f303 	mul.w	r3, r2, r3
 8005d9a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005d9c:	e060      	b.n	8005e60 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005da4:	d107      	bne.n	8005db6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d104      	bne.n	8005db6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005db4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dbc:	d050      	beq.n	8005e60 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005dbe:	f7fb fcc9 	bl	8001754 <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d902      	bls.n	8005dd4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d13d      	bne.n	8005e50 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005de2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dec:	d111      	bne.n	8005e12 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005df6:	d004      	beq.n	8005e02 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e00:	d107      	bne.n	8005e12 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e1a:	d10f      	bne.n	8005e3c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e010      	b.n	8005e72 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005e56:	2300      	movs	r3, #0
 8005e58:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689a      	ldr	r2, [r3, #8]
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	4013      	ands	r3, r2
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d196      	bne.n	8005d9e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3728      	adds	r7, #40	@ 0x28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	20000000 	.word	0x20000000

08005e80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af02      	add	r7, sp, #8
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f7ff ff5b 	bl	8005d54 <SPI_WaitFifoStateUntilTimeout>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d007      	beq.n	8005eb4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ea8:	f043 0220 	orr.w	r2, r3, #32
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e027      	b.n	8005f04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	2180      	movs	r1, #128	@ 0x80
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f7ff fec0 	bl	8005c44 <SPI_WaitFlagStateUntilTimeout>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d007      	beq.n	8005eda <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ece:	f043 0220 	orr.w	r2, r3, #32
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e014      	b.n	8005f04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f7ff ff34 	bl	8005d54 <SPI_WaitFifoStateUntilTimeout>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d007      	beq.n	8005f02 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ef6:	f043 0220 	orr.w	r2, r3, #32
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e000      	b.n	8005f04 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d101      	bne.n	8005f1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e049      	b.n	8005fb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d106      	bne.n	8005f38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f841 	bl	8005fba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3304      	adds	r3, #4
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	f000 f9e0 	bl	8006310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005fc2:	bf00      	nop
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
	...

08005fd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d001      	beq.n	8005fe8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e04f      	b.n	8006088 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68da      	ldr	r2, [r3, #12]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f042 0201 	orr.w	r2, r2, #1
 8005ffe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a23      	ldr	r2, [pc, #140]	@ (8006094 <HAL_TIM_Base_Start_IT+0xc4>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d01d      	beq.n	8006046 <HAL_TIM_Base_Start_IT+0x76>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006012:	d018      	beq.n	8006046 <HAL_TIM_Base_Start_IT+0x76>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a1f      	ldr	r2, [pc, #124]	@ (8006098 <HAL_TIM_Base_Start_IT+0xc8>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d013      	beq.n	8006046 <HAL_TIM_Base_Start_IT+0x76>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a1e      	ldr	r2, [pc, #120]	@ (800609c <HAL_TIM_Base_Start_IT+0xcc>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d00e      	beq.n	8006046 <HAL_TIM_Base_Start_IT+0x76>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a1c      	ldr	r2, [pc, #112]	@ (80060a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d009      	beq.n	8006046 <HAL_TIM_Base_Start_IT+0x76>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a1b      	ldr	r2, [pc, #108]	@ (80060a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d004      	beq.n	8006046 <HAL_TIM_Base_Start_IT+0x76>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a19      	ldr	r2, [pc, #100]	@ (80060a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d115      	bne.n	8006072 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	4b17      	ldr	r3, [pc, #92]	@ (80060ac <HAL_TIM_Base_Start_IT+0xdc>)
 800604e:	4013      	ands	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2b06      	cmp	r3, #6
 8006056:	d015      	beq.n	8006084 <HAL_TIM_Base_Start_IT+0xb4>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800605e:	d011      	beq.n	8006084 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 0201 	orr.w	r2, r2, #1
 800606e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006070:	e008      	b.n	8006084 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f042 0201 	orr.w	r2, r2, #1
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	e000      	b.n	8006086 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006084:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	40012c00 	.word	0x40012c00
 8006098:	40000400 	.word	0x40000400
 800609c:	40000800 	.word	0x40000800
 80060a0:	40000c00 	.word	0x40000c00
 80060a4:	40013400 	.word	0x40013400
 80060a8:	40014000 	.word	0x40014000
 80060ac:	00010007 	.word	0x00010007

080060b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d020      	beq.n	8006114 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d01b      	beq.n	8006114 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f06f 0202 	mvn.w	r2, #2
 80060e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	f003 0303 	and.w	r3, r3, #3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f8e9 	bl	80062d2 <HAL_TIM_IC_CaptureCallback>
 8006100:	e005      	b.n	800610e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f8db 	bl	80062be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f8ec 	bl	80062e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f003 0304 	and.w	r3, r3, #4
 800611a:	2b00      	cmp	r3, #0
 800611c:	d020      	beq.n	8006160 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	2b00      	cmp	r3, #0
 8006126:	d01b      	beq.n	8006160 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f06f 0204 	mvn.w	r2, #4
 8006130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2202      	movs	r2, #2
 8006136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f8c3 	bl	80062d2 <HAL_TIM_IC_CaptureCallback>
 800614c:	e005      	b.n	800615a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f8b5 	bl	80062be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f8c6 	bl	80062e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f003 0308 	and.w	r3, r3, #8
 8006166:	2b00      	cmp	r3, #0
 8006168:	d020      	beq.n	80061ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f003 0308 	and.w	r3, r3, #8
 8006170:	2b00      	cmp	r3, #0
 8006172:	d01b      	beq.n	80061ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f06f 0208 	mvn.w	r2, #8
 800617c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2204      	movs	r2, #4
 8006182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	f003 0303 	and.w	r3, r3, #3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f89d 	bl	80062d2 <HAL_TIM_IC_CaptureCallback>
 8006198:	e005      	b.n	80061a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f88f 	bl	80062be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 f8a0 	bl	80062e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f003 0310 	and.w	r3, r3, #16
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d020      	beq.n	80061f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f003 0310 	and.w	r3, r3, #16
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d01b      	beq.n	80061f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f06f 0210 	mvn.w	r2, #16
 80061c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2208      	movs	r2, #8
 80061ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f877 	bl	80062d2 <HAL_TIM_IC_CaptureCallback>
 80061e4:	e005      	b.n	80061f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f869 	bl	80062be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f87a 	bl	80062e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00c      	beq.n	800621c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	2b00      	cmp	r3, #0
 800620a:	d007      	beq.n	800621c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f06f 0201 	mvn.w	r2, #1
 8006214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7fa fe10 	bl	8000e3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006222:	2b00      	cmp	r3, #0
 8006224:	d104      	bne.n	8006230 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00c      	beq.n	800624a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006236:	2b00      	cmp	r3, #0
 8006238:	d007      	beq.n	800624a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f913 	bl	8006470 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00c      	beq.n	800626e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800625a:	2b00      	cmp	r3, #0
 800625c:	d007      	beq.n	800626e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 f90b 	bl	8006484 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00c      	beq.n	8006292 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800627e:	2b00      	cmp	r3, #0
 8006280:	d007      	beq.n	8006292 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800628a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f834 	bl	80062fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	f003 0320 	and.w	r3, r3, #32
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00c      	beq.n	80062b6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f003 0320 	and.w	r3, r3, #32
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d007      	beq.n	80062b6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f06f 0220 	mvn.w	r2, #32
 80062ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 f8d3 	bl	800645c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062b6:	bf00      	nop
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062da:	bf00      	nop
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b083      	sub	sp, #12
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062ee:	bf00      	nop
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006302:	bf00      	nop
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
	...

08006310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a46      	ldr	r2, [pc, #280]	@ (800643c <TIM_Base_SetConfig+0x12c>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d013      	beq.n	8006350 <TIM_Base_SetConfig+0x40>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800632e:	d00f      	beq.n	8006350 <TIM_Base_SetConfig+0x40>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a43      	ldr	r2, [pc, #268]	@ (8006440 <TIM_Base_SetConfig+0x130>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d00b      	beq.n	8006350 <TIM_Base_SetConfig+0x40>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a42      	ldr	r2, [pc, #264]	@ (8006444 <TIM_Base_SetConfig+0x134>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d007      	beq.n	8006350 <TIM_Base_SetConfig+0x40>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a41      	ldr	r2, [pc, #260]	@ (8006448 <TIM_Base_SetConfig+0x138>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d003      	beq.n	8006350 <TIM_Base_SetConfig+0x40>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a40      	ldr	r2, [pc, #256]	@ (800644c <TIM_Base_SetConfig+0x13c>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d108      	bne.n	8006362 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4313      	orrs	r3, r2
 8006360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a35      	ldr	r2, [pc, #212]	@ (800643c <TIM_Base_SetConfig+0x12c>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d01f      	beq.n	80063aa <TIM_Base_SetConfig+0x9a>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006370:	d01b      	beq.n	80063aa <TIM_Base_SetConfig+0x9a>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a32      	ldr	r2, [pc, #200]	@ (8006440 <TIM_Base_SetConfig+0x130>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d017      	beq.n	80063aa <TIM_Base_SetConfig+0x9a>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a31      	ldr	r2, [pc, #196]	@ (8006444 <TIM_Base_SetConfig+0x134>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d013      	beq.n	80063aa <TIM_Base_SetConfig+0x9a>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a30      	ldr	r2, [pc, #192]	@ (8006448 <TIM_Base_SetConfig+0x138>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d00f      	beq.n	80063aa <TIM_Base_SetConfig+0x9a>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a2f      	ldr	r2, [pc, #188]	@ (800644c <TIM_Base_SetConfig+0x13c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d00b      	beq.n	80063aa <TIM_Base_SetConfig+0x9a>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a2e      	ldr	r2, [pc, #184]	@ (8006450 <TIM_Base_SetConfig+0x140>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d007      	beq.n	80063aa <TIM_Base_SetConfig+0x9a>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a2d      	ldr	r2, [pc, #180]	@ (8006454 <TIM_Base_SetConfig+0x144>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d003      	beq.n	80063aa <TIM_Base_SetConfig+0x9a>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a2c      	ldr	r2, [pc, #176]	@ (8006458 <TIM_Base_SetConfig+0x148>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d108      	bne.n	80063bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a16      	ldr	r2, [pc, #88]	@ (800643c <TIM_Base_SetConfig+0x12c>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d00f      	beq.n	8006408 <TIM_Base_SetConfig+0xf8>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a18      	ldr	r2, [pc, #96]	@ (800644c <TIM_Base_SetConfig+0x13c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d00b      	beq.n	8006408 <TIM_Base_SetConfig+0xf8>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a17      	ldr	r2, [pc, #92]	@ (8006450 <TIM_Base_SetConfig+0x140>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d007      	beq.n	8006408 <TIM_Base_SetConfig+0xf8>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a16      	ldr	r2, [pc, #88]	@ (8006454 <TIM_Base_SetConfig+0x144>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d003      	beq.n	8006408 <TIM_Base_SetConfig+0xf8>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a15      	ldr	r2, [pc, #84]	@ (8006458 <TIM_Base_SetConfig+0x148>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d103      	bne.n	8006410 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	691a      	ldr	r2, [r3, #16]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b01      	cmp	r3, #1
 8006420:	d105      	bne.n	800642e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	f023 0201 	bic.w	r2, r3, #1
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	611a      	str	r2, [r3, #16]
  }
}
 800642e:	bf00      	nop
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	40012c00 	.word	0x40012c00
 8006440:	40000400 	.word	0x40000400
 8006444:	40000800 	.word	0x40000800
 8006448:	40000c00 	.word	0x40000c00
 800644c:	40013400 	.word	0x40013400
 8006450:	40014000 	.word	0x40014000
 8006454:	40014400 	.word	0x40014400
 8006458:	40014800 	.word	0x40014800

0800645c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e040      	b.n	800652c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d106      	bne.n	80064c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7fb f888 	bl	80015d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2224      	movs	r2, #36	@ 0x24
 80064c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 0201 	bic.w	r2, r2, #1
 80064d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 ff58 	bl	8007394 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fc9d 	bl	8006e24 <UART_SetConfig>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d101      	bne.n	80064f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e01b      	b.n	800652c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685a      	ldr	r2, [r3, #4]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006502:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689a      	ldr	r2, [r3, #8]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006512:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0201 	orr.w	r2, r2, #1
 8006522:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 ffd7 	bl	80074d8 <UART_CheckIdleState>
 800652a:	4603      	mov	r3, r0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3708      	adds	r7, #8
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b08a      	sub	sp, #40	@ 0x28
 8006538:	af02      	add	r7, sp, #8
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	603b      	str	r3, [r7, #0]
 8006540:	4613      	mov	r3, r2
 8006542:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006548:	2b20      	cmp	r3, #32
 800654a:	d177      	bne.n	800663c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d002      	beq.n	8006558 <HAL_UART_Transmit+0x24>
 8006552:	88fb      	ldrh	r3, [r7, #6]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e070      	b.n	800663e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2221      	movs	r2, #33	@ 0x21
 8006568:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800656a:	f7fb f8f3 	bl	8001754 <HAL_GetTick>
 800656e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	88fa      	ldrh	r2, [r7, #6]
 8006574:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	88fa      	ldrh	r2, [r7, #6]
 800657c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006588:	d108      	bne.n	800659c <HAL_UART_Transmit+0x68>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d104      	bne.n	800659c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006592:	2300      	movs	r3, #0
 8006594:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	61bb      	str	r3, [r7, #24]
 800659a:	e003      	b.n	80065a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065a0:	2300      	movs	r3, #0
 80065a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80065a4:	e02f      	b.n	8006606 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2200      	movs	r2, #0
 80065ae:	2180      	movs	r1, #128	@ 0x80
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f001 f839 	bl	8007628 <UART_WaitOnFlagUntilTimeout>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d004      	beq.n	80065c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2220      	movs	r2, #32
 80065c0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e03b      	b.n	800663e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10b      	bne.n	80065e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	881a      	ldrh	r2, [r3, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065d8:	b292      	uxth	r2, r2
 80065da:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	3302      	adds	r3, #2
 80065e0:	61bb      	str	r3, [r7, #24]
 80065e2:	e007      	b.n	80065f4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	781a      	ldrb	r2, [r3, #0]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	3301      	adds	r3, #1
 80065f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	3b01      	subs	r3, #1
 80065fe:	b29a      	uxth	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800660c:	b29b      	uxth	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1c9      	bne.n	80065a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	2200      	movs	r2, #0
 800661a:	2140      	movs	r1, #64	@ 0x40
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f001 f803 	bl	8007628 <UART_WaitOnFlagUntilTimeout>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d004      	beq.n	8006632 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2220      	movs	r2, #32
 800662c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e005      	b.n	800663e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2220      	movs	r2, #32
 8006636:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006638:	2300      	movs	r3, #0
 800663a:	e000      	b.n	800663e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800663c:	2302      	movs	r3, #2
  }
}
 800663e:	4618      	mov	r0, r3
 8006640:	3720      	adds	r7, #32
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b08a      	sub	sp, #40	@ 0x28
 800664a:	af02      	add	r7, sp, #8
 800664c:	60f8      	str	r0, [r7, #12]
 800664e:	60b9      	str	r1, [r7, #8]
 8006650:	603b      	str	r3, [r7, #0]
 8006652:	4613      	mov	r3, r2
 8006654:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800665c:	2b20      	cmp	r3, #32
 800665e:	f040 80b6 	bne.w	80067ce <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d002      	beq.n	800666e <HAL_UART_Receive+0x28>
 8006668:	88fb      	ldrh	r3, [r7, #6]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e0ae      	b.n	80067d0 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2222      	movs	r2, #34	@ 0x22
 800667e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006688:	f7fb f864 	bl	8001754 <HAL_GetTick>
 800668c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	88fa      	ldrh	r2, [r7, #6]
 8006692:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	88fa      	ldrh	r2, [r7, #6]
 800669a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066a6:	d10e      	bne.n	80066c6 <HAL_UART_Receive+0x80>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d105      	bne.n	80066bc <HAL_UART_Receive+0x76>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80066b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80066ba:	e02d      	b.n	8006718 <HAL_UART_Receive+0xd2>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	22ff      	movs	r2, #255	@ 0xff
 80066c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80066c4:	e028      	b.n	8006718 <HAL_UART_Receive+0xd2>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10d      	bne.n	80066ea <HAL_UART_Receive+0xa4>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d104      	bne.n	80066e0 <HAL_UART_Receive+0x9a>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	22ff      	movs	r2, #255	@ 0xff
 80066da:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80066de:	e01b      	b.n	8006718 <HAL_UART_Receive+0xd2>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	227f      	movs	r2, #127	@ 0x7f
 80066e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80066e8:	e016      	b.n	8006718 <HAL_UART_Receive+0xd2>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066f2:	d10d      	bne.n	8006710 <HAL_UART_Receive+0xca>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d104      	bne.n	8006706 <HAL_UART_Receive+0xc0>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	227f      	movs	r2, #127	@ 0x7f
 8006700:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006704:	e008      	b.n	8006718 <HAL_UART_Receive+0xd2>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	223f      	movs	r2, #63	@ 0x3f
 800670a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800670e:	e003      	b.n	8006718 <HAL_UART_Receive+0xd2>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800671e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006728:	d108      	bne.n	800673c <HAL_UART_Receive+0xf6>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d104      	bne.n	800673c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006732:	2300      	movs	r3, #0
 8006734:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	61bb      	str	r3, [r7, #24]
 800673a:	e003      	b.n	8006744 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006740:	2300      	movs	r3, #0
 8006742:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006744:	e037      	b.n	80067b6 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2200      	movs	r2, #0
 800674e:	2120      	movs	r1, #32
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f000 ff69 	bl	8007628 <UART_WaitOnFlagUntilTimeout>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d005      	beq.n	8006768 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2220      	movs	r2, #32
 8006760:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e033      	b.n	80067d0 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10c      	bne.n	8006788 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006774:	b29a      	uxth	r2, r3
 8006776:	8a7b      	ldrh	r3, [r7, #18]
 8006778:	4013      	ands	r3, r2
 800677a:	b29a      	uxth	r2, r3
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	3302      	adds	r3, #2
 8006784:	61bb      	str	r3, [r7, #24]
 8006786:	e00d      	b.n	80067a4 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800678e:	b29b      	uxth	r3, r3
 8006790:	b2da      	uxtb	r2, r3
 8006792:	8a7b      	ldrh	r3, [r7, #18]
 8006794:	b2db      	uxtb	r3, r3
 8006796:	4013      	ands	r3, r2
 8006798:	b2da      	uxtb	r2, r3
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	3301      	adds	r3, #1
 80067a2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	3b01      	subs	r3, #1
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80067bc:	b29b      	uxth	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1c1      	bne.n	8006746 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80067ca:	2300      	movs	r3, #0
 80067cc:	e000      	b.n	80067d0 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80067ce:	2302      	movs	r3, #2
  }
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3720      	adds	r7, #32
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b0ba      	sub	sp, #232	@ 0xe8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	69db      	ldr	r3, [r3, #28]
 80067e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80067fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006802:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006806:	4013      	ands	r3, r2
 8006808:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800680c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006810:	2b00      	cmp	r3, #0
 8006812:	d115      	bne.n	8006840 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006818:	f003 0320 	and.w	r3, r3, #32
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00f      	beq.n	8006840 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006824:	f003 0320 	and.w	r3, r3, #32
 8006828:	2b00      	cmp	r3, #0
 800682a:	d009      	beq.n	8006840 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 82ca 	beq.w	8006dca <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	4798      	blx	r3
      }
      return;
 800683e:	e2c4      	b.n	8006dca <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006840:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 8117 	beq.w	8006a78 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800684a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	2b00      	cmp	r3, #0
 8006854:	d106      	bne.n	8006864 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006856:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800685a:	4b85      	ldr	r3, [pc, #532]	@ (8006a70 <HAL_UART_IRQHandler+0x298>)
 800685c:	4013      	ands	r3, r2
 800685e:	2b00      	cmp	r3, #0
 8006860:	f000 810a 	beq.w	8006a78 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	d011      	beq.n	8006894 <HAL_UART_IRQHandler+0xbc>
 8006870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00b      	beq.n	8006894 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2201      	movs	r2, #1
 8006882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800688a:	f043 0201 	orr.w	r2, r3, #1
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006898:	f003 0302 	and.w	r3, r3, #2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d011      	beq.n	80068c4 <HAL_UART_IRQHandler+0xec>
 80068a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00b      	beq.n	80068c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2202      	movs	r2, #2
 80068b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068ba:	f043 0204 	orr.w	r2, r3, #4
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d011      	beq.n	80068f4 <HAL_UART_IRQHandler+0x11c>
 80068d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068d4:	f003 0301 	and.w	r3, r3, #1
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00b      	beq.n	80068f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2204      	movs	r2, #4
 80068e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068ea:	f043 0202 	orr.w	r2, r3, #2
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80068f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068f8:	f003 0308 	and.w	r3, r3, #8
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d017      	beq.n	8006930 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006904:	f003 0320 	and.w	r3, r3, #32
 8006908:	2b00      	cmp	r3, #0
 800690a:	d105      	bne.n	8006918 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800690c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006910:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00b      	beq.n	8006930 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2208      	movs	r2, #8
 800691e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006926:	f043 0208 	orr.w	r2, r3, #8
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006934:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006938:	2b00      	cmp	r3, #0
 800693a:	d012      	beq.n	8006962 <HAL_UART_IRQHandler+0x18a>
 800693c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006940:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00c      	beq.n	8006962 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006950:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006958:	f043 0220 	orr.w	r2, r3, #32
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 8230 	beq.w	8006dce <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800696e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006972:	f003 0320 	and.w	r3, r3, #32
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00d      	beq.n	8006996 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800697a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800697e:	f003 0320 	and.w	r3, r3, #32
 8006982:	2b00      	cmp	r3, #0
 8006984:	d007      	beq.n	8006996 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800699c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069aa:	2b40      	cmp	r3, #64	@ 0x40
 80069ac:	d005      	beq.n	80069ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80069ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d04f      	beq.n	8006a5a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fea1 	bl	8007702 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ca:	2b40      	cmp	r3, #64	@ 0x40
 80069cc:	d141      	bne.n	8006a52 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	3308      	adds	r3, #8
 80069d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80069dc:	e853 3f00 	ldrex	r3, [r3]
 80069e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80069e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3308      	adds	r3, #8
 80069f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80069fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80069fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006a0a:	e841 2300 	strex	r3, r2, [r1]
 8006a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1d9      	bne.n	80069ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d013      	beq.n	8006a4a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a26:	4a13      	ldr	r2, [pc, #76]	@ (8006a74 <HAL_UART_IRQHandler+0x29c>)
 8006a28:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fb f874 	bl	8001b1c <HAL_DMA_Abort_IT>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d017      	beq.n	8006a6a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006a44:	4610      	mov	r0, r2
 8006a46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a48:	e00f      	b.n	8006a6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f9d4 	bl	8006df8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a50:	e00b      	b.n	8006a6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f9d0 	bl	8006df8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a58:	e007      	b.n	8006a6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f9cc 	bl	8006df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006a68:	e1b1      	b.n	8006dce <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a6a:	bf00      	nop
    return;
 8006a6c:	e1af      	b.n	8006dce <HAL_UART_IRQHandler+0x5f6>
 8006a6e:	bf00      	nop
 8006a70:	04000120 	.word	0x04000120
 8006a74:	080077cb 	.word	0x080077cb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	f040 816a 	bne.w	8006d56 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a86:	f003 0310 	and.w	r3, r3, #16
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f000 8163 	beq.w	8006d56 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a94:	f003 0310 	and.w	r3, r3, #16
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 815c 	beq.w	8006d56 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2210      	movs	r2, #16
 8006aa4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab0:	2b40      	cmp	r3, #64	@ 0x40
 8006ab2:	f040 80d4 	bne.w	8006c5e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ac2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 80ad 	beq.w	8006c26 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006ad2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	f080 80a5 	bcs.w	8006c26 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ae2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0320 	and.w	r3, r3, #32
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f040 8086 	bne.w	8006c04 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006b26:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006b2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b32:	e841 2300 	strex	r3, r2, [r1]
 8006b36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1da      	bne.n	8006af8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	3308      	adds	r3, #8
 8006b48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b4c:	e853 3f00 	ldrex	r3, [r3]
 8006b50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b54:	f023 0301 	bic.w	r3, r3, #1
 8006b58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3308      	adds	r3, #8
 8006b62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b72:	e841 2300 	strex	r3, r2, [r1]
 8006b76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1e1      	bne.n	8006b42 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3308      	adds	r3, #8
 8006b84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b88:	e853 3f00 	ldrex	r3, [r3]
 8006b8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3308      	adds	r3, #8
 8006b9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ba2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ba4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ba8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006baa:	e841 2300 	strex	r3, r2, [r1]
 8006bae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006bb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1e3      	bne.n	8006b7e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2220      	movs	r2, #32
 8006bba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bcc:	e853 3f00 	ldrex	r3, [r3]
 8006bd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006bd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bd4:	f023 0310 	bic.w	r3, r3, #16
 8006bd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	461a      	mov	r2, r3
 8006be2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006be6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006be8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006bec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bee:	e841 2300 	strex	r3, r2, [r1]
 8006bf2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006bf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1e4      	bne.n	8006bc4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fa ff4e 	bl	8001aa0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f8f4 	bl	8006e0c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006c24:	e0d5      	b.n	8006dd2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006c2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c30:	429a      	cmp	r2, r3
 8006c32:	f040 80ce 	bne.w	8006dd2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0320 	and.w	r3, r3, #32
 8006c42:	2b20      	cmp	r3, #32
 8006c44:	f040 80c5 	bne.w	8006dd2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006c54:	4619      	mov	r1, r3
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f8d8 	bl	8006e0c <HAL_UARTEx_RxEventCallback>
      return;
 8006c5c:	e0b9      	b.n	8006dd2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f000 80ab 	beq.w	8006dd6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006c80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f000 80a6 	beq.w	8006dd6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c92:	e853 3f00 	ldrex	r3, [r3]
 8006c96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006cac:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cb4:	e841 2300 	strex	r3, r2, [r1]
 8006cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1e4      	bne.n	8006c8a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3308      	adds	r3, #8
 8006cc6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cca:	e853 3f00 	ldrex	r3, [r3]
 8006cce:	623b      	str	r3, [r7, #32]
   return(result);
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	f023 0301 	bic.w	r3, r3, #1
 8006cd6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	3308      	adds	r3, #8
 8006ce0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006ce4:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cec:	e841 2300 	strex	r3, r2, [r1]
 8006cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1e3      	bne.n	8006cc0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	e853 3f00 	ldrex	r3, [r3]
 8006d18:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f023 0310 	bic.w	r3, r3, #16
 8006d20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	461a      	mov	r2, r3
 8006d2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006d2e:	61fb      	str	r3, [r7, #28]
 8006d30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d32:	69b9      	ldr	r1, [r7, #24]
 8006d34:	69fa      	ldr	r2, [r7, #28]
 8006d36:	e841 2300 	strex	r3, r2, [r1]
 8006d3a:	617b      	str	r3, [r7, #20]
   return(result);
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1e4      	bne.n	8006d0c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2202      	movs	r2, #2
 8006d46:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f85c 	bl	8006e0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d54:	e03f      	b.n	8006dd6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00e      	beq.n	8006d80 <HAL_UART_IRQHandler+0x5a8>
 8006d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d008      	beq.n	8006d80 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006d76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fd66 	bl	800784a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d7e:	e02d      	b.n	8006ddc <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00e      	beq.n	8006daa <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d008      	beq.n	8006daa <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d01c      	beq.n	8006dda <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	4798      	blx	r3
    }
    return;
 8006da8:	e017      	b.n	8006dda <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d012      	beq.n	8006ddc <HAL_UART_IRQHandler+0x604>
 8006db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00c      	beq.n	8006ddc <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fd17 	bl	80077f6 <UART_EndTransmit_IT>
    return;
 8006dc8:	e008      	b.n	8006ddc <HAL_UART_IRQHandler+0x604>
      return;
 8006dca:	bf00      	nop
 8006dcc:	e006      	b.n	8006ddc <HAL_UART_IRQHandler+0x604>
    return;
 8006dce:	bf00      	nop
 8006dd0:	e004      	b.n	8006ddc <HAL_UART_IRQHandler+0x604>
      return;
 8006dd2:	bf00      	nop
 8006dd4:	e002      	b.n	8006ddc <HAL_UART_IRQHandler+0x604>
      return;
 8006dd6:	bf00      	nop
 8006dd8:	e000      	b.n	8006ddc <HAL_UART_IRQHandler+0x604>
    return;
 8006dda:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006ddc:	37e8      	adds	r7, #232	@ 0xe8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop

08006de4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	460b      	mov	r3, r1
 8006e16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e28:	b08a      	sub	sp, #40	@ 0x28
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	431a      	orrs	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	431a      	orrs	r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	69db      	ldr	r3, [r3, #28]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	4ba4      	ldr	r3, [pc, #656]	@ (80070e4 <UART_SetConfig+0x2c0>)
 8006e54:	4013      	ands	r3, r2
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	6812      	ldr	r2, [r2, #0]
 8006e5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e5c:	430b      	orrs	r3, r1
 8006e5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	68da      	ldr	r2, [r3, #12]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	699b      	ldr	r3, [r3, #24]
 8006e7a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a99      	ldr	r2, [pc, #612]	@ (80070e8 <UART_SetConfig+0x2c4>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d004      	beq.n	8006e90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a90      	ldr	r2, [pc, #576]	@ (80070ec <UART_SetConfig+0x2c8>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d126      	bne.n	8006efc <UART_SetConfig+0xd8>
 8006eae:	4b90      	ldr	r3, [pc, #576]	@ (80070f0 <UART_SetConfig+0x2cc>)
 8006eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eb4:	f003 0303 	and.w	r3, r3, #3
 8006eb8:	2b03      	cmp	r3, #3
 8006eba:	d81b      	bhi.n	8006ef4 <UART_SetConfig+0xd0>
 8006ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8006ec4 <UART_SetConfig+0xa0>)
 8006ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec2:	bf00      	nop
 8006ec4:	08006ed5 	.word	0x08006ed5
 8006ec8:	08006ee5 	.word	0x08006ee5
 8006ecc:	08006edd 	.word	0x08006edd
 8006ed0:	08006eed 	.word	0x08006eed
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eda:	e116      	b.n	800710a <UART_SetConfig+0x2e6>
 8006edc:	2302      	movs	r3, #2
 8006ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ee2:	e112      	b.n	800710a <UART_SetConfig+0x2e6>
 8006ee4:	2304      	movs	r3, #4
 8006ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eea:	e10e      	b.n	800710a <UART_SetConfig+0x2e6>
 8006eec:	2308      	movs	r3, #8
 8006eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ef2:	e10a      	b.n	800710a <UART_SetConfig+0x2e6>
 8006ef4:	2310      	movs	r3, #16
 8006ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006efa:	e106      	b.n	800710a <UART_SetConfig+0x2e6>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a7c      	ldr	r2, [pc, #496]	@ (80070f4 <UART_SetConfig+0x2d0>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d138      	bne.n	8006f78 <UART_SetConfig+0x154>
 8006f06:	4b7a      	ldr	r3, [pc, #488]	@ (80070f0 <UART_SetConfig+0x2cc>)
 8006f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f0c:	f003 030c 	and.w	r3, r3, #12
 8006f10:	2b0c      	cmp	r3, #12
 8006f12:	d82d      	bhi.n	8006f70 <UART_SetConfig+0x14c>
 8006f14:	a201      	add	r2, pc, #4	@ (adr r2, 8006f1c <UART_SetConfig+0xf8>)
 8006f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1a:	bf00      	nop
 8006f1c:	08006f51 	.word	0x08006f51
 8006f20:	08006f71 	.word	0x08006f71
 8006f24:	08006f71 	.word	0x08006f71
 8006f28:	08006f71 	.word	0x08006f71
 8006f2c:	08006f61 	.word	0x08006f61
 8006f30:	08006f71 	.word	0x08006f71
 8006f34:	08006f71 	.word	0x08006f71
 8006f38:	08006f71 	.word	0x08006f71
 8006f3c:	08006f59 	.word	0x08006f59
 8006f40:	08006f71 	.word	0x08006f71
 8006f44:	08006f71 	.word	0x08006f71
 8006f48:	08006f71 	.word	0x08006f71
 8006f4c:	08006f69 	.word	0x08006f69
 8006f50:	2300      	movs	r3, #0
 8006f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f56:	e0d8      	b.n	800710a <UART_SetConfig+0x2e6>
 8006f58:	2302      	movs	r3, #2
 8006f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f5e:	e0d4      	b.n	800710a <UART_SetConfig+0x2e6>
 8006f60:	2304      	movs	r3, #4
 8006f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f66:	e0d0      	b.n	800710a <UART_SetConfig+0x2e6>
 8006f68:	2308      	movs	r3, #8
 8006f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f6e:	e0cc      	b.n	800710a <UART_SetConfig+0x2e6>
 8006f70:	2310      	movs	r3, #16
 8006f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f76:	e0c8      	b.n	800710a <UART_SetConfig+0x2e6>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a5e      	ldr	r2, [pc, #376]	@ (80070f8 <UART_SetConfig+0x2d4>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d125      	bne.n	8006fce <UART_SetConfig+0x1aa>
 8006f82:	4b5b      	ldr	r3, [pc, #364]	@ (80070f0 <UART_SetConfig+0x2cc>)
 8006f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f88:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f8c:	2b30      	cmp	r3, #48	@ 0x30
 8006f8e:	d016      	beq.n	8006fbe <UART_SetConfig+0x19a>
 8006f90:	2b30      	cmp	r3, #48	@ 0x30
 8006f92:	d818      	bhi.n	8006fc6 <UART_SetConfig+0x1a2>
 8006f94:	2b20      	cmp	r3, #32
 8006f96:	d00a      	beq.n	8006fae <UART_SetConfig+0x18a>
 8006f98:	2b20      	cmp	r3, #32
 8006f9a:	d814      	bhi.n	8006fc6 <UART_SetConfig+0x1a2>
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d002      	beq.n	8006fa6 <UART_SetConfig+0x182>
 8006fa0:	2b10      	cmp	r3, #16
 8006fa2:	d008      	beq.n	8006fb6 <UART_SetConfig+0x192>
 8006fa4:	e00f      	b.n	8006fc6 <UART_SetConfig+0x1a2>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fac:	e0ad      	b.n	800710a <UART_SetConfig+0x2e6>
 8006fae:	2302      	movs	r3, #2
 8006fb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fb4:	e0a9      	b.n	800710a <UART_SetConfig+0x2e6>
 8006fb6:	2304      	movs	r3, #4
 8006fb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fbc:	e0a5      	b.n	800710a <UART_SetConfig+0x2e6>
 8006fbe:	2308      	movs	r3, #8
 8006fc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fc4:	e0a1      	b.n	800710a <UART_SetConfig+0x2e6>
 8006fc6:	2310      	movs	r3, #16
 8006fc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fcc:	e09d      	b.n	800710a <UART_SetConfig+0x2e6>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a4a      	ldr	r2, [pc, #296]	@ (80070fc <UART_SetConfig+0x2d8>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d125      	bne.n	8007024 <UART_SetConfig+0x200>
 8006fd8:	4b45      	ldr	r3, [pc, #276]	@ (80070f0 <UART_SetConfig+0x2cc>)
 8006fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fde:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006fe2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006fe4:	d016      	beq.n	8007014 <UART_SetConfig+0x1f0>
 8006fe6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006fe8:	d818      	bhi.n	800701c <UART_SetConfig+0x1f8>
 8006fea:	2b80      	cmp	r3, #128	@ 0x80
 8006fec:	d00a      	beq.n	8007004 <UART_SetConfig+0x1e0>
 8006fee:	2b80      	cmp	r3, #128	@ 0x80
 8006ff0:	d814      	bhi.n	800701c <UART_SetConfig+0x1f8>
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d002      	beq.n	8006ffc <UART_SetConfig+0x1d8>
 8006ff6:	2b40      	cmp	r3, #64	@ 0x40
 8006ff8:	d008      	beq.n	800700c <UART_SetConfig+0x1e8>
 8006ffa:	e00f      	b.n	800701c <UART_SetConfig+0x1f8>
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007002:	e082      	b.n	800710a <UART_SetConfig+0x2e6>
 8007004:	2302      	movs	r3, #2
 8007006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800700a:	e07e      	b.n	800710a <UART_SetConfig+0x2e6>
 800700c:	2304      	movs	r3, #4
 800700e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007012:	e07a      	b.n	800710a <UART_SetConfig+0x2e6>
 8007014:	2308      	movs	r3, #8
 8007016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800701a:	e076      	b.n	800710a <UART_SetConfig+0x2e6>
 800701c:	2310      	movs	r3, #16
 800701e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007022:	e072      	b.n	800710a <UART_SetConfig+0x2e6>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a35      	ldr	r2, [pc, #212]	@ (8007100 <UART_SetConfig+0x2dc>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d12a      	bne.n	8007084 <UART_SetConfig+0x260>
 800702e:	4b30      	ldr	r3, [pc, #192]	@ (80070f0 <UART_SetConfig+0x2cc>)
 8007030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007034:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007038:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800703c:	d01a      	beq.n	8007074 <UART_SetConfig+0x250>
 800703e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007042:	d81b      	bhi.n	800707c <UART_SetConfig+0x258>
 8007044:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007048:	d00c      	beq.n	8007064 <UART_SetConfig+0x240>
 800704a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800704e:	d815      	bhi.n	800707c <UART_SetConfig+0x258>
 8007050:	2b00      	cmp	r3, #0
 8007052:	d003      	beq.n	800705c <UART_SetConfig+0x238>
 8007054:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007058:	d008      	beq.n	800706c <UART_SetConfig+0x248>
 800705a:	e00f      	b.n	800707c <UART_SetConfig+0x258>
 800705c:	2300      	movs	r3, #0
 800705e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007062:	e052      	b.n	800710a <UART_SetConfig+0x2e6>
 8007064:	2302      	movs	r3, #2
 8007066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800706a:	e04e      	b.n	800710a <UART_SetConfig+0x2e6>
 800706c:	2304      	movs	r3, #4
 800706e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007072:	e04a      	b.n	800710a <UART_SetConfig+0x2e6>
 8007074:	2308      	movs	r3, #8
 8007076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800707a:	e046      	b.n	800710a <UART_SetConfig+0x2e6>
 800707c:	2310      	movs	r3, #16
 800707e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007082:	e042      	b.n	800710a <UART_SetConfig+0x2e6>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a17      	ldr	r2, [pc, #92]	@ (80070e8 <UART_SetConfig+0x2c4>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d13a      	bne.n	8007104 <UART_SetConfig+0x2e0>
 800708e:	4b18      	ldr	r3, [pc, #96]	@ (80070f0 <UART_SetConfig+0x2cc>)
 8007090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007094:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007098:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800709c:	d01a      	beq.n	80070d4 <UART_SetConfig+0x2b0>
 800709e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80070a2:	d81b      	bhi.n	80070dc <UART_SetConfig+0x2b8>
 80070a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070a8:	d00c      	beq.n	80070c4 <UART_SetConfig+0x2a0>
 80070aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070ae:	d815      	bhi.n	80070dc <UART_SetConfig+0x2b8>
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d003      	beq.n	80070bc <UART_SetConfig+0x298>
 80070b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070b8:	d008      	beq.n	80070cc <UART_SetConfig+0x2a8>
 80070ba:	e00f      	b.n	80070dc <UART_SetConfig+0x2b8>
 80070bc:	2300      	movs	r3, #0
 80070be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070c2:	e022      	b.n	800710a <UART_SetConfig+0x2e6>
 80070c4:	2302      	movs	r3, #2
 80070c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070ca:	e01e      	b.n	800710a <UART_SetConfig+0x2e6>
 80070cc:	2304      	movs	r3, #4
 80070ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070d2:	e01a      	b.n	800710a <UART_SetConfig+0x2e6>
 80070d4:	2308      	movs	r3, #8
 80070d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070da:	e016      	b.n	800710a <UART_SetConfig+0x2e6>
 80070dc:	2310      	movs	r3, #16
 80070de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070e2:	e012      	b.n	800710a <UART_SetConfig+0x2e6>
 80070e4:	efff69f3 	.word	0xefff69f3
 80070e8:	40008000 	.word	0x40008000
 80070ec:	40013800 	.word	0x40013800
 80070f0:	40021000 	.word	0x40021000
 80070f4:	40004400 	.word	0x40004400
 80070f8:	40004800 	.word	0x40004800
 80070fc:	40004c00 	.word	0x40004c00
 8007100:	40005000 	.word	0x40005000
 8007104:	2310      	movs	r3, #16
 8007106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a9f      	ldr	r2, [pc, #636]	@ (800738c <UART_SetConfig+0x568>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d17a      	bne.n	800720a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007114:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007118:	2b08      	cmp	r3, #8
 800711a:	d824      	bhi.n	8007166 <UART_SetConfig+0x342>
 800711c:	a201      	add	r2, pc, #4	@ (adr r2, 8007124 <UART_SetConfig+0x300>)
 800711e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007122:	bf00      	nop
 8007124:	08007149 	.word	0x08007149
 8007128:	08007167 	.word	0x08007167
 800712c:	08007151 	.word	0x08007151
 8007130:	08007167 	.word	0x08007167
 8007134:	08007157 	.word	0x08007157
 8007138:	08007167 	.word	0x08007167
 800713c:	08007167 	.word	0x08007167
 8007140:	08007167 	.word	0x08007167
 8007144:	0800715f 	.word	0x0800715f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007148:	f7fc fa2e 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 800714c:	61f8      	str	r0, [r7, #28]
        break;
 800714e:	e010      	b.n	8007172 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007150:	4b8f      	ldr	r3, [pc, #572]	@ (8007390 <UART_SetConfig+0x56c>)
 8007152:	61fb      	str	r3, [r7, #28]
        break;
 8007154:	e00d      	b.n	8007172 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007156:	f7fc f98f 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 800715a:	61f8      	str	r0, [r7, #28]
        break;
 800715c:	e009      	b.n	8007172 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800715e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007162:	61fb      	str	r3, [r7, #28]
        break;
 8007164:	e005      	b.n	8007172 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007166:	2300      	movs	r3, #0
 8007168:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007170:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 80fb 	beq.w	8007370 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	685a      	ldr	r2, [r3, #4]
 800717e:	4613      	mov	r3, r2
 8007180:	005b      	lsls	r3, r3, #1
 8007182:	4413      	add	r3, r2
 8007184:	69fa      	ldr	r2, [r7, #28]
 8007186:	429a      	cmp	r2, r3
 8007188:	d305      	bcc.n	8007196 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007190:	69fa      	ldr	r2, [r7, #28]
 8007192:	429a      	cmp	r2, r3
 8007194:	d903      	bls.n	800719e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800719c:	e0e8      	b.n	8007370 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	2200      	movs	r2, #0
 80071a2:	461c      	mov	r4, r3
 80071a4:	4615      	mov	r5, r2
 80071a6:	f04f 0200 	mov.w	r2, #0
 80071aa:	f04f 0300 	mov.w	r3, #0
 80071ae:	022b      	lsls	r3, r5, #8
 80071b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80071b4:	0222      	lsls	r2, r4, #8
 80071b6:	68f9      	ldr	r1, [r7, #12]
 80071b8:	6849      	ldr	r1, [r1, #4]
 80071ba:	0849      	lsrs	r1, r1, #1
 80071bc:	2000      	movs	r0, #0
 80071be:	4688      	mov	r8, r1
 80071c0:	4681      	mov	r9, r0
 80071c2:	eb12 0a08 	adds.w	sl, r2, r8
 80071c6:	eb43 0b09 	adc.w	fp, r3, r9
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	603b      	str	r3, [r7, #0]
 80071d2:	607a      	str	r2, [r7, #4]
 80071d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071d8:	4650      	mov	r0, sl
 80071da:	4659      	mov	r1, fp
 80071dc:	f7f9 f850 	bl	8000280 <__aeabi_uldivmod>
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	4613      	mov	r3, r2
 80071e6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071ee:	d308      	bcc.n	8007202 <UART_SetConfig+0x3de>
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071f6:	d204      	bcs.n	8007202 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	69ba      	ldr	r2, [r7, #24]
 80071fe:	60da      	str	r2, [r3, #12]
 8007200:	e0b6      	b.n	8007370 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007208:	e0b2      	b.n	8007370 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	69db      	ldr	r3, [r3, #28]
 800720e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007212:	d15e      	bne.n	80072d2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007214:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007218:	2b08      	cmp	r3, #8
 800721a:	d828      	bhi.n	800726e <UART_SetConfig+0x44a>
 800721c:	a201      	add	r2, pc, #4	@ (adr r2, 8007224 <UART_SetConfig+0x400>)
 800721e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007222:	bf00      	nop
 8007224:	08007249 	.word	0x08007249
 8007228:	08007251 	.word	0x08007251
 800722c:	08007259 	.word	0x08007259
 8007230:	0800726f 	.word	0x0800726f
 8007234:	0800725f 	.word	0x0800725f
 8007238:	0800726f 	.word	0x0800726f
 800723c:	0800726f 	.word	0x0800726f
 8007240:	0800726f 	.word	0x0800726f
 8007244:	08007267 	.word	0x08007267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007248:	f7fc f9ae 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 800724c:	61f8      	str	r0, [r7, #28]
        break;
 800724e:	e014      	b.n	800727a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007250:	f7fc f9c0 	bl	80035d4 <HAL_RCC_GetPCLK2Freq>
 8007254:	61f8      	str	r0, [r7, #28]
        break;
 8007256:	e010      	b.n	800727a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007258:	4b4d      	ldr	r3, [pc, #308]	@ (8007390 <UART_SetConfig+0x56c>)
 800725a:	61fb      	str	r3, [r7, #28]
        break;
 800725c:	e00d      	b.n	800727a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800725e:	f7fc f90b 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 8007262:	61f8      	str	r0, [r7, #28]
        break;
 8007264:	e009      	b.n	800727a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800726a:	61fb      	str	r3, [r7, #28]
        break;
 800726c:	e005      	b.n	800727a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800726e:	2300      	movs	r3, #0
 8007270:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007278:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d077      	beq.n	8007370 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	005a      	lsls	r2, r3, #1
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	085b      	lsrs	r3, r3, #1
 800728a:	441a      	add	r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	fbb2 f3f3 	udiv	r3, r2, r3
 8007294:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	2b0f      	cmp	r3, #15
 800729a:	d916      	bls.n	80072ca <UART_SetConfig+0x4a6>
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072a2:	d212      	bcs.n	80072ca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	f023 030f 	bic.w	r3, r3, #15
 80072ac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	085b      	lsrs	r3, r3, #1
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	f003 0307 	and.w	r3, r3, #7
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	8afb      	ldrh	r3, [r7, #22]
 80072bc:	4313      	orrs	r3, r2
 80072be:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	8afa      	ldrh	r2, [r7, #22]
 80072c6:	60da      	str	r2, [r3, #12]
 80072c8:	e052      	b.n	8007370 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80072d0:	e04e      	b.n	8007370 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80072d6:	2b08      	cmp	r3, #8
 80072d8:	d827      	bhi.n	800732a <UART_SetConfig+0x506>
 80072da:	a201      	add	r2, pc, #4	@ (adr r2, 80072e0 <UART_SetConfig+0x4bc>)
 80072dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e0:	08007305 	.word	0x08007305
 80072e4:	0800730d 	.word	0x0800730d
 80072e8:	08007315 	.word	0x08007315
 80072ec:	0800732b 	.word	0x0800732b
 80072f0:	0800731b 	.word	0x0800731b
 80072f4:	0800732b 	.word	0x0800732b
 80072f8:	0800732b 	.word	0x0800732b
 80072fc:	0800732b 	.word	0x0800732b
 8007300:	08007323 	.word	0x08007323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007304:	f7fc f950 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 8007308:	61f8      	str	r0, [r7, #28]
        break;
 800730a:	e014      	b.n	8007336 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800730c:	f7fc f962 	bl	80035d4 <HAL_RCC_GetPCLK2Freq>
 8007310:	61f8      	str	r0, [r7, #28]
        break;
 8007312:	e010      	b.n	8007336 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007314:	4b1e      	ldr	r3, [pc, #120]	@ (8007390 <UART_SetConfig+0x56c>)
 8007316:	61fb      	str	r3, [r7, #28]
        break;
 8007318:	e00d      	b.n	8007336 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800731a:	f7fc f8ad 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 800731e:	61f8      	str	r0, [r7, #28]
        break;
 8007320:	e009      	b.n	8007336 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007322:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007326:	61fb      	str	r3, [r7, #28]
        break;
 8007328:	e005      	b.n	8007336 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007334:	bf00      	nop
    }

    if (pclk != 0U)
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d019      	beq.n	8007370 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	085a      	lsrs	r2, r3, #1
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	441a      	add	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	fbb2 f3f3 	udiv	r3, r2, r3
 800734e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	2b0f      	cmp	r3, #15
 8007354:	d909      	bls.n	800736a <UART_SetConfig+0x546>
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800735c:	d205      	bcs.n	800736a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	b29a      	uxth	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	60da      	str	r2, [r3, #12]
 8007368:	e002      	b.n	8007370 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800737c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007380:	4618      	mov	r0, r3
 8007382:	3728      	adds	r7, #40	@ 0x28
 8007384:	46bd      	mov	sp, r7
 8007386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800738a:	bf00      	nop
 800738c:	40008000 	.word	0x40008000
 8007390:	00f42400 	.word	0x00f42400

08007394 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a0:	f003 0308 	and.w	r3, r3, #8
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00a      	beq.n	80073be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	430a      	orrs	r2, r1
 80073bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c2:	f003 0301 	and.w	r3, r3, #1
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00a      	beq.n	80073e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	430a      	orrs	r2, r1
 80073de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e4:	f003 0302 	and.w	r3, r3, #2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00a      	beq.n	8007402 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007406:	f003 0304 	and.w	r3, r3, #4
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00a      	beq.n	8007424 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	430a      	orrs	r2, r1
 8007422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007428:	f003 0310 	and.w	r3, r3, #16
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00a      	beq.n	8007446 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	430a      	orrs	r2, r1
 8007444:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800744a:	f003 0320 	and.w	r3, r3, #32
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00a      	beq.n	8007468 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	430a      	orrs	r2, r1
 8007466:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800746c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007470:	2b00      	cmp	r3, #0
 8007472:	d01a      	beq.n	80074aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	430a      	orrs	r2, r1
 8007488:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800748e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007492:	d10a      	bne.n	80074aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00a      	beq.n	80074cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	430a      	orrs	r2, r1
 80074ca:	605a      	str	r2, [r3, #4]
  }
}
 80074cc:	bf00      	nop
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b098      	sub	sp, #96	@ 0x60
 80074dc:	af02      	add	r7, sp, #8
 80074de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074e8:	f7fa f934 	bl	8001754 <HAL_GetTick>
 80074ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0308 	and.w	r3, r3, #8
 80074f8:	2b08      	cmp	r3, #8
 80074fa:	d12e      	bne.n	800755a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007504:	2200      	movs	r2, #0
 8007506:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f88c 	bl	8007628 <UART_WaitOnFlagUntilTimeout>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d021      	beq.n	800755a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800751e:	e853 3f00 	ldrex	r3, [r3]
 8007522:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007526:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800752a:	653b      	str	r3, [r7, #80]	@ 0x50
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	461a      	mov	r2, r3
 8007532:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007534:	647b      	str	r3, [r7, #68]	@ 0x44
 8007536:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007538:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800753a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800753c:	e841 2300 	strex	r3, r2, [r1]
 8007540:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1e6      	bne.n	8007516 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2220      	movs	r2, #32
 800754c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	e062      	b.n	8007620 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0304 	and.w	r3, r3, #4
 8007564:	2b04      	cmp	r3, #4
 8007566:	d149      	bne.n	80075fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007568:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007570:	2200      	movs	r2, #0
 8007572:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f856 	bl	8007628 <UART_WaitOnFlagUntilTimeout>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d03c      	beq.n	80075fc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758a:	e853 3f00 	ldrex	r3, [r3]
 800758e:	623b      	str	r3, [r7, #32]
   return(result);
 8007590:	6a3b      	ldr	r3, [r7, #32]
 8007592:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007596:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	461a      	mov	r2, r3
 800759e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80075a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075a8:	e841 2300 	strex	r3, r2, [r1]
 80075ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1e6      	bne.n	8007582 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	3308      	adds	r3, #8
 80075ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	e853 3f00 	ldrex	r3, [r3]
 80075c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f023 0301 	bic.w	r3, r3, #1
 80075ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	3308      	adds	r3, #8
 80075d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075d4:	61fa      	str	r2, [r7, #28]
 80075d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d8:	69b9      	ldr	r1, [r7, #24]
 80075da:	69fa      	ldr	r2, [r7, #28]
 80075dc:	e841 2300 	strex	r3, r2, [r1]
 80075e0:	617b      	str	r3, [r7, #20]
   return(result);
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1e5      	bne.n	80075b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2220      	movs	r2, #32
 80075ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e011      	b.n	8007620 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2220      	movs	r2, #32
 8007600:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2220      	movs	r2, #32
 8007606:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3758      	adds	r7, #88	@ 0x58
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	603b      	str	r3, [r7, #0]
 8007634:	4613      	mov	r3, r2
 8007636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007638:	e04f      	b.n	80076da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007640:	d04b      	beq.n	80076da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007642:	f7fa f887 	bl	8001754 <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	69ba      	ldr	r2, [r7, #24]
 800764e:	429a      	cmp	r2, r3
 8007650:	d302      	bcc.n	8007658 <UART_WaitOnFlagUntilTimeout+0x30>
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e04e      	b.n	80076fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0304 	and.w	r3, r3, #4
 8007666:	2b00      	cmp	r3, #0
 8007668:	d037      	beq.n	80076da <UART_WaitOnFlagUntilTimeout+0xb2>
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	2b80      	cmp	r3, #128	@ 0x80
 800766e:	d034      	beq.n	80076da <UART_WaitOnFlagUntilTimeout+0xb2>
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2b40      	cmp	r3, #64	@ 0x40
 8007674:	d031      	beq.n	80076da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	69db      	ldr	r3, [r3, #28]
 800767c:	f003 0308 	and.w	r3, r3, #8
 8007680:	2b08      	cmp	r3, #8
 8007682:	d110      	bne.n	80076a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2208      	movs	r2, #8
 800768a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 f838 	bl	8007702 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2208      	movs	r2, #8
 8007696:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e029      	b.n	80076fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	69db      	ldr	r3, [r3, #28]
 80076ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076b4:	d111      	bne.n	80076da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80076be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 f81e 	bl	8007702 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2220      	movs	r2, #32
 80076ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e00f      	b.n	80076fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	69da      	ldr	r2, [r3, #28]
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	4013      	ands	r3, r2
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	bf0c      	ite	eq
 80076ea:	2301      	moveq	r3, #1
 80076ec:	2300      	movne	r3, #0
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	461a      	mov	r2, r3
 80076f2:	79fb      	ldrb	r3, [r7, #7]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d0a0      	beq.n	800763a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007702:	b480      	push	{r7}
 8007704:	b095      	sub	sp, #84	@ 0x54
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007712:	e853 3f00 	ldrex	r3, [r3]
 8007716:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800771a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800771e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	461a      	mov	r2, r3
 8007726:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007728:	643b      	str	r3, [r7, #64]	@ 0x40
 800772a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800772e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007730:	e841 2300 	strex	r3, r2, [r1]
 8007734:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1e6      	bne.n	800770a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3308      	adds	r3, #8
 8007742:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007744:	6a3b      	ldr	r3, [r7, #32]
 8007746:	e853 3f00 	ldrex	r3, [r3]
 800774a:	61fb      	str	r3, [r7, #28]
   return(result);
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	f023 0301 	bic.w	r3, r3, #1
 8007752:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	3308      	adds	r3, #8
 800775a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800775c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800775e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007760:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007762:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007764:	e841 2300 	strex	r3, r2, [r1]
 8007768:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800776a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1e5      	bne.n	800773c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007774:	2b01      	cmp	r3, #1
 8007776:	d118      	bne.n	80077aa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	e853 3f00 	ldrex	r3, [r3]
 8007784:	60bb      	str	r3, [r7, #8]
   return(result);
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	f023 0310 	bic.w	r3, r3, #16
 800778c:	647b      	str	r3, [r7, #68]	@ 0x44
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	461a      	mov	r2, r3
 8007794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007796:	61bb      	str	r3, [r7, #24]
 8007798:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	6979      	ldr	r1, [r7, #20]
 800779c:	69ba      	ldr	r2, [r7, #24]
 800779e:	e841 2300 	strex	r3, r2, [r1]
 80077a2:	613b      	str	r3, [r7, #16]
   return(result);
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1e6      	bne.n	8007778 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2220      	movs	r2, #32
 80077ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80077be:	bf00      	nop
 80077c0:	3754      	adds	r7, #84	@ 0x54
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b084      	sub	sp, #16
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f7ff fb05 	bl	8006df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077ee:	bf00      	nop
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b088      	sub	sp, #32
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	e853 3f00 	ldrex	r3, [r3]
 800780a:	60bb      	str	r3, [r7, #8]
   return(result);
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007812:	61fb      	str	r3, [r7, #28]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	461a      	mov	r2, r3
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	61bb      	str	r3, [r7, #24]
 800781e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007820:	6979      	ldr	r1, [r7, #20]
 8007822:	69ba      	ldr	r2, [r7, #24]
 8007824:	e841 2300 	strex	r3, r2, [r1]
 8007828:	613b      	str	r3, [r7, #16]
   return(result);
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1e6      	bne.n	80077fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2220      	movs	r2, #32
 8007834:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f7ff fad1 	bl	8006de4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007842:	bf00      	nop
 8007844:	3720      	adds	r7, #32
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800784a:	b480      	push	{r7}
 800784c:	b083      	sub	sp, #12
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007852:	bf00      	nop
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800785e:	b480      	push	{r7}
 8007860:	b085      	sub	sp, #20
 8007862:	af00      	add	r7, sp, #0
 8007864:	4603      	mov	r3, r0
 8007866:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007868:	2300      	movs	r3, #0
 800786a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800786c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007870:	2b84      	cmp	r3, #132	@ 0x84
 8007872:	d005      	beq.n	8007880 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007874:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	4413      	add	r3, r2
 800787c:	3303      	adds	r3, #3
 800787e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007880:	68fb      	ldr	r3, [r7, #12]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007892:	f000 fb8d 	bl	8007fb0 <vTaskStartScheduler>
  
  return osOK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	bd80      	pop	{r7, pc}

0800789c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800789c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800789e:	b089      	sub	sp, #36	@ 0x24
 80078a0:	af04      	add	r7, sp, #16
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d020      	beq.n	80078f0 <osThreadCreate+0x54>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d01c      	beq.n	80078f0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	685c      	ldr	r4, [r3, #4]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	691e      	ldr	r6, [r3, #16]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7ff ffc8 	bl	800785e <makeFreeRtosPriority>
 80078ce:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	695b      	ldr	r3, [r3, #20]
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078d8:	9202      	str	r2, [sp, #8]
 80078da:	9301      	str	r3, [sp, #4]
 80078dc:	9100      	str	r1, [sp, #0]
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	4632      	mov	r2, r6
 80078e2:	4629      	mov	r1, r5
 80078e4:	4620      	mov	r0, r4
 80078e6:	f000 f8ed 	bl	8007ac4 <xTaskCreateStatic>
 80078ea:	4603      	mov	r3, r0
 80078ec:	60fb      	str	r3, [r7, #12]
 80078ee:	e01c      	b.n	800792a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	685c      	ldr	r4, [r3, #4]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078fc:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007904:	4618      	mov	r0, r3
 8007906:	f7ff ffaa 	bl	800785e <makeFreeRtosPriority>
 800790a:	4602      	mov	r2, r0
 800790c:	f107 030c 	add.w	r3, r7, #12
 8007910:	9301      	str	r3, [sp, #4]
 8007912:	9200      	str	r2, [sp, #0]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	4632      	mov	r2, r6
 8007918:	4629      	mov	r1, r5
 800791a:	4620      	mov	r0, r4
 800791c:	f000 f932 	bl	8007b84 <xTaskCreate>
 8007920:	4603      	mov	r3, r0
 8007922:	2b01      	cmp	r3, #1
 8007924:	d001      	beq.n	800792a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007926:	2300      	movs	r3, #0
 8007928:	e000      	b.n	800792c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800792a:	68fb      	ldr	r3, [r7, #12]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3714      	adds	r7, #20
 8007930:	46bd      	mov	sp, r7
 8007932:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007934 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d001      	beq.n	800794a <osDelay+0x16>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	e000      	b.n	800794c <osDelay+0x18>
 800794a:	2301      	movs	r3, #1
 800794c:	4618      	mov	r0, r3
 800794e:	f000 faf9 	bl	8007f44 <vTaskDelay>
  
  return osOK;
 8007952:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007954:	4618      	mov	r0, r3
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f103 0208 	add.w	r2, r3, #8
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f04f 32ff 	mov.w	r2, #4294967295
 8007974:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f103 0208 	add.w	r2, r3, #8
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f103 0208 	add.w	r2, r3, #8
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80079aa:	bf00      	nop
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079b6:	b480      	push	{r7}
 80079b8:	b085      	sub	sp, #20
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	689a      	ldr	r2, [r3, #8]
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	683a      	ldr	r2, [r7, #0]
 80079da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	1c5a      	adds	r2, r3, #1
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	601a      	str	r2, [r3, #0]
}
 80079f2:	bf00      	nop
 80079f4:	3714      	adds	r7, #20
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079fe:	b480      	push	{r7}
 8007a00:	b085      	sub	sp, #20
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a14:	d103      	bne.n	8007a1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	e00c      	b.n	8007a38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	3308      	adds	r3, #8
 8007a22:	60fb      	str	r3, [r7, #12]
 8007a24:	e002      	b.n	8007a2c <vListInsert+0x2e>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d2f6      	bcs.n	8007a26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	685a      	ldr	r2, [r3, #4]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	683a      	ldr	r2, [r7, #0]
 8007a52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	1c5a      	adds	r2, r3, #1
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	601a      	str	r2, [r3, #0]
}
 8007a64:	bf00      	nop
 8007a66:	3714      	adds	r7, #20
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	6892      	ldr	r2, [r2, #8]
 8007a86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	6852      	ldr	r2, [r2, #4]
 8007a90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d103      	bne.n	8007aa4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	689a      	ldr	r2, [r3, #8]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	1e5a      	subs	r2, r3, #1
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b08e      	sub	sp, #56	@ 0x38
 8007ac8:	af04      	add	r7, sp, #16
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
 8007ad0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10b      	bne.n	8007af0 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007adc:	f383 8811 	msr	BASEPRI, r3
 8007ae0:	f3bf 8f6f 	isb	sy
 8007ae4:	f3bf 8f4f 	dsb	sy
 8007ae8:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007aea:	bf00      	nop
 8007aec:	bf00      	nop
 8007aee:	e7fd      	b.n	8007aec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10b      	bne.n	8007b0e <xTaskCreateStatic+0x4a>
	__asm volatile
 8007af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007afa:	f383 8811 	msr	BASEPRI, r3
 8007afe:	f3bf 8f6f 	isb	sy
 8007b02:	f3bf 8f4f 	dsb	sy
 8007b06:	61fb      	str	r3, [r7, #28]
}
 8007b08:	bf00      	nop
 8007b0a:	bf00      	nop
 8007b0c:	e7fd      	b.n	8007b0a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b0e:	23a0      	movs	r3, #160	@ 0xa0
 8007b10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	2ba0      	cmp	r3, #160	@ 0xa0
 8007b16:	d00b      	beq.n	8007b30 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b1c:	f383 8811 	msr	BASEPRI, r3
 8007b20:	f3bf 8f6f 	isb	sy
 8007b24:	f3bf 8f4f 	dsb	sy
 8007b28:	61bb      	str	r3, [r7, #24]
}
 8007b2a:	bf00      	nop
 8007b2c:	bf00      	nop
 8007b2e:	e7fd      	b.n	8007b2c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007b30:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d01e      	beq.n	8007b76 <xTaskCreateStatic+0xb2>
 8007b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d01b      	beq.n	8007b76 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b40:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b46:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b50:	2300      	movs	r3, #0
 8007b52:	9303      	str	r3, [sp, #12]
 8007b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b56:	9302      	str	r3, [sp, #8]
 8007b58:	f107 0314 	add.w	r3, r7, #20
 8007b5c:	9301      	str	r3, [sp, #4]
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	68b9      	ldr	r1, [r7, #8]
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f000 f851 	bl	8007c10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007b70:	f000 f8ee 	bl	8007d50 <prvAddNewTaskToReadyList>
 8007b74:	e001      	b.n	8007b7a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007b76:	2300      	movs	r3, #0
 8007b78:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007b7a:	697b      	ldr	r3, [r7, #20]
	}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3728      	adds	r7, #40	@ 0x28
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b08c      	sub	sp, #48	@ 0x30
 8007b88:	af04      	add	r7, sp, #16
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	603b      	str	r3, [r7, #0]
 8007b90:	4613      	mov	r3, r2
 8007b92:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007b94:	88fb      	ldrh	r3, [r7, #6]
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 ff8d 	bl	8008ab8 <pvPortMalloc>
 8007b9e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00e      	beq.n	8007bc4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ba6:	20a0      	movs	r0, #160	@ 0xa0
 8007ba8:	f000 ff86 	bl	8008ab8 <pvPortMalloc>
 8007bac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d003      	beq.n	8007bbc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	631a      	str	r2, [r3, #48]	@ 0x30
 8007bba:	e005      	b.n	8007bc8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007bbc:	6978      	ldr	r0, [r7, #20]
 8007bbe:	f001 f849 	bl	8008c54 <vPortFree>
 8007bc2:	e001      	b.n	8007bc8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d017      	beq.n	8007bfe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007bd6:	88fa      	ldrh	r2, [r7, #6]
 8007bd8:	2300      	movs	r3, #0
 8007bda:	9303      	str	r3, [sp, #12]
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	9302      	str	r3, [sp, #8]
 8007be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007be2:	9301      	str	r3, [sp, #4]
 8007be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	68b9      	ldr	r1, [r7, #8]
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 f80f 	bl	8007c10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bf2:	69f8      	ldr	r0, [r7, #28]
 8007bf4:	f000 f8ac 	bl	8007d50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	61bb      	str	r3, [r7, #24]
 8007bfc:	e002      	b.n	8007c04 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8007c02:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c04:	69bb      	ldr	r3, [r7, #24]
	}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3720      	adds	r7, #32
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
	...

08007c10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b088      	sub	sp, #32
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
 8007c1c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	4413      	add	r3, r2
 8007c2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	f023 0307 	bic.w	r3, r3, #7
 8007c36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	f003 0307 	and.w	r3, r3, #7
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00b      	beq.n	8007c5a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c46:	f383 8811 	msr	BASEPRI, r3
 8007c4a:	f3bf 8f6f 	isb	sy
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	617b      	str	r3, [r7, #20]
}
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop
 8007c58:	e7fd      	b.n	8007c56 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d01f      	beq.n	8007ca0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c60:	2300      	movs	r3, #0
 8007c62:	61fb      	str	r3, [r7, #28]
 8007c64:	e012      	b.n	8007c8c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	7819      	ldrb	r1, [r3, #0]
 8007c6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	4413      	add	r3, r2
 8007c74:	3334      	adds	r3, #52	@ 0x34
 8007c76:	460a      	mov	r2, r1
 8007c78:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	4413      	add	r3, r2
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d006      	beq.n	8007c94 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	61fb      	str	r3, [r7, #28]
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	2b0f      	cmp	r3, #15
 8007c90:	d9e9      	bls.n	8007c66 <prvInitialiseNewTask+0x56>
 8007c92:	e000      	b.n	8007c96 <prvInitialiseNewTask+0x86>
			{
				break;
 8007c94:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c9e:	e003      	b.n	8007ca8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007caa:	2b06      	cmp	r3, #6
 8007cac:	d901      	bls.n	8007cb2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007cae:	2306      	movs	r3, #6
 8007cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cb6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cbc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc6:	3304      	adds	r3, #4
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7ff fe67 	bl	800799c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd0:	3318      	adds	r3, #24
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7ff fe62 	bl	800799c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cdc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce0:	f1c3 0207 	rsb	r2, r3, #7
 8007ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cec:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d00:	334c      	adds	r3, #76	@ 0x4c
 8007d02:	224c      	movs	r2, #76	@ 0x4c
 8007d04:	2100      	movs	r1, #0
 8007d06:	4618      	mov	r0, r3
 8007d08:	f001 fdee 	bl	80098e8 <memset>
 8007d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d0e:	4a0d      	ldr	r2, [pc, #52]	@ (8007d44 <prvInitialiseNewTask+0x134>)
 8007d10:	651a      	str	r2, [r3, #80]	@ 0x50
 8007d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d14:	4a0c      	ldr	r2, [pc, #48]	@ (8007d48 <prvInitialiseNewTask+0x138>)
 8007d16:	655a      	str	r2, [r3, #84]	@ 0x54
 8007d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1a:	4a0c      	ldr	r2, [pc, #48]	@ (8007d4c <prvInitialiseNewTask+0x13c>)
 8007d1c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	68f9      	ldr	r1, [r7, #12]
 8007d22:	69b8      	ldr	r0, [r7, #24]
 8007d24:	f000 fcba 	bl	800869c <pxPortInitialiseStack>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d2c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d002      	beq.n	8007d3a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d3a:	bf00      	nop
 8007d3c:	3720      	adds	r7, #32
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	20001718 	.word	0x20001718
 8007d48:	20001780 	.word	0x20001780
 8007d4c:	200017e8 	.word	0x200017e8

08007d50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d58:	f000 fdce 	bl	80088f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8007e08 <prvAddNewTaskToReadyList+0xb8>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	3301      	adds	r3, #1
 8007d62:	4a29      	ldr	r2, [pc, #164]	@ (8007e08 <prvAddNewTaskToReadyList+0xb8>)
 8007d64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d66:	4b29      	ldr	r3, [pc, #164]	@ (8007e0c <prvAddNewTaskToReadyList+0xbc>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d109      	bne.n	8007d82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d6e:	4a27      	ldr	r2, [pc, #156]	@ (8007e0c <prvAddNewTaskToReadyList+0xbc>)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d74:	4b24      	ldr	r3, [pc, #144]	@ (8007e08 <prvAddNewTaskToReadyList+0xb8>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d110      	bne.n	8007d9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d7c:	f000 fb64 	bl	8008448 <prvInitialiseTaskLists>
 8007d80:	e00d      	b.n	8007d9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d82:	4b23      	ldr	r3, [pc, #140]	@ (8007e10 <prvAddNewTaskToReadyList+0xc0>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d109      	bne.n	8007d9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d8a:	4b20      	ldr	r3, [pc, #128]	@ (8007e0c <prvAddNewTaskToReadyList+0xbc>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d802      	bhi.n	8007d9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d98:	4a1c      	ldr	r2, [pc, #112]	@ (8007e0c <prvAddNewTaskToReadyList+0xbc>)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8007e14 <prvAddNewTaskToReadyList+0xc4>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	3301      	adds	r3, #1
 8007da4:	4a1b      	ldr	r2, [pc, #108]	@ (8007e14 <prvAddNewTaskToReadyList+0xc4>)
 8007da6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dac:	2201      	movs	r2, #1
 8007dae:	409a      	lsls	r2, r3
 8007db0:	4b19      	ldr	r3, [pc, #100]	@ (8007e18 <prvAddNewTaskToReadyList+0xc8>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	4a18      	ldr	r2, [pc, #96]	@ (8007e18 <prvAddNewTaskToReadyList+0xc8>)
 8007db8:	6013      	str	r3, [r2, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	4413      	add	r3, r2
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4a15      	ldr	r2, [pc, #84]	@ (8007e1c <prvAddNewTaskToReadyList+0xcc>)
 8007dc8:	441a      	add	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	3304      	adds	r3, #4
 8007dce:	4619      	mov	r1, r3
 8007dd0:	4610      	mov	r0, r2
 8007dd2:	f7ff fdf0 	bl	80079b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007dd6:	f000 fdc1 	bl	800895c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007dda:	4b0d      	ldr	r3, [pc, #52]	@ (8007e10 <prvAddNewTaskToReadyList+0xc0>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00e      	beq.n	8007e00 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007de2:	4b0a      	ldr	r3, [pc, #40]	@ (8007e0c <prvAddNewTaskToReadyList+0xbc>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d207      	bcs.n	8007e00 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007df0:	4b0b      	ldr	r3, [pc, #44]	@ (8007e20 <prvAddNewTaskToReadyList+0xd0>)
 8007df2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007df6:	601a      	str	r2, [r3, #0]
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e00:	bf00      	nop
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	20000b0c 	.word	0x20000b0c
 8007e0c:	20000a0c 	.word	0x20000a0c
 8007e10:	20000b18 	.word	0x20000b18
 8007e14:	20000b28 	.word	0x20000b28
 8007e18:	20000b14 	.word	0x20000b14
 8007e1c:	20000a10 	.word	0x20000a10
 8007e20:	e000ed04 	.word	0xe000ed04

08007e24 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007e2c:	f000 fd64 	bl	80088f8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d102      	bne.n	8007e3c <vTaskDelete+0x18>
 8007e36:	4b39      	ldr	r3, [pc, #228]	@ (8007f1c <vTaskDelete+0xf8>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	e000      	b.n	8007e3e <vTaskDelete+0x1a>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	3304      	adds	r3, #4
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7ff fe13 	bl	8007a70 <uxListRemove>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d115      	bne.n	8007e7c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e54:	4932      	ldr	r1, [pc, #200]	@ (8007f20 <vTaskDelete+0xfc>)
 8007e56:	4613      	mov	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	440b      	add	r3, r1
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d10a      	bne.n	8007e7c <vTaskDelete+0x58>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e70:	43da      	mvns	r2, r3
 8007e72:	4b2c      	ldr	r3, [pc, #176]	@ (8007f24 <vTaskDelete+0x100>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4013      	ands	r3, r2
 8007e78:	4a2a      	ldr	r2, [pc, #168]	@ (8007f24 <vTaskDelete+0x100>)
 8007e7a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d004      	beq.n	8007e8e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	3318      	adds	r3, #24
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7ff fdf1 	bl	8007a70 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007e8e:	4b26      	ldr	r3, [pc, #152]	@ (8007f28 <vTaskDelete+0x104>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3301      	adds	r3, #1
 8007e94:	4a24      	ldr	r2, [pc, #144]	@ (8007f28 <vTaskDelete+0x104>)
 8007e96:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007e98:	4b20      	ldr	r3, [pc, #128]	@ (8007f1c <vTaskDelete+0xf8>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d10b      	bne.n	8007eba <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	3304      	adds	r3, #4
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	4820      	ldr	r0, [pc, #128]	@ (8007f2c <vTaskDelete+0x108>)
 8007eaa:	f7ff fd84 	bl	80079b6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007eae:	4b20      	ldr	r3, [pc, #128]	@ (8007f30 <vTaskDelete+0x10c>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	4a1e      	ldr	r2, [pc, #120]	@ (8007f30 <vTaskDelete+0x10c>)
 8007eb6:	6013      	str	r3, [r2, #0]
 8007eb8:	e009      	b.n	8007ece <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007eba:	4b1e      	ldr	r3, [pc, #120]	@ (8007f34 <vTaskDelete+0x110>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	4a1c      	ldr	r2, [pc, #112]	@ (8007f34 <vTaskDelete+0x110>)
 8007ec2:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f000 fb2d 	bl	8008524 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007eca:	f000 fb61 	bl	8008590 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8007ece:	f000 fd45 	bl	800895c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007ed2:	4b19      	ldr	r3, [pc, #100]	@ (8007f38 <vTaskDelete+0x114>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d01c      	beq.n	8007f14 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 8007eda:	4b10      	ldr	r3, [pc, #64]	@ (8007f1c <vTaskDelete+0xf8>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d117      	bne.n	8007f14 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007ee4:	4b15      	ldr	r3, [pc, #84]	@ (8007f3c <vTaskDelete+0x118>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00b      	beq.n	8007f04 <vTaskDelete+0xe0>
	__asm volatile
 8007eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	60bb      	str	r3, [r7, #8]
}
 8007efe:	bf00      	nop
 8007f00:	bf00      	nop
 8007f02:	e7fd      	b.n	8007f00 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8007f04:	4b0e      	ldr	r3, [pc, #56]	@ (8007f40 <vTaskDelete+0x11c>)
 8007f06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f0a:	601a      	str	r2, [r3, #0]
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007f14:	bf00      	nop
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	20000a0c 	.word	0x20000a0c
 8007f20:	20000a10 	.word	0x20000a10
 8007f24:	20000b14 	.word	0x20000b14
 8007f28:	20000b28 	.word	0x20000b28
 8007f2c:	20000ae0 	.word	0x20000ae0
 8007f30:	20000af4 	.word	0x20000af4
 8007f34:	20000b0c 	.word	0x20000b0c
 8007f38:	20000b18 	.word	0x20000b18
 8007f3c:	20000b34 	.word	0x20000b34
 8007f40:	e000ed04 	.word	0xe000ed04

08007f44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d018      	beq.n	8007f88 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007f56:	4b14      	ldr	r3, [pc, #80]	@ (8007fa8 <vTaskDelay+0x64>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00b      	beq.n	8007f76 <vTaskDelay+0x32>
	__asm volatile
 8007f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f62:	f383 8811 	msr	BASEPRI, r3
 8007f66:	f3bf 8f6f 	isb	sy
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	60bb      	str	r3, [r7, #8]
}
 8007f70:	bf00      	nop
 8007f72:	bf00      	nop
 8007f74:	e7fd      	b.n	8007f72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007f76:	f000 f885 	bl	8008084 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fb27 	bl	80085d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007f82:	f000 f88d 	bl	80080a0 <xTaskResumeAll>
 8007f86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d107      	bne.n	8007f9e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007f8e:	4b07      	ldr	r3, [pc, #28]	@ (8007fac <vTaskDelay+0x68>)
 8007f90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f94:	601a      	str	r2, [r3, #0]
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f9e:	bf00      	nop
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	20000b34 	.word	0x20000b34
 8007fac:	e000ed04 	.word	0xe000ed04

08007fb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b08a      	sub	sp, #40	@ 0x28
 8007fb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007fbe:	463a      	mov	r2, r7
 8007fc0:	1d39      	adds	r1, r7, #4
 8007fc2:	f107 0308 	add.w	r3, r7, #8
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7f8 faf8 	bl	80005bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007fcc:	6839      	ldr	r1, [r7, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	9202      	str	r2, [sp, #8]
 8007fd4:	9301      	str	r3, [sp, #4]
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	2300      	movs	r3, #0
 8007fdc:	460a      	mov	r2, r1
 8007fde:	4921      	ldr	r1, [pc, #132]	@ (8008064 <vTaskStartScheduler+0xb4>)
 8007fe0:	4821      	ldr	r0, [pc, #132]	@ (8008068 <vTaskStartScheduler+0xb8>)
 8007fe2:	f7ff fd6f 	bl	8007ac4 <xTaskCreateStatic>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	4a20      	ldr	r2, [pc, #128]	@ (800806c <vTaskStartScheduler+0xbc>)
 8007fea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007fec:	4b1f      	ldr	r3, [pc, #124]	@ (800806c <vTaskStartScheduler+0xbc>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d002      	beq.n	8007ffa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	617b      	str	r3, [r7, #20]
 8007ff8:	e001      	b.n	8007ffe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d11b      	bne.n	800803c <vTaskStartScheduler+0x8c>
	__asm volatile
 8008004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008008:	f383 8811 	msr	BASEPRI, r3
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	613b      	str	r3, [r7, #16]
}
 8008016:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008018:	4b15      	ldr	r3, [pc, #84]	@ (8008070 <vTaskStartScheduler+0xc0>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	334c      	adds	r3, #76	@ 0x4c
 800801e:	4a15      	ldr	r2, [pc, #84]	@ (8008074 <vTaskStartScheduler+0xc4>)
 8008020:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008022:	4b15      	ldr	r3, [pc, #84]	@ (8008078 <vTaskStartScheduler+0xc8>)
 8008024:	f04f 32ff 	mov.w	r2, #4294967295
 8008028:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800802a:	4b14      	ldr	r3, [pc, #80]	@ (800807c <vTaskStartScheduler+0xcc>)
 800802c:	2201      	movs	r2, #1
 800802e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008030:	4b13      	ldr	r3, [pc, #76]	@ (8008080 <vTaskStartScheduler+0xd0>)
 8008032:	2200      	movs	r2, #0
 8008034:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008036:	f000 fbbb 	bl	80087b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800803a:	e00f      	b.n	800805c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008042:	d10b      	bne.n	800805c <vTaskStartScheduler+0xac>
	__asm volatile
 8008044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008048:	f383 8811 	msr	BASEPRI, r3
 800804c:	f3bf 8f6f 	isb	sy
 8008050:	f3bf 8f4f 	dsb	sy
 8008054:	60fb      	str	r3, [r7, #12]
}
 8008056:	bf00      	nop
 8008058:	bf00      	nop
 800805a:	e7fd      	b.n	8008058 <vTaskStartScheduler+0xa8>
}
 800805c:	bf00      	nop
 800805e:	3718      	adds	r7, #24
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	0800a724 	.word	0x0800a724
 8008068:	08008419 	.word	0x08008419
 800806c:	20000b30 	.word	0x20000b30
 8008070:	20000a0c 	.word	0x20000a0c
 8008074:	20000028 	.word	0x20000028
 8008078:	20000b2c 	.word	0x20000b2c
 800807c:	20000b18 	.word	0x20000b18
 8008080:	20000b10 	.word	0x20000b10

08008084 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008084:	b480      	push	{r7}
 8008086:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008088:	4b04      	ldr	r3, [pc, #16]	@ (800809c <vTaskSuspendAll+0x18>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	3301      	adds	r3, #1
 800808e:	4a03      	ldr	r2, [pc, #12]	@ (800809c <vTaskSuspendAll+0x18>)
 8008090:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008092:	bf00      	nop
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr
 800809c:	20000b34 	.word	0x20000b34

080080a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80080a6:	2300      	movs	r3, #0
 80080a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80080aa:	2300      	movs	r3, #0
 80080ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80080ae:	4b42      	ldr	r3, [pc, #264]	@ (80081b8 <xTaskResumeAll+0x118>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10b      	bne.n	80080ce <xTaskResumeAll+0x2e>
	__asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	603b      	str	r3, [r7, #0]
}
 80080c8:	bf00      	nop
 80080ca:	bf00      	nop
 80080cc:	e7fd      	b.n	80080ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80080ce:	f000 fc13 	bl	80088f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80080d2:	4b39      	ldr	r3, [pc, #228]	@ (80081b8 <xTaskResumeAll+0x118>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	3b01      	subs	r3, #1
 80080d8:	4a37      	ldr	r2, [pc, #220]	@ (80081b8 <xTaskResumeAll+0x118>)
 80080da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080dc:	4b36      	ldr	r3, [pc, #216]	@ (80081b8 <xTaskResumeAll+0x118>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d161      	bne.n	80081a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80080e4:	4b35      	ldr	r3, [pc, #212]	@ (80081bc <xTaskResumeAll+0x11c>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d05d      	beq.n	80081a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080ec:	e02e      	b.n	800814c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080ee:	4b34      	ldr	r3, [pc, #208]	@ (80081c0 <xTaskResumeAll+0x120>)
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	3318      	adds	r3, #24
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7ff fcb8 	bl	8007a70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	3304      	adds	r3, #4
 8008104:	4618      	mov	r0, r3
 8008106:	f7ff fcb3 	bl	8007a70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800810e:	2201      	movs	r2, #1
 8008110:	409a      	lsls	r2, r3
 8008112:	4b2c      	ldr	r3, [pc, #176]	@ (80081c4 <xTaskResumeAll+0x124>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4313      	orrs	r3, r2
 8008118:	4a2a      	ldr	r2, [pc, #168]	@ (80081c4 <xTaskResumeAll+0x124>)
 800811a:	6013      	str	r3, [r2, #0]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008120:	4613      	mov	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4413      	add	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4a27      	ldr	r2, [pc, #156]	@ (80081c8 <xTaskResumeAll+0x128>)
 800812a:	441a      	add	r2, r3
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	3304      	adds	r3, #4
 8008130:	4619      	mov	r1, r3
 8008132:	4610      	mov	r0, r2
 8008134:	f7ff fc3f 	bl	80079b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800813c:	4b23      	ldr	r3, [pc, #140]	@ (80081cc <xTaskResumeAll+0x12c>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008142:	429a      	cmp	r2, r3
 8008144:	d302      	bcc.n	800814c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008146:	4b22      	ldr	r3, [pc, #136]	@ (80081d0 <xTaskResumeAll+0x130>)
 8008148:	2201      	movs	r2, #1
 800814a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800814c:	4b1c      	ldr	r3, [pc, #112]	@ (80081c0 <xTaskResumeAll+0x120>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1cc      	bne.n	80080ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d001      	beq.n	800815e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800815a:	f000 fa19 	bl	8008590 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800815e:	4b1d      	ldr	r3, [pc, #116]	@ (80081d4 <xTaskResumeAll+0x134>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d010      	beq.n	800818c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800816a:	f000 f837 	bl	80081dc <xTaskIncrementTick>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d002      	beq.n	800817a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008174:	4b16      	ldr	r3, [pc, #88]	@ (80081d0 <xTaskResumeAll+0x130>)
 8008176:	2201      	movs	r2, #1
 8008178:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	3b01      	subs	r3, #1
 800817e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1f1      	bne.n	800816a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008186:	4b13      	ldr	r3, [pc, #76]	@ (80081d4 <xTaskResumeAll+0x134>)
 8008188:	2200      	movs	r2, #0
 800818a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800818c:	4b10      	ldr	r3, [pc, #64]	@ (80081d0 <xTaskResumeAll+0x130>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d009      	beq.n	80081a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008194:	2301      	movs	r3, #1
 8008196:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008198:	4b0f      	ldr	r3, [pc, #60]	@ (80081d8 <xTaskResumeAll+0x138>)
 800819a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800819e:	601a      	str	r2, [r3, #0]
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081a8:	f000 fbd8 	bl	800895c <vPortExitCritical>

	return xAlreadyYielded;
 80081ac:	68bb      	ldr	r3, [r7, #8]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	20000b34 	.word	0x20000b34
 80081bc:	20000b0c 	.word	0x20000b0c
 80081c0:	20000acc 	.word	0x20000acc
 80081c4:	20000b14 	.word	0x20000b14
 80081c8:	20000a10 	.word	0x20000a10
 80081cc:	20000a0c 	.word	0x20000a0c
 80081d0:	20000b20 	.word	0x20000b20
 80081d4:	20000b1c 	.word	0x20000b1c
 80081d8:	e000ed04 	.word	0xe000ed04

080081dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b086      	sub	sp, #24
 80081e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80081e2:	2300      	movs	r3, #0
 80081e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081e6:	4b4f      	ldr	r3, [pc, #316]	@ (8008324 <xTaskIncrementTick+0x148>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f040 808f 	bne.w	800830e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80081f0:	4b4d      	ldr	r3, [pc, #308]	@ (8008328 <xTaskIncrementTick+0x14c>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	3301      	adds	r3, #1
 80081f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80081f8:	4a4b      	ldr	r2, [pc, #300]	@ (8008328 <xTaskIncrementTick+0x14c>)
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d121      	bne.n	8008248 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008204:	4b49      	ldr	r3, [pc, #292]	@ (800832c <xTaskIncrementTick+0x150>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00b      	beq.n	8008226 <xTaskIncrementTick+0x4a>
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	603b      	str	r3, [r7, #0]
}
 8008220:	bf00      	nop
 8008222:	bf00      	nop
 8008224:	e7fd      	b.n	8008222 <xTaskIncrementTick+0x46>
 8008226:	4b41      	ldr	r3, [pc, #260]	@ (800832c <xTaskIncrementTick+0x150>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	60fb      	str	r3, [r7, #12]
 800822c:	4b40      	ldr	r3, [pc, #256]	@ (8008330 <xTaskIncrementTick+0x154>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a3e      	ldr	r2, [pc, #248]	@ (800832c <xTaskIncrementTick+0x150>)
 8008232:	6013      	str	r3, [r2, #0]
 8008234:	4a3e      	ldr	r2, [pc, #248]	@ (8008330 <xTaskIncrementTick+0x154>)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6013      	str	r3, [r2, #0]
 800823a:	4b3e      	ldr	r3, [pc, #248]	@ (8008334 <xTaskIncrementTick+0x158>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3301      	adds	r3, #1
 8008240:	4a3c      	ldr	r2, [pc, #240]	@ (8008334 <xTaskIncrementTick+0x158>)
 8008242:	6013      	str	r3, [r2, #0]
 8008244:	f000 f9a4 	bl	8008590 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008248:	4b3b      	ldr	r3, [pc, #236]	@ (8008338 <xTaskIncrementTick+0x15c>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	429a      	cmp	r2, r3
 8008250:	d348      	bcc.n	80082e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008252:	4b36      	ldr	r3, [pc, #216]	@ (800832c <xTaskIncrementTick+0x150>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d104      	bne.n	8008266 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800825c:	4b36      	ldr	r3, [pc, #216]	@ (8008338 <xTaskIncrementTick+0x15c>)
 800825e:	f04f 32ff 	mov.w	r2, #4294967295
 8008262:	601a      	str	r2, [r3, #0]
					break;
 8008264:	e03e      	b.n	80082e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008266:	4b31      	ldr	r3, [pc, #196]	@ (800832c <xTaskIncrementTick+0x150>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	429a      	cmp	r2, r3
 800827c:	d203      	bcs.n	8008286 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800827e:	4a2e      	ldr	r2, [pc, #184]	@ (8008338 <xTaskIncrementTick+0x15c>)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008284:	e02e      	b.n	80082e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	3304      	adds	r3, #4
 800828a:	4618      	mov	r0, r3
 800828c:	f7ff fbf0 	bl	8007a70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008294:	2b00      	cmp	r3, #0
 8008296:	d004      	beq.n	80082a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	3318      	adds	r3, #24
 800829c:	4618      	mov	r0, r3
 800829e:	f7ff fbe7 	bl	8007a70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a6:	2201      	movs	r2, #1
 80082a8:	409a      	lsls	r2, r3
 80082aa:	4b24      	ldr	r3, [pc, #144]	@ (800833c <xTaskIncrementTick+0x160>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	4a22      	ldr	r2, [pc, #136]	@ (800833c <xTaskIncrementTick+0x160>)
 80082b2:	6013      	str	r3, [r2, #0]
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082b8:	4613      	mov	r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4413      	add	r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4a1f      	ldr	r2, [pc, #124]	@ (8008340 <xTaskIncrementTick+0x164>)
 80082c2:	441a      	add	r2, r3
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	3304      	adds	r3, #4
 80082c8:	4619      	mov	r1, r3
 80082ca:	4610      	mov	r0, r2
 80082cc:	f7ff fb73 	bl	80079b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082d4:	4b1b      	ldr	r3, [pc, #108]	@ (8008344 <xTaskIncrementTick+0x168>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082da:	429a      	cmp	r2, r3
 80082dc:	d3b9      	bcc.n	8008252 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80082de:	2301      	movs	r3, #1
 80082e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082e2:	e7b6      	b.n	8008252 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082e4:	4b17      	ldr	r3, [pc, #92]	@ (8008344 <xTaskIncrementTick+0x168>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ea:	4915      	ldr	r1, [pc, #84]	@ (8008340 <xTaskIncrementTick+0x164>)
 80082ec:	4613      	mov	r3, r2
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4413      	add	r3, r2
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	440b      	add	r3, r1
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d901      	bls.n	8008300 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80082fc:	2301      	movs	r3, #1
 80082fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008300:	4b11      	ldr	r3, [pc, #68]	@ (8008348 <xTaskIncrementTick+0x16c>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d007      	beq.n	8008318 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008308:	2301      	movs	r3, #1
 800830a:	617b      	str	r3, [r7, #20]
 800830c:	e004      	b.n	8008318 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800830e:	4b0f      	ldr	r3, [pc, #60]	@ (800834c <xTaskIncrementTick+0x170>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	3301      	adds	r3, #1
 8008314:	4a0d      	ldr	r2, [pc, #52]	@ (800834c <xTaskIncrementTick+0x170>)
 8008316:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008318:	697b      	ldr	r3, [r7, #20]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3718      	adds	r7, #24
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	20000b34 	.word	0x20000b34
 8008328:	20000b10 	.word	0x20000b10
 800832c:	20000ac4 	.word	0x20000ac4
 8008330:	20000ac8 	.word	0x20000ac8
 8008334:	20000b24 	.word	0x20000b24
 8008338:	20000b2c 	.word	0x20000b2c
 800833c:	20000b14 	.word	0x20000b14
 8008340:	20000a10 	.word	0x20000a10
 8008344:	20000a0c 	.word	0x20000a0c
 8008348:	20000b20 	.word	0x20000b20
 800834c:	20000b1c 	.word	0x20000b1c

08008350 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008350:	b480      	push	{r7}
 8008352:	b087      	sub	sp, #28
 8008354:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008356:	4b2a      	ldr	r3, [pc, #168]	@ (8008400 <vTaskSwitchContext+0xb0>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d003      	beq.n	8008366 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800835e:	4b29      	ldr	r3, [pc, #164]	@ (8008404 <vTaskSwitchContext+0xb4>)
 8008360:	2201      	movs	r2, #1
 8008362:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008364:	e045      	b.n	80083f2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8008366:	4b27      	ldr	r3, [pc, #156]	@ (8008404 <vTaskSwitchContext+0xb4>)
 8008368:	2200      	movs	r2, #0
 800836a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800836c:	4b26      	ldr	r3, [pc, #152]	@ (8008408 <vTaskSwitchContext+0xb8>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	fab3 f383 	clz	r3, r3
 8008378:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800837a:	7afb      	ldrb	r3, [r7, #11]
 800837c:	f1c3 031f 	rsb	r3, r3, #31
 8008380:	617b      	str	r3, [r7, #20]
 8008382:	4922      	ldr	r1, [pc, #136]	@ (800840c <vTaskSwitchContext+0xbc>)
 8008384:	697a      	ldr	r2, [r7, #20]
 8008386:	4613      	mov	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	4413      	add	r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	440b      	add	r3, r1
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d10b      	bne.n	80083ae <vTaskSwitchContext+0x5e>
	__asm volatile
 8008396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800839a:	f383 8811 	msr	BASEPRI, r3
 800839e:	f3bf 8f6f 	isb	sy
 80083a2:	f3bf 8f4f 	dsb	sy
 80083a6:	607b      	str	r3, [r7, #4]
}
 80083a8:	bf00      	nop
 80083aa:	bf00      	nop
 80083ac:	e7fd      	b.n	80083aa <vTaskSwitchContext+0x5a>
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	4613      	mov	r3, r2
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	4413      	add	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4a14      	ldr	r2, [pc, #80]	@ (800840c <vTaskSwitchContext+0xbc>)
 80083ba:	4413      	add	r3, r2
 80083bc:	613b      	str	r3, [r7, #16]
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	685a      	ldr	r2, [r3, #4]
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	605a      	str	r2, [r3, #4]
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	3308      	adds	r3, #8
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d104      	bne.n	80083de <vTaskSwitchContext+0x8e>
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	685a      	ldr	r2, [r3, #4]
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	605a      	str	r2, [r3, #4]
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	4a0a      	ldr	r2, [pc, #40]	@ (8008410 <vTaskSwitchContext+0xc0>)
 80083e6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80083e8:	4b09      	ldr	r3, [pc, #36]	@ (8008410 <vTaskSwitchContext+0xc0>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	334c      	adds	r3, #76	@ 0x4c
 80083ee:	4a09      	ldr	r2, [pc, #36]	@ (8008414 <vTaskSwitchContext+0xc4>)
 80083f0:	6013      	str	r3, [r2, #0]
}
 80083f2:	bf00      	nop
 80083f4:	371c      	adds	r7, #28
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	20000b34 	.word	0x20000b34
 8008404:	20000b20 	.word	0x20000b20
 8008408:	20000b14 	.word	0x20000b14
 800840c:	20000a10 	.word	0x20000a10
 8008410:	20000a0c 	.word	0x20000a0c
 8008414:	20000028 	.word	0x20000028

08008418 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008420:	f000 f852 	bl	80084c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008424:	4b06      	ldr	r3, [pc, #24]	@ (8008440 <prvIdleTask+0x28>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2b01      	cmp	r3, #1
 800842a:	d9f9      	bls.n	8008420 <prvIdleTask+0x8>
			{
				taskYIELD();
 800842c:	4b05      	ldr	r3, [pc, #20]	@ (8008444 <prvIdleTask+0x2c>)
 800842e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008432:	601a      	str	r2, [r3, #0]
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800843c:	e7f0      	b.n	8008420 <prvIdleTask+0x8>
 800843e:	bf00      	nop
 8008440:	20000a10 	.word	0x20000a10
 8008444:	e000ed04 	.word	0xe000ed04

08008448 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800844e:	2300      	movs	r3, #0
 8008450:	607b      	str	r3, [r7, #4]
 8008452:	e00c      	b.n	800846e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	4613      	mov	r3, r2
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	4413      	add	r3, r2
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4a12      	ldr	r2, [pc, #72]	@ (80084a8 <prvInitialiseTaskLists+0x60>)
 8008460:	4413      	add	r3, r2
 8008462:	4618      	mov	r0, r3
 8008464:	f7ff fa7a 	bl	800795c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	3301      	adds	r3, #1
 800846c:	607b      	str	r3, [r7, #4]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2b06      	cmp	r3, #6
 8008472:	d9ef      	bls.n	8008454 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008474:	480d      	ldr	r0, [pc, #52]	@ (80084ac <prvInitialiseTaskLists+0x64>)
 8008476:	f7ff fa71 	bl	800795c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800847a:	480d      	ldr	r0, [pc, #52]	@ (80084b0 <prvInitialiseTaskLists+0x68>)
 800847c:	f7ff fa6e 	bl	800795c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008480:	480c      	ldr	r0, [pc, #48]	@ (80084b4 <prvInitialiseTaskLists+0x6c>)
 8008482:	f7ff fa6b 	bl	800795c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008486:	480c      	ldr	r0, [pc, #48]	@ (80084b8 <prvInitialiseTaskLists+0x70>)
 8008488:	f7ff fa68 	bl	800795c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800848c:	480b      	ldr	r0, [pc, #44]	@ (80084bc <prvInitialiseTaskLists+0x74>)
 800848e:	f7ff fa65 	bl	800795c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008492:	4b0b      	ldr	r3, [pc, #44]	@ (80084c0 <prvInitialiseTaskLists+0x78>)
 8008494:	4a05      	ldr	r2, [pc, #20]	@ (80084ac <prvInitialiseTaskLists+0x64>)
 8008496:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008498:	4b0a      	ldr	r3, [pc, #40]	@ (80084c4 <prvInitialiseTaskLists+0x7c>)
 800849a:	4a05      	ldr	r2, [pc, #20]	@ (80084b0 <prvInitialiseTaskLists+0x68>)
 800849c:	601a      	str	r2, [r3, #0]
}
 800849e:	bf00      	nop
 80084a0:	3708      	adds	r7, #8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	20000a10 	.word	0x20000a10
 80084ac:	20000a9c 	.word	0x20000a9c
 80084b0:	20000ab0 	.word	0x20000ab0
 80084b4:	20000acc 	.word	0x20000acc
 80084b8:	20000ae0 	.word	0x20000ae0
 80084bc:	20000af8 	.word	0x20000af8
 80084c0:	20000ac4 	.word	0x20000ac4
 80084c4:	20000ac8 	.word	0x20000ac8

080084c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084ce:	e019      	b.n	8008504 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80084d0:	f000 fa12 	bl	80088f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084d4:	4b10      	ldr	r3, [pc, #64]	@ (8008518 <prvCheckTasksWaitingTermination+0x50>)
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	3304      	adds	r3, #4
 80084e0:	4618      	mov	r0, r3
 80084e2:	f7ff fac5 	bl	8007a70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80084e6:	4b0d      	ldr	r3, [pc, #52]	@ (800851c <prvCheckTasksWaitingTermination+0x54>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	3b01      	subs	r3, #1
 80084ec:	4a0b      	ldr	r2, [pc, #44]	@ (800851c <prvCheckTasksWaitingTermination+0x54>)
 80084ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80084f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008520 <prvCheckTasksWaitingTermination+0x58>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3b01      	subs	r3, #1
 80084f6:	4a0a      	ldr	r2, [pc, #40]	@ (8008520 <prvCheckTasksWaitingTermination+0x58>)
 80084f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80084fa:	f000 fa2f 	bl	800895c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f810 	bl	8008524 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008504:	4b06      	ldr	r3, [pc, #24]	@ (8008520 <prvCheckTasksWaitingTermination+0x58>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1e1      	bne.n	80084d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800850c:	bf00      	nop
 800850e:	bf00      	nop
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	20000ae0 	.word	0x20000ae0
 800851c:	20000b0c 	.word	0x20000b0c
 8008520:	20000af4 	.word	0x20000af4

08008524 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	334c      	adds	r3, #76	@ 0x4c
 8008530:	4618      	mov	r0, r3
 8008532:	f001 f9f1 	bl	8009918 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800853c:	2b00      	cmp	r3, #0
 800853e:	d108      	bne.n	8008552 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008544:	4618      	mov	r0, r3
 8008546:	f000 fb85 	bl	8008c54 <vPortFree>
				vPortFree( pxTCB );
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fb82 	bl	8008c54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008550:	e019      	b.n	8008586 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008558:	2b01      	cmp	r3, #1
 800855a:	d103      	bne.n	8008564 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fb79 	bl	8008c54 <vPortFree>
	}
 8008562:	e010      	b.n	8008586 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800856a:	2b02      	cmp	r3, #2
 800856c:	d00b      	beq.n	8008586 <prvDeleteTCB+0x62>
	__asm volatile
 800856e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008572:	f383 8811 	msr	BASEPRI, r3
 8008576:	f3bf 8f6f 	isb	sy
 800857a:	f3bf 8f4f 	dsb	sy
 800857e:	60fb      	str	r3, [r7, #12]
}
 8008580:	bf00      	nop
 8008582:	bf00      	nop
 8008584:	e7fd      	b.n	8008582 <prvDeleteTCB+0x5e>
	}
 8008586:	bf00      	nop
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
	...

08008590 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008596:	4b0c      	ldr	r3, [pc, #48]	@ (80085c8 <prvResetNextTaskUnblockTime+0x38>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d104      	bne.n	80085aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80085a0:	4b0a      	ldr	r3, [pc, #40]	@ (80085cc <prvResetNextTaskUnblockTime+0x3c>)
 80085a2:	f04f 32ff 	mov.w	r2, #4294967295
 80085a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80085a8:	e008      	b.n	80085bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085aa:	4b07      	ldr	r3, [pc, #28]	@ (80085c8 <prvResetNextTaskUnblockTime+0x38>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	4a04      	ldr	r2, [pc, #16]	@ (80085cc <prvResetNextTaskUnblockTime+0x3c>)
 80085ba:	6013      	str	r3, [r2, #0]
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr
 80085c8:	20000ac4 	.word	0x20000ac4
 80085cc:	20000b2c 	.word	0x20000b2c

080085d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80085da:	4b29      	ldr	r3, [pc, #164]	@ (8008680 <prvAddCurrentTaskToDelayedList+0xb0>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085e0:	4b28      	ldr	r3, [pc, #160]	@ (8008684 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	3304      	adds	r3, #4
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7ff fa42 	bl	8007a70 <uxListRemove>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d10b      	bne.n	800860a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80085f2:	4b24      	ldr	r3, [pc, #144]	@ (8008684 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f8:	2201      	movs	r2, #1
 80085fa:	fa02 f303 	lsl.w	r3, r2, r3
 80085fe:	43da      	mvns	r2, r3
 8008600:	4b21      	ldr	r3, [pc, #132]	@ (8008688 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4013      	ands	r3, r2
 8008606:	4a20      	ldr	r2, [pc, #128]	@ (8008688 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008608:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008610:	d10a      	bne.n	8008628 <prvAddCurrentTaskToDelayedList+0x58>
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d007      	beq.n	8008628 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008618:	4b1a      	ldr	r3, [pc, #104]	@ (8008684 <prvAddCurrentTaskToDelayedList+0xb4>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	3304      	adds	r3, #4
 800861e:	4619      	mov	r1, r3
 8008620:	481a      	ldr	r0, [pc, #104]	@ (800868c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008622:	f7ff f9c8 	bl	80079b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008626:	e026      	b.n	8008676 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4413      	add	r3, r2
 800862e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008630:	4b14      	ldr	r3, [pc, #80]	@ (8008684 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68ba      	ldr	r2, [r7, #8]
 8008636:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008638:	68ba      	ldr	r2, [r7, #8]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	429a      	cmp	r2, r3
 800863e:	d209      	bcs.n	8008654 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008640:	4b13      	ldr	r3, [pc, #76]	@ (8008690 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	4b0f      	ldr	r3, [pc, #60]	@ (8008684 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	3304      	adds	r3, #4
 800864a:	4619      	mov	r1, r3
 800864c:	4610      	mov	r0, r2
 800864e:	f7ff f9d6 	bl	80079fe <vListInsert>
}
 8008652:	e010      	b.n	8008676 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008654:	4b0f      	ldr	r3, [pc, #60]	@ (8008694 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	4b0a      	ldr	r3, [pc, #40]	@ (8008684 <prvAddCurrentTaskToDelayedList+0xb4>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3304      	adds	r3, #4
 800865e:	4619      	mov	r1, r3
 8008660:	4610      	mov	r0, r2
 8008662:	f7ff f9cc 	bl	80079fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008666:	4b0c      	ldr	r3, [pc, #48]	@ (8008698 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	429a      	cmp	r2, r3
 800866e:	d202      	bcs.n	8008676 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008670:	4a09      	ldr	r2, [pc, #36]	@ (8008698 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	6013      	str	r3, [r2, #0]
}
 8008676:	bf00      	nop
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	20000b10 	.word	0x20000b10
 8008684:	20000a0c 	.word	0x20000a0c
 8008688:	20000b14 	.word	0x20000b14
 800868c:	20000af8 	.word	0x20000af8
 8008690:	20000ac8 	.word	0x20000ac8
 8008694:	20000ac4 	.word	0x20000ac4
 8008698:	20000b2c 	.word	0x20000b2c

0800869c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	3b04      	subs	r3, #4
 80086ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80086b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	3b04      	subs	r3, #4
 80086ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	f023 0201 	bic.w	r2, r3, #1
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	3b04      	subs	r3, #4
 80086ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80086cc:	4a0c      	ldr	r2, [pc, #48]	@ (8008700 <pxPortInitialiseStack+0x64>)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	3b14      	subs	r3, #20
 80086d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	3b04      	subs	r3, #4
 80086e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f06f 0202 	mvn.w	r2, #2
 80086ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	3b20      	subs	r3, #32
 80086f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80086f2:	68fb      	ldr	r3, [r7, #12]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3714      	adds	r7, #20
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr
 8008700:	08008705 	.word	0x08008705

08008704 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800870a:	2300      	movs	r3, #0
 800870c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800870e:	4b13      	ldr	r3, [pc, #76]	@ (800875c <prvTaskExitError+0x58>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008716:	d00b      	beq.n	8008730 <prvTaskExitError+0x2c>
	__asm volatile
 8008718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800871c:	f383 8811 	msr	BASEPRI, r3
 8008720:	f3bf 8f6f 	isb	sy
 8008724:	f3bf 8f4f 	dsb	sy
 8008728:	60fb      	str	r3, [r7, #12]
}
 800872a:	bf00      	nop
 800872c:	bf00      	nop
 800872e:	e7fd      	b.n	800872c <prvTaskExitError+0x28>
	__asm volatile
 8008730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008734:	f383 8811 	msr	BASEPRI, r3
 8008738:	f3bf 8f6f 	isb	sy
 800873c:	f3bf 8f4f 	dsb	sy
 8008740:	60bb      	str	r3, [r7, #8]
}
 8008742:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008744:	bf00      	nop
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d0fc      	beq.n	8008746 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800874c:	bf00      	nop
 800874e:	bf00      	nop
 8008750:	3714      	adds	r7, #20
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	2000000c 	.word	0x2000000c

08008760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008760:	4b07      	ldr	r3, [pc, #28]	@ (8008780 <pxCurrentTCBConst2>)
 8008762:	6819      	ldr	r1, [r3, #0]
 8008764:	6808      	ldr	r0, [r1, #0]
 8008766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876a:	f380 8809 	msr	PSP, r0
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f04f 0000 	mov.w	r0, #0
 8008776:	f380 8811 	msr	BASEPRI, r0
 800877a:	4770      	bx	lr
 800877c:	f3af 8000 	nop.w

08008780 <pxCurrentTCBConst2>:
 8008780:	20000a0c 	.word	0x20000a0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008784:	bf00      	nop
 8008786:	bf00      	nop

08008788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008788:	4808      	ldr	r0, [pc, #32]	@ (80087ac <prvPortStartFirstTask+0x24>)
 800878a:	6800      	ldr	r0, [r0, #0]
 800878c:	6800      	ldr	r0, [r0, #0]
 800878e:	f380 8808 	msr	MSP, r0
 8008792:	f04f 0000 	mov.w	r0, #0
 8008796:	f380 8814 	msr	CONTROL, r0
 800879a:	b662      	cpsie	i
 800879c:	b661      	cpsie	f
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	f3bf 8f6f 	isb	sy
 80087a6:	df00      	svc	0
 80087a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80087aa:	bf00      	nop
 80087ac:	e000ed08 	.word	0xe000ed08

080087b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b086      	sub	sp, #24
 80087b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80087b6:	4b47      	ldr	r3, [pc, #284]	@ (80088d4 <xPortStartScheduler+0x124>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a47      	ldr	r2, [pc, #284]	@ (80088d8 <xPortStartScheduler+0x128>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d10b      	bne.n	80087d8 <xPortStartScheduler+0x28>
	__asm volatile
 80087c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c4:	f383 8811 	msr	BASEPRI, r3
 80087c8:	f3bf 8f6f 	isb	sy
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	613b      	str	r3, [r7, #16]
}
 80087d2:	bf00      	nop
 80087d4:	bf00      	nop
 80087d6:	e7fd      	b.n	80087d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80087d8:	4b3e      	ldr	r3, [pc, #248]	@ (80088d4 <xPortStartScheduler+0x124>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a3f      	ldr	r2, [pc, #252]	@ (80088dc <xPortStartScheduler+0x12c>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d10b      	bne.n	80087fa <xPortStartScheduler+0x4a>
	__asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	60fb      	str	r3, [r7, #12]
}
 80087f4:	bf00      	nop
 80087f6:	bf00      	nop
 80087f8:	e7fd      	b.n	80087f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80087fa:	4b39      	ldr	r3, [pc, #228]	@ (80088e0 <xPortStartScheduler+0x130>)
 80087fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	b2db      	uxtb	r3, r3
 8008804:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	22ff      	movs	r2, #255	@ 0xff
 800880a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	b2db      	uxtb	r3, r3
 8008812:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008814:	78fb      	ldrb	r3, [r7, #3]
 8008816:	b2db      	uxtb	r3, r3
 8008818:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800881c:	b2da      	uxtb	r2, r3
 800881e:	4b31      	ldr	r3, [pc, #196]	@ (80088e4 <xPortStartScheduler+0x134>)
 8008820:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008822:	4b31      	ldr	r3, [pc, #196]	@ (80088e8 <xPortStartScheduler+0x138>)
 8008824:	2207      	movs	r2, #7
 8008826:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008828:	e009      	b.n	800883e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800882a:	4b2f      	ldr	r3, [pc, #188]	@ (80088e8 <xPortStartScheduler+0x138>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3b01      	subs	r3, #1
 8008830:	4a2d      	ldr	r2, [pc, #180]	@ (80088e8 <xPortStartScheduler+0x138>)
 8008832:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008834:	78fb      	ldrb	r3, [r7, #3]
 8008836:	b2db      	uxtb	r3, r3
 8008838:	005b      	lsls	r3, r3, #1
 800883a:	b2db      	uxtb	r3, r3
 800883c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800883e:	78fb      	ldrb	r3, [r7, #3]
 8008840:	b2db      	uxtb	r3, r3
 8008842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008846:	2b80      	cmp	r3, #128	@ 0x80
 8008848:	d0ef      	beq.n	800882a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800884a:	4b27      	ldr	r3, [pc, #156]	@ (80088e8 <xPortStartScheduler+0x138>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f1c3 0307 	rsb	r3, r3, #7
 8008852:	2b04      	cmp	r3, #4
 8008854:	d00b      	beq.n	800886e <xPortStartScheduler+0xbe>
	__asm volatile
 8008856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800885a:	f383 8811 	msr	BASEPRI, r3
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f3bf 8f4f 	dsb	sy
 8008866:	60bb      	str	r3, [r7, #8]
}
 8008868:	bf00      	nop
 800886a:	bf00      	nop
 800886c:	e7fd      	b.n	800886a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800886e:	4b1e      	ldr	r3, [pc, #120]	@ (80088e8 <xPortStartScheduler+0x138>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	021b      	lsls	r3, r3, #8
 8008874:	4a1c      	ldr	r2, [pc, #112]	@ (80088e8 <xPortStartScheduler+0x138>)
 8008876:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008878:	4b1b      	ldr	r3, [pc, #108]	@ (80088e8 <xPortStartScheduler+0x138>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008880:	4a19      	ldr	r2, [pc, #100]	@ (80088e8 <xPortStartScheduler+0x138>)
 8008882:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	b2da      	uxtb	r2, r3
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800888c:	4b17      	ldr	r3, [pc, #92]	@ (80088ec <xPortStartScheduler+0x13c>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a16      	ldr	r2, [pc, #88]	@ (80088ec <xPortStartScheduler+0x13c>)
 8008892:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008896:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008898:	4b14      	ldr	r3, [pc, #80]	@ (80088ec <xPortStartScheduler+0x13c>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a13      	ldr	r2, [pc, #76]	@ (80088ec <xPortStartScheduler+0x13c>)
 800889e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80088a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80088a4:	f000 f8da 	bl	8008a5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80088a8:	4b11      	ldr	r3, [pc, #68]	@ (80088f0 <xPortStartScheduler+0x140>)
 80088aa:	2200      	movs	r2, #0
 80088ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80088ae:	f000 f8f9 	bl	8008aa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80088b2:	4b10      	ldr	r3, [pc, #64]	@ (80088f4 <xPortStartScheduler+0x144>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a0f      	ldr	r2, [pc, #60]	@ (80088f4 <xPortStartScheduler+0x144>)
 80088b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80088bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80088be:	f7ff ff63 	bl	8008788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80088c2:	f7ff fd45 	bl	8008350 <vTaskSwitchContext>
	prvTaskExitError();
 80088c6:	f7ff ff1d 	bl	8008704 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3718      	adds	r7, #24
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	e000ed00 	.word	0xe000ed00
 80088d8:	410fc271 	.word	0x410fc271
 80088dc:	410fc270 	.word	0x410fc270
 80088e0:	e000e400 	.word	0xe000e400
 80088e4:	20000b38 	.word	0x20000b38
 80088e8:	20000b3c 	.word	0x20000b3c
 80088ec:	e000ed20 	.word	0xe000ed20
 80088f0:	2000000c 	.word	0x2000000c
 80088f4:	e000ef34 	.word	0xe000ef34

080088f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
	__asm volatile
 80088fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008902:	f383 8811 	msr	BASEPRI, r3
 8008906:	f3bf 8f6f 	isb	sy
 800890a:	f3bf 8f4f 	dsb	sy
 800890e:	607b      	str	r3, [r7, #4]
}
 8008910:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008912:	4b10      	ldr	r3, [pc, #64]	@ (8008954 <vPortEnterCritical+0x5c>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	3301      	adds	r3, #1
 8008918:	4a0e      	ldr	r2, [pc, #56]	@ (8008954 <vPortEnterCritical+0x5c>)
 800891a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800891c:	4b0d      	ldr	r3, [pc, #52]	@ (8008954 <vPortEnterCritical+0x5c>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d110      	bne.n	8008946 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008924:	4b0c      	ldr	r3, [pc, #48]	@ (8008958 <vPortEnterCritical+0x60>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00b      	beq.n	8008946 <vPortEnterCritical+0x4e>
	__asm volatile
 800892e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008932:	f383 8811 	msr	BASEPRI, r3
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	603b      	str	r3, [r7, #0]
}
 8008940:	bf00      	nop
 8008942:	bf00      	nop
 8008944:	e7fd      	b.n	8008942 <vPortEnterCritical+0x4a>
	}
}
 8008946:	bf00      	nop
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	2000000c 	.word	0x2000000c
 8008958:	e000ed04 	.word	0xe000ed04

0800895c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008962:	4b12      	ldr	r3, [pc, #72]	@ (80089ac <vPortExitCritical+0x50>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10b      	bne.n	8008982 <vPortExitCritical+0x26>
	__asm volatile
 800896a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800896e:	f383 8811 	msr	BASEPRI, r3
 8008972:	f3bf 8f6f 	isb	sy
 8008976:	f3bf 8f4f 	dsb	sy
 800897a:	607b      	str	r3, [r7, #4]
}
 800897c:	bf00      	nop
 800897e:	bf00      	nop
 8008980:	e7fd      	b.n	800897e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008982:	4b0a      	ldr	r3, [pc, #40]	@ (80089ac <vPortExitCritical+0x50>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	3b01      	subs	r3, #1
 8008988:	4a08      	ldr	r2, [pc, #32]	@ (80089ac <vPortExitCritical+0x50>)
 800898a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800898c:	4b07      	ldr	r3, [pc, #28]	@ (80089ac <vPortExitCritical+0x50>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d105      	bne.n	80089a0 <vPortExitCritical+0x44>
 8008994:	2300      	movs	r3, #0
 8008996:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800899e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr
 80089ac:	2000000c 	.word	0x2000000c

080089b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80089b0:	f3ef 8009 	mrs	r0, PSP
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	4b15      	ldr	r3, [pc, #84]	@ (8008a10 <pxCurrentTCBConst>)
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	f01e 0f10 	tst.w	lr, #16
 80089c0:	bf08      	it	eq
 80089c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80089c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ca:	6010      	str	r0, [r2, #0]
 80089cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80089d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80089d4:	f380 8811 	msr	BASEPRI, r0
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f7ff fcb6 	bl	8008350 <vTaskSwitchContext>
 80089e4:	f04f 0000 	mov.w	r0, #0
 80089e8:	f380 8811 	msr	BASEPRI, r0
 80089ec:	bc09      	pop	{r0, r3}
 80089ee:	6819      	ldr	r1, [r3, #0]
 80089f0:	6808      	ldr	r0, [r1, #0]
 80089f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f6:	f01e 0f10 	tst.w	lr, #16
 80089fa:	bf08      	it	eq
 80089fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008a00:	f380 8809 	msr	PSP, r0
 8008a04:	f3bf 8f6f 	isb	sy
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	f3af 8000 	nop.w

08008a10 <pxCurrentTCBConst>:
 8008a10:	20000a0c 	.word	0x20000a0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a14:	bf00      	nop
 8008a16:	bf00      	nop

08008a18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	607b      	str	r3, [r7, #4]
}
 8008a30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a32:	f7ff fbd3 	bl	80081dc <xTaskIncrementTick>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d003      	beq.n	8008a44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a3c:	4b06      	ldr	r3, [pc, #24]	@ (8008a58 <SysTick_Handler+0x40>)
 8008a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a42:	601a      	str	r2, [r3, #0]
 8008a44:	2300      	movs	r3, #0
 8008a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	f383 8811 	msr	BASEPRI, r3
}
 8008a4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a50:	bf00      	nop
 8008a52:	3708      	adds	r7, #8
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	e000ed04 	.word	0xe000ed04

08008a5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a60:	4b0b      	ldr	r3, [pc, #44]	@ (8008a90 <vPortSetupTimerInterrupt+0x34>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a66:	4b0b      	ldr	r3, [pc, #44]	@ (8008a94 <vPortSetupTimerInterrupt+0x38>)
 8008a68:	2200      	movs	r2, #0
 8008a6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a98 <vPortSetupTimerInterrupt+0x3c>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a0a      	ldr	r2, [pc, #40]	@ (8008a9c <vPortSetupTimerInterrupt+0x40>)
 8008a72:	fba2 2303 	umull	r2, r3, r2, r3
 8008a76:	099b      	lsrs	r3, r3, #6
 8008a78:	4a09      	ldr	r2, [pc, #36]	@ (8008aa0 <vPortSetupTimerInterrupt+0x44>)
 8008a7a:	3b01      	subs	r3, #1
 8008a7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a7e:	4b04      	ldr	r3, [pc, #16]	@ (8008a90 <vPortSetupTimerInterrupt+0x34>)
 8008a80:	2207      	movs	r2, #7
 8008a82:	601a      	str	r2, [r3, #0]
}
 8008a84:	bf00      	nop
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	e000e010 	.word	0xe000e010
 8008a94:	e000e018 	.word	0xe000e018
 8008a98:	20000000 	.word	0x20000000
 8008a9c:	10624dd3 	.word	0x10624dd3
 8008aa0:	e000e014 	.word	0xe000e014

08008aa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008aa4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008ab4 <vPortEnableVFP+0x10>
 8008aa8:	6801      	ldr	r1, [r0, #0]
 8008aaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008aae:	6001      	str	r1, [r0, #0]
 8008ab0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ab2:	bf00      	nop
 8008ab4:	e000ed88 	.word	0xe000ed88

08008ab8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b08a      	sub	sp, #40	@ 0x28
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ac4:	f7ff fade 	bl	8008084 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ac8:	4b5c      	ldr	r3, [pc, #368]	@ (8008c3c <pvPortMalloc+0x184>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d101      	bne.n	8008ad4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ad0:	f000 f924 	bl	8008d1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ad4:	4b5a      	ldr	r3, [pc, #360]	@ (8008c40 <pvPortMalloc+0x188>)
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4013      	ands	r3, r2
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f040 8095 	bne.w	8008c0c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d01e      	beq.n	8008b26 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008ae8:	2208      	movs	r2, #8
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4413      	add	r3, r2
 8008aee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f003 0307 	and.w	r3, r3, #7
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d015      	beq.n	8008b26 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f023 0307 	bic.w	r3, r3, #7
 8008b00:	3308      	adds	r3, #8
 8008b02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f003 0307 	and.w	r3, r3, #7
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00b      	beq.n	8008b26 <pvPortMalloc+0x6e>
	__asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	617b      	str	r3, [r7, #20]
}
 8008b20:	bf00      	nop
 8008b22:	bf00      	nop
 8008b24:	e7fd      	b.n	8008b22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d06f      	beq.n	8008c0c <pvPortMalloc+0x154>
 8008b2c:	4b45      	ldr	r3, [pc, #276]	@ (8008c44 <pvPortMalloc+0x18c>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d86a      	bhi.n	8008c0c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b36:	4b44      	ldr	r3, [pc, #272]	@ (8008c48 <pvPortMalloc+0x190>)
 8008b38:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b3a:	4b43      	ldr	r3, [pc, #268]	@ (8008c48 <pvPortMalloc+0x190>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b40:	e004      	b.n	8008b4c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b44:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d903      	bls.n	8008b5e <pvPortMalloc+0xa6>
 8008b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d1f1      	bne.n	8008b42 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b5e:	4b37      	ldr	r3, [pc, #220]	@ (8008c3c <pvPortMalloc+0x184>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d051      	beq.n	8008c0c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b68:	6a3b      	ldr	r3, [r7, #32]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2208      	movs	r2, #8
 8008b6e:	4413      	add	r3, r2
 8008b70:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	6a3b      	ldr	r3, [r7, #32]
 8008b78:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7c:	685a      	ldr	r2, [r3, #4]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	1ad2      	subs	r2, r2, r3
 8008b82:	2308      	movs	r3, #8
 8008b84:	005b      	lsls	r3, r3, #1
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d920      	bls.n	8008bcc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4413      	add	r3, r2
 8008b90:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	f003 0307 	and.w	r3, r3, #7
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00b      	beq.n	8008bb4 <pvPortMalloc+0xfc>
	__asm volatile
 8008b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba0:	f383 8811 	msr	BASEPRI, r3
 8008ba4:	f3bf 8f6f 	isb	sy
 8008ba8:	f3bf 8f4f 	dsb	sy
 8008bac:	613b      	str	r3, [r7, #16]
}
 8008bae:	bf00      	nop
 8008bb0:	bf00      	nop
 8008bb2:	e7fd      	b.n	8008bb0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb6:	685a      	ldr	r2, [r3, #4]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	1ad2      	subs	r2, r2, r3
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008bc6:	69b8      	ldr	r0, [r7, #24]
 8008bc8:	f000 f90a 	bl	8008de0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8008c44 <pvPortMalloc+0x18c>)
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	1ad3      	subs	r3, r2, r3
 8008bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8008c44 <pvPortMalloc+0x18c>)
 8008bd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008bda:	4b1a      	ldr	r3, [pc, #104]	@ (8008c44 <pvPortMalloc+0x18c>)
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	4b1b      	ldr	r3, [pc, #108]	@ (8008c4c <pvPortMalloc+0x194>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d203      	bcs.n	8008bee <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008be6:	4b17      	ldr	r3, [pc, #92]	@ (8008c44 <pvPortMalloc+0x18c>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a18      	ldr	r2, [pc, #96]	@ (8008c4c <pvPortMalloc+0x194>)
 8008bec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf0:	685a      	ldr	r2, [r3, #4]
 8008bf2:	4b13      	ldr	r3, [pc, #76]	@ (8008c40 <pvPortMalloc+0x188>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	431a      	orrs	r2, r3
 8008bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bfa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bfe:	2200      	movs	r2, #0
 8008c00:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008c02:	4b13      	ldr	r3, [pc, #76]	@ (8008c50 <pvPortMalloc+0x198>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	3301      	adds	r3, #1
 8008c08:	4a11      	ldr	r2, [pc, #68]	@ (8008c50 <pvPortMalloc+0x198>)
 8008c0a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c0c:	f7ff fa48 	bl	80080a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	f003 0307 	and.w	r3, r3, #7
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00b      	beq.n	8008c32 <pvPortMalloc+0x17a>
	__asm volatile
 8008c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1e:	f383 8811 	msr	BASEPRI, r3
 8008c22:	f3bf 8f6f 	isb	sy
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	60fb      	str	r3, [r7, #12]
}
 8008c2c:	bf00      	nop
 8008c2e:	bf00      	nop
 8008c30:	e7fd      	b.n	8008c2e <pvPortMalloc+0x176>
	return pvReturn;
 8008c32:	69fb      	ldr	r3, [r7, #28]
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3728      	adds	r7, #40	@ 0x28
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	20001700 	.word	0x20001700
 8008c40:	20001714 	.word	0x20001714
 8008c44:	20001704 	.word	0x20001704
 8008c48:	200016f8 	.word	0x200016f8
 8008c4c:	20001708 	.word	0x20001708
 8008c50:	2000170c 	.word	0x2000170c

08008c54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b086      	sub	sp, #24
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d04f      	beq.n	8008d06 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c66:	2308      	movs	r3, #8
 8008c68:	425b      	negs	r3, r3
 8008c6a:	697a      	ldr	r2, [r7, #20]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	685a      	ldr	r2, [r3, #4]
 8008c78:	4b25      	ldr	r3, [pc, #148]	@ (8008d10 <vPortFree+0xbc>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4013      	ands	r3, r2
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d10b      	bne.n	8008c9a <vPortFree+0x46>
	__asm volatile
 8008c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c86:	f383 8811 	msr	BASEPRI, r3
 8008c8a:	f3bf 8f6f 	isb	sy
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	60fb      	str	r3, [r7, #12]
}
 8008c94:	bf00      	nop
 8008c96:	bf00      	nop
 8008c98:	e7fd      	b.n	8008c96 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00b      	beq.n	8008cba <vPortFree+0x66>
	__asm volatile
 8008ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca6:	f383 8811 	msr	BASEPRI, r3
 8008caa:	f3bf 8f6f 	isb	sy
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	60bb      	str	r3, [r7, #8]
}
 8008cb4:	bf00      	nop
 8008cb6:	bf00      	nop
 8008cb8:	e7fd      	b.n	8008cb6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	685a      	ldr	r2, [r3, #4]
 8008cbe:	4b14      	ldr	r3, [pc, #80]	@ (8008d10 <vPortFree+0xbc>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d01e      	beq.n	8008d06 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d11a      	bne.n	8008d06 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	685a      	ldr	r2, [r3, #4]
 8008cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8008d10 <vPortFree+0xbc>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	43db      	mvns	r3, r3
 8008cda:	401a      	ands	r2, r3
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ce0:	f7ff f9d0 	bl	8008084 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	685a      	ldr	r2, [r3, #4]
 8008ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8008d14 <vPortFree+0xc0>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4413      	add	r3, r2
 8008cee:	4a09      	ldr	r2, [pc, #36]	@ (8008d14 <vPortFree+0xc0>)
 8008cf0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008cf2:	6938      	ldr	r0, [r7, #16]
 8008cf4:	f000 f874 	bl	8008de0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008cf8:	4b07      	ldr	r3, [pc, #28]	@ (8008d18 <vPortFree+0xc4>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	4a06      	ldr	r2, [pc, #24]	@ (8008d18 <vPortFree+0xc4>)
 8008d00:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008d02:	f7ff f9cd 	bl	80080a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d06:	bf00      	nop
 8008d08:	3718      	adds	r7, #24
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	20001714 	.word	0x20001714
 8008d14:	20001704 	.word	0x20001704
 8008d18:	20001710 	.word	0x20001710

08008d1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d22:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8008d26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d28:	4b27      	ldr	r3, [pc, #156]	@ (8008dc8 <prvHeapInit+0xac>)
 8008d2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f003 0307 	and.w	r3, r3, #7
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00c      	beq.n	8008d50 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	3307      	adds	r3, #7
 8008d3a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f023 0307 	bic.w	r3, r3, #7
 8008d42:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d44:	68ba      	ldr	r2, [r7, #8]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8008dc8 <prvHeapInit+0xac>)
 8008d4c:	4413      	add	r3, r2
 8008d4e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d54:	4a1d      	ldr	r2, [pc, #116]	@ (8008dcc <prvHeapInit+0xb0>)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8008dcc <prvHeapInit+0xb0>)
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	68ba      	ldr	r2, [r7, #8]
 8008d64:	4413      	add	r3, r2
 8008d66:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d68:	2208      	movs	r2, #8
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	1a9b      	subs	r3, r3, r2
 8008d6e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f023 0307 	bic.w	r3, r3, #7
 8008d76:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	4a15      	ldr	r2, [pc, #84]	@ (8008dd0 <prvHeapInit+0xb4>)
 8008d7c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d7e:	4b14      	ldr	r3, [pc, #80]	@ (8008dd0 <prvHeapInit+0xb4>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2200      	movs	r2, #0
 8008d84:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d86:	4b12      	ldr	r3, [pc, #72]	@ (8008dd0 <prvHeapInit+0xb4>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	1ad2      	subs	r2, r2, r3
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8008dd0 <prvHeapInit+0xb4>)
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	4a0a      	ldr	r2, [pc, #40]	@ (8008dd4 <prvHeapInit+0xb8>)
 8008daa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	4a09      	ldr	r2, [pc, #36]	@ (8008dd8 <prvHeapInit+0xbc>)
 8008db2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008db4:	4b09      	ldr	r3, [pc, #36]	@ (8008ddc <prvHeapInit+0xc0>)
 8008db6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008dba:	601a      	str	r2, [r3, #0]
}
 8008dbc:	bf00      	nop
 8008dbe:	3714      	adds	r7, #20
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr
 8008dc8:	20000b40 	.word	0x20000b40
 8008dcc:	200016f8 	.word	0x200016f8
 8008dd0:	20001700 	.word	0x20001700
 8008dd4:	20001708 	.word	0x20001708
 8008dd8:	20001704 	.word	0x20001704
 8008ddc:	20001714 	.word	0x20001714

08008de0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008de0:	b480      	push	{r7}
 8008de2:	b085      	sub	sp, #20
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008de8:	4b28      	ldr	r3, [pc, #160]	@ (8008e8c <prvInsertBlockIntoFreeList+0xac>)
 8008dea:	60fb      	str	r3, [r7, #12]
 8008dec:	e002      	b.n	8008df4 <prvInsertBlockIntoFreeList+0x14>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	60fb      	str	r3, [r7, #12]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d8f7      	bhi.n	8008dee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	4413      	add	r3, r2
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d108      	bne.n	8008e22 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	685a      	ldr	r2, [r3, #4]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	441a      	add	r2, r3
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	68ba      	ldr	r2, [r7, #8]
 8008e2c:	441a      	add	r2, r3
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d118      	bne.n	8008e68 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	4b15      	ldr	r3, [pc, #84]	@ (8008e90 <prvInsertBlockIntoFreeList+0xb0>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d00d      	beq.n	8008e5e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	441a      	add	r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	601a      	str	r2, [r3, #0]
 8008e5c:	e008      	b.n	8008e70 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8008e90 <prvInsertBlockIntoFreeList+0xb0>)
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	601a      	str	r2, [r3, #0]
 8008e66:	e003      	b.n	8008e70 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d002      	beq.n	8008e7e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e7e:	bf00      	nop
 8008e80:	3714      	adds	r7, #20
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	200016f8 	.word	0x200016f8
 8008e90:	20001700 	.word	0x20001700

08008e94 <MCP23S17_Init>:
#include "spi.h"

uint8_t etat_des_LEDAs = 0xff;
uint8_t etat_des_LEDBs = 0xff;

void MCP23S17_Init( void){
 8008e94:	b580      	push	{r7, lr}
 8008e96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); //reset High
 8008e98:	2201      	movs	r2, #1
 8008e9a:	2101      	movs	r1, #1
 8008e9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008ea0:	f7f9 f8d6 	bl	8002050 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);	//CS High
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	2180      	movs	r1, #128	@ 0x80
 8008ea8:	480a      	ldr	r0, [pc, #40]	@ (8008ed4 <MCP23S17_Init+0x40>)
 8008eaa:	f7f9 f8d1 	bl	8002050 <HAL_GPIO_WritePin>

	// Configurer tous les GPIO comme sorties
	MCP23S17_Write(IODIRA, 0x00);
 8008eae:	2100      	movs	r1, #0
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	f000 f811 	bl	8008ed8 <MCP23S17_Write>
	MCP23S17_Write(IODIRB, 0x00);
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	2001      	movs	r0, #1
 8008eba:	f000 f80d 	bl	8008ed8 <MCP23S17_Write>

	// Eteindre toutes les led
	MCP23S17_Write(MCPGPIOA, 0xff);
 8008ebe:	21ff      	movs	r1, #255	@ 0xff
 8008ec0:	2012      	movs	r0, #18
 8008ec2:	f000 f809 	bl	8008ed8 <MCP23S17_Write>
	MCP23S17_Write(MCPGPIOB, 0xff);
 8008ec6:	21ff      	movs	r1, #255	@ 0xff
 8008ec8:	2013      	movs	r0, #19
 8008eca:	f000 f805 	bl	8008ed8 <MCP23S17_Write>
}
 8008ece:	bf00      	nop
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	48000400 	.word	0x48000400

08008ed8 <MCP23S17_Write>:

// Fonction pour écrire dans un registre du MCP23S17
void MCP23S17_Write( uint8_t reg, uint8_t value) {
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	4603      	mov	r3, r0
 8008ee0:	460a      	mov	r2, r1
 8008ee2:	71fb      	strb	r3, [r7, #7]
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	71bb      	strb	r3, [r7, #6]
	uint8_t data[3] = {MCP23S17_ADDR_WRITE, reg, value};
 8008ee8:	2340      	movs	r3, #64	@ 0x40
 8008eea:	733b      	strb	r3, [r7, #12]
 8008eec:	79fb      	ldrb	r3, [r7, #7]
 8008eee:	737b      	strb	r3, [r7, #13]
 8008ef0:	79bb      	ldrb	r3, [r7, #6]
 8008ef2:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // CS Low
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	2180      	movs	r1, #128	@ 0x80
 8008ef8:	4809      	ldr	r0, [pc, #36]	@ (8008f20 <MCP23S17_Write+0x48>)
 8008efa:	f7f9 f8a9 	bl	8002050 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, data, 3, HAL_MAX_DELAY);
 8008efe:	f107 010c 	add.w	r1, r7, #12
 8008f02:	f04f 33ff 	mov.w	r3, #4294967295
 8008f06:	2203      	movs	r2, #3
 8008f08:	4806      	ldr	r0, [pc, #24]	@ (8008f24 <MCP23S17_Write+0x4c>)
 8008f0a:	f7fc fd25 	bl	8005958 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);   // CS High
 8008f0e:	2201      	movs	r2, #1
 8008f10:	2180      	movs	r1, #128	@ 0x80
 8008f12:	4803      	ldr	r0, [pc, #12]	@ (8008f20 <MCP23S17_Write+0x48>)
 8008f14:	f7f9 f89c 	bl	8002050 <HAL_GPIO_WritePin>
}
 8008f18:	bf00      	nop
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	48000400 	.word	0x48000400
 8008f24:	200008cc 	.word	0x200008cc

08008f28 <drv_led>:

uint8_t drv_led(uint8_t led_num, uint8_t gpio)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	4603      	mov	r3, r0
 8008f30:	460a      	mov	r2, r1
 8008f32:	71fb      	strb	r3, [r7, #7]
 8008f34:	4613      	mov	r3, r2
 8008f36:	71bb      	strb	r3, [r7, #6]
		etat_des_LEDAs =0xff;
		etat_des_LEDBs =0xff;
		MCP23S17_Write(gpio, etat_des_LEDAs);

	}
	if((led_num>=0 && led_num<=7 && gpio==MCPGPIOA)){
 8008f38:	79fb      	ldrb	r3, [r7, #7]
 8008f3a:	2b07      	cmp	r3, #7
 8008f3c:	d816      	bhi.n	8008f6c <drv_led+0x44>
 8008f3e:	79bb      	ldrb	r3, [r7, #6]
 8008f40:	2b12      	cmp	r3, #18
 8008f42:	d113      	bne.n	8008f6c <drv_led+0x44>
		etat_des_LEDAs ^= (1 << led_num);
 8008f44:	79fb      	ldrb	r3, [r7, #7]
 8008f46:	2201      	movs	r2, #1
 8008f48:	fa02 f303 	lsl.w	r3, r2, r3
 8008f4c:	b25a      	sxtb	r2, r3
 8008f4e:	4b17      	ldr	r3, [pc, #92]	@ (8008fac <drv_led+0x84>)
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	b25b      	sxtb	r3, r3
 8008f54:	4053      	eors	r3, r2
 8008f56:	b25b      	sxtb	r3, r3
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	4b14      	ldr	r3, [pc, #80]	@ (8008fac <drv_led+0x84>)
 8008f5c:	701a      	strb	r2, [r3, #0]
		MCP23S17_Write(gpio, etat_des_LEDAs);
 8008f5e:	4b13      	ldr	r3, [pc, #76]	@ (8008fac <drv_led+0x84>)
 8008f60:	781a      	ldrb	r2, [r3, #0]
 8008f62:	79bb      	ldrb	r3, [r7, #6]
 8008f64:	4611      	mov	r1, r2
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7ff ffb6 	bl	8008ed8 <MCP23S17_Write>
	}
	if((led_num>=0 && led_num<=7 && gpio==MCPGPIOB)){
 8008f6c:	79fb      	ldrb	r3, [r7, #7]
 8008f6e:	2b07      	cmp	r3, #7
 8008f70:	d816      	bhi.n	8008fa0 <drv_led+0x78>
 8008f72:	79bb      	ldrb	r3, [r7, #6]
 8008f74:	2b13      	cmp	r3, #19
 8008f76:	d113      	bne.n	8008fa0 <drv_led+0x78>
			etat_des_LEDBs ^= (1 << led_num);
 8008f78:	79fb      	ldrb	r3, [r7, #7]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f80:	b25a      	sxtb	r2, r3
 8008f82:	4b0b      	ldr	r3, [pc, #44]	@ (8008fb0 <drv_led+0x88>)
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	b25b      	sxtb	r3, r3
 8008f88:	4053      	eors	r3, r2
 8008f8a:	b25b      	sxtb	r3, r3
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	4b08      	ldr	r3, [pc, #32]	@ (8008fb0 <drv_led+0x88>)
 8008f90:	701a      	strb	r2, [r3, #0]
			MCP23S17_Write(gpio, etat_des_LEDBs);
 8008f92:	4b07      	ldr	r3, [pc, #28]	@ (8008fb0 <drv_led+0x88>)
 8008f94:	781a      	ldrb	r2, [r3, #0]
 8008f96:	79bb      	ldrb	r3, [r7, #6]
 8008f98:	4611      	mov	r1, r2
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7ff ff9c 	bl	8008ed8 <MCP23S17_Write>
		}
	return 0;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	20000010 	.word	0x20000010
 8008fb0:	20000011 	.word	0x20000011

08008fb4 <drv_uart2_receive>:
#include "main.h"
#include "drv_uart2.h"
#include "usart.h"

uint8_t drv_uart2_receive(char * pData, uint16_t size)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&huart2, (uint8_t*)(pData), size, HAL_MAX_DELAY);
 8008fc0:	887a      	ldrh	r2, [r7, #2]
 8008fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8008fc6:	6879      	ldr	r1, [r7, #4]
 8008fc8:	4803      	ldr	r0, [pc, #12]	@ (8008fd8 <drv_uart2_receive+0x24>)
 8008fca:	f7fd fb3c 	bl	8006646 <HAL_UART_Receive>

	return 0;	// Life's too short for error management
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	20000980 	.word	0x20000980

08008fdc <drv_uart2_transmit>:

uint8_t drv_uart2_transmit(const char * pData, uint16_t size)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, size, HAL_MAX_DELAY);
 8008fe8:	887a      	ldrh	r2, [r7, #2]
 8008fea:	f04f 33ff 	mov.w	r3, #4294967295
 8008fee:	6879      	ldr	r1, [r7, #4]
 8008ff0:	4803      	ldr	r0, [pc, #12]	@ (8009000 <drv_uart2_transmit+0x24>)
 8008ff2:	f7fd fa9f 	bl	8006534 <HAL_UART_Transmit>

	return 0;	// Srsly, don't do that kids
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	20000980 	.word	0x20000980

08009004 <sh_help>:
static int uart_write(char * s, uint16_t size) {
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
	return size;
}

static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 8009004:	b590      	push	{r4, r7, lr}
 8009006:	b089      	sub	sp, #36	@ 0x24
 8009008:	af02      	add	r7, sp, #8
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8009010:	2300      	movs	r3, #0
 8009012:	617b      	str	r3, [r7, #20]
 8009014:	e029      	b.n	800906a <sh_help+0x66>
		int size;
		size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->func_list[i].c, h_shell->func_list[i].description);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 800901c:	68f9      	ldr	r1, [r7, #12]
 800901e:	697a      	ldr	r2, [r7, #20]
 8009020:	4613      	mov	r3, r2
 8009022:	005b      	lsls	r3, r3, #1
 8009024:	4413      	add	r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	440b      	add	r3, r1
 800902a:	3304      	adds	r3, #4
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	461c      	mov	r4, r3
 8009030:	68f9      	ldr	r1, [r7, #12]
 8009032:	697a      	ldr	r2, [r7, #20]
 8009034:	4613      	mov	r3, r2
 8009036:	005b      	lsls	r3, r3, #1
 8009038:	4413      	add	r3, r2
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	440b      	add	r3, r1
 800903e:	330c      	adds	r3, #12
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	9300      	str	r3, [sp, #0]
 8009044:	4623      	mov	r3, r4
 8009046:	4a0e      	ldr	r2, [pc, #56]	@ (8009080 <sh_help+0x7c>)
 8009048:	213c      	movs	r1, #60	@ 0x3c
 800904a:	f000 fb41 	bl	80096d0 <sniprintf>
 800904e:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800905c:	6939      	ldr	r1, [r7, #16]
 800905e:	b289      	uxth	r1, r1
 8009060:	4610      	mov	r0, r2
 8009062:	4798      	blx	r3
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	3301      	adds	r3, #1
 8009068:	617b      	str	r3, [r7, #20]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	697a      	ldr	r2, [r7, #20]
 8009070:	429a      	cmp	r2, r3
 8009072:	dbd0      	blt.n	8009016 <sh_help+0x12>
	}

	return 0;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	371c      	adds	r7, #28
 800907a:	46bd      	mov	sp, r7
 800907c:	bd90      	pop	{r4, r7, pc}
 800907e:	bf00      	nop
 8009080:	0800a72c 	.word	0x0800a72c

08009084 <shell_init>:

void shell_init(h_shell_t * h_shell) {
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
	int size = 0;
 800908c:	2300      	movs	r3, #0
 800908e:	60fb      	str	r3, [r7, #12]

	h_shell->func_list_size = 0;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	601a      	str	r2, [r3, #0]

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800909c:	4a16      	ldr	r2, [pc, #88]	@ (80090f8 <shell_init+0x74>)
 800909e:	213c      	movs	r1, #60	@ 0x3c
 80090a0:	4618      	mov	r0, r3
 80090a2:	f000 fb15 	bl	80096d0 <sniprintf>
 80090a6:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80090b4:	68f9      	ldr	r1, [r7, #12]
 80090b6:	b289      	uxth	r1, r1
 80090b8:	4610      	mov	r0, r2
 80090ba:	4798      	blx	r3

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Correction TD (v0.2.1 du coup?)\r\n");
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80090c2:	4a0e      	ldr	r2, [pc, #56]	@ (80090fc <shell_init+0x78>)
 80090c4:	213c      	movs	r1, #60	@ 0x3c
 80090c6:	4618      	mov	r0, r3
 80090c8:	f000 fb02 	bl	80096d0 <sniprintf>
 80090cc:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80090da:	68f9      	ldr	r1, [r7, #12]
 80090dc:	b289      	uxth	r1, r1
 80090de:	4610      	mov	r0, r2
 80090e0:	4798      	blx	r3

	shell_add(h_shell, 'h', sh_help, "Help");
 80090e2:	4b07      	ldr	r3, [pc, #28]	@ (8009100 <shell_init+0x7c>)
 80090e4:	4a07      	ldr	r2, [pc, #28]	@ (8009104 <shell_init+0x80>)
 80090e6:	2168      	movs	r1, #104	@ 0x68
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f80d 	bl	8009108 <shell_add>
}
 80090ee:	bf00      	nop
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	0800a738 	.word	0x0800a738
 80090fc:	0800a760 	.word	0x0800a760
 8009100:	0800a784 	.word	0x0800a784
 8009104:	08009005 	.word	0x08009005

08009108 <shell_add>:

int shell_add(h_shell_t * h_shell, char c, shell_func_pointer_t pfunc, char * description) {
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	607a      	str	r2, [r7, #4]
 8009112:	603b      	str	r3, [r7, #0]
 8009114:	460b      	mov	r3, r1
 8009116:	72fb      	strb	r3, [r7, #11]
	if (h_shell->func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2b3f      	cmp	r3, #63	@ 0x3f
 800911e:	dc27      	bgt.n	8009170 <shell_add+0x68>
		h_shell->func_list[h_shell->func_list_size].c = c;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	68f9      	ldr	r1, [r7, #12]
 8009126:	4613      	mov	r3, r2
 8009128:	005b      	lsls	r3, r3, #1
 800912a:	4413      	add	r3, r2
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	440b      	add	r3, r1
 8009130:	3304      	adds	r3, #4
 8009132:	7afa      	ldrb	r2, [r7, #11]
 8009134:	701a      	strb	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].func = pfunc;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	68f9      	ldr	r1, [r7, #12]
 800913c:	4613      	mov	r3, r2
 800913e:	005b      	lsls	r3, r3, #1
 8009140:	4413      	add	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	440b      	add	r3, r1
 8009146:	3308      	adds	r3, #8
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	601a      	str	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].description = description;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	68f9      	ldr	r1, [r7, #12]
 8009152:	4613      	mov	r3, r2
 8009154:	005b      	lsls	r3, r3, #1
 8009156:	4413      	add	r3, r2
 8009158:	009b      	lsls	r3, r3, #2
 800915a:	440b      	add	r3, r1
 800915c:	330c      	adds	r3, #12
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	601a      	str	r2, [r3, #0]
		h_shell->func_list_size++;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	1c5a      	adds	r2, r3, #1
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	601a      	str	r2, [r3, #0]
		return 0;
 800916c:	2300      	movs	r3, #0
 800916e:	e001      	b.n	8009174 <shell_add+0x6c>
	}

	return -1;
 8009170:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009174:	4618      	mov	r0, r3
 8009176:	3714      	adds	r7, #20
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 8009180:	b580      	push	{r7, lr}
 8009182:	b090      	sub	sp, #64	@ 0x40
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
	int i;

	char c = buf[0];
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	argc = 1;
 8009192:	2301      	movs	r3, #1
 8009194:	63bb      	str	r3, [r7, #56]	@ 0x38
	argv[0] = buf;
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	60fb      	str	r3, [r7, #12]

	if (strlen(argv[0])==1){
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	4618      	mov	r0, r3
 800919e:	f7f7 f817 	bl	80001d0 <strlen>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d145      	bne.n	8009234 <shell_exec+0xb4>
		for(i = 0 ; i < h_shell->func_list_size ; i++) {
 80091a8:	2300      	movs	r3, #0
 80091aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091ac:	e03d      	b.n	800922a <shell_exec+0xaa>
			if (h_shell->func_list[i].c == c) {
 80091ae:	6879      	ldr	r1, [r7, #4]
 80091b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80091b2:	4613      	mov	r3, r2
 80091b4:	005b      	lsls	r3, r3, #1
 80091b6:	4413      	add	r3, r2
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	440b      	add	r3, r1
 80091bc:	3304      	adds	r3, #4
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d12d      	bne.n	8009224 <shell_exec+0xa4>


				for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80091cc:	e013      	b.n	80091f6 <shell_exec+0x76>
					if(*p == ' ') {
 80091ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	2b20      	cmp	r3, #32
 80091d4:	d10c      	bne.n	80091f0 <shell_exec+0x70>
						*p = '\0';
 80091d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091d8:	2200      	movs	r2, #0
 80091da:	701a      	strb	r2, [r3, #0]
						argv[argc++] = p+1;
 80091dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091de:	1c5a      	adds	r2, r3, #1
 80091e0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80091e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80091e4:	3201      	adds	r2, #1
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	3340      	adds	r3, #64	@ 0x40
 80091ea:	443b      	add	r3, r7
 80091ec:	f843 2c34 	str.w	r2, [r3, #-52]
				for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80091f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091f2:	3301      	adds	r3, #1
 80091f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80091f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d002      	beq.n	8009204 <shell_exec+0x84>
 80091fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009200:	2b07      	cmp	r3, #7
 8009202:	dde4      	ble.n	80091ce <shell_exec+0x4e>
					}
				}

				return h_shell->func_list[i].func(h_shell, argc, argv);
 8009204:	6879      	ldr	r1, [r7, #4]
 8009206:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009208:	4613      	mov	r3, r2
 800920a:	005b      	lsls	r3, r3, #1
 800920c:	4413      	add	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	440b      	add	r3, r1
 8009212:	3308      	adds	r3, #8
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f107 020c 	add.w	r2, r7, #12
 800921a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	4798      	blx	r3
 8009220:	4603      	mov	r3, r0
 8009222:	e01d      	b.n	8009260 <shell_exec+0xe0>
		for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8009224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009226:	3301      	adds	r3, #1
 8009228:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009230:	429a      	cmp	r2, r3
 8009232:	dbbc      	blt.n	80091ae <shell_exec+0x2e>
			}
		}
	}

	int size;
	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 800923a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800923e:	4a0a      	ldr	r2, [pc, #40]	@ (8009268 <shell_exec+0xe8>)
 8009240:	213c      	movs	r1, #60	@ 0x3c
 8009242:	f000 fa45 	bl	80096d0 <sniprintf>
 8009246:	62f8      	str	r0, [r7, #44]	@ 0x2c
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8009254:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009256:	b289      	uxth	r1, r1
 8009258:	4610      	mov	r0, r2
 800925a:	4798      	blx	r3
	return -1;
 800925c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009260:	4618      	mov	r0, r3
 8009262:	3740      	adds	r7, #64	@ 0x40
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	0800a78c 	.word	0x0800a78c

0800926c <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run(h_shell_t * h_shell) {
 800926c:	b580      	push	{r7, lr}
 800926e:	b086      	sub	sp, #24
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8009274:	2300      	movs	r3, #0
 8009276:	617b      	str	r3, [r7, #20]
	int pos = 0;
 8009278:	2300      	movs	r3, #0
 800927a:	613b      	str	r3, [r7, #16]

	while (1) {
		h_shell->drv.transmit(prompt, 2);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009282:	2102      	movs	r1, #2
 8009284:	483a      	ldr	r0, [pc, #232]	@ (8009370 <shell_run+0x104>)
 8009286:	4798      	blx	r3
		reading = 1;
 8009288:	2301      	movs	r3, #1
 800928a:	617b      	str	r3, [r7, #20]

		while(reading) {
 800928c:	e064      	b.n	8009358 <shell_run+0xec>
			char c;
			h_shell->drv.receive(&c, 1);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 8009294:	f107 020b 	add.w	r2, r7, #11
 8009298:	2101      	movs	r1, #1
 800929a:	4610      	mov	r0, r2
 800929c:	4798      	blx	r3
			int size;

			switch (c) {
 800929e:	7afb      	ldrb	r3, [r7, #11]
 80092a0:	2b08      	cmp	r3, #8
 80092a2:	d036      	beq.n	8009312 <shell_run+0xa6>
 80092a4:	2b0d      	cmp	r3, #13
 80092a6:	d141      	bne.n	800932c <shell_run+0xc0>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80092ae:	4a31      	ldr	r2, [pc, #196]	@ (8009374 <shell_run+0x108>)
 80092b0:	213c      	movs	r1, #60	@ 0x3c
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 fa0c 	bl	80096d0 <sniprintf>
 80092b8:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80092c6:	68f9      	ldr	r1, [r7, #12]
 80092c8:	b289      	uxth	r1, r1
 80092ca:	4610      	mov	r0, r2
 80092cc:	4798      	blx	r3
				h_shell->cmd_buffer[pos++] = 0;     //add \0 char at end of string
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	1c5a      	adds	r2, r3, #1
 80092d2:	613a      	str	r2, [r7, #16]
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	4413      	add	r3, r2
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 2340 	strb.w	r2, [r3, #832]	@ 0x340
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, ":%s\r\n", h_shell->cmd_buffer);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f503 7350 	add.w	r3, r3, #832	@ 0x340
 80092ea:	4a23      	ldr	r2, [pc, #140]	@ (8009378 <shell_run+0x10c>)
 80092ec:	213c      	movs	r1, #60	@ 0x3c
 80092ee:	f000 f9ef 	bl	80096d0 <sniprintf>
 80092f2:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8009300:	68f9      	ldr	r1, [r7, #12]
 8009302:	b289      	uxth	r1, r1
 8009304:	4610      	mov	r0, r2
 8009306:	4798      	blx	r3
				reading = 0;        //exit read loop
 8009308:	2300      	movs	r3, #0
 800930a:	617b      	str	r3, [r7, #20]
				pos = 0;            //reset buffer
 800930c:	2300      	movs	r3, #0
 800930e:	613b      	str	r3, [r7, #16]
				break;
 8009310:	e022      	b.n	8009358 <shell_run+0xec>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	2b00      	cmp	r3, #0
 8009316:	dd1e      	ble.n	8009356 <shell_run+0xea>
					pos--;          //remove it in buffer
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	3b01      	subs	r3, #1
 800931c:	613b      	str	r3, [r7, #16]

					h_shell->drv.transmit(backspace, 3);	// delete the char on the terminal
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009324:	2103      	movs	r1, #3
 8009326:	4815      	ldr	r0, [pc, #84]	@ (800937c <shell_run+0x110>)
 8009328:	4798      	blx	r3
				}
				break;
 800932a:	e014      	b.n	8009356 <shell_run+0xea>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	2b3b      	cmp	r3, #59	@ 0x3b
 8009330:	dc12      	bgt.n	8009358 <shell_run+0xec>
					h_shell->drv.transmit(&c, 1);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009338:	f107 020b 	add.w	r2, r7, #11
 800933c:	2101      	movs	r1, #1
 800933e:	4610      	mov	r0, r2
 8009340:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c; //store
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	1c5a      	adds	r2, r3, #1
 8009346:	613a      	str	r2, [r7, #16]
 8009348:	7af9      	ldrb	r1, [r7, #11]
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	4413      	add	r3, r2
 800934e:	460a      	mov	r2, r1
 8009350:	f883 2340 	strb.w	r2, [r3, #832]	@ 0x340
 8009354:	e000      	b.n	8009358 <shell_run+0xec>
				break;
 8009356:	bf00      	nop
		while(reading) {
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d197      	bne.n	800928e <shell_run+0x22>
				}
			}
		}
		shell_exec(h_shell, h_shell->cmd_buffer);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f503 7350 	add.w	r3, r3, #832	@ 0x340
 8009364:	4619      	mov	r1, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7ff ff0a 	bl	8009180 <shell_exec>
		h_shell->drv.transmit(prompt, 2);
 800936c:	e786      	b.n	800927c <shell_run+0x10>
 800936e:	bf00      	nop
 8009370:	20000018 	.word	0x20000018
 8009374:	0800a7a4 	.word	0x0800a7a4
 8009378:	0800a7a8 	.word	0x0800a7a8
 800937c:	20000014 	.word	0x20000014

08009380 <atoi>:
 8009380:	220a      	movs	r2, #10
 8009382:	2100      	movs	r1, #0
 8009384:	f000 b87a 	b.w	800947c <strtol>

08009388 <_strtol_l.constprop.0>:
 8009388:	2b24      	cmp	r3, #36	@ 0x24
 800938a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800938e:	4686      	mov	lr, r0
 8009390:	4690      	mov	r8, r2
 8009392:	d801      	bhi.n	8009398 <_strtol_l.constprop.0+0x10>
 8009394:	2b01      	cmp	r3, #1
 8009396:	d106      	bne.n	80093a6 <_strtol_l.constprop.0+0x1e>
 8009398:	f000 fb4a 	bl	8009a30 <__errno>
 800939c:	2316      	movs	r3, #22
 800939e:	6003      	str	r3, [r0, #0]
 80093a0:	2000      	movs	r0, #0
 80093a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093a6:	4834      	ldr	r0, [pc, #208]	@ (8009478 <_strtol_l.constprop.0+0xf0>)
 80093a8:	460d      	mov	r5, r1
 80093aa:	462a      	mov	r2, r5
 80093ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80093b0:	5d06      	ldrb	r6, [r0, r4]
 80093b2:	f016 0608 	ands.w	r6, r6, #8
 80093b6:	d1f8      	bne.n	80093aa <_strtol_l.constprop.0+0x22>
 80093b8:	2c2d      	cmp	r4, #45	@ 0x2d
 80093ba:	d12d      	bne.n	8009418 <_strtol_l.constprop.0+0x90>
 80093bc:	782c      	ldrb	r4, [r5, #0]
 80093be:	2601      	movs	r6, #1
 80093c0:	1c95      	adds	r5, r2, #2
 80093c2:	f033 0210 	bics.w	r2, r3, #16
 80093c6:	d109      	bne.n	80093dc <_strtol_l.constprop.0+0x54>
 80093c8:	2c30      	cmp	r4, #48	@ 0x30
 80093ca:	d12a      	bne.n	8009422 <_strtol_l.constprop.0+0x9a>
 80093cc:	782a      	ldrb	r2, [r5, #0]
 80093ce:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80093d2:	2a58      	cmp	r2, #88	@ 0x58
 80093d4:	d125      	bne.n	8009422 <_strtol_l.constprop.0+0x9a>
 80093d6:	786c      	ldrb	r4, [r5, #1]
 80093d8:	2310      	movs	r3, #16
 80093da:	3502      	adds	r5, #2
 80093dc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80093e0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80093e4:	2200      	movs	r2, #0
 80093e6:	fbbc f9f3 	udiv	r9, ip, r3
 80093ea:	4610      	mov	r0, r2
 80093ec:	fb03 ca19 	mls	sl, r3, r9, ip
 80093f0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80093f4:	2f09      	cmp	r7, #9
 80093f6:	d81b      	bhi.n	8009430 <_strtol_l.constprop.0+0xa8>
 80093f8:	463c      	mov	r4, r7
 80093fa:	42a3      	cmp	r3, r4
 80093fc:	dd27      	ble.n	800944e <_strtol_l.constprop.0+0xc6>
 80093fe:	1c57      	adds	r7, r2, #1
 8009400:	d007      	beq.n	8009412 <_strtol_l.constprop.0+0x8a>
 8009402:	4581      	cmp	r9, r0
 8009404:	d320      	bcc.n	8009448 <_strtol_l.constprop.0+0xc0>
 8009406:	d101      	bne.n	800940c <_strtol_l.constprop.0+0x84>
 8009408:	45a2      	cmp	sl, r4
 800940a:	db1d      	blt.n	8009448 <_strtol_l.constprop.0+0xc0>
 800940c:	fb00 4003 	mla	r0, r0, r3, r4
 8009410:	2201      	movs	r2, #1
 8009412:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009416:	e7eb      	b.n	80093f0 <_strtol_l.constprop.0+0x68>
 8009418:	2c2b      	cmp	r4, #43	@ 0x2b
 800941a:	bf04      	itt	eq
 800941c:	782c      	ldrbeq	r4, [r5, #0]
 800941e:	1c95      	addeq	r5, r2, #2
 8009420:	e7cf      	b.n	80093c2 <_strtol_l.constprop.0+0x3a>
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1da      	bne.n	80093dc <_strtol_l.constprop.0+0x54>
 8009426:	2c30      	cmp	r4, #48	@ 0x30
 8009428:	bf0c      	ite	eq
 800942a:	2308      	moveq	r3, #8
 800942c:	230a      	movne	r3, #10
 800942e:	e7d5      	b.n	80093dc <_strtol_l.constprop.0+0x54>
 8009430:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009434:	2f19      	cmp	r7, #25
 8009436:	d801      	bhi.n	800943c <_strtol_l.constprop.0+0xb4>
 8009438:	3c37      	subs	r4, #55	@ 0x37
 800943a:	e7de      	b.n	80093fa <_strtol_l.constprop.0+0x72>
 800943c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009440:	2f19      	cmp	r7, #25
 8009442:	d804      	bhi.n	800944e <_strtol_l.constprop.0+0xc6>
 8009444:	3c57      	subs	r4, #87	@ 0x57
 8009446:	e7d8      	b.n	80093fa <_strtol_l.constprop.0+0x72>
 8009448:	f04f 32ff 	mov.w	r2, #4294967295
 800944c:	e7e1      	b.n	8009412 <_strtol_l.constprop.0+0x8a>
 800944e:	1c53      	adds	r3, r2, #1
 8009450:	d108      	bne.n	8009464 <_strtol_l.constprop.0+0xdc>
 8009452:	2322      	movs	r3, #34	@ 0x22
 8009454:	f8ce 3000 	str.w	r3, [lr]
 8009458:	4660      	mov	r0, ip
 800945a:	f1b8 0f00 	cmp.w	r8, #0
 800945e:	d0a0      	beq.n	80093a2 <_strtol_l.constprop.0+0x1a>
 8009460:	1e69      	subs	r1, r5, #1
 8009462:	e006      	b.n	8009472 <_strtol_l.constprop.0+0xea>
 8009464:	b106      	cbz	r6, 8009468 <_strtol_l.constprop.0+0xe0>
 8009466:	4240      	negs	r0, r0
 8009468:	f1b8 0f00 	cmp.w	r8, #0
 800946c:	d099      	beq.n	80093a2 <_strtol_l.constprop.0+0x1a>
 800946e:	2a00      	cmp	r2, #0
 8009470:	d1f6      	bne.n	8009460 <_strtol_l.constprop.0+0xd8>
 8009472:	f8c8 1000 	str.w	r1, [r8]
 8009476:	e794      	b.n	80093a2 <_strtol_l.constprop.0+0x1a>
 8009478:	0800a7f9 	.word	0x0800a7f9

0800947c <strtol>:
 800947c:	4613      	mov	r3, r2
 800947e:	460a      	mov	r2, r1
 8009480:	4601      	mov	r1, r0
 8009482:	4802      	ldr	r0, [pc, #8]	@ (800948c <strtol+0x10>)
 8009484:	6800      	ldr	r0, [r0, #0]
 8009486:	f7ff bf7f 	b.w	8009388 <_strtol_l.constprop.0>
 800948a:	bf00      	nop
 800948c:	20000028 	.word	0x20000028

08009490 <std>:
 8009490:	2300      	movs	r3, #0
 8009492:	b510      	push	{r4, lr}
 8009494:	4604      	mov	r4, r0
 8009496:	e9c0 3300 	strd	r3, r3, [r0]
 800949a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800949e:	6083      	str	r3, [r0, #8]
 80094a0:	8181      	strh	r1, [r0, #12]
 80094a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80094a4:	81c2      	strh	r2, [r0, #14]
 80094a6:	6183      	str	r3, [r0, #24]
 80094a8:	4619      	mov	r1, r3
 80094aa:	2208      	movs	r2, #8
 80094ac:	305c      	adds	r0, #92	@ 0x5c
 80094ae:	f000 fa1b 	bl	80098e8 <memset>
 80094b2:	4b0d      	ldr	r3, [pc, #52]	@ (80094e8 <std+0x58>)
 80094b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80094b6:	4b0d      	ldr	r3, [pc, #52]	@ (80094ec <std+0x5c>)
 80094b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80094ba:	4b0d      	ldr	r3, [pc, #52]	@ (80094f0 <std+0x60>)
 80094bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80094be:	4b0d      	ldr	r3, [pc, #52]	@ (80094f4 <std+0x64>)
 80094c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80094c2:	4b0d      	ldr	r3, [pc, #52]	@ (80094f8 <std+0x68>)
 80094c4:	6224      	str	r4, [r4, #32]
 80094c6:	429c      	cmp	r4, r3
 80094c8:	d006      	beq.n	80094d8 <std+0x48>
 80094ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80094ce:	4294      	cmp	r4, r2
 80094d0:	d002      	beq.n	80094d8 <std+0x48>
 80094d2:	33d0      	adds	r3, #208	@ 0xd0
 80094d4:	429c      	cmp	r4, r3
 80094d6:	d105      	bne.n	80094e4 <std+0x54>
 80094d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80094dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094e0:	f000 bad0 	b.w	8009a84 <__retarget_lock_init_recursive>
 80094e4:	bd10      	pop	{r4, pc}
 80094e6:	bf00      	nop
 80094e8:	08009739 	.word	0x08009739
 80094ec:	0800975b 	.word	0x0800975b
 80094f0:	08009793 	.word	0x08009793
 80094f4:	080097b7 	.word	0x080097b7
 80094f8:	20001718 	.word	0x20001718

080094fc <stdio_exit_handler>:
 80094fc:	4a02      	ldr	r2, [pc, #8]	@ (8009508 <stdio_exit_handler+0xc>)
 80094fe:	4903      	ldr	r1, [pc, #12]	@ (800950c <stdio_exit_handler+0x10>)
 8009500:	4803      	ldr	r0, [pc, #12]	@ (8009510 <stdio_exit_handler+0x14>)
 8009502:	f000 b869 	b.w	80095d8 <_fwalk_sglue>
 8009506:	bf00      	nop
 8009508:	2000001c 	.word	0x2000001c
 800950c:	0800a36d 	.word	0x0800a36d
 8009510:	2000002c 	.word	0x2000002c

08009514 <cleanup_stdio>:
 8009514:	6841      	ldr	r1, [r0, #4]
 8009516:	4b0c      	ldr	r3, [pc, #48]	@ (8009548 <cleanup_stdio+0x34>)
 8009518:	4299      	cmp	r1, r3
 800951a:	b510      	push	{r4, lr}
 800951c:	4604      	mov	r4, r0
 800951e:	d001      	beq.n	8009524 <cleanup_stdio+0x10>
 8009520:	f000 ff24 	bl	800a36c <_fflush_r>
 8009524:	68a1      	ldr	r1, [r4, #8]
 8009526:	4b09      	ldr	r3, [pc, #36]	@ (800954c <cleanup_stdio+0x38>)
 8009528:	4299      	cmp	r1, r3
 800952a:	d002      	beq.n	8009532 <cleanup_stdio+0x1e>
 800952c:	4620      	mov	r0, r4
 800952e:	f000 ff1d 	bl	800a36c <_fflush_r>
 8009532:	68e1      	ldr	r1, [r4, #12]
 8009534:	4b06      	ldr	r3, [pc, #24]	@ (8009550 <cleanup_stdio+0x3c>)
 8009536:	4299      	cmp	r1, r3
 8009538:	d004      	beq.n	8009544 <cleanup_stdio+0x30>
 800953a:	4620      	mov	r0, r4
 800953c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009540:	f000 bf14 	b.w	800a36c <_fflush_r>
 8009544:	bd10      	pop	{r4, pc}
 8009546:	bf00      	nop
 8009548:	20001718 	.word	0x20001718
 800954c:	20001780 	.word	0x20001780
 8009550:	200017e8 	.word	0x200017e8

08009554 <global_stdio_init.part.0>:
 8009554:	b510      	push	{r4, lr}
 8009556:	4b0b      	ldr	r3, [pc, #44]	@ (8009584 <global_stdio_init.part.0+0x30>)
 8009558:	4c0b      	ldr	r4, [pc, #44]	@ (8009588 <global_stdio_init.part.0+0x34>)
 800955a:	4a0c      	ldr	r2, [pc, #48]	@ (800958c <global_stdio_init.part.0+0x38>)
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	4620      	mov	r0, r4
 8009560:	2200      	movs	r2, #0
 8009562:	2104      	movs	r1, #4
 8009564:	f7ff ff94 	bl	8009490 <std>
 8009568:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800956c:	2201      	movs	r2, #1
 800956e:	2109      	movs	r1, #9
 8009570:	f7ff ff8e 	bl	8009490 <std>
 8009574:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009578:	2202      	movs	r2, #2
 800957a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800957e:	2112      	movs	r1, #18
 8009580:	f7ff bf86 	b.w	8009490 <std>
 8009584:	20001850 	.word	0x20001850
 8009588:	20001718 	.word	0x20001718
 800958c:	080094fd 	.word	0x080094fd

08009590 <__sfp_lock_acquire>:
 8009590:	4801      	ldr	r0, [pc, #4]	@ (8009598 <__sfp_lock_acquire+0x8>)
 8009592:	f000 ba78 	b.w	8009a86 <__retarget_lock_acquire_recursive>
 8009596:	bf00      	nop
 8009598:	20001859 	.word	0x20001859

0800959c <__sfp_lock_release>:
 800959c:	4801      	ldr	r0, [pc, #4]	@ (80095a4 <__sfp_lock_release+0x8>)
 800959e:	f000 ba73 	b.w	8009a88 <__retarget_lock_release_recursive>
 80095a2:	bf00      	nop
 80095a4:	20001859 	.word	0x20001859

080095a8 <__sinit>:
 80095a8:	b510      	push	{r4, lr}
 80095aa:	4604      	mov	r4, r0
 80095ac:	f7ff fff0 	bl	8009590 <__sfp_lock_acquire>
 80095b0:	6a23      	ldr	r3, [r4, #32]
 80095b2:	b11b      	cbz	r3, 80095bc <__sinit+0x14>
 80095b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095b8:	f7ff bff0 	b.w	800959c <__sfp_lock_release>
 80095bc:	4b04      	ldr	r3, [pc, #16]	@ (80095d0 <__sinit+0x28>)
 80095be:	6223      	str	r3, [r4, #32]
 80095c0:	4b04      	ldr	r3, [pc, #16]	@ (80095d4 <__sinit+0x2c>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d1f5      	bne.n	80095b4 <__sinit+0xc>
 80095c8:	f7ff ffc4 	bl	8009554 <global_stdio_init.part.0>
 80095cc:	e7f2      	b.n	80095b4 <__sinit+0xc>
 80095ce:	bf00      	nop
 80095d0:	08009515 	.word	0x08009515
 80095d4:	20001850 	.word	0x20001850

080095d8 <_fwalk_sglue>:
 80095d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095dc:	4607      	mov	r7, r0
 80095de:	4688      	mov	r8, r1
 80095e0:	4614      	mov	r4, r2
 80095e2:	2600      	movs	r6, #0
 80095e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095e8:	f1b9 0901 	subs.w	r9, r9, #1
 80095ec:	d505      	bpl.n	80095fa <_fwalk_sglue+0x22>
 80095ee:	6824      	ldr	r4, [r4, #0]
 80095f0:	2c00      	cmp	r4, #0
 80095f2:	d1f7      	bne.n	80095e4 <_fwalk_sglue+0xc>
 80095f4:	4630      	mov	r0, r6
 80095f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095fa:	89ab      	ldrh	r3, [r5, #12]
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d907      	bls.n	8009610 <_fwalk_sglue+0x38>
 8009600:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009604:	3301      	adds	r3, #1
 8009606:	d003      	beq.n	8009610 <_fwalk_sglue+0x38>
 8009608:	4629      	mov	r1, r5
 800960a:	4638      	mov	r0, r7
 800960c:	47c0      	blx	r8
 800960e:	4306      	orrs	r6, r0
 8009610:	3568      	adds	r5, #104	@ 0x68
 8009612:	e7e9      	b.n	80095e8 <_fwalk_sglue+0x10>

08009614 <_puts_r>:
 8009614:	6a03      	ldr	r3, [r0, #32]
 8009616:	b570      	push	{r4, r5, r6, lr}
 8009618:	6884      	ldr	r4, [r0, #8]
 800961a:	4605      	mov	r5, r0
 800961c:	460e      	mov	r6, r1
 800961e:	b90b      	cbnz	r3, 8009624 <_puts_r+0x10>
 8009620:	f7ff ffc2 	bl	80095a8 <__sinit>
 8009624:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009626:	07db      	lsls	r3, r3, #31
 8009628:	d405      	bmi.n	8009636 <_puts_r+0x22>
 800962a:	89a3      	ldrh	r3, [r4, #12]
 800962c:	0598      	lsls	r0, r3, #22
 800962e:	d402      	bmi.n	8009636 <_puts_r+0x22>
 8009630:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009632:	f000 fa28 	bl	8009a86 <__retarget_lock_acquire_recursive>
 8009636:	89a3      	ldrh	r3, [r4, #12]
 8009638:	0719      	lsls	r1, r3, #28
 800963a:	d502      	bpl.n	8009642 <_puts_r+0x2e>
 800963c:	6923      	ldr	r3, [r4, #16]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d135      	bne.n	80096ae <_puts_r+0x9a>
 8009642:	4621      	mov	r1, r4
 8009644:	4628      	mov	r0, r5
 8009646:	f000 f8f9 	bl	800983c <__swsetup_r>
 800964a:	b380      	cbz	r0, 80096ae <_puts_r+0x9a>
 800964c:	f04f 35ff 	mov.w	r5, #4294967295
 8009650:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009652:	07da      	lsls	r2, r3, #31
 8009654:	d405      	bmi.n	8009662 <_puts_r+0x4e>
 8009656:	89a3      	ldrh	r3, [r4, #12]
 8009658:	059b      	lsls	r3, r3, #22
 800965a:	d402      	bmi.n	8009662 <_puts_r+0x4e>
 800965c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800965e:	f000 fa13 	bl	8009a88 <__retarget_lock_release_recursive>
 8009662:	4628      	mov	r0, r5
 8009664:	bd70      	pop	{r4, r5, r6, pc}
 8009666:	2b00      	cmp	r3, #0
 8009668:	da04      	bge.n	8009674 <_puts_r+0x60>
 800966a:	69a2      	ldr	r2, [r4, #24]
 800966c:	429a      	cmp	r2, r3
 800966e:	dc17      	bgt.n	80096a0 <_puts_r+0x8c>
 8009670:	290a      	cmp	r1, #10
 8009672:	d015      	beq.n	80096a0 <_puts_r+0x8c>
 8009674:	6823      	ldr	r3, [r4, #0]
 8009676:	1c5a      	adds	r2, r3, #1
 8009678:	6022      	str	r2, [r4, #0]
 800967a:	7019      	strb	r1, [r3, #0]
 800967c:	68a3      	ldr	r3, [r4, #8]
 800967e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009682:	3b01      	subs	r3, #1
 8009684:	60a3      	str	r3, [r4, #8]
 8009686:	2900      	cmp	r1, #0
 8009688:	d1ed      	bne.n	8009666 <_puts_r+0x52>
 800968a:	2b00      	cmp	r3, #0
 800968c:	da11      	bge.n	80096b2 <_puts_r+0x9e>
 800968e:	4622      	mov	r2, r4
 8009690:	210a      	movs	r1, #10
 8009692:	4628      	mov	r0, r5
 8009694:	f000 f893 	bl	80097be <__swbuf_r>
 8009698:	3001      	adds	r0, #1
 800969a:	d0d7      	beq.n	800964c <_puts_r+0x38>
 800969c:	250a      	movs	r5, #10
 800969e:	e7d7      	b.n	8009650 <_puts_r+0x3c>
 80096a0:	4622      	mov	r2, r4
 80096a2:	4628      	mov	r0, r5
 80096a4:	f000 f88b 	bl	80097be <__swbuf_r>
 80096a8:	3001      	adds	r0, #1
 80096aa:	d1e7      	bne.n	800967c <_puts_r+0x68>
 80096ac:	e7ce      	b.n	800964c <_puts_r+0x38>
 80096ae:	3e01      	subs	r6, #1
 80096b0:	e7e4      	b.n	800967c <_puts_r+0x68>
 80096b2:	6823      	ldr	r3, [r4, #0]
 80096b4:	1c5a      	adds	r2, r3, #1
 80096b6:	6022      	str	r2, [r4, #0]
 80096b8:	220a      	movs	r2, #10
 80096ba:	701a      	strb	r2, [r3, #0]
 80096bc:	e7ee      	b.n	800969c <_puts_r+0x88>
	...

080096c0 <puts>:
 80096c0:	4b02      	ldr	r3, [pc, #8]	@ (80096cc <puts+0xc>)
 80096c2:	4601      	mov	r1, r0
 80096c4:	6818      	ldr	r0, [r3, #0]
 80096c6:	f7ff bfa5 	b.w	8009614 <_puts_r>
 80096ca:	bf00      	nop
 80096cc:	20000028 	.word	0x20000028

080096d0 <sniprintf>:
 80096d0:	b40c      	push	{r2, r3}
 80096d2:	b530      	push	{r4, r5, lr}
 80096d4:	4b17      	ldr	r3, [pc, #92]	@ (8009734 <sniprintf+0x64>)
 80096d6:	1e0c      	subs	r4, r1, #0
 80096d8:	681d      	ldr	r5, [r3, #0]
 80096da:	b09d      	sub	sp, #116	@ 0x74
 80096dc:	da08      	bge.n	80096f0 <sniprintf+0x20>
 80096de:	238b      	movs	r3, #139	@ 0x8b
 80096e0:	602b      	str	r3, [r5, #0]
 80096e2:	f04f 30ff 	mov.w	r0, #4294967295
 80096e6:	b01d      	add	sp, #116	@ 0x74
 80096e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096ec:	b002      	add	sp, #8
 80096ee:	4770      	bx	lr
 80096f0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80096f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80096f8:	bf14      	ite	ne
 80096fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80096fe:	4623      	moveq	r3, r4
 8009700:	9304      	str	r3, [sp, #16]
 8009702:	9307      	str	r3, [sp, #28]
 8009704:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009708:	9002      	str	r0, [sp, #8]
 800970a:	9006      	str	r0, [sp, #24]
 800970c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009710:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009712:	ab21      	add	r3, sp, #132	@ 0x84
 8009714:	a902      	add	r1, sp, #8
 8009716:	4628      	mov	r0, r5
 8009718:	9301      	str	r3, [sp, #4]
 800971a:	f000 fb19 	bl	8009d50 <_svfiprintf_r>
 800971e:	1c43      	adds	r3, r0, #1
 8009720:	bfbc      	itt	lt
 8009722:	238b      	movlt	r3, #139	@ 0x8b
 8009724:	602b      	strlt	r3, [r5, #0]
 8009726:	2c00      	cmp	r4, #0
 8009728:	d0dd      	beq.n	80096e6 <sniprintf+0x16>
 800972a:	9b02      	ldr	r3, [sp, #8]
 800972c:	2200      	movs	r2, #0
 800972e:	701a      	strb	r2, [r3, #0]
 8009730:	e7d9      	b.n	80096e6 <sniprintf+0x16>
 8009732:	bf00      	nop
 8009734:	20000028 	.word	0x20000028

08009738 <__sread>:
 8009738:	b510      	push	{r4, lr}
 800973a:	460c      	mov	r4, r1
 800973c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009740:	f000 f952 	bl	80099e8 <_read_r>
 8009744:	2800      	cmp	r0, #0
 8009746:	bfab      	itete	ge
 8009748:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800974a:	89a3      	ldrhlt	r3, [r4, #12]
 800974c:	181b      	addge	r3, r3, r0
 800974e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009752:	bfac      	ite	ge
 8009754:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009756:	81a3      	strhlt	r3, [r4, #12]
 8009758:	bd10      	pop	{r4, pc}

0800975a <__swrite>:
 800975a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800975e:	461f      	mov	r7, r3
 8009760:	898b      	ldrh	r3, [r1, #12]
 8009762:	05db      	lsls	r3, r3, #23
 8009764:	4605      	mov	r5, r0
 8009766:	460c      	mov	r4, r1
 8009768:	4616      	mov	r6, r2
 800976a:	d505      	bpl.n	8009778 <__swrite+0x1e>
 800976c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009770:	2302      	movs	r3, #2
 8009772:	2200      	movs	r2, #0
 8009774:	f000 f926 	bl	80099c4 <_lseek_r>
 8009778:	89a3      	ldrh	r3, [r4, #12]
 800977a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800977e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009782:	81a3      	strh	r3, [r4, #12]
 8009784:	4632      	mov	r2, r6
 8009786:	463b      	mov	r3, r7
 8009788:	4628      	mov	r0, r5
 800978a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800978e:	f000 b93d 	b.w	8009a0c <_write_r>

08009792 <__sseek>:
 8009792:	b510      	push	{r4, lr}
 8009794:	460c      	mov	r4, r1
 8009796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800979a:	f000 f913 	bl	80099c4 <_lseek_r>
 800979e:	1c43      	adds	r3, r0, #1
 80097a0:	89a3      	ldrh	r3, [r4, #12]
 80097a2:	bf15      	itete	ne
 80097a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80097a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80097aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80097ae:	81a3      	strheq	r3, [r4, #12]
 80097b0:	bf18      	it	ne
 80097b2:	81a3      	strhne	r3, [r4, #12]
 80097b4:	bd10      	pop	{r4, pc}

080097b6 <__sclose>:
 80097b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ba:	f000 b89d 	b.w	80098f8 <_close_r>

080097be <__swbuf_r>:
 80097be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c0:	460e      	mov	r6, r1
 80097c2:	4614      	mov	r4, r2
 80097c4:	4605      	mov	r5, r0
 80097c6:	b118      	cbz	r0, 80097d0 <__swbuf_r+0x12>
 80097c8:	6a03      	ldr	r3, [r0, #32]
 80097ca:	b90b      	cbnz	r3, 80097d0 <__swbuf_r+0x12>
 80097cc:	f7ff feec 	bl	80095a8 <__sinit>
 80097d0:	69a3      	ldr	r3, [r4, #24]
 80097d2:	60a3      	str	r3, [r4, #8]
 80097d4:	89a3      	ldrh	r3, [r4, #12]
 80097d6:	071a      	lsls	r2, r3, #28
 80097d8:	d501      	bpl.n	80097de <__swbuf_r+0x20>
 80097da:	6923      	ldr	r3, [r4, #16]
 80097dc:	b943      	cbnz	r3, 80097f0 <__swbuf_r+0x32>
 80097de:	4621      	mov	r1, r4
 80097e0:	4628      	mov	r0, r5
 80097e2:	f000 f82b 	bl	800983c <__swsetup_r>
 80097e6:	b118      	cbz	r0, 80097f0 <__swbuf_r+0x32>
 80097e8:	f04f 37ff 	mov.w	r7, #4294967295
 80097ec:	4638      	mov	r0, r7
 80097ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097f0:	6823      	ldr	r3, [r4, #0]
 80097f2:	6922      	ldr	r2, [r4, #16]
 80097f4:	1a98      	subs	r0, r3, r2
 80097f6:	6963      	ldr	r3, [r4, #20]
 80097f8:	b2f6      	uxtb	r6, r6
 80097fa:	4283      	cmp	r3, r0
 80097fc:	4637      	mov	r7, r6
 80097fe:	dc05      	bgt.n	800980c <__swbuf_r+0x4e>
 8009800:	4621      	mov	r1, r4
 8009802:	4628      	mov	r0, r5
 8009804:	f000 fdb2 	bl	800a36c <_fflush_r>
 8009808:	2800      	cmp	r0, #0
 800980a:	d1ed      	bne.n	80097e8 <__swbuf_r+0x2a>
 800980c:	68a3      	ldr	r3, [r4, #8]
 800980e:	3b01      	subs	r3, #1
 8009810:	60a3      	str	r3, [r4, #8]
 8009812:	6823      	ldr	r3, [r4, #0]
 8009814:	1c5a      	adds	r2, r3, #1
 8009816:	6022      	str	r2, [r4, #0]
 8009818:	701e      	strb	r6, [r3, #0]
 800981a:	6962      	ldr	r2, [r4, #20]
 800981c:	1c43      	adds	r3, r0, #1
 800981e:	429a      	cmp	r2, r3
 8009820:	d004      	beq.n	800982c <__swbuf_r+0x6e>
 8009822:	89a3      	ldrh	r3, [r4, #12]
 8009824:	07db      	lsls	r3, r3, #31
 8009826:	d5e1      	bpl.n	80097ec <__swbuf_r+0x2e>
 8009828:	2e0a      	cmp	r6, #10
 800982a:	d1df      	bne.n	80097ec <__swbuf_r+0x2e>
 800982c:	4621      	mov	r1, r4
 800982e:	4628      	mov	r0, r5
 8009830:	f000 fd9c 	bl	800a36c <_fflush_r>
 8009834:	2800      	cmp	r0, #0
 8009836:	d0d9      	beq.n	80097ec <__swbuf_r+0x2e>
 8009838:	e7d6      	b.n	80097e8 <__swbuf_r+0x2a>
	...

0800983c <__swsetup_r>:
 800983c:	b538      	push	{r3, r4, r5, lr}
 800983e:	4b29      	ldr	r3, [pc, #164]	@ (80098e4 <__swsetup_r+0xa8>)
 8009840:	4605      	mov	r5, r0
 8009842:	6818      	ldr	r0, [r3, #0]
 8009844:	460c      	mov	r4, r1
 8009846:	b118      	cbz	r0, 8009850 <__swsetup_r+0x14>
 8009848:	6a03      	ldr	r3, [r0, #32]
 800984a:	b90b      	cbnz	r3, 8009850 <__swsetup_r+0x14>
 800984c:	f7ff feac 	bl	80095a8 <__sinit>
 8009850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009854:	0719      	lsls	r1, r3, #28
 8009856:	d422      	bmi.n	800989e <__swsetup_r+0x62>
 8009858:	06da      	lsls	r2, r3, #27
 800985a:	d407      	bmi.n	800986c <__swsetup_r+0x30>
 800985c:	2209      	movs	r2, #9
 800985e:	602a      	str	r2, [r5, #0]
 8009860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009864:	81a3      	strh	r3, [r4, #12]
 8009866:	f04f 30ff 	mov.w	r0, #4294967295
 800986a:	e033      	b.n	80098d4 <__swsetup_r+0x98>
 800986c:	0758      	lsls	r0, r3, #29
 800986e:	d512      	bpl.n	8009896 <__swsetup_r+0x5a>
 8009870:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009872:	b141      	cbz	r1, 8009886 <__swsetup_r+0x4a>
 8009874:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009878:	4299      	cmp	r1, r3
 800987a:	d002      	beq.n	8009882 <__swsetup_r+0x46>
 800987c:	4628      	mov	r0, r5
 800987e:	f000 f913 	bl	8009aa8 <_free_r>
 8009882:	2300      	movs	r3, #0
 8009884:	6363      	str	r3, [r4, #52]	@ 0x34
 8009886:	89a3      	ldrh	r3, [r4, #12]
 8009888:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800988c:	81a3      	strh	r3, [r4, #12]
 800988e:	2300      	movs	r3, #0
 8009890:	6063      	str	r3, [r4, #4]
 8009892:	6923      	ldr	r3, [r4, #16]
 8009894:	6023      	str	r3, [r4, #0]
 8009896:	89a3      	ldrh	r3, [r4, #12]
 8009898:	f043 0308 	orr.w	r3, r3, #8
 800989c:	81a3      	strh	r3, [r4, #12]
 800989e:	6923      	ldr	r3, [r4, #16]
 80098a0:	b94b      	cbnz	r3, 80098b6 <__swsetup_r+0x7a>
 80098a2:	89a3      	ldrh	r3, [r4, #12]
 80098a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80098a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098ac:	d003      	beq.n	80098b6 <__swsetup_r+0x7a>
 80098ae:	4621      	mov	r1, r4
 80098b0:	4628      	mov	r0, r5
 80098b2:	f000 fda9 	bl	800a408 <__smakebuf_r>
 80098b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098ba:	f013 0201 	ands.w	r2, r3, #1
 80098be:	d00a      	beq.n	80098d6 <__swsetup_r+0x9a>
 80098c0:	2200      	movs	r2, #0
 80098c2:	60a2      	str	r2, [r4, #8]
 80098c4:	6962      	ldr	r2, [r4, #20]
 80098c6:	4252      	negs	r2, r2
 80098c8:	61a2      	str	r2, [r4, #24]
 80098ca:	6922      	ldr	r2, [r4, #16]
 80098cc:	b942      	cbnz	r2, 80098e0 <__swsetup_r+0xa4>
 80098ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80098d2:	d1c5      	bne.n	8009860 <__swsetup_r+0x24>
 80098d4:	bd38      	pop	{r3, r4, r5, pc}
 80098d6:	0799      	lsls	r1, r3, #30
 80098d8:	bf58      	it	pl
 80098da:	6962      	ldrpl	r2, [r4, #20]
 80098dc:	60a2      	str	r2, [r4, #8]
 80098de:	e7f4      	b.n	80098ca <__swsetup_r+0x8e>
 80098e0:	2000      	movs	r0, #0
 80098e2:	e7f7      	b.n	80098d4 <__swsetup_r+0x98>
 80098e4:	20000028 	.word	0x20000028

080098e8 <memset>:
 80098e8:	4402      	add	r2, r0
 80098ea:	4603      	mov	r3, r0
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d100      	bne.n	80098f2 <memset+0xa>
 80098f0:	4770      	bx	lr
 80098f2:	f803 1b01 	strb.w	r1, [r3], #1
 80098f6:	e7f9      	b.n	80098ec <memset+0x4>

080098f8 <_close_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4d06      	ldr	r5, [pc, #24]	@ (8009914 <_close_r+0x1c>)
 80098fc:	2300      	movs	r3, #0
 80098fe:	4604      	mov	r4, r0
 8009900:	4608      	mov	r0, r1
 8009902:	602b      	str	r3, [r5, #0]
 8009904:	f7f7 fdb7 	bl	8001476 <_close>
 8009908:	1c43      	adds	r3, r0, #1
 800990a:	d102      	bne.n	8009912 <_close_r+0x1a>
 800990c:	682b      	ldr	r3, [r5, #0]
 800990e:	b103      	cbz	r3, 8009912 <_close_r+0x1a>
 8009910:	6023      	str	r3, [r4, #0]
 8009912:	bd38      	pop	{r3, r4, r5, pc}
 8009914:	20001854 	.word	0x20001854

08009918 <_reclaim_reent>:
 8009918:	4b29      	ldr	r3, [pc, #164]	@ (80099c0 <_reclaim_reent+0xa8>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4283      	cmp	r3, r0
 800991e:	b570      	push	{r4, r5, r6, lr}
 8009920:	4604      	mov	r4, r0
 8009922:	d04b      	beq.n	80099bc <_reclaim_reent+0xa4>
 8009924:	69c3      	ldr	r3, [r0, #28]
 8009926:	b1ab      	cbz	r3, 8009954 <_reclaim_reent+0x3c>
 8009928:	68db      	ldr	r3, [r3, #12]
 800992a:	b16b      	cbz	r3, 8009948 <_reclaim_reent+0x30>
 800992c:	2500      	movs	r5, #0
 800992e:	69e3      	ldr	r3, [r4, #28]
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	5959      	ldr	r1, [r3, r5]
 8009934:	2900      	cmp	r1, #0
 8009936:	d13b      	bne.n	80099b0 <_reclaim_reent+0x98>
 8009938:	3504      	adds	r5, #4
 800993a:	2d80      	cmp	r5, #128	@ 0x80
 800993c:	d1f7      	bne.n	800992e <_reclaim_reent+0x16>
 800993e:	69e3      	ldr	r3, [r4, #28]
 8009940:	4620      	mov	r0, r4
 8009942:	68d9      	ldr	r1, [r3, #12]
 8009944:	f000 f8b0 	bl	8009aa8 <_free_r>
 8009948:	69e3      	ldr	r3, [r4, #28]
 800994a:	6819      	ldr	r1, [r3, #0]
 800994c:	b111      	cbz	r1, 8009954 <_reclaim_reent+0x3c>
 800994e:	4620      	mov	r0, r4
 8009950:	f000 f8aa 	bl	8009aa8 <_free_r>
 8009954:	6961      	ldr	r1, [r4, #20]
 8009956:	b111      	cbz	r1, 800995e <_reclaim_reent+0x46>
 8009958:	4620      	mov	r0, r4
 800995a:	f000 f8a5 	bl	8009aa8 <_free_r>
 800995e:	69e1      	ldr	r1, [r4, #28]
 8009960:	b111      	cbz	r1, 8009968 <_reclaim_reent+0x50>
 8009962:	4620      	mov	r0, r4
 8009964:	f000 f8a0 	bl	8009aa8 <_free_r>
 8009968:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800996a:	b111      	cbz	r1, 8009972 <_reclaim_reent+0x5a>
 800996c:	4620      	mov	r0, r4
 800996e:	f000 f89b 	bl	8009aa8 <_free_r>
 8009972:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009974:	b111      	cbz	r1, 800997c <_reclaim_reent+0x64>
 8009976:	4620      	mov	r0, r4
 8009978:	f000 f896 	bl	8009aa8 <_free_r>
 800997c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800997e:	b111      	cbz	r1, 8009986 <_reclaim_reent+0x6e>
 8009980:	4620      	mov	r0, r4
 8009982:	f000 f891 	bl	8009aa8 <_free_r>
 8009986:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009988:	b111      	cbz	r1, 8009990 <_reclaim_reent+0x78>
 800998a:	4620      	mov	r0, r4
 800998c:	f000 f88c 	bl	8009aa8 <_free_r>
 8009990:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009992:	b111      	cbz	r1, 800999a <_reclaim_reent+0x82>
 8009994:	4620      	mov	r0, r4
 8009996:	f000 f887 	bl	8009aa8 <_free_r>
 800999a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800999c:	b111      	cbz	r1, 80099a4 <_reclaim_reent+0x8c>
 800999e:	4620      	mov	r0, r4
 80099a0:	f000 f882 	bl	8009aa8 <_free_r>
 80099a4:	6a23      	ldr	r3, [r4, #32]
 80099a6:	b14b      	cbz	r3, 80099bc <_reclaim_reent+0xa4>
 80099a8:	4620      	mov	r0, r4
 80099aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80099ae:	4718      	bx	r3
 80099b0:	680e      	ldr	r6, [r1, #0]
 80099b2:	4620      	mov	r0, r4
 80099b4:	f000 f878 	bl	8009aa8 <_free_r>
 80099b8:	4631      	mov	r1, r6
 80099ba:	e7bb      	b.n	8009934 <_reclaim_reent+0x1c>
 80099bc:	bd70      	pop	{r4, r5, r6, pc}
 80099be:	bf00      	nop
 80099c0:	20000028 	.word	0x20000028

080099c4 <_lseek_r>:
 80099c4:	b538      	push	{r3, r4, r5, lr}
 80099c6:	4d07      	ldr	r5, [pc, #28]	@ (80099e4 <_lseek_r+0x20>)
 80099c8:	4604      	mov	r4, r0
 80099ca:	4608      	mov	r0, r1
 80099cc:	4611      	mov	r1, r2
 80099ce:	2200      	movs	r2, #0
 80099d0:	602a      	str	r2, [r5, #0]
 80099d2:	461a      	mov	r2, r3
 80099d4:	f7f7 fd76 	bl	80014c4 <_lseek>
 80099d8:	1c43      	adds	r3, r0, #1
 80099da:	d102      	bne.n	80099e2 <_lseek_r+0x1e>
 80099dc:	682b      	ldr	r3, [r5, #0]
 80099de:	b103      	cbz	r3, 80099e2 <_lseek_r+0x1e>
 80099e0:	6023      	str	r3, [r4, #0]
 80099e2:	bd38      	pop	{r3, r4, r5, pc}
 80099e4:	20001854 	.word	0x20001854

080099e8 <_read_r>:
 80099e8:	b538      	push	{r3, r4, r5, lr}
 80099ea:	4d07      	ldr	r5, [pc, #28]	@ (8009a08 <_read_r+0x20>)
 80099ec:	4604      	mov	r4, r0
 80099ee:	4608      	mov	r0, r1
 80099f0:	4611      	mov	r1, r2
 80099f2:	2200      	movs	r2, #0
 80099f4:	602a      	str	r2, [r5, #0]
 80099f6:	461a      	mov	r2, r3
 80099f8:	f7f7 fd04 	bl	8001404 <_read>
 80099fc:	1c43      	adds	r3, r0, #1
 80099fe:	d102      	bne.n	8009a06 <_read_r+0x1e>
 8009a00:	682b      	ldr	r3, [r5, #0]
 8009a02:	b103      	cbz	r3, 8009a06 <_read_r+0x1e>
 8009a04:	6023      	str	r3, [r4, #0]
 8009a06:	bd38      	pop	{r3, r4, r5, pc}
 8009a08:	20001854 	.word	0x20001854

08009a0c <_write_r>:
 8009a0c:	b538      	push	{r3, r4, r5, lr}
 8009a0e:	4d07      	ldr	r5, [pc, #28]	@ (8009a2c <_write_r+0x20>)
 8009a10:	4604      	mov	r4, r0
 8009a12:	4608      	mov	r0, r1
 8009a14:	4611      	mov	r1, r2
 8009a16:	2200      	movs	r2, #0
 8009a18:	602a      	str	r2, [r5, #0]
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	f7f7 fd0f 	bl	800143e <_write>
 8009a20:	1c43      	adds	r3, r0, #1
 8009a22:	d102      	bne.n	8009a2a <_write_r+0x1e>
 8009a24:	682b      	ldr	r3, [r5, #0]
 8009a26:	b103      	cbz	r3, 8009a2a <_write_r+0x1e>
 8009a28:	6023      	str	r3, [r4, #0]
 8009a2a:	bd38      	pop	{r3, r4, r5, pc}
 8009a2c:	20001854 	.word	0x20001854

08009a30 <__errno>:
 8009a30:	4b01      	ldr	r3, [pc, #4]	@ (8009a38 <__errno+0x8>)
 8009a32:	6818      	ldr	r0, [r3, #0]
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop
 8009a38:	20000028 	.word	0x20000028

08009a3c <__libc_init_array>:
 8009a3c:	b570      	push	{r4, r5, r6, lr}
 8009a3e:	4d0d      	ldr	r5, [pc, #52]	@ (8009a74 <__libc_init_array+0x38>)
 8009a40:	4c0d      	ldr	r4, [pc, #52]	@ (8009a78 <__libc_init_array+0x3c>)
 8009a42:	1b64      	subs	r4, r4, r5
 8009a44:	10a4      	asrs	r4, r4, #2
 8009a46:	2600      	movs	r6, #0
 8009a48:	42a6      	cmp	r6, r4
 8009a4a:	d109      	bne.n	8009a60 <__libc_init_array+0x24>
 8009a4c:	4d0b      	ldr	r5, [pc, #44]	@ (8009a7c <__libc_init_array+0x40>)
 8009a4e:	4c0c      	ldr	r4, [pc, #48]	@ (8009a80 <__libc_init_array+0x44>)
 8009a50:	f000 fd98 	bl	800a584 <_init>
 8009a54:	1b64      	subs	r4, r4, r5
 8009a56:	10a4      	asrs	r4, r4, #2
 8009a58:	2600      	movs	r6, #0
 8009a5a:	42a6      	cmp	r6, r4
 8009a5c:	d105      	bne.n	8009a6a <__libc_init_array+0x2e>
 8009a5e:	bd70      	pop	{r4, r5, r6, pc}
 8009a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a64:	4798      	blx	r3
 8009a66:	3601      	adds	r6, #1
 8009a68:	e7ee      	b.n	8009a48 <__libc_init_array+0xc>
 8009a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a6e:	4798      	blx	r3
 8009a70:	3601      	adds	r6, #1
 8009a72:	e7f2      	b.n	8009a5a <__libc_init_array+0x1e>
 8009a74:	0800a934 	.word	0x0800a934
 8009a78:	0800a934 	.word	0x0800a934
 8009a7c:	0800a934 	.word	0x0800a934
 8009a80:	0800a938 	.word	0x0800a938

08009a84 <__retarget_lock_init_recursive>:
 8009a84:	4770      	bx	lr

08009a86 <__retarget_lock_acquire_recursive>:
 8009a86:	4770      	bx	lr

08009a88 <__retarget_lock_release_recursive>:
 8009a88:	4770      	bx	lr

08009a8a <memcpy>:
 8009a8a:	440a      	add	r2, r1
 8009a8c:	4291      	cmp	r1, r2
 8009a8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a92:	d100      	bne.n	8009a96 <memcpy+0xc>
 8009a94:	4770      	bx	lr
 8009a96:	b510      	push	{r4, lr}
 8009a98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009aa0:	4291      	cmp	r1, r2
 8009aa2:	d1f9      	bne.n	8009a98 <memcpy+0xe>
 8009aa4:	bd10      	pop	{r4, pc}
	...

08009aa8 <_free_r>:
 8009aa8:	b538      	push	{r3, r4, r5, lr}
 8009aaa:	4605      	mov	r5, r0
 8009aac:	2900      	cmp	r1, #0
 8009aae:	d041      	beq.n	8009b34 <_free_r+0x8c>
 8009ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ab4:	1f0c      	subs	r4, r1, #4
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	bfb8      	it	lt
 8009aba:	18e4      	addlt	r4, r4, r3
 8009abc:	f000 f8e0 	bl	8009c80 <__malloc_lock>
 8009ac0:	4a1d      	ldr	r2, [pc, #116]	@ (8009b38 <_free_r+0x90>)
 8009ac2:	6813      	ldr	r3, [r2, #0]
 8009ac4:	b933      	cbnz	r3, 8009ad4 <_free_r+0x2c>
 8009ac6:	6063      	str	r3, [r4, #4]
 8009ac8:	6014      	str	r4, [r2, #0]
 8009aca:	4628      	mov	r0, r5
 8009acc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ad0:	f000 b8dc 	b.w	8009c8c <__malloc_unlock>
 8009ad4:	42a3      	cmp	r3, r4
 8009ad6:	d908      	bls.n	8009aea <_free_r+0x42>
 8009ad8:	6820      	ldr	r0, [r4, #0]
 8009ada:	1821      	adds	r1, r4, r0
 8009adc:	428b      	cmp	r3, r1
 8009ade:	bf01      	itttt	eq
 8009ae0:	6819      	ldreq	r1, [r3, #0]
 8009ae2:	685b      	ldreq	r3, [r3, #4]
 8009ae4:	1809      	addeq	r1, r1, r0
 8009ae6:	6021      	streq	r1, [r4, #0]
 8009ae8:	e7ed      	b.n	8009ac6 <_free_r+0x1e>
 8009aea:	461a      	mov	r2, r3
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	b10b      	cbz	r3, 8009af4 <_free_r+0x4c>
 8009af0:	42a3      	cmp	r3, r4
 8009af2:	d9fa      	bls.n	8009aea <_free_r+0x42>
 8009af4:	6811      	ldr	r1, [r2, #0]
 8009af6:	1850      	adds	r0, r2, r1
 8009af8:	42a0      	cmp	r0, r4
 8009afa:	d10b      	bne.n	8009b14 <_free_r+0x6c>
 8009afc:	6820      	ldr	r0, [r4, #0]
 8009afe:	4401      	add	r1, r0
 8009b00:	1850      	adds	r0, r2, r1
 8009b02:	4283      	cmp	r3, r0
 8009b04:	6011      	str	r1, [r2, #0]
 8009b06:	d1e0      	bne.n	8009aca <_free_r+0x22>
 8009b08:	6818      	ldr	r0, [r3, #0]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	6053      	str	r3, [r2, #4]
 8009b0e:	4408      	add	r0, r1
 8009b10:	6010      	str	r0, [r2, #0]
 8009b12:	e7da      	b.n	8009aca <_free_r+0x22>
 8009b14:	d902      	bls.n	8009b1c <_free_r+0x74>
 8009b16:	230c      	movs	r3, #12
 8009b18:	602b      	str	r3, [r5, #0]
 8009b1a:	e7d6      	b.n	8009aca <_free_r+0x22>
 8009b1c:	6820      	ldr	r0, [r4, #0]
 8009b1e:	1821      	adds	r1, r4, r0
 8009b20:	428b      	cmp	r3, r1
 8009b22:	bf04      	itt	eq
 8009b24:	6819      	ldreq	r1, [r3, #0]
 8009b26:	685b      	ldreq	r3, [r3, #4]
 8009b28:	6063      	str	r3, [r4, #4]
 8009b2a:	bf04      	itt	eq
 8009b2c:	1809      	addeq	r1, r1, r0
 8009b2e:	6021      	streq	r1, [r4, #0]
 8009b30:	6054      	str	r4, [r2, #4]
 8009b32:	e7ca      	b.n	8009aca <_free_r+0x22>
 8009b34:	bd38      	pop	{r3, r4, r5, pc}
 8009b36:	bf00      	nop
 8009b38:	20001860 	.word	0x20001860

08009b3c <sbrk_aligned>:
 8009b3c:	b570      	push	{r4, r5, r6, lr}
 8009b3e:	4e0f      	ldr	r6, [pc, #60]	@ (8009b7c <sbrk_aligned+0x40>)
 8009b40:	460c      	mov	r4, r1
 8009b42:	6831      	ldr	r1, [r6, #0]
 8009b44:	4605      	mov	r5, r0
 8009b46:	b911      	cbnz	r1, 8009b4e <sbrk_aligned+0x12>
 8009b48:	f000 fcd6 	bl	800a4f8 <_sbrk_r>
 8009b4c:	6030      	str	r0, [r6, #0]
 8009b4e:	4621      	mov	r1, r4
 8009b50:	4628      	mov	r0, r5
 8009b52:	f000 fcd1 	bl	800a4f8 <_sbrk_r>
 8009b56:	1c43      	adds	r3, r0, #1
 8009b58:	d103      	bne.n	8009b62 <sbrk_aligned+0x26>
 8009b5a:	f04f 34ff 	mov.w	r4, #4294967295
 8009b5e:	4620      	mov	r0, r4
 8009b60:	bd70      	pop	{r4, r5, r6, pc}
 8009b62:	1cc4      	adds	r4, r0, #3
 8009b64:	f024 0403 	bic.w	r4, r4, #3
 8009b68:	42a0      	cmp	r0, r4
 8009b6a:	d0f8      	beq.n	8009b5e <sbrk_aligned+0x22>
 8009b6c:	1a21      	subs	r1, r4, r0
 8009b6e:	4628      	mov	r0, r5
 8009b70:	f000 fcc2 	bl	800a4f8 <_sbrk_r>
 8009b74:	3001      	adds	r0, #1
 8009b76:	d1f2      	bne.n	8009b5e <sbrk_aligned+0x22>
 8009b78:	e7ef      	b.n	8009b5a <sbrk_aligned+0x1e>
 8009b7a:	bf00      	nop
 8009b7c:	2000185c 	.word	0x2000185c

08009b80 <_malloc_r>:
 8009b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b84:	1ccd      	adds	r5, r1, #3
 8009b86:	f025 0503 	bic.w	r5, r5, #3
 8009b8a:	3508      	adds	r5, #8
 8009b8c:	2d0c      	cmp	r5, #12
 8009b8e:	bf38      	it	cc
 8009b90:	250c      	movcc	r5, #12
 8009b92:	2d00      	cmp	r5, #0
 8009b94:	4606      	mov	r6, r0
 8009b96:	db01      	blt.n	8009b9c <_malloc_r+0x1c>
 8009b98:	42a9      	cmp	r1, r5
 8009b9a:	d904      	bls.n	8009ba6 <_malloc_r+0x26>
 8009b9c:	230c      	movs	r3, #12
 8009b9e:	6033      	str	r3, [r6, #0]
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ba6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009c7c <_malloc_r+0xfc>
 8009baa:	f000 f869 	bl	8009c80 <__malloc_lock>
 8009bae:	f8d8 3000 	ldr.w	r3, [r8]
 8009bb2:	461c      	mov	r4, r3
 8009bb4:	bb44      	cbnz	r4, 8009c08 <_malloc_r+0x88>
 8009bb6:	4629      	mov	r1, r5
 8009bb8:	4630      	mov	r0, r6
 8009bba:	f7ff ffbf 	bl	8009b3c <sbrk_aligned>
 8009bbe:	1c43      	adds	r3, r0, #1
 8009bc0:	4604      	mov	r4, r0
 8009bc2:	d158      	bne.n	8009c76 <_malloc_r+0xf6>
 8009bc4:	f8d8 4000 	ldr.w	r4, [r8]
 8009bc8:	4627      	mov	r7, r4
 8009bca:	2f00      	cmp	r7, #0
 8009bcc:	d143      	bne.n	8009c56 <_malloc_r+0xd6>
 8009bce:	2c00      	cmp	r4, #0
 8009bd0:	d04b      	beq.n	8009c6a <_malloc_r+0xea>
 8009bd2:	6823      	ldr	r3, [r4, #0]
 8009bd4:	4639      	mov	r1, r7
 8009bd6:	4630      	mov	r0, r6
 8009bd8:	eb04 0903 	add.w	r9, r4, r3
 8009bdc:	f000 fc8c 	bl	800a4f8 <_sbrk_r>
 8009be0:	4581      	cmp	r9, r0
 8009be2:	d142      	bne.n	8009c6a <_malloc_r+0xea>
 8009be4:	6821      	ldr	r1, [r4, #0]
 8009be6:	1a6d      	subs	r5, r5, r1
 8009be8:	4629      	mov	r1, r5
 8009bea:	4630      	mov	r0, r6
 8009bec:	f7ff ffa6 	bl	8009b3c <sbrk_aligned>
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	d03a      	beq.n	8009c6a <_malloc_r+0xea>
 8009bf4:	6823      	ldr	r3, [r4, #0]
 8009bf6:	442b      	add	r3, r5
 8009bf8:	6023      	str	r3, [r4, #0]
 8009bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8009bfe:	685a      	ldr	r2, [r3, #4]
 8009c00:	bb62      	cbnz	r2, 8009c5c <_malloc_r+0xdc>
 8009c02:	f8c8 7000 	str.w	r7, [r8]
 8009c06:	e00f      	b.n	8009c28 <_malloc_r+0xa8>
 8009c08:	6822      	ldr	r2, [r4, #0]
 8009c0a:	1b52      	subs	r2, r2, r5
 8009c0c:	d420      	bmi.n	8009c50 <_malloc_r+0xd0>
 8009c0e:	2a0b      	cmp	r2, #11
 8009c10:	d917      	bls.n	8009c42 <_malloc_r+0xc2>
 8009c12:	1961      	adds	r1, r4, r5
 8009c14:	42a3      	cmp	r3, r4
 8009c16:	6025      	str	r5, [r4, #0]
 8009c18:	bf18      	it	ne
 8009c1a:	6059      	strne	r1, [r3, #4]
 8009c1c:	6863      	ldr	r3, [r4, #4]
 8009c1e:	bf08      	it	eq
 8009c20:	f8c8 1000 	streq.w	r1, [r8]
 8009c24:	5162      	str	r2, [r4, r5]
 8009c26:	604b      	str	r3, [r1, #4]
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f000 f82f 	bl	8009c8c <__malloc_unlock>
 8009c2e:	f104 000b 	add.w	r0, r4, #11
 8009c32:	1d23      	adds	r3, r4, #4
 8009c34:	f020 0007 	bic.w	r0, r0, #7
 8009c38:	1ac2      	subs	r2, r0, r3
 8009c3a:	bf1c      	itt	ne
 8009c3c:	1a1b      	subne	r3, r3, r0
 8009c3e:	50a3      	strne	r3, [r4, r2]
 8009c40:	e7af      	b.n	8009ba2 <_malloc_r+0x22>
 8009c42:	6862      	ldr	r2, [r4, #4]
 8009c44:	42a3      	cmp	r3, r4
 8009c46:	bf0c      	ite	eq
 8009c48:	f8c8 2000 	streq.w	r2, [r8]
 8009c4c:	605a      	strne	r2, [r3, #4]
 8009c4e:	e7eb      	b.n	8009c28 <_malloc_r+0xa8>
 8009c50:	4623      	mov	r3, r4
 8009c52:	6864      	ldr	r4, [r4, #4]
 8009c54:	e7ae      	b.n	8009bb4 <_malloc_r+0x34>
 8009c56:	463c      	mov	r4, r7
 8009c58:	687f      	ldr	r7, [r7, #4]
 8009c5a:	e7b6      	b.n	8009bca <_malloc_r+0x4a>
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	42a3      	cmp	r3, r4
 8009c62:	d1fb      	bne.n	8009c5c <_malloc_r+0xdc>
 8009c64:	2300      	movs	r3, #0
 8009c66:	6053      	str	r3, [r2, #4]
 8009c68:	e7de      	b.n	8009c28 <_malloc_r+0xa8>
 8009c6a:	230c      	movs	r3, #12
 8009c6c:	6033      	str	r3, [r6, #0]
 8009c6e:	4630      	mov	r0, r6
 8009c70:	f000 f80c 	bl	8009c8c <__malloc_unlock>
 8009c74:	e794      	b.n	8009ba0 <_malloc_r+0x20>
 8009c76:	6005      	str	r5, [r0, #0]
 8009c78:	e7d6      	b.n	8009c28 <_malloc_r+0xa8>
 8009c7a:	bf00      	nop
 8009c7c:	20001860 	.word	0x20001860

08009c80 <__malloc_lock>:
 8009c80:	4801      	ldr	r0, [pc, #4]	@ (8009c88 <__malloc_lock+0x8>)
 8009c82:	f7ff bf00 	b.w	8009a86 <__retarget_lock_acquire_recursive>
 8009c86:	bf00      	nop
 8009c88:	20001858 	.word	0x20001858

08009c8c <__malloc_unlock>:
 8009c8c:	4801      	ldr	r0, [pc, #4]	@ (8009c94 <__malloc_unlock+0x8>)
 8009c8e:	f7ff befb 	b.w	8009a88 <__retarget_lock_release_recursive>
 8009c92:	bf00      	nop
 8009c94:	20001858 	.word	0x20001858

08009c98 <__ssputs_r>:
 8009c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c9c:	688e      	ldr	r6, [r1, #8]
 8009c9e:	461f      	mov	r7, r3
 8009ca0:	42be      	cmp	r6, r7
 8009ca2:	680b      	ldr	r3, [r1, #0]
 8009ca4:	4682      	mov	sl, r0
 8009ca6:	460c      	mov	r4, r1
 8009ca8:	4690      	mov	r8, r2
 8009caa:	d82d      	bhi.n	8009d08 <__ssputs_r+0x70>
 8009cac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009cb0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009cb4:	d026      	beq.n	8009d04 <__ssputs_r+0x6c>
 8009cb6:	6965      	ldr	r5, [r4, #20]
 8009cb8:	6909      	ldr	r1, [r1, #16]
 8009cba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cbe:	eba3 0901 	sub.w	r9, r3, r1
 8009cc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009cc6:	1c7b      	adds	r3, r7, #1
 8009cc8:	444b      	add	r3, r9
 8009cca:	106d      	asrs	r5, r5, #1
 8009ccc:	429d      	cmp	r5, r3
 8009cce:	bf38      	it	cc
 8009cd0:	461d      	movcc	r5, r3
 8009cd2:	0553      	lsls	r3, r2, #21
 8009cd4:	d527      	bpl.n	8009d26 <__ssputs_r+0x8e>
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	f7ff ff52 	bl	8009b80 <_malloc_r>
 8009cdc:	4606      	mov	r6, r0
 8009cde:	b360      	cbz	r0, 8009d3a <__ssputs_r+0xa2>
 8009ce0:	6921      	ldr	r1, [r4, #16]
 8009ce2:	464a      	mov	r2, r9
 8009ce4:	f7ff fed1 	bl	8009a8a <memcpy>
 8009ce8:	89a3      	ldrh	r3, [r4, #12]
 8009cea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009cee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cf2:	81a3      	strh	r3, [r4, #12]
 8009cf4:	6126      	str	r6, [r4, #16]
 8009cf6:	6165      	str	r5, [r4, #20]
 8009cf8:	444e      	add	r6, r9
 8009cfa:	eba5 0509 	sub.w	r5, r5, r9
 8009cfe:	6026      	str	r6, [r4, #0]
 8009d00:	60a5      	str	r5, [r4, #8]
 8009d02:	463e      	mov	r6, r7
 8009d04:	42be      	cmp	r6, r7
 8009d06:	d900      	bls.n	8009d0a <__ssputs_r+0x72>
 8009d08:	463e      	mov	r6, r7
 8009d0a:	6820      	ldr	r0, [r4, #0]
 8009d0c:	4632      	mov	r2, r6
 8009d0e:	4641      	mov	r1, r8
 8009d10:	f000 fbb6 	bl	800a480 <memmove>
 8009d14:	68a3      	ldr	r3, [r4, #8]
 8009d16:	1b9b      	subs	r3, r3, r6
 8009d18:	60a3      	str	r3, [r4, #8]
 8009d1a:	6823      	ldr	r3, [r4, #0]
 8009d1c:	4433      	add	r3, r6
 8009d1e:	6023      	str	r3, [r4, #0]
 8009d20:	2000      	movs	r0, #0
 8009d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d26:	462a      	mov	r2, r5
 8009d28:	f000 fbf6 	bl	800a518 <_realloc_r>
 8009d2c:	4606      	mov	r6, r0
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	d1e0      	bne.n	8009cf4 <__ssputs_r+0x5c>
 8009d32:	6921      	ldr	r1, [r4, #16]
 8009d34:	4650      	mov	r0, sl
 8009d36:	f7ff feb7 	bl	8009aa8 <_free_r>
 8009d3a:	230c      	movs	r3, #12
 8009d3c:	f8ca 3000 	str.w	r3, [sl]
 8009d40:	89a3      	ldrh	r3, [r4, #12]
 8009d42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d46:	81a3      	strh	r3, [r4, #12]
 8009d48:	f04f 30ff 	mov.w	r0, #4294967295
 8009d4c:	e7e9      	b.n	8009d22 <__ssputs_r+0x8a>
	...

08009d50 <_svfiprintf_r>:
 8009d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d54:	4698      	mov	r8, r3
 8009d56:	898b      	ldrh	r3, [r1, #12]
 8009d58:	061b      	lsls	r3, r3, #24
 8009d5a:	b09d      	sub	sp, #116	@ 0x74
 8009d5c:	4607      	mov	r7, r0
 8009d5e:	460d      	mov	r5, r1
 8009d60:	4614      	mov	r4, r2
 8009d62:	d510      	bpl.n	8009d86 <_svfiprintf_r+0x36>
 8009d64:	690b      	ldr	r3, [r1, #16]
 8009d66:	b973      	cbnz	r3, 8009d86 <_svfiprintf_r+0x36>
 8009d68:	2140      	movs	r1, #64	@ 0x40
 8009d6a:	f7ff ff09 	bl	8009b80 <_malloc_r>
 8009d6e:	6028      	str	r0, [r5, #0]
 8009d70:	6128      	str	r0, [r5, #16]
 8009d72:	b930      	cbnz	r0, 8009d82 <_svfiprintf_r+0x32>
 8009d74:	230c      	movs	r3, #12
 8009d76:	603b      	str	r3, [r7, #0]
 8009d78:	f04f 30ff 	mov.w	r0, #4294967295
 8009d7c:	b01d      	add	sp, #116	@ 0x74
 8009d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d82:	2340      	movs	r3, #64	@ 0x40
 8009d84:	616b      	str	r3, [r5, #20]
 8009d86:	2300      	movs	r3, #0
 8009d88:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d8a:	2320      	movs	r3, #32
 8009d8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d90:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d94:	2330      	movs	r3, #48	@ 0x30
 8009d96:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009f34 <_svfiprintf_r+0x1e4>
 8009d9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d9e:	f04f 0901 	mov.w	r9, #1
 8009da2:	4623      	mov	r3, r4
 8009da4:	469a      	mov	sl, r3
 8009da6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009daa:	b10a      	cbz	r2, 8009db0 <_svfiprintf_r+0x60>
 8009dac:	2a25      	cmp	r2, #37	@ 0x25
 8009dae:	d1f9      	bne.n	8009da4 <_svfiprintf_r+0x54>
 8009db0:	ebba 0b04 	subs.w	fp, sl, r4
 8009db4:	d00b      	beq.n	8009dce <_svfiprintf_r+0x7e>
 8009db6:	465b      	mov	r3, fp
 8009db8:	4622      	mov	r2, r4
 8009dba:	4629      	mov	r1, r5
 8009dbc:	4638      	mov	r0, r7
 8009dbe:	f7ff ff6b 	bl	8009c98 <__ssputs_r>
 8009dc2:	3001      	adds	r0, #1
 8009dc4:	f000 80a7 	beq.w	8009f16 <_svfiprintf_r+0x1c6>
 8009dc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dca:	445a      	add	r2, fp
 8009dcc:	9209      	str	r2, [sp, #36]	@ 0x24
 8009dce:	f89a 3000 	ldrb.w	r3, [sl]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	f000 809f 	beq.w	8009f16 <_svfiprintf_r+0x1c6>
 8009dd8:	2300      	movs	r3, #0
 8009dda:	f04f 32ff 	mov.w	r2, #4294967295
 8009dde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009de2:	f10a 0a01 	add.w	sl, sl, #1
 8009de6:	9304      	str	r3, [sp, #16]
 8009de8:	9307      	str	r3, [sp, #28]
 8009dea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009dee:	931a      	str	r3, [sp, #104]	@ 0x68
 8009df0:	4654      	mov	r4, sl
 8009df2:	2205      	movs	r2, #5
 8009df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009df8:	484e      	ldr	r0, [pc, #312]	@ (8009f34 <_svfiprintf_r+0x1e4>)
 8009dfa:	f7f6 f9f1 	bl	80001e0 <memchr>
 8009dfe:	9a04      	ldr	r2, [sp, #16]
 8009e00:	b9d8      	cbnz	r0, 8009e3a <_svfiprintf_r+0xea>
 8009e02:	06d0      	lsls	r0, r2, #27
 8009e04:	bf44      	itt	mi
 8009e06:	2320      	movmi	r3, #32
 8009e08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e0c:	0711      	lsls	r1, r2, #28
 8009e0e:	bf44      	itt	mi
 8009e10:	232b      	movmi	r3, #43	@ 0x2b
 8009e12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e16:	f89a 3000 	ldrb.w	r3, [sl]
 8009e1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e1c:	d015      	beq.n	8009e4a <_svfiprintf_r+0xfa>
 8009e1e:	9a07      	ldr	r2, [sp, #28]
 8009e20:	4654      	mov	r4, sl
 8009e22:	2000      	movs	r0, #0
 8009e24:	f04f 0c0a 	mov.w	ip, #10
 8009e28:	4621      	mov	r1, r4
 8009e2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e2e:	3b30      	subs	r3, #48	@ 0x30
 8009e30:	2b09      	cmp	r3, #9
 8009e32:	d94b      	bls.n	8009ecc <_svfiprintf_r+0x17c>
 8009e34:	b1b0      	cbz	r0, 8009e64 <_svfiprintf_r+0x114>
 8009e36:	9207      	str	r2, [sp, #28]
 8009e38:	e014      	b.n	8009e64 <_svfiprintf_r+0x114>
 8009e3a:	eba0 0308 	sub.w	r3, r0, r8
 8009e3e:	fa09 f303 	lsl.w	r3, r9, r3
 8009e42:	4313      	orrs	r3, r2
 8009e44:	9304      	str	r3, [sp, #16]
 8009e46:	46a2      	mov	sl, r4
 8009e48:	e7d2      	b.n	8009df0 <_svfiprintf_r+0xa0>
 8009e4a:	9b03      	ldr	r3, [sp, #12]
 8009e4c:	1d19      	adds	r1, r3, #4
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	9103      	str	r1, [sp, #12]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	bfbb      	ittet	lt
 8009e56:	425b      	neglt	r3, r3
 8009e58:	f042 0202 	orrlt.w	r2, r2, #2
 8009e5c:	9307      	strge	r3, [sp, #28]
 8009e5e:	9307      	strlt	r3, [sp, #28]
 8009e60:	bfb8      	it	lt
 8009e62:	9204      	strlt	r2, [sp, #16]
 8009e64:	7823      	ldrb	r3, [r4, #0]
 8009e66:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e68:	d10a      	bne.n	8009e80 <_svfiprintf_r+0x130>
 8009e6a:	7863      	ldrb	r3, [r4, #1]
 8009e6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e6e:	d132      	bne.n	8009ed6 <_svfiprintf_r+0x186>
 8009e70:	9b03      	ldr	r3, [sp, #12]
 8009e72:	1d1a      	adds	r2, r3, #4
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	9203      	str	r2, [sp, #12]
 8009e78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e7c:	3402      	adds	r4, #2
 8009e7e:	9305      	str	r3, [sp, #20]
 8009e80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009f44 <_svfiprintf_r+0x1f4>
 8009e84:	7821      	ldrb	r1, [r4, #0]
 8009e86:	2203      	movs	r2, #3
 8009e88:	4650      	mov	r0, sl
 8009e8a:	f7f6 f9a9 	bl	80001e0 <memchr>
 8009e8e:	b138      	cbz	r0, 8009ea0 <_svfiprintf_r+0x150>
 8009e90:	9b04      	ldr	r3, [sp, #16]
 8009e92:	eba0 000a 	sub.w	r0, r0, sl
 8009e96:	2240      	movs	r2, #64	@ 0x40
 8009e98:	4082      	lsls	r2, r0
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	3401      	adds	r4, #1
 8009e9e:	9304      	str	r3, [sp, #16]
 8009ea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ea4:	4824      	ldr	r0, [pc, #144]	@ (8009f38 <_svfiprintf_r+0x1e8>)
 8009ea6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009eaa:	2206      	movs	r2, #6
 8009eac:	f7f6 f998 	bl	80001e0 <memchr>
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	d036      	beq.n	8009f22 <_svfiprintf_r+0x1d2>
 8009eb4:	4b21      	ldr	r3, [pc, #132]	@ (8009f3c <_svfiprintf_r+0x1ec>)
 8009eb6:	bb1b      	cbnz	r3, 8009f00 <_svfiprintf_r+0x1b0>
 8009eb8:	9b03      	ldr	r3, [sp, #12]
 8009eba:	3307      	adds	r3, #7
 8009ebc:	f023 0307 	bic.w	r3, r3, #7
 8009ec0:	3308      	adds	r3, #8
 8009ec2:	9303      	str	r3, [sp, #12]
 8009ec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ec6:	4433      	add	r3, r6
 8009ec8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009eca:	e76a      	b.n	8009da2 <_svfiprintf_r+0x52>
 8009ecc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ed0:	460c      	mov	r4, r1
 8009ed2:	2001      	movs	r0, #1
 8009ed4:	e7a8      	b.n	8009e28 <_svfiprintf_r+0xd8>
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	3401      	adds	r4, #1
 8009eda:	9305      	str	r3, [sp, #20]
 8009edc:	4619      	mov	r1, r3
 8009ede:	f04f 0c0a 	mov.w	ip, #10
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ee8:	3a30      	subs	r2, #48	@ 0x30
 8009eea:	2a09      	cmp	r2, #9
 8009eec:	d903      	bls.n	8009ef6 <_svfiprintf_r+0x1a6>
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d0c6      	beq.n	8009e80 <_svfiprintf_r+0x130>
 8009ef2:	9105      	str	r1, [sp, #20]
 8009ef4:	e7c4      	b.n	8009e80 <_svfiprintf_r+0x130>
 8009ef6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009efa:	4604      	mov	r4, r0
 8009efc:	2301      	movs	r3, #1
 8009efe:	e7f0      	b.n	8009ee2 <_svfiprintf_r+0x192>
 8009f00:	ab03      	add	r3, sp, #12
 8009f02:	9300      	str	r3, [sp, #0]
 8009f04:	462a      	mov	r2, r5
 8009f06:	4b0e      	ldr	r3, [pc, #56]	@ (8009f40 <_svfiprintf_r+0x1f0>)
 8009f08:	a904      	add	r1, sp, #16
 8009f0a:	4638      	mov	r0, r7
 8009f0c:	f3af 8000 	nop.w
 8009f10:	1c42      	adds	r2, r0, #1
 8009f12:	4606      	mov	r6, r0
 8009f14:	d1d6      	bne.n	8009ec4 <_svfiprintf_r+0x174>
 8009f16:	89ab      	ldrh	r3, [r5, #12]
 8009f18:	065b      	lsls	r3, r3, #25
 8009f1a:	f53f af2d 	bmi.w	8009d78 <_svfiprintf_r+0x28>
 8009f1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f20:	e72c      	b.n	8009d7c <_svfiprintf_r+0x2c>
 8009f22:	ab03      	add	r3, sp, #12
 8009f24:	9300      	str	r3, [sp, #0]
 8009f26:	462a      	mov	r2, r5
 8009f28:	4b05      	ldr	r3, [pc, #20]	@ (8009f40 <_svfiprintf_r+0x1f0>)
 8009f2a:	a904      	add	r1, sp, #16
 8009f2c:	4638      	mov	r0, r7
 8009f2e:	f000 f879 	bl	800a024 <_printf_i>
 8009f32:	e7ed      	b.n	8009f10 <_svfiprintf_r+0x1c0>
 8009f34:	0800a8f9 	.word	0x0800a8f9
 8009f38:	0800a903 	.word	0x0800a903
 8009f3c:	00000000 	.word	0x00000000
 8009f40:	08009c99 	.word	0x08009c99
 8009f44:	0800a8ff 	.word	0x0800a8ff

08009f48 <_printf_common>:
 8009f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f4c:	4616      	mov	r6, r2
 8009f4e:	4698      	mov	r8, r3
 8009f50:	688a      	ldr	r2, [r1, #8]
 8009f52:	690b      	ldr	r3, [r1, #16]
 8009f54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	bfb8      	it	lt
 8009f5c:	4613      	movlt	r3, r2
 8009f5e:	6033      	str	r3, [r6, #0]
 8009f60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009f64:	4607      	mov	r7, r0
 8009f66:	460c      	mov	r4, r1
 8009f68:	b10a      	cbz	r2, 8009f6e <_printf_common+0x26>
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	6033      	str	r3, [r6, #0]
 8009f6e:	6823      	ldr	r3, [r4, #0]
 8009f70:	0699      	lsls	r1, r3, #26
 8009f72:	bf42      	ittt	mi
 8009f74:	6833      	ldrmi	r3, [r6, #0]
 8009f76:	3302      	addmi	r3, #2
 8009f78:	6033      	strmi	r3, [r6, #0]
 8009f7a:	6825      	ldr	r5, [r4, #0]
 8009f7c:	f015 0506 	ands.w	r5, r5, #6
 8009f80:	d106      	bne.n	8009f90 <_printf_common+0x48>
 8009f82:	f104 0a19 	add.w	sl, r4, #25
 8009f86:	68e3      	ldr	r3, [r4, #12]
 8009f88:	6832      	ldr	r2, [r6, #0]
 8009f8a:	1a9b      	subs	r3, r3, r2
 8009f8c:	42ab      	cmp	r3, r5
 8009f8e:	dc26      	bgt.n	8009fde <_printf_common+0x96>
 8009f90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f94:	6822      	ldr	r2, [r4, #0]
 8009f96:	3b00      	subs	r3, #0
 8009f98:	bf18      	it	ne
 8009f9a:	2301      	movne	r3, #1
 8009f9c:	0692      	lsls	r2, r2, #26
 8009f9e:	d42b      	bmi.n	8009ff8 <_printf_common+0xb0>
 8009fa0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009fa4:	4641      	mov	r1, r8
 8009fa6:	4638      	mov	r0, r7
 8009fa8:	47c8      	blx	r9
 8009faa:	3001      	adds	r0, #1
 8009fac:	d01e      	beq.n	8009fec <_printf_common+0xa4>
 8009fae:	6823      	ldr	r3, [r4, #0]
 8009fb0:	6922      	ldr	r2, [r4, #16]
 8009fb2:	f003 0306 	and.w	r3, r3, #6
 8009fb6:	2b04      	cmp	r3, #4
 8009fb8:	bf02      	ittt	eq
 8009fba:	68e5      	ldreq	r5, [r4, #12]
 8009fbc:	6833      	ldreq	r3, [r6, #0]
 8009fbe:	1aed      	subeq	r5, r5, r3
 8009fc0:	68a3      	ldr	r3, [r4, #8]
 8009fc2:	bf0c      	ite	eq
 8009fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fc8:	2500      	movne	r5, #0
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	bfc4      	itt	gt
 8009fce:	1a9b      	subgt	r3, r3, r2
 8009fd0:	18ed      	addgt	r5, r5, r3
 8009fd2:	2600      	movs	r6, #0
 8009fd4:	341a      	adds	r4, #26
 8009fd6:	42b5      	cmp	r5, r6
 8009fd8:	d11a      	bne.n	800a010 <_printf_common+0xc8>
 8009fda:	2000      	movs	r0, #0
 8009fdc:	e008      	b.n	8009ff0 <_printf_common+0xa8>
 8009fde:	2301      	movs	r3, #1
 8009fe0:	4652      	mov	r2, sl
 8009fe2:	4641      	mov	r1, r8
 8009fe4:	4638      	mov	r0, r7
 8009fe6:	47c8      	blx	r9
 8009fe8:	3001      	adds	r0, #1
 8009fea:	d103      	bne.n	8009ff4 <_printf_common+0xac>
 8009fec:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ff4:	3501      	adds	r5, #1
 8009ff6:	e7c6      	b.n	8009f86 <_printf_common+0x3e>
 8009ff8:	18e1      	adds	r1, r4, r3
 8009ffa:	1c5a      	adds	r2, r3, #1
 8009ffc:	2030      	movs	r0, #48	@ 0x30
 8009ffe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a002:	4422      	add	r2, r4
 800a004:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a008:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a00c:	3302      	adds	r3, #2
 800a00e:	e7c7      	b.n	8009fa0 <_printf_common+0x58>
 800a010:	2301      	movs	r3, #1
 800a012:	4622      	mov	r2, r4
 800a014:	4641      	mov	r1, r8
 800a016:	4638      	mov	r0, r7
 800a018:	47c8      	blx	r9
 800a01a:	3001      	adds	r0, #1
 800a01c:	d0e6      	beq.n	8009fec <_printf_common+0xa4>
 800a01e:	3601      	adds	r6, #1
 800a020:	e7d9      	b.n	8009fd6 <_printf_common+0x8e>
	...

0800a024 <_printf_i>:
 800a024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a028:	7e0f      	ldrb	r7, [r1, #24]
 800a02a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a02c:	2f78      	cmp	r7, #120	@ 0x78
 800a02e:	4691      	mov	r9, r2
 800a030:	4680      	mov	r8, r0
 800a032:	460c      	mov	r4, r1
 800a034:	469a      	mov	sl, r3
 800a036:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a03a:	d807      	bhi.n	800a04c <_printf_i+0x28>
 800a03c:	2f62      	cmp	r7, #98	@ 0x62
 800a03e:	d80a      	bhi.n	800a056 <_printf_i+0x32>
 800a040:	2f00      	cmp	r7, #0
 800a042:	f000 80d2 	beq.w	800a1ea <_printf_i+0x1c6>
 800a046:	2f58      	cmp	r7, #88	@ 0x58
 800a048:	f000 80b9 	beq.w	800a1be <_printf_i+0x19a>
 800a04c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a050:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a054:	e03a      	b.n	800a0cc <_printf_i+0xa8>
 800a056:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a05a:	2b15      	cmp	r3, #21
 800a05c:	d8f6      	bhi.n	800a04c <_printf_i+0x28>
 800a05e:	a101      	add	r1, pc, #4	@ (adr r1, 800a064 <_printf_i+0x40>)
 800a060:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a064:	0800a0bd 	.word	0x0800a0bd
 800a068:	0800a0d1 	.word	0x0800a0d1
 800a06c:	0800a04d 	.word	0x0800a04d
 800a070:	0800a04d 	.word	0x0800a04d
 800a074:	0800a04d 	.word	0x0800a04d
 800a078:	0800a04d 	.word	0x0800a04d
 800a07c:	0800a0d1 	.word	0x0800a0d1
 800a080:	0800a04d 	.word	0x0800a04d
 800a084:	0800a04d 	.word	0x0800a04d
 800a088:	0800a04d 	.word	0x0800a04d
 800a08c:	0800a04d 	.word	0x0800a04d
 800a090:	0800a1d1 	.word	0x0800a1d1
 800a094:	0800a0fb 	.word	0x0800a0fb
 800a098:	0800a18b 	.word	0x0800a18b
 800a09c:	0800a04d 	.word	0x0800a04d
 800a0a0:	0800a04d 	.word	0x0800a04d
 800a0a4:	0800a1f3 	.word	0x0800a1f3
 800a0a8:	0800a04d 	.word	0x0800a04d
 800a0ac:	0800a0fb 	.word	0x0800a0fb
 800a0b0:	0800a04d 	.word	0x0800a04d
 800a0b4:	0800a04d 	.word	0x0800a04d
 800a0b8:	0800a193 	.word	0x0800a193
 800a0bc:	6833      	ldr	r3, [r6, #0]
 800a0be:	1d1a      	adds	r2, r3, #4
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	6032      	str	r2, [r6, #0]
 800a0c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e09d      	b.n	800a20c <_printf_i+0x1e8>
 800a0d0:	6833      	ldr	r3, [r6, #0]
 800a0d2:	6820      	ldr	r0, [r4, #0]
 800a0d4:	1d19      	adds	r1, r3, #4
 800a0d6:	6031      	str	r1, [r6, #0]
 800a0d8:	0606      	lsls	r6, r0, #24
 800a0da:	d501      	bpl.n	800a0e0 <_printf_i+0xbc>
 800a0dc:	681d      	ldr	r5, [r3, #0]
 800a0de:	e003      	b.n	800a0e8 <_printf_i+0xc4>
 800a0e0:	0645      	lsls	r5, r0, #25
 800a0e2:	d5fb      	bpl.n	800a0dc <_printf_i+0xb8>
 800a0e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a0e8:	2d00      	cmp	r5, #0
 800a0ea:	da03      	bge.n	800a0f4 <_printf_i+0xd0>
 800a0ec:	232d      	movs	r3, #45	@ 0x2d
 800a0ee:	426d      	negs	r5, r5
 800a0f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0f4:	4859      	ldr	r0, [pc, #356]	@ (800a25c <_printf_i+0x238>)
 800a0f6:	230a      	movs	r3, #10
 800a0f8:	e011      	b.n	800a11e <_printf_i+0xfa>
 800a0fa:	6821      	ldr	r1, [r4, #0]
 800a0fc:	6833      	ldr	r3, [r6, #0]
 800a0fe:	0608      	lsls	r0, r1, #24
 800a100:	f853 5b04 	ldr.w	r5, [r3], #4
 800a104:	d402      	bmi.n	800a10c <_printf_i+0xe8>
 800a106:	0649      	lsls	r1, r1, #25
 800a108:	bf48      	it	mi
 800a10a:	b2ad      	uxthmi	r5, r5
 800a10c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a10e:	4853      	ldr	r0, [pc, #332]	@ (800a25c <_printf_i+0x238>)
 800a110:	6033      	str	r3, [r6, #0]
 800a112:	bf14      	ite	ne
 800a114:	230a      	movne	r3, #10
 800a116:	2308      	moveq	r3, #8
 800a118:	2100      	movs	r1, #0
 800a11a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a11e:	6866      	ldr	r6, [r4, #4]
 800a120:	60a6      	str	r6, [r4, #8]
 800a122:	2e00      	cmp	r6, #0
 800a124:	bfa2      	ittt	ge
 800a126:	6821      	ldrge	r1, [r4, #0]
 800a128:	f021 0104 	bicge.w	r1, r1, #4
 800a12c:	6021      	strge	r1, [r4, #0]
 800a12e:	b90d      	cbnz	r5, 800a134 <_printf_i+0x110>
 800a130:	2e00      	cmp	r6, #0
 800a132:	d04b      	beq.n	800a1cc <_printf_i+0x1a8>
 800a134:	4616      	mov	r6, r2
 800a136:	fbb5 f1f3 	udiv	r1, r5, r3
 800a13a:	fb03 5711 	mls	r7, r3, r1, r5
 800a13e:	5dc7      	ldrb	r7, [r0, r7]
 800a140:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a144:	462f      	mov	r7, r5
 800a146:	42bb      	cmp	r3, r7
 800a148:	460d      	mov	r5, r1
 800a14a:	d9f4      	bls.n	800a136 <_printf_i+0x112>
 800a14c:	2b08      	cmp	r3, #8
 800a14e:	d10b      	bne.n	800a168 <_printf_i+0x144>
 800a150:	6823      	ldr	r3, [r4, #0]
 800a152:	07df      	lsls	r7, r3, #31
 800a154:	d508      	bpl.n	800a168 <_printf_i+0x144>
 800a156:	6923      	ldr	r3, [r4, #16]
 800a158:	6861      	ldr	r1, [r4, #4]
 800a15a:	4299      	cmp	r1, r3
 800a15c:	bfde      	ittt	le
 800a15e:	2330      	movle	r3, #48	@ 0x30
 800a160:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a164:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a168:	1b92      	subs	r2, r2, r6
 800a16a:	6122      	str	r2, [r4, #16]
 800a16c:	f8cd a000 	str.w	sl, [sp]
 800a170:	464b      	mov	r3, r9
 800a172:	aa03      	add	r2, sp, #12
 800a174:	4621      	mov	r1, r4
 800a176:	4640      	mov	r0, r8
 800a178:	f7ff fee6 	bl	8009f48 <_printf_common>
 800a17c:	3001      	adds	r0, #1
 800a17e:	d14a      	bne.n	800a216 <_printf_i+0x1f2>
 800a180:	f04f 30ff 	mov.w	r0, #4294967295
 800a184:	b004      	add	sp, #16
 800a186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a18a:	6823      	ldr	r3, [r4, #0]
 800a18c:	f043 0320 	orr.w	r3, r3, #32
 800a190:	6023      	str	r3, [r4, #0]
 800a192:	4833      	ldr	r0, [pc, #204]	@ (800a260 <_printf_i+0x23c>)
 800a194:	2778      	movs	r7, #120	@ 0x78
 800a196:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a19a:	6823      	ldr	r3, [r4, #0]
 800a19c:	6831      	ldr	r1, [r6, #0]
 800a19e:	061f      	lsls	r7, r3, #24
 800a1a0:	f851 5b04 	ldr.w	r5, [r1], #4
 800a1a4:	d402      	bmi.n	800a1ac <_printf_i+0x188>
 800a1a6:	065f      	lsls	r7, r3, #25
 800a1a8:	bf48      	it	mi
 800a1aa:	b2ad      	uxthmi	r5, r5
 800a1ac:	6031      	str	r1, [r6, #0]
 800a1ae:	07d9      	lsls	r1, r3, #31
 800a1b0:	bf44      	itt	mi
 800a1b2:	f043 0320 	orrmi.w	r3, r3, #32
 800a1b6:	6023      	strmi	r3, [r4, #0]
 800a1b8:	b11d      	cbz	r5, 800a1c2 <_printf_i+0x19e>
 800a1ba:	2310      	movs	r3, #16
 800a1bc:	e7ac      	b.n	800a118 <_printf_i+0xf4>
 800a1be:	4827      	ldr	r0, [pc, #156]	@ (800a25c <_printf_i+0x238>)
 800a1c0:	e7e9      	b.n	800a196 <_printf_i+0x172>
 800a1c2:	6823      	ldr	r3, [r4, #0]
 800a1c4:	f023 0320 	bic.w	r3, r3, #32
 800a1c8:	6023      	str	r3, [r4, #0]
 800a1ca:	e7f6      	b.n	800a1ba <_printf_i+0x196>
 800a1cc:	4616      	mov	r6, r2
 800a1ce:	e7bd      	b.n	800a14c <_printf_i+0x128>
 800a1d0:	6833      	ldr	r3, [r6, #0]
 800a1d2:	6825      	ldr	r5, [r4, #0]
 800a1d4:	6961      	ldr	r1, [r4, #20]
 800a1d6:	1d18      	adds	r0, r3, #4
 800a1d8:	6030      	str	r0, [r6, #0]
 800a1da:	062e      	lsls	r6, r5, #24
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	d501      	bpl.n	800a1e4 <_printf_i+0x1c0>
 800a1e0:	6019      	str	r1, [r3, #0]
 800a1e2:	e002      	b.n	800a1ea <_printf_i+0x1c6>
 800a1e4:	0668      	lsls	r0, r5, #25
 800a1e6:	d5fb      	bpl.n	800a1e0 <_printf_i+0x1bc>
 800a1e8:	8019      	strh	r1, [r3, #0]
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	6123      	str	r3, [r4, #16]
 800a1ee:	4616      	mov	r6, r2
 800a1f0:	e7bc      	b.n	800a16c <_printf_i+0x148>
 800a1f2:	6833      	ldr	r3, [r6, #0]
 800a1f4:	1d1a      	adds	r2, r3, #4
 800a1f6:	6032      	str	r2, [r6, #0]
 800a1f8:	681e      	ldr	r6, [r3, #0]
 800a1fa:	6862      	ldr	r2, [r4, #4]
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	4630      	mov	r0, r6
 800a200:	f7f5 ffee 	bl	80001e0 <memchr>
 800a204:	b108      	cbz	r0, 800a20a <_printf_i+0x1e6>
 800a206:	1b80      	subs	r0, r0, r6
 800a208:	6060      	str	r0, [r4, #4]
 800a20a:	6863      	ldr	r3, [r4, #4]
 800a20c:	6123      	str	r3, [r4, #16]
 800a20e:	2300      	movs	r3, #0
 800a210:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a214:	e7aa      	b.n	800a16c <_printf_i+0x148>
 800a216:	6923      	ldr	r3, [r4, #16]
 800a218:	4632      	mov	r2, r6
 800a21a:	4649      	mov	r1, r9
 800a21c:	4640      	mov	r0, r8
 800a21e:	47d0      	blx	sl
 800a220:	3001      	adds	r0, #1
 800a222:	d0ad      	beq.n	800a180 <_printf_i+0x15c>
 800a224:	6823      	ldr	r3, [r4, #0]
 800a226:	079b      	lsls	r3, r3, #30
 800a228:	d413      	bmi.n	800a252 <_printf_i+0x22e>
 800a22a:	68e0      	ldr	r0, [r4, #12]
 800a22c:	9b03      	ldr	r3, [sp, #12]
 800a22e:	4298      	cmp	r0, r3
 800a230:	bfb8      	it	lt
 800a232:	4618      	movlt	r0, r3
 800a234:	e7a6      	b.n	800a184 <_printf_i+0x160>
 800a236:	2301      	movs	r3, #1
 800a238:	4632      	mov	r2, r6
 800a23a:	4649      	mov	r1, r9
 800a23c:	4640      	mov	r0, r8
 800a23e:	47d0      	blx	sl
 800a240:	3001      	adds	r0, #1
 800a242:	d09d      	beq.n	800a180 <_printf_i+0x15c>
 800a244:	3501      	adds	r5, #1
 800a246:	68e3      	ldr	r3, [r4, #12]
 800a248:	9903      	ldr	r1, [sp, #12]
 800a24a:	1a5b      	subs	r3, r3, r1
 800a24c:	42ab      	cmp	r3, r5
 800a24e:	dcf2      	bgt.n	800a236 <_printf_i+0x212>
 800a250:	e7eb      	b.n	800a22a <_printf_i+0x206>
 800a252:	2500      	movs	r5, #0
 800a254:	f104 0619 	add.w	r6, r4, #25
 800a258:	e7f5      	b.n	800a246 <_printf_i+0x222>
 800a25a:	bf00      	nop
 800a25c:	0800a90a 	.word	0x0800a90a
 800a260:	0800a91b 	.word	0x0800a91b

0800a264 <__sflush_r>:
 800a264:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a26c:	0716      	lsls	r6, r2, #28
 800a26e:	4605      	mov	r5, r0
 800a270:	460c      	mov	r4, r1
 800a272:	d454      	bmi.n	800a31e <__sflush_r+0xba>
 800a274:	684b      	ldr	r3, [r1, #4]
 800a276:	2b00      	cmp	r3, #0
 800a278:	dc02      	bgt.n	800a280 <__sflush_r+0x1c>
 800a27a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	dd48      	ble.n	800a312 <__sflush_r+0xae>
 800a280:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a282:	2e00      	cmp	r6, #0
 800a284:	d045      	beq.n	800a312 <__sflush_r+0xae>
 800a286:	2300      	movs	r3, #0
 800a288:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a28c:	682f      	ldr	r7, [r5, #0]
 800a28e:	6a21      	ldr	r1, [r4, #32]
 800a290:	602b      	str	r3, [r5, #0]
 800a292:	d030      	beq.n	800a2f6 <__sflush_r+0x92>
 800a294:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a296:	89a3      	ldrh	r3, [r4, #12]
 800a298:	0759      	lsls	r1, r3, #29
 800a29a:	d505      	bpl.n	800a2a8 <__sflush_r+0x44>
 800a29c:	6863      	ldr	r3, [r4, #4]
 800a29e:	1ad2      	subs	r2, r2, r3
 800a2a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a2a2:	b10b      	cbz	r3, 800a2a8 <__sflush_r+0x44>
 800a2a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a2a6:	1ad2      	subs	r2, r2, r3
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a2ac:	6a21      	ldr	r1, [r4, #32]
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	47b0      	blx	r6
 800a2b2:	1c43      	adds	r3, r0, #1
 800a2b4:	89a3      	ldrh	r3, [r4, #12]
 800a2b6:	d106      	bne.n	800a2c6 <__sflush_r+0x62>
 800a2b8:	6829      	ldr	r1, [r5, #0]
 800a2ba:	291d      	cmp	r1, #29
 800a2bc:	d82b      	bhi.n	800a316 <__sflush_r+0xb2>
 800a2be:	4a2a      	ldr	r2, [pc, #168]	@ (800a368 <__sflush_r+0x104>)
 800a2c0:	410a      	asrs	r2, r1
 800a2c2:	07d6      	lsls	r6, r2, #31
 800a2c4:	d427      	bmi.n	800a316 <__sflush_r+0xb2>
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	6062      	str	r2, [r4, #4]
 800a2ca:	04d9      	lsls	r1, r3, #19
 800a2cc:	6922      	ldr	r2, [r4, #16]
 800a2ce:	6022      	str	r2, [r4, #0]
 800a2d0:	d504      	bpl.n	800a2dc <__sflush_r+0x78>
 800a2d2:	1c42      	adds	r2, r0, #1
 800a2d4:	d101      	bne.n	800a2da <__sflush_r+0x76>
 800a2d6:	682b      	ldr	r3, [r5, #0]
 800a2d8:	b903      	cbnz	r3, 800a2dc <__sflush_r+0x78>
 800a2da:	6560      	str	r0, [r4, #84]	@ 0x54
 800a2dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a2de:	602f      	str	r7, [r5, #0]
 800a2e0:	b1b9      	cbz	r1, 800a312 <__sflush_r+0xae>
 800a2e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a2e6:	4299      	cmp	r1, r3
 800a2e8:	d002      	beq.n	800a2f0 <__sflush_r+0x8c>
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	f7ff fbdc 	bl	8009aa8 <_free_r>
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	6363      	str	r3, [r4, #52]	@ 0x34
 800a2f4:	e00d      	b.n	800a312 <__sflush_r+0xae>
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	47b0      	blx	r6
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	1c50      	adds	r0, r2, #1
 800a300:	d1c9      	bne.n	800a296 <__sflush_r+0x32>
 800a302:	682b      	ldr	r3, [r5, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d0c6      	beq.n	800a296 <__sflush_r+0x32>
 800a308:	2b1d      	cmp	r3, #29
 800a30a:	d001      	beq.n	800a310 <__sflush_r+0xac>
 800a30c:	2b16      	cmp	r3, #22
 800a30e:	d11e      	bne.n	800a34e <__sflush_r+0xea>
 800a310:	602f      	str	r7, [r5, #0]
 800a312:	2000      	movs	r0, #0
 800a314:	e022      	b.n	800a35c <__sflush_r+0xf8>
 800a316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a31a:	b21b      	sxth	r3, r3
 800a31c:	e01b      	b.n	800a356 <__sflush_r+0xf2>
 800a31e:	690f      	ldr	r7, [r1, #16]
 800a320:	2f00      	cmp	r7, #0
 800a322:	d0f6      	beq.n	800a312 <__sflush_r+0xae>
 800a324:	0793      	lsls	r3, r2, #30
 800a326:	680e      	ldr	r6, [r1, #0]
 800a328:	bf08      	it	eq
 800a32a:	694b      	ldreq	r3, [r1, #20]
 800a32c:	600f      	str	r7, [r1, #0]
 800a32e:	bf18      	it	ne
 800a330:	2300      	movne	r3, #0
 800a332:	eba6 0807 	sub.w	r8, r6, r7
 800a336:	608b      	str	r3, [r1, #8]
 800a338:	f1b8 0f00 	cmp.w	r8, #0
 800a33c:	dde9      	ble.n	800a312 <__sflush_r+0xae>
 800a33e:	6a21      	ldr	r1, [r4, #32]
 800a340:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a342:	4643      	mov	r3, r8
 800a344:	463a      	mov	r2, r7
 800a346:	4628      	mov	r0, r5
 800a348:	47b0      	blx	r6
 800a34a:	2800      	cmp	r0, #0
 800a34c:	dc08      	bgt.n	800a360 <__sflush_r+0xfc>
 800a34e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a356:	81a3      	strh	r3, [r4, #12]
 800a358:	f04f 30ff 	mov.w	r0, #4294967295
 800a35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a360:	4407      	add	r7, r0
 800a362:	eba8 0800 	sub.w	r8, r8, r0
 800a366:	e7e7      	b.n	800a338 <__sflush_r+0xd4>
 800a368:	dfbffffe 	.word	0xdfbffffe

0800a36c <_fflush_r>:
 800a36c:	b538      	push	{r3, r4, r5, lr}
 800a36e:	690b      	ldr	r3, [r1, #16]
 800a370:	4605      	mov	r5, r0
 800a372:	460c      	mov	r4, r1
 800a374:	b913      	cbnz	r3, 800a37c <_fflush_r+0x10>
 800a376:	2500      	movs	r5, #0
 800a378:	4628      	mov	r0, r5
 800a37a:	bd38      	pop	{r3, r4, r5, pc}
 800a37c:	b118      	cbz	r0, 800a386 <_fflush_r+0x1a>
 800a37e:	6a03      	ldr	r3, [r0, #32]
 800a380:	b90b      	cbnz	r3, 800a386 <_fflush_r+0x1a>
 800a382:	f7ff f911 	bl	80095a8 <__sinit>
 800a386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d0f3      	beq.n	800a376 <_fflush_r+0xa>
 800a38e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a390:	07d0      	lsls	r0, r2, #31
 800a392:	d404      	bmi.n	800a39e <_fflush_r+0x32>
 800a394:	0599      	lsls	r1, r3, #22
 800a396:	d402      	bmi.n	800a39e <_fflush_r+0x32>
 800a398:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a39a:	f7ff fb74 	bl	8009a86 <__retarget_lock_acquire_recursive>
 800a39e:	4628      	mov	r0, r5
 800a3a0:	4621      	mov	r1, r4
 800a3a2:	f7ff ff5f 	bl	800a264 <__sflush_r>
 800a3a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a3a8:	07da      	lsls	r2, r3, #31
 800a3aa:	4605      	mov	r5, r0
 800a3ac:	d4e4      	bmi.n	800a378 <_fflush_r+0xc>
 800a3ae:	89a3      	ldrh	r3, [r4, #12]
 800a3b0:	059b      	lsls	r3, r3, #22
 800a3b2:	d4e1      	bmi.n	800a378 <_fflush_r+0xc>
 800a3b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3b6:	f7ff fb67 	bl	8009a88 <__retarget_lock_release_recursive>
 800a3ba:	e7dd      	b.n	800a378 <_fflush_r+0xc>

0800a3bc <__swhatbuf_r>:
 800a3bc:	b570      	push	{r4, r5, r6, lr}
 800a3be:	460c      	mov	r4, r1
 800a3c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3c4:	2900      	cmp	r1, #0
 800a3c6:	b096      	sub	sp, #88	@ 0x58
 800a3c8:	4615      	mov	r5, r2
 800a3ca:	461e      	mov	r6, r3
 800a3cc:	da0d      	bge.n	800a3ea <__swhatbuf_r+0x2e>
 800a3ce:	89a3      	ldrh	r3, [r4, #12]
 800a3d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a3d4:	f04f 0100 	mov.w	r1, #0
 800a3d8:	bf14      	ite	ne
 800a3da:	2340      	movne	r3, #64	@ 0x40
 800a3dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	6031      	str	r1, [r6, #0]
 800a3e4:	602b      	str	r3, [r5, #0]
 800a3e6:	b016      	add	sp, #88	@ 0x58
 800a3e8:	bd70      	pop	{r4, r5, r6, pc}
 800a3ea:	466a      	mov	r2, sp
 800a3ec:	f000 f862 	bl	800a4b4 <_fstat_r>
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	dbec      	blt.n	800a3ce <__swhatbuf_r+0x12>
 800a3f4:	9901      	ldr	r1, [sp, #4]
 800a3f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a3fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a3fe:	4259      	negs	r1, r3
 800a400:	4159      	adcs	r1, r3
 800a402:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a406:	e7eb      	b.n	800a3e0 <__swhatbuf_r+0x24>

0800a408 <__smakebuf_r>:
 800a408:	898b      	ldrh	r3, [r1, #12]
 800a40a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a40c:	079d      	lsls	r5, r3, #30
 800a40e:	4606      	mov	r6, r0
 800a410:	460c      	mov	r4, r1
 800a412:	d507      	bpl.n	800a424 <__smakebuf_r+0x1c>
 800a414:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a418:	6023      	str	r3, [r4, #0]
 800a41a:	6123      	str	r3, [r4, #16]
 800a41c:	2301      	movs	r3, #1
 800a41e:	6163      	str	r3, [r4, #20]
 800a420:	b003      	add	sp, #12
 800a422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a424:	ab01      	add	r3, sp, #4
 800a426:	466a      	mov	r2, sp
 800a428:	f7ff ffc8 	bl	800a3bc <__swhatbuf_r>
 800a42c:	9f00      	ldr	r7, [sp, #0]
 800a42e:	4605      	mov	r5, r0
 800a430:	4639      	mov	r1, r7
 800a432:	4630      	mov	r0, r6
 800a434:	f7ff fba4 	bl	8009b80 <_malloc_r>
 800a438:	b948      	cbnz	r0, 800a44e <__smakebuf_r+0x46>
 800a43a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a43e:	059a      	lsls	r2, r3, #22
 800a440:	d4ee      	bmi.n	800a420 <__smakebuf_r+0x18>
 800a442:	f023 0303 	bic.w	r3, r3, #3
 800a446:	f043 0302 	orr.w	r3, r3, #2
 800a44a:	81a3      	strh	r3, [r4, #12]
 800a44c:	e7e2      	b.n	800a414 <__smakebuf_r+0xc>
 800a44e:	89a3      	ldrh	r3, [r4, #12]
 800a450:	6020      	str	r0, [r4, #0]
 800a452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a456:	81a3      	strh	r3, [r4, #12]
 800a458:	9b01      	ldr	r3, [sp, #4]
 800a45a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a45e:	b15b      	cbz	r3, 800a478 <__smakebuf_r+0x70>
 800a460:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a464:	4630      	mov	r0, r6
 800a466:	f000 f837 	bl	800a4d8 <_isatty_r>
 800a46a:	b128      	cbz	r0, 800a478 <__smakebuf_r+0x70>
 800a46c:	89a3      	ldrh	r3, [r4, #12]
 800a46e:	f023 0303 	bic.w	r3, r3, #3
 800a472:	f043 0301 	orr.w	r3, r3, #1
 800a476:	81a3      	strh	r3, [r4, #12]
 800a478:	89a3      	ldrh	r3, [r4, #12]
 800a47a:	431d      	orrs	r5, r3
 800a47c:	81a5      	strh	r5, [r4, #12]
 800a47e:	e7cf      	b.n	800a420 <__smakebuf_r+0x18>

0800a480 <memmove>:
 800a480:	4288      	cmp	r0, r1
 800a482:	b510      	push	{r4, lr}
 800a484:	eb01 0402 	add.w	r4, r1, r2
 800a488:	d902      	bls.n	800a490 <memmove+0x10>
 800a48a:	4284      	cmp	r4, r0
 800a48c:	4623      	mov	r3, r4
 800a48e:	d807      	bhi.n	800a4a0 <memmove+0x20>
 800a490:	1e43      	subs	r3, r0, #1
 800a492:	42a1      	cmp	r1, r4
 800a494:	d008      	beq.n	800a4a8 <memmove+0x28>
 800a496:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a49a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a49e:	e7f8      	b.n	800a492 <memmove+0x12>
 800a4a0:	4402      	add	r2, r0
 800a4a2:	4601      	mov	r1, r0
 800a4a4:	428a      	cmp	r2, r1
 800a4a6:	d100      	bne.n	800a4aa <memmove+0x2a>
 800a4a8:	bd10      	pop	{r4, pc}
 800a4aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a4b2:	e7f7      	b.n	800a4a4 <memmove+0x24>

0800a4b4 <_fstat_r>:
 800a4b4:	b538      	push	{r3, r4, r5, lr}
 800a4b6:	4d07      	ldr	r5, [pc, #28]	@ (800a4d4 <_fstat_r+0x20>)
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	4608      	mov	r0, r1
 800a4be:	4611      	mov	r1, r2
 800a4c0:	602b      	str	r3, [r5, #0]
 800a4c2:	f7f6 ffe4 	bl	800148e <_fstat>
 800a4c6:	1c43      	adds	r3, r0, #1
 800a4c8:	d102      	bne.n	800a4d0 <_fstat_r+0x1c>
 800a4ca:	682b      	ldr	r3, [r5, #0]
 800a4cc:	b103      	cbz	r3, 800a4d0 <_fstat_r+0x1c>
 800a4ce:	6023      	str	r3, [r4, #0]
 800a4d0:	bd38      	pop	{r3, r4, r5, pc}
 800a4d2:	bf00      	nop
 800a4d4:	20001854 	.word	0x20001854

0800a4d8 <_isatty_r>:
 800a4d8:	b538      	push	{r3, r4, r5, lr}
 800a4da:	4d06      	ldr	r5, [pc, #24]	@ (800a4f4 <_isatty_r+0x1c>)
 800a4dc:	2300      	movs	r3, #0
 800a4de:	4604      	mov	r4, r0
 800a4e0:	4608      	mov	r0, r1
 800a4e2:	602b      	str	r3, [r5, #0]
 800a4e4:	f7f6 ffe3 	bl	80014ae <_isatty>
 800a4e8:	1c43      	adds	r3, r0, #1
 800a4ea:	d102      	bne.n	800a4f2 <_isatty_r+0x1a>
 800a4ec:	682b      	ldr	r3, [r5, #0]
 800a4ee:	b103      	cbz	r3, 800a4f2 <_isatty_r+0x1a>
 800a4f0:	6023      	str	r3, [r4, #0]
 800a4f2:	bd38      	pop	{r3, r4, r5, pc}
 800a4f4:	20001854 	.word	0x20001854

0800a4f8 <_sbrk_r>:
 800a4f8:	b538      	push	{r3, r4, r5, lr}
 800a4fa:	4d06      	ldr	r5, [pc, #24]	@ (800a514 <_sbrk_r+0x1c>)
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	4604      	mov	r4, r0
 800a500:	4608      	mov	r0, r1
 800a502:	602b      	str	r3, [r5, #0]
 800a504:	f7f6 ffec 	bl	80014e0 <_sbrk>
 800a508:	1c43      	adds	r3, r0, #1
 800a50a:	d102      	bne.n	800a512 <_sbrk_r+0x1a>
 800a50c:	682b      	ldr	r3, [r5, #0]
 800a50e:	b103      	cbz	r3, 800a512 <_sbrk_r+0x1a>
 800a510:	6023      	str	r3, [r4, #0]
 800a512:	bd38      	pop	{r3, r4, r5, pc}
 800a514:	20001854 	.word	0x20001854

0800a518 <_realloc_r>:
 800a518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a51c:	4680      	mov	r8, r0
 800a51e:	4615      	mov	r5, r2
 800a520:	460c      	mov	r4, r1
 800a522:	b921      	cbnz	r1, 800a52e <_realloc_r+0x16>
 800a524:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a528:	4611      	mov	r1, r2
 800a52a:	f7ff bb29 	b.w	8009b80 <_malloc_r>
 800a52e:	b92a      	cbnz	r2, 800a53c <_realloc_r+0x24>
 800a530:	f7ff faba 	bl	8009aa8 <_free_r>
 800a534:	2400      	movs	r4, #0
 800a536:	4620      	mov	r0, r4
 800a538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a53c:	f000 f81a 	bl	800a574 <_malloc_usable_size_r>
 800a540:	4285      	cmp	r5, r0
 800a542:	4606      	mov	r6, r0
 800a544:	d802      	bhi.n	800a54c <_realloc_r+0x34>
 800a546:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a54a:	d8f4      	bhi.n	800a536 <_realloc_r+0x1e>
 800a54c:	4629      	mov	r1, r5
 800a54e:	4640      	mov	r0, r8
 800a550:	f7ff fb16 	bl	8009b80 <_malloc_r>
 800a554:	4607      	mov	r7, r0
 800a556:	2800      	cmp	r0, #0
 800a558:	d0ec      	beq.n	800a534 <_realloc_r+0x1c>
 800a55a:	42b5      	cmp	r5, r6
 800a55c:	462a      	mov	r2, r5
 800a55e:	4621      	mov	r1, r4
 800a560:	bf28      	it	cs
 800a562:	4632      	movcs	r2, r6
 800a564:	f7ff fa91 	bl	8009a8a <memcpy>
 800a568:	4621      	mov	r1, r4
 800a56a:	4640      	mov	r0, r8
 800a56c:	f7ff fa9c 	bl	8009aa8 <_free_r>
 800a570:	463c      	mov	r4, r7
 800a572:	e7e0      	b.n	800a536 <_realloc_r+0x1e>

0800a574 <_malloc_usable_size_r>:
 800a574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a578:	1f18      	subs	r0, r3, #4
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	bfbc      	itt	lt
 800a57e:	580b      	ldrlt	r3, [r1, r0]
 800a580:	18c0      	addlt	r0, r0, r3
 800a582:	4770      	bx	lr

0800a584 <_init>:
 800a584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a586:	bf00      	nop
 800a588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a58a:	bc08      	pop	{r3}
 800a58c:	469e      	mov	lr, r3
 800a58e:	4770      	bx	lr

0800a590 <_fini>:
 800a590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a592:	bf00      	nop
 800a594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a596:	bc08      	pop	{r3}
 800a598:	469e      	mov	lr, r3
 800a59a:	4770      	bx	lr
