
TP-autoradio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a80  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08007c10  08007c10  00008c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f30  08007f30  00009074  2**0
                  CONTENTS
  4 .ARM          00000008  08007f30  08007f30  00008f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f38  08007f38  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f38  08007f38  00008f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f3c  08007f3c  00008f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08007f40  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015c4  20000074  08007fb4  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001638  08007fb4  00009638  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bbdf  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041b0  00000000  00000000  00024c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e8  00000000  00000000  00028e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001276  00000000  00000000  0002a620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002abde  00000000  00000000  0002b896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d8dc  00000000  00000000  00056474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff85d  00000000  00000000  00073d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001735ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b74  00000000  00000000  001735f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a3  00000000  00000000  0017a164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007bf8 	.word	0x08007bf8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007bf8 	.word	0x08007bf8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	4a07      	ldr	r2, [pc, #28]	@ (800058c <vApplicationGetIdleTaskMemory+0x2c>)
 8000570:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	4a06      	ldr	r2, [pc, #24]	@ (8000590 <vApplicationGetIdleTaskMemory+0x30>)
 8000576:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2280      	movs	r2, #128	@ 0x80
 800057c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000094 	.word	0x20000094
 8000590:	20000134 	.word	0x20000134

08000594 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000594:	b5b0      	push	{r4, r5, r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800059a:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <MX_FREERTOS_Init+0x30>)
 800059c:	1d3c      	adds	r4, r7, #4
 800059e:	461d      	mov	r5, r3
 80005a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f004 fd3f 	bl	8005034 <osThreadCreate>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a03      	ldr	r2, [pc, #12]	@ (80005c8 <MX_FREERTOS_Init+0x34>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bdb0      	pop	{r4, r5, r7, pc}
 80005c4:	08007c1c 	.word	0x08007c1c
 80005c8:	20000090 	.word	0x20000090

080005cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f004 fd79 	bl	80050cc <osDelay>
 80005da:	e7fb      	b.n	80005d4 <StartDefaultTask+0x8>

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	@ 0x28
 80005e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	4b35      	ldr	r3, [pc, #212]	@ (80006c8 <MX_GPIO_Init+0xec>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f6:	4a34      	ldr	r2, [pc, #208]	@ (80006c8 <MX_GPIO_Init+0xec>)
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005fe:	4b32      	ldr	r3, [pc, #200]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	f003 0304 	and.w	r3, r3, #4
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	4b2f      	ldr	r3, [pc, #188]	@ (80006c8 <MX_GPIO_Init+0xec>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060e:	4a2e      	ldr	r2, [pc, #184]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000616:	4b2c      	ldr	r3, [pc, #176]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000626:	4a28      	ldr	r2, [pc, #160]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <MX_GPIO_Init+0xec>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063e:	4a22      	ldr	r2, [pc, #136]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <MX_GPIO_Init+0xec>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2121      	movs	r1, #33	@ 0x21
 8000656:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065a:	f001 f93b 	bl	80018d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2180      	movs	r1, #128	@ 0x80
 8000662:	481a      	ldr	r0, [pc, #104]	@ (80006cc <MX_GPIO_Init+0xf0>)
 8000664:	f001 f936 	bl	80018d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000668:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800066c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800066e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4619      	mov	r1, r3
 800067e:	4814      	ldr	r0, [pc, #80]	@ (80006d0 <MX_GPIO_Init+0xf4>)
 8000680:	f000 ff7e 	bl	8001580 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 8000684:	2321      	movs	r3, #33	@ 0x21
 8000686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	2301      	movs	r3, #1
 800068a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2300      	movs	r3, #0
 8000692:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	4619      	mov	r1, r3
 800069a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069e:	f000 ff6f 	bl	8001580 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006a2:	2380      	movs	r3, #128	@ 0x80
 80006a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2300      	movs	r3, #0
 80006b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4619      	mov	r1, r3
 80006b8:	4804      	ldr	r0, [pc, #16]	@ (80006cc <MX_GPIO_Init+0xf0>)
 80006ba:	f000 ff61 	bl	8001580 <HAL_GPIO_Init>

}
 80006be:	bf00      	nop
 80006c0:	3728      	adds	r7, #40	@ 0x28
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000
 80006cc:	48000400 	.word	0x48000400
 80006d0:	48000800 	.word	0x48000800

080006d4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80006dc:	1d39      	adds	r1, r7, #4
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
 80006e2:	2201      	movs	r2, #1
 80006e4:	4803      	ldr	r0, [pc, #12]	@ (80006f4 <__io_putchar+0x20>)
 80006e6:	f003 faf1 	bl	8003ccc <HAL_UART_Transmit>

	return ch;
 80006ea:	687b      	ldr	r3, [r7, #4]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000754 	.word	0x20000754

080006f8 <fonction>:
		shell_uart_receive_irq_cb();	// C'est la fonction qui donne le sémaphore!
	}
}

int fonction(h_shell_t * h_shell, int argc, char ** argv)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
	int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Je suis une fonction bidon\r\n");
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800070a:	4a0a      	ldr	r2, [pc, #40]	@ (8000734 <fonction+0x3c>)
 800070c:	2128      	movs	r1, #40	@ 0x28
 800070e:	4618      	mov	r0, r3
 8000710:	f006 fb18 	bl	8006d44 <sniprintf>
 8000714:	6178      	str	r0, [r7, #20]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 800071c:	68fa      	ldr	r2, [r7, #12]
 800071e:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000722:	6979      	ldr	r1, [r7, #20]
 8000724:	b289      	uxth	r1, r1
 8000726:	4610      	mov	r0, r2
 8000728:	4798      	blx	r3

	return 0;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	08007c38 	.word	0x08007c38

08000738 <addition>:

int addition(h_shell_t * h_shell, int argc, char ** argv)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	@ 0x28
 800073c:	af02      	add	r7, sp, #8
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	607a      	str	r2, [r7, #4]
	if (argc == 3)
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	2b03      	cmp	r3, #3
 8000748:	d128      	bne.n	800079c <addition+0x64>
	{
		int a, b;
		a = atoi(argv[1]);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	3304      	adds	r3, #4
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4618      	mov	r0, r3
 8000752:	f006 f94f 	bl	80069f4 <atoi>
 8000756:	61b8      	str	r0, [r7, #24]
		b = atoi(argv[2]);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3308      	adds	r3, #8
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	f006 f948 	bl	80069f4 <atoi>
 8000764:	6178      	str	r0, [r7, #20]
		int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%d + %d = %d\r\n", a, b, a+b);
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 800076c:	69ba      	ldr	r2, [r7, #24]
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	4413      	add	r3, r2
 8000772:	9301      	str	r3, [sp, #4]
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	69bb      	ldr	r3, [r7, #24]
 800077a:	4a15      	ldr	r2, [pc, #84]	@ (80007d0 <addition+0x98>)
 800077c:	2128      	movs	r1, #40	@ 0x28
 800077e:	f006 fae1 	bl	8006d44 <sniprintf>
 8000782:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 800078a:	68fa      	ldr	r2, [r7, #12]
 800078c:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8000790:	6939      	ldr	r1, [r7, #16]
 8000792:	b289      	uxth	r1, r1
 8000794:	4610      	mov	r0, r2
 8000796:	4798      	blx	r3

		return 0;
 8000798:	2300      	movs	r3, #0
 800079a:	e014      	b.n	80007c6 <addition+0x8e>
	}
	else
	{
		int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Erreur, pas le bon nombre d'arguments\r\n");
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80007a2:	4a0c      	ldr	r2, [pc, #48]	@ (80007d4 <addition+0x9c>)
 80007a4:	2128      	movs	r1, #40	@ 0x28
 80007a6:	4618      	mov	r0, r3
 80007a8:	f006 facc 	bl	8006d44 <sniprintf>
 80007ac:	61f8      	str	r0, [r7, #28]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80007b4:	68fa      	ldr	r2, [r7, #12]
 80007b6:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80007ba:	69f9      	ldr	r1, [r7, #28]
 80007bc:	b289      	uxth	r1, r1
 80007be:	4610      	mov	r0, r2
 80007c0:	4798      	blx	r3
		return -1;
 80007c2:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3720      	adds	r7, #32
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	08007c58 	.word	0x08007c58
 80007d4:	08007c68 	.word	0x08007c68

080007d8 <MCP23S17_Write>:

// Fonction pour écrire dans un registre du MCP23S17
void MCP23S17_Write( uint8_t reg, uint8_t value) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	460a      	mov	r2, r1
 80007e2:	71fb      	strb	r3, [r7, #7]
 80007e4:	4613      	mov	r3, r2
 80007e6:	71bb      	strb	r3, [r7, #6]
	uint8_t data[3] = {MCP23S17_ADDR_WRITE, reg, value};
 80007e8:	2340      	movs	r3, #64	@ 0x40
 80007ea:	733b      	strb	r3, [r7, #12]
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	737b      	strb	r3, [r7, #13]
 80007f0:	79bb      	ldrb	r3, [r7, #6]
 80007f2:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // CS Low
 80007f4:	2200      	movs	r2, #0
 80007f6:	2180      	movs	r1, #128	@ 0x80
 80007f8:	480c      	ldr	r0, [pc, #48]	@ (800082c <MCP23S17_Write+0x54>)
 80007fa:	f001 f86b 	bl	80018d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80007fe:	200a      	movs	r0, #10
 8000800:	f000 fd38 	bl	8001274 <HAL_Delay>
	HAL_SPI_Transmit(&hspi3, data, 3, HAL_MAX_DELAY);
 8000804:	f107 010c 	add.w	r1, r7, #12
 8000808:	f04f 33ff 	mov.w	r3, #4294967295
 800080c:	2203      	movs	r2, #3
 800080e:	4808      	ldr	r0, [pc, #32]	@ (8000830 <MCP23S17_Write+0x58>)
 8000810:	f002 fc6d 	bl	80030ee <HAL_SPI_Transmit>
	HAL_Delay(10);
 8000814:	200a      	movs	r0, #10
 8000816:	f000 fd2d 	bl	8001274 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);   // CS High
 800081a:	2201      	movs	r2, #1
 800081c:	2180      	movs	r1, #128	@ 0x80
 800081e:	4803      	ldr	r0, [pc, #12]	@ (800082c <MCP23S17_Write+0x54>)
 8000820:	f001 f858 	bl	80018d4 <HAL_GPIO_WritePin>
}
 8000824:	bf00      	nop
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	48000400 	.word	0x48000400
 8000830:	200006a0 	.word	0x200006a0

08000834 <ledToggle>:

    return rxBuffer[0]; // Retourne la valeur lue
}
*/
int ledToggle(h_shell_t * h_shell, int argc, char ** argv)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
	if (argc == 3)
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	2b03      	cmp	r3, #3
 8000844:	d13b      	bne.n	80008be <ledToggle+0x8a>
	{
		uint8_t etat_des_LEDs = 0xff;
 8000846:	23ff      	movs	r3, #255	@ 0xff
 8000848:	77fb      	strb	r3, [r7, #31]
		int a;
		a = atoi(argv[1]);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	3304      	adds	r3, #4
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4618      	mov	r0, r3
 8000852:	f006 f8cf 	bl	80069f4 <atoi>
 8000856:	6178      	str	r0, [r7, #20]
		if((a>=0 && a<=7)!=0){
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	2b00      	cmp	r3, #0
 800085c:	db04      	blt.n	8000868 <ledToggle+0x34>
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	2b07      	cmp	r3, #7
 8000862:	dc01      	bgt.n	8000868 <ledToggle+0x34>
 8000864:	2301      	movs	r3, #1
 8000866:	e000      	b.n	800086a <ledToggle+0x36>
 8000868:	2300      	movs	r3, #0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d009      	beq.n	8000882 <ledToggle+0x4e>
			etat_des_LEDs ^= (1 << a);
 800086e:	2201      	movs	r2, #1
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	b25a      	sxtb	r2, r3
 8000878:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800087c:	4053      	eors	r3, r2
 800087e:	b25b      	sxtb	r3, r3
 8000880:	77fb      	strb	r3, [r7, #31]
		}
		if(atoi(argv[2])==0){
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	3308      	adds	r3, #8
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4618      	mov	r0, r3
 800088a:	f006 f8b3 	bl	80069f4 <atoi>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d104      	bne.n	800089e <ledToggle+0x6a>
			// Allumer la LED (GPB0 à HIGH)
			MCP23S17_Write(MCPGPIOA, etat_des_LEDs);
 8000894:	7ffb      	ldrb	r3, [r7, #31]
 8000896:	4619      	mov	r1, r3
 8000898:	2012      	movs	r0, #18
 800089a:	f7ff ff9d 	bl	80007d8 <MCP23S17_Write>
		}
		if(atoi(argv[2])==1){
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	3308      	adds	r3, #8
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f006 f8a5 	bl	80069f4 <atoi>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d104      	bne.n	80008ba <ledToggle+0x86>
			// Allumer la LED (GPB0 à HIGH)
			MCP23S17_Write(MCPGPIOB, etat_des_LEDs);
 80008b0:	7ffb      	ldrb	r3, [r7, #31]
 80008b2:	4619      	mov	r1, r3
 80008b4:	2013      	movs	r0, #19
 80008b6:	f7ff ff8f 	bl	80007d8 <MCP23S17_Write>
		}
		return 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	e014      	b.n	80008e8 <ledToggle+0xb4>
	}
	else
	{
		int size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Erreur, pas le bon nombre d'arguments\r\n");
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80008c4:	4a0a      	ldr	r2, [pc, #40]	@ (80008f0 <ledToggle+0xbc>)
 80008c6:	2128      	movs	r1, #40	@ 0x28
 80008c8:	4618      	mov	r0, r3
 80008ca:	f006 fa3b 	bl	8006d44 <sniprintf>
 80008ce:	61b8      	str	r0, [r7, #24]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80008dc:	69b9      	ldr	r1, [r7, #24]
 80008de:	b289      	uxth	r1, r1
 80008e0:	4610      	mov	r0, r2
 80008e2:	4798      	blx	r3
		return -1;
 80008e4:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3720      	adds	r7, #32
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	08007c68 	.word	0x08007c68

080008f4 <Control_LED>:

void Control_LED(uint8_t led_num, uint8_t gpio) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	460a      	mov	r2, r1
 80008fe:	71fb      	strb	r3, [r7, #7]
 8000900:	4613      	mov	r3, r2
 8000902:	71bb      	strb	r3, [r7, #6]
	uint8_t etat_des_LEDs = 0xff;      // Éteindre toutes les LEDs
 8000904:	23ff      	movs	r3, #255	@ 0xff
 8000906:	73fb      	strb	r3, [r7, #15]
	etat_des_LEDs &= ~(1 << led_num);  // Allumer la LED spécifiée
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	2201      	movs	r2, #1
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	b25b      	sxtb	r3, r3
 8000912:	43db      	mvns	r3, r3
 8000914:	b25a      	sxtb	r2, r3
 8000916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800091a:	4013      	ands	r3, r2
 800091c:	b25b      	sxtb	r3, r3
 800091e:	73fb      	strb	r3, [r7, #15]
	MCP23S17_Write(gpio, etat_des_LEDs);
 8000920:	7bfa      	ldrb	r2, [r7, #15]
 8000922:	79bb      	ldrb	r3, [r7, #6]
 8000924:	4611      	mov	r1, r2
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff ff56 	bl	80007d8 <MCP23S17_Write>
}
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <task_chenillard>:

void task_chenillard() {
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
	uint8_t current_led_a = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	71fb      	strb	r3, [r7, #7]
	uint8_t current_led_b = 4;
 800093e:	2304      	movs	r3, #4
 8000940:	71bb      	strb	r3, [r7, #6]

	while (1) {
		if (chenillard_running) {
 8000942:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <task_chenillard+0x64>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2b00      	cmp	r3, #0
 800094a:	d021      	beq.n	8000990 <task_chenillard+0x5c>
			Control_LED(current_led_a, MCPGPIOA); // Allume la LED courante
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	2112      	movs	r1, #18
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ffcf 	bl	80008f4 <Control_LED>
			Control_LED(current_led_b, MCPGPIOB);
 8000956:	79bb      	ldrb	r3, [r7, #6]
 8000958:	2113      	movs	r1, #19
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff ffca 	bl	80008f4 <Control_LED>
			current_led_a = (current_led_a + 1) % NUM_LEDS; // Passer à la LED suivante
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	3301      	adds	r3, #1
 8000964:	425a      	negs	r2, r3
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	f002 0207 	and.w	r2, r2, #7
 800096e:	bf58      	it	pl
 8000970:	4253      	negpl	r3, r2
 8000972:	71fb      	strb	r3, [r7, #7]
			current_led_b = (current_led_b + 1) % NUM_LEDS;
 8000974:	79bb      	ldrb	r3, [r7, #6]
 8000976:	3301      	adds	r3, #1
 8000978:	425a      	negs	r2, r3
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	f002 0207 	and.w	r2, r2, #7
 8000982:	bf58      	it	pl
 8000984:	4253      	negpl	r3, r2
 8000986:	71bb      	strb	r3, [r7, #6]
			vTaskDelay(pdMS_TO_TICKS(200)); // Délai entre deux LEDs (200 ms)
 8000988:	20c8      	movs	r0, #200	@ 0xc8
 800098a:	f004 fea7 	bl	80056dc <vTaskDelay>
 800098e:	e7d8      	b.n	8000942 <task_chenillard+0xe>
		} else {
			vTaskDelay(pdMS_TO_TICKS(50)); // Petit délai pour éviter une boucle infinie rapide
 8000990:	2032      	movs	r0, #50	@ 0x32
 8000992:	f004 fea3 	bl	80056dc <vTaskDelay>
		if (chenillard_running) {
 8000996:	e7d4      	b.n	8000942 <task_chenillard+0xe>
 8000998:	2000033c 	.word	0x2000033c

0800099c <startChenillard>:
		}
	}
}

int startChenillard(h_shell_t * h_shell, int argc, char ** argv) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af02      	add	r7, sp, #8
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
	chenillard_running = 1; // Activer le chenillard
 80009a8:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <startChenillard+0x38>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
	if (ChenillardTaskHandle == NULL) {
 80009ae:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <startChenillard+0x3c>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d109      	bne.n	80009ca <startChenillard+0x2e>
		// Créer la tâche si elle n'existe pas
		xTaskCreate(task_chenillard, "ChenillardTask", 128, NULL, 1, &ChenillardTaskHandle);
 80009b6:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <startChenillard+0x3c>)
 80009b8:	9301      	str	r3, [sp, #4]
 80009ba:	2301      	movs	r3, #1
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	2300      	movs	r3, #0
 80009c0:	2280      	movs	r2, #128	@ 0x80
 80009c2:	4906      	ldr	r1, [pc, #24]	@ (80009dc <startChenillard+0x40>)
 80009c4:	4806      	ldr	r0, [pc, #24]	@ (80009e0 <startChenillard+0x44>)
 80009c6:	f004 fca9 	bl	800531c <xTaskCreate>
	}
	return 0;
 80009ca:	2300      	movs	r3, #0
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	2000033c 	.word	0x2000033c
 80009d8:	20000338 	.word	0x20000338
 80009dc:	08007c90 	.word	0x08007c90
 80009e0:	08000935 	.word	0x08000935

080009e4 <stopChenillard>:

int stopChenillard(h_shell_t * h_shell, int argc, char ** argv) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
	chenillard_running = 0; // Désactiver le chenillard
 80009f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <stopChenillard+0x44>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]
	if (ChenillardTaskHandle != NULL) {
 80009f6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a2c <stopChenillard+0x48>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d00f      	beq.n	8000a1e <stopChenillard+0x3a>
		vTaskDelete(ChenillardTaskHandle); // Supprimer la tâche
 80009fe:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <stopChenillard+0x48>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f004 fdda 	bl	80055bc <vTaskDelete>
		ChenillardTaskHandle = NULL;
 8000a08:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <stopChenillard+0x48>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
		MCP23S17_Write(MCPGPIOA, 0xff);
 8000a0e:	21ff      	movs	r1, #255	@ 0xff
 8000a10:	2012      	movs	r0, #18
 8000a12:	f7ff fee1 	bl	80007d8 <MCP23S17_Write>
		MCP23S17_Write(MCPGPIOB, 0xff);
 8000a16:	21ff      	movs	r1, #255	@ 0xff
 8000a18:	2013      	movs	r0, #19
 8000a1a:	f7ff fedd 	bl	80007d8 <MCP23S17_Write>
	}
	return 0;
 8000a1e:	2300      	movs	r3, #0
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	2000033c 	.word	0x2000033c
 8000a2c:	20000338 	.word	0x20000338

08000a30 <task_shell>:

void task_shell(void * unused)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	shell_init(&h_shell);
 8000a38:	4813      	ldr	r0, [pc, #76]	@ (8000a88 <task_shell+0x58>)
 8000a3a:	f005 fe63 	bl	8006704 <shell_init>
	shell_add(&h_shell, 'f', fonction, "Une fonction inutile");
 8000a3e:	4b13      	ldr	r3, [pc, #76]	@ (8000a8c <task_shell+0x5c>)
 8000a40:	4a13      	ldr	r2, [pc, #76]	@ (8000a90 <task_shell+0x60>)
 8000a42:	2166      	movs	r1, #102	@ 0x66
 8000a44:	4810      	ldr	r0, [pc, #64]	@ (8000a88 <task_shell+0x58>)
 8000a46:	f005 fe9f 	bl	8006788 <shell_add>
	shell_add(&h_shell, 'a', addition, "Effectue une somme");
 8000a4a:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <task_shell+0x64>)
 8000a4c:	4a12      	ldr	r2, [pc, #72]	@ (8000a98 <task_shell+0x68>)
 8000a4e:	2161      	movs	r1, #97	@ 0x61
 8000a50:	480d      	ldr	r0, [pc, #52]	@ (8000a88 <task_shell+0x58>)
 8000a52:	f005 fe99 	bl	8006788 <shell_add>
	shell_add(&h_shell, 'b', ledToggle, "Allumer une led");
 8000a56:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <task_shell+0x6c>)
 8000a58:	4a11      	ldr	r2, [pc, #68]	@ (8000aa0 <task_shell+0x70>)
 8000a5a:	2162      	movs	r1, #98	@ 0x62
 8000a5c:	480a      	ldr	r0, [pc, #40]	@ (8000a88 <task_shell+0x58>)
 8000a5e:	f005 fe93 	bl	8006788 <shell_add>
	shell_add(&h_shell, 'c',startChenillard, "Lancer chenillard");
 8000a62:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <task_shell+0x74>)
 8000a64:	4a10      	ldr	r2, [pc, #64]	@ (8000aa8 <task_shell+0x78>)
 8000a66:	2163      	movs	r1, #99	@ 0x63
 8000a68:	4807      	ldr	r0, [pc, #28]	@ (8000a88 <task_shell+0x58>)
 8000a6a:	f005 fe8d 	bl	8006788 <shell_add>
	shell_add(&h_shell, 'd',stopChenillard, "Arreter chenillard");
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000aac <task_shell+0x7c>)
 8000a70:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab0 <task_shell+0x80>)
 8000a72:	2164      	movs	r1, #100	@ 0x64
 8000a74:	4804      	ldr	r0, [pc, #16]	@ (8000a88 <task_shell+0x58>)
 8000a76:	f005 fe87 	bl	8006788 <shell_add>
	shell_run(&h_shell);	// boucle infinie
 8000a7a:	4803      	ldr	r0, [pc, #12]	@ (8000a88 <task_shell+0x58>)
 8000a7c:	f005 ff30 	bl	80068e0 <shell_run>
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000340 	.word	0x20000340
 8000a8c:	08007ca0 	.word	0x08007ca0
 8000a90:	080006f9 	.word	0x080006f9
 8000a94:	08007cb8 	.word	0x08007cb8
 8000a98:	08000739 	.word	0x08000739
 8000a9c:	08007ccc 	.word	0x08007ccc
 8000aa0:	08000835 	.word	0x08000835
 8000aa4:	08007cdc 	.word	0x08007cdc
 8000aa8:	0800099d 	.word	0x0800099d
 8000aac:	08007cf0 	.word	0x08007cf0
 8000ab0:	080009e5 	.word	0x080009e5

08000ab4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000aba:	f000 fb9b 	bl	80011f4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000abe:	f000 f855 	bl	8000b6c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ac2:	f7ff fd8b 	bl	80005dc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000ac6:	f000 fad7 	bl	8001078 <MX_USART2_UART_Init>
	MX_SPI3_Init();
 8000aca:	f000 f8b9 	bl	8000c40 <MX_SPI3_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad6:	f000 fefd 	bl	80018d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	2180      	movs	r1, #128	@ 0x80
 8000ade:	481b      	ldr	r0, [pc, #108]	@ (8000b4c <main+0x98>)
 8000ae0:	f000 fef8 	bl	80018d4 <HAL_GPIO_WritePin>
	//MCP23S17_Write(IOCON, IOCON_BANK);

	// Configurer tous les GPIOB comme sorties
	MCP23S17_Write(IODIRA, 0x00);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f7ff fe76 	bl	80007d8 <MCP23S17_Write>
	MCP23S17_Write(IODIRB, 0x00);
 8000aec:	2100      	movs	r1, #0
 8000aee:	2001      	movs	r0, #1
 8000af0:	f7ff fe72 	bl	80007d8 <MCP23S17_Write>

	// Eteindre toutes les led
	MCP23S17_Write(MCPGPIOA, 0xff);
 8000af4:	21ff      	movs	r1, #255	@ 0xff
 8000af6:	2012      	movs	r0, #18
 8000af8:	f7ff fe6e 	bl	80007d8 <MCP23S17_Write>
	MCP23S17_Write(MCPGPIOB, 0xff);
 8000afc:	21ff      	movs	r1, #255	@ 0xff
 8000afe:	2013      	movs	r0, #19
 8000b00:	f7ff fe6a 	bl	80007d8 <MCP23S17_Write>

	h_shell.drv.receive = drv_uart2_receive;
 8000b04:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <main+0x9c>)
 8000b06:	4a13      	ldr	r2, [pc, #76]	@ (8000b54 <main+0xa0>)
 8000b08:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
	h_shell.drv.transmit = drv_uart2_transmit;
 8000b0c:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <main+0x9c>)
 8000b0e:	4a12      	ldr	r2, [pc, #72]	@ (8000b58 <main+0xa4>)
 8000b10:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354


	if (xTaskCreate(task_shell, "Shell", TASK_SHELL_STACK_DEPTH, NULL, TASK_SHELL_PRIORITY, &h_task_shell) != pdPASS)
 8000b14:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <main+0xa8>)
 8000b16:	9301      	str	r3, [sp, #4]
 8000b18:	2301      	movs	r3, #1
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b22:	490f      	ldr	r1, [pc, #60]	@ (8000b60 <main+0xac>)
 8000b24:	480f      	ldr	r0, [pc, #60]	@ (8000b64 <main+0xb0>)
 8000b26:	f004 fbf9 	bl	800531c <xTaskCreate>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d004      	beq.n	8000b3a <main+0x86>
	{
		printf("Error creating task shell\r\n");
 8000b30:	480d      	ldr	r0, [pc, #52]	@ (8000b68 <main+0xb4>)
 8000b32:	f006 f8ff 	bl	8006d34 <puts>
		Error_Handler();
 8000b36:	f000 f87d 	bl	8000c34 <Error_Handler>
	}

	vTaskStartScheduler();
 8000b3a:	f004 fe05 	bl	8005748 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 8000b3e:	f7ff fd29 	bl	8000594 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8000b42:	f004 fa70 	bl	8005026 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000b46:	bf00      	nop
 8000b48:	e7fd      	b.n	8000b46 <main+0x92>
 8000b4a:	bf00      	nop
 8000b4c:	48000400 	.word	0x48000400
 8000b50:	20000340 	.word	0x20000340
 8000b54:	08006635 	.word	0x08006635
 8000b58:	0800665d 	.word	0x0800665d
 8000b5c:	20000334 	.word	0x20000334
 8000b60:	08007d04 	.word	0x08007d04
 8000b64:	08000a31 	.word	0x08000a31
 8000b68:	08007d0c 	.word	0x08007d0c

08000b6c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b096      	sub	sp, #88	@ 0x58
 8000b70:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	2244      	movs	r2, #68	@ 0x44
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f006 f9ee 	bl	8006f5c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b80:	463b      	mov	r3, r7
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b8e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b92:	f000 fec5 	bl	8001920 <HAL_PWREx_ControlVoltageScaling>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000b9c:	f000 f84a 	bl	8000c34 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ba4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ba8:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000baa:	2310      	movs	r3, #16
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000bba:	230a      	movs	r3, #10
 8000bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000bbe:	2307      	movs	r3, #7
 8000bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 fefc 	bl	80019cc <HAL_RCC_OscConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0x72>
	{
		Error_Handler();
 8000bda:	f000 f82b 	bl	8000c34 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bde:	230f      	movs	r3, #15
 8000be0:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be2:	2303      	movs	r3, #3
 8000be4:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	2104      	movs	r1, #4
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 fac4 	bl	8002184 <HAL_RCC_ClockConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000c02:	f000 f817 	bl	8000c34 <Error_Handler>
	}
}
 8000c06:	bf00      	nop
 8000c08:	3758      	adds	r7, #88	@ 0x58
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a04      	ldr	r2, [pc, #16]	@ (8000c30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d101      	bne.n	8000c26 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000c22:	f000 fb07 	bl	8001234 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40012c00 	.word	0x40012c00

08000c34 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c38:	b672      	cpsid	i
}
 8000c3a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <Error_Handler+0x8>

08000c40 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb4 <MX_SPI3_Init+0x74>)
 8000c46:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb8 <MX_SPI3_Init+0x78>)
 8000c48:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <MX_SPI3_Init+0x74>)
 8000c4c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c50:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c52:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <MX_SPI3_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c58:	4b16      	ldr	r3, [pc, #88]	@ (8000cb4 <MX_SPI3_Init+0x74>)
 8000c5a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000c5e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c60:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <MX_SPI3_Init+0x74>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c66:	4b13      	ldr	r3, [pc, #76]	@ (8000cb4 <MX_SPI3_Init+0x74>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <MX_SPI3_Init+0x74>)
 8000c6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c72:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <MX_SPI3_Init+0x74>)
 8000c76:	2210      	movs	r2, #16
 8000c78:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <MX_SPI3_Init+0x74>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <MX_SPI3_Init+0x74>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb4 <MX_SPI3_Init+0x74>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	@ (8000cb4 <MX_SPI3_Init+0x74>)
 8000c8e:	2207      	movs	r2, #7
 8000c90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c92:	4b08      	ldr	r3, [pc, #32]	@ (8000cb4 <MX_SPI3_Init+0x74>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c98:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <MX_SPI3_Init+0x74>)
 8000c9a:	2208      	movs	r2, #8
 8000c9c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c9e:	4805      	ldr	r0, [pc, #20]	@ (8000cb4 <MX_SPI3_Init+0x74>)
 8000ca0:	f002 f982 	bl	8002fa8 <HAL_SPI_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000caa:	f7ff ffc3 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200006a0 	.word	0x200006a0
 8000cb8:	40003c00 	.word	0x40003c00

08000cbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	@ 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a25      	ldr	r2, [pc, #148]	@ (8000d70 <HAL_SPI_MspInit+0xb4>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d144      	bne.n	8000d68 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cde:	4b25      	ldr	r3, [pc, #148]	@ (8000d74 <HAL_SPI_MspInit+0xb8>)
 8000ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce2:	4a24      	ldr	r2, [pc, #144]	@ (8000d74 <HAL_SPI_MspInit+0xb8>)
 8000ce4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ce8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cea:	4b22      	ldr	r3, [pc, #136]	@ (8000d74 <HAL_SPI_MspInit+0xb8>)
 8000cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d74 <HAL_SPI_MspInit+0xb8>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8000d74 <HAL_SPI_MspInit+0xb8>)
 8000cfc:	f043 0304 	orr.w	r3, r3, #4
 8000d00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d02:	4b1c      	ldr	r3, [pc, #112]	@ (8000d74 <HAL_SPI_MspInit+0xb8>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <HAL_SPI_MspInit+0xb8>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d12:	4a18      	ldr	r2, [pc, #96]	@ (8000d74 <HAL_SPI_MspInit+0xb8>)
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d1a:	4b16      	ldr	r3, [pc, #88]	@ (8000d74 <HAL_SPI_MspInit+0xb8>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d26:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d38:	2306      	movs	r3, #6
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	480d      	ldr	r0, [pc, #52]	@ (8000d78 <HAL_SPI_MspInit+0xbc>)
 8000d44:	f000 fc1c 	bl	8001580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d48:	2320      	movs	r3, #32
 8000d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d54:	2303      	movs	r3, #3
 8000d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d58:	2306      	movs	r3, #6
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	4806      	ldr	r0, [pc, #24]	@ (8000d7c <HAL_SPI_MspInit+0xc0>)
 8000d64:	f000 fc0c 	bl	8001580 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000d68:	bf00      	nop
 8000d6a:	3728      	adds	r7, #40	@ 0x28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40003c00 	.word	0x40003c00
 8000d74:	40021000 	.word	0x40021000
 8000d78:	48000800 	.word	0x48000800
 8000d7c:	48000400 	.word	0x48000400

08000d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <HAL_MspInit+0x4c>)
 8000d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d8a:	4a10      	ldr	r2, [pc, #64]	@ (8000dcc <HAL_MspInit+0x4c>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d92:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <HAL_MspInit+0x4c>)
 8000d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dcc <HAL_MspInit+0x4c>)
 8000da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dcc <HAL_MspInit+0x4c>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000da8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000daa:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <HAL_MspInit+0x4c>)
 8000dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	210f      	movs	r1, #15
 8000dba:	f06f 0001 	mvn.w	r0, #1
 8000dbe:	f000 fb35 	bl	800142c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08c      	sub	sp, #48	@ 0x30
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000dde:	4b2e      	ldr	r3, [pc, #184]	@ (8000e98 <HAL_InitTick+0xc8>)
 8000de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000de2:	4a2d      	ldr	r2, [pc, #180]	@ (8000e98 <HAL_InitTick+0xc8>)
 8000de4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000de8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dea:	4b2b      	ldr	r3, [pc, #172]	@ (8000e98 <HAL_InitTick+0xc8>)
 8000dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000df6:	f107 020c 	add.w	r2, r7, #12
 8000dfa:	f107 0310 	add.w	r3, r7, #16
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f001 fb83 	bl	800250c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e06:	f001 fb6b 	bl	80024e0 <HAL_RCC_GetPCLK2Freq>
 8000e0a:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e0e:	4a23      	ldr	r2, [pc, #140]	@ (8000e9c <HAL_InitTick+0xcc>)
 8000e10:	fba2 2303 	umull	r2, r3, r2, r3
 8000e14:	0c9b      	lsrs	r3, r3, #18
 8000e16:	3b01      	subs	r3, #1
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e1a:	4b21      	ldr	r3, [pc, #132]	@ (8000ea0 <HAL_InitTick+0xd0>)
 8000e1c:	4a21      	ldr	r2, [pc, #132]	@ (8000ea4 <HAL_InitTick+0xd4>)
 8000e1e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea0 <HAL_InitTick+0xd0>)
 8000e22:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e26:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e28:	4a1d      	ldr	r2, [pc, #116]	@ (8000ea0 <HAL_InitTick+0xd0>)
 8000e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e2c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea0 <HAL_InitTick+0xd0>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea0 <HAL_InitTick+0xd0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ea0 <HAL_InitTick+0xd0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000e40:	4817      	ldr	r0, [pc, #92]	@ (8000ea0 <HAL_InitTick+0xd0>)
 8000e42:	f002 fc2f 	bl	80036a4 <HAL_TIM_Base_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000e4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d11b      	bne.n	8000e8c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e54:	4812      	ldr	r0, [pc, #72]	@ (8000ea0 <HAL_InitTick+0xd0>)
 8000e56:	f002 fc87 	bl	8003768 <HAL_TIM_Base_Start_IT>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000e60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d111      	bne.n	8000e8c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000e68:	2019      	movs	r0, #25
 8000e6a:	f000 fafb 	bl	8001464 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b0f      	cmp	r3, #15
 8000e72:	d808      	bhi.n	8000e86 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000e74:	2200      	movs	r2, #0
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	2019      	movs	r0, #25
 8000e7a:	f000 fad7 	bl	800142c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <HAL_InitTick+0xd8>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	e002      	b.n	8000e8c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3730      	adds	r7, #48	@ 0x30
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	431bde83 	.word	0x431bde83
 8000ea0:	20000704 	.word	0x20000704
 8000ea4:	40012c00 	.word	0x40012c00
 8000ea8:	20000004 	.word	0x20000004

08000eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <NMI_Handler+0x4>

08000eb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <HardFault_Handler+0x4>

08000ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <MemManage_Handler+0x4>

08000ec4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <BusFault_Handler+0x4>

08000ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <UsageFault_Handler+0x4>

08000ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ee8:	4802      	ldr	r0, [pc, #8]	@ (8000ef4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000eea:	f002 fcad 	bl	8003848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000704 	.word	0x20000704

08000ef8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000efc:	4802      	ldr	r0, [pc, #8]	@ (8000f08 <USART2_IRQHandler+0x10>)
 8000efe:	f003 f837 	bl	8003f70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000754 	.word	0x20000754

08000f0c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	e00a      	b.n	8000f34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f1e:	f3af 8000 	nop.w
 8000f22:	4601      	mov	r1, r0
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	1c5a      	adds	r2, r3, #1
 8000f28:	60ba      	str	r2, [r7, #8]
 8000f2a:	b2ca      	uxtb	r2, r1
 8000f2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	3301      	adds	r3, #1
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	dbf0      	blt.n	8000f1e <_read+0x12>
  }

  return len;
 8000f3c:	687b      	ldr	r3, [r7, #4]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b086      	sub	sp, #24
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	60f8      	str	r0, [r7, #12]
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	e009      	b.n	8000f6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	1c5a      	adds	r2, r3, #1
 8000f5c:	60ba      	str	r2, [r7, #8]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fbb7 	bl	80006d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	dbf1      	blt.n	8000f58 <_write+0x12>
  }
  return len;
 8000f74:	687b      	ldr	r3, [r7, #4]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <_close>:

int _close(int file)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
 8000f9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fa6:	605a      	str	r2, [r3, #4]
  return 0;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <_isatty>:

int _isatty(int file)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fbe:	2301      	movs	r3, #1
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff0:	4a14      	ldr	r2, [pc, #80]	@ (8001044 <_sbrk+0x5c>)
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <_sbrk+0x60>)
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ffc:	4b13      	ldr	r3, [pc, #76]	@ (800104c <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d102      	bne.n	800100a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001004:	4b11      	ldr	r3, [pc, #68]	@ (800104c <_sbrk+0x64>)
 8001006:	4a12      	ldr	r2, [pc, #72]	@ (8001050 <_sbrk+0x68>)
 8001008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100a:	4b10      	ldr	r3, [pc, #64]	@ (800104c <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	429a      	cmp	r2, r3
 8001016:	d207      	bcs.n	8001028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001018:	f006 f844 	bl	80070a4 <__errno>
 800101c:	4603      	mov	r3, r0
 800101e:	220c      	movs	r2, #12
 8001020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	e009      	b.n	800103c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001028:	4b08      	ldr	r3, [pc, #32]	@ (800104c <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102e:	4b07      	ldr	r3, [pc, #28]	@ (800104c <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	4a05      	ldr	r2, [pc, #20]	@ (800104c <_sbrk+0x64>)
 8001038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103a:	68fb      	ldr	r3, [r7, #12]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20018000 	.word	0x20018000
 8001048:	00000400 	.word	0x00000400
 800104c:	20000750 	.word	0x20000750
 8001050:	20001638 	.word	0x20001638

08001054 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <SystemInit+0x20>)
 800105a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800105e:	4a05      	ldr	r2, [pc, #20]	@ (8001074 <SystemInit+0x20>)
 8001060:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001064:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800107c:	4b14      	ldr	r3, [pc, #80]	@ (80010d0 <MX_USART2_UART_Init+0x58>)
 800107e:	4a15      	ldr	r2, [pc, #84]	@ (80010d4 <MX_USART2_UART_Init+0x5c>)
 8001080:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001082:	4b13      	ldr	r3, [pc, #76]	@ (80010d0 <MX_USART2_UART_Init+0x58>)
 8001084:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001088:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800108a:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <MX_USART2_UART_Init+0x58>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001090:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <MX_USART2_UART_Init+0x58>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001096:	4b0e      	ldr	r3, [pc, #56]	@ (80010d0 <MX_USART2_UART_Init+0x58>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800109c:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <MX_USART2_UART_Init+0x58>)
 800109e:	220c      	movs	r2, #12
 80010a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	@ (80010d0 <MX_USART2_UART_Init+0x58>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a8:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <MX_USART2_UART_Init+0x58>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ae:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <MX_USART2_UART_Init+0x58>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <MX_USART2_UART_Init+0x58>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ba:	4805      	ldr	r0, [pc, #20]	@ (80010d0 <MX_USART2_UART_Init+0x58>)
 80010bc:	f002 fdb8 	bl	8003c30 <HAL_UART_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010c6:	f7ff fdb5 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000754 	.word	0x20000754
 80010d4:	40004400 	.word	0x40004400

080010d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b0ac      	sub	sp, #176	@ 0xb0
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2288      	movs	r2, #136	@ 0x88
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f005 ff2f 	bl	8006f5c <memset>
  if(uartHandle->Instance==USART2)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a25      	ldr	r2, [pc, #148]	@ (8001198 <HAL_UART_MspInit+0xc0>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d143      	bne.n	8001190 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001108:	2302      	movs	r3, #2
 800110a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800110c:	2300      	movs	r3, #0
 800110e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4618      	mov	r0, r3
 8001116:	f001 fa8b 	bl	8002630 <HAL_RCCEx_PeriphCLKConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001120:	f7ff fd88 	bl	8000c34 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001124:	4b1d      	ldr	r3, [pc, #116]	@ (800119c <HAL_UART_MspInit+0xc4>)
 8001126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001128:	4a1c      	ldr	r2, [pc, #112]	@ (800119c <HAL_UART_MspInit+0xc4>)
 800112a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800112e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001130:	4b1a      	ldr	r3, [pc, #104]	@ (800119c <HAL_UART_MspInit+0xc4>)
 8001132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	4b17      	ldr	r3, [pc, #92]	@ (800119c <HAL_UART_MspInit+0xc4>)
 800113e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001140:	4a16      	ldr	r2, [pc, #88]	@ (800119c <HAL_UART_MspInit+0xc4>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001148:	4b14      	ldr	r3, [pc, #80]	@ (800119c <HAL_UART_MspInit+0xc4>)
 800114a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001154:	230c      	movs	r3, #12
 8001156:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800116c:	2307      	movs	r3, #7
 800116e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001172:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001176:	4619      	mov	r1, r3
 8001178:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800117c:	f000 fa00 	bl	8001580 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2105      	movs	r1, #5
 8001184:	2026      	movs	r0, #38	@ 0x26
 8001186:	f000 f951 	bl	800142c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800118a:	2026      	movs	r0, #38	@ 0x26
 800118c:	f000 f96a 	bl	8001464 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001190:	bf00      	nop
 8001192:	37b0      	adds	r7, #176	@ 0xb0
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40004400 	.word	0x40004400
 800119c:	40021000 	.word	0x40021000

080011a0 <Reset_Handler>:
 80011a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011d8 <LoopForever+0x2>
 80011a4:	f7ff ff56 	bl	8001054 <SystemInit>
 80011a8:	480c      	ldr	r0, [pc, #48]	@ (80011dc <LoopForever+0x6>)
 80011aa:	490d      	ldr	r1, [pc, #52]	@ (80011e0 <LoopForever+0xa>)
 80011ac:	4a0d      	ldr	r2, [pc, #52]	@ (80011e4 <LoopForever+0xe>)
 80011ae:	2300      	movs	r3, #0
 80011b0:	e002      	b.n	80011b8 <LoopCopyDataInit>

080011b2 <CopyDataInit>:
 80011b2:	58d4      	ldr	r4, [r2, r3]
 80011b4:	50c4      	str	r4, [r0, r3]
 80011b6:	3304      	adds	r3, #4

080011b8 <LoopCopyDataInit>:
 80011b8:	18c4      	adds	r4, r0, r3
 80011ba:	428c      	cmp	r4, r1
 80011bc:	d3f9      	bcc.n	80011b2 <CopyDataInit>
 80011be:	4a0a      	ldr	r2, [pc, #40]	@ (80011e8 <LoopForever+0x12>)
 80011c0:	4c0a      	ldr	r4, [pc, #40]	@ (80011ec <LoopForever+0x16>)
 80011c2:	2300      	movs	r3, #0
 80011c4:	e001      	b.n	80011ca <LoopFillZerobss>

080011c6 <FillZerobss>:
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	3204      	adds	r2, #4

080011ca <LoopFillZerobss>:
 80011ca:	42a2      	cmp	r2, r4
 80011cc:	d3fb      	bcc.n	80011c6 <FillZerobss>
 80011ce:	f005 ff6f 	bl	80070b0 <__libc_init_array>
 80011d2:	f7ff fc6f 	bl	8000ab4 <main>

080011d6 <LoopForever>:
 80011d6:	e7fe      	b.n	80011d6 <LoopForever>
 80011d8:	20018000 	.word	0x20018000
 80011dc:	20000000 	.word	0x20000000
 80011e0:	20000074 	.word	0x20000074
 80011e4:	08007f40 	.word	0x08007f40
 80011e8:	20000074 	.word	0x20000074
 80011ec:	20001638 	.word	0x20001638

080011f0 <ADC1_2_IRQHandler>:
 80011f0:	e7fe      	b.n	80011f0 <ADC1_2_IRQHandler>
	...

080011f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <HAL_Init+0x3c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a0b      	ldr	r2, [pc, #44]	@ (8001230 <HAL_Init+0x3c>)
 8001204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001208:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800120a:	2003      	movs	r0, #3
 800120c:	f000 f903 	bl	8001416 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001210:	200f      	movs	r0, #15
 8001212:	f7ff fddd 	bl	8000dd0 <HAL_InitTick>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d002      	beq.n	8001222 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	71fb      	strb	r3, [r7, #7]
 8001220:	e001      	b.n	8001226 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001222:	f7ff fdad 	bl	8000d80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001226:	79fb      	ldrb	r3, [r7, #7]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40022000 	.word	0x40022000

08001234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001238:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_IncTick+0x20>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <HAL_IncTick+0x24>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4413      	add	r3, r2
 8001244:	4a04      	ldr	r2, [pc, #16]	@ (8001258 <HAL_IncTick+0x24>)
 8001246:	6013      	str	r3, [r2, #0]
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000008 	.word	0x20000008
 8001258:	200007dc 	.word	0x200007dc

0800125c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return uwTick;
 8001260:	4b03      	ldr	r3, [pc, #12]	@ (8001270 <HAL_GetTick+0x14>)
 8001262:	681b      	ldr	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	200007dc 	.word	0x200007dc

08001274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800127c:	f7ff ffee 	bl	800125c <HAL_GetTick>
 8001280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800128c:	d005      	beq.n	800129a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800128e:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <HAL_Delay+0x44>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800129a:	bf00      	nop
 800129c:	f7ff ffde 	bl	800125c <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d8f7      	bhi.n	800129c <HAL_Delay+0x28>
  {
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000008 	.word	0x20000008

080012bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012d8:	4013      	ands	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ee:	4a04      	ldr	r2, [pc, #16]	@ (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	60d3      	str	r3, [r2, #12]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001308:	4b04      	ldr	r3, [pc, #16]	@ (800131c <__NVIC_GetPriorityGrouping+0x18>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	f003 0307 	and.w	r3, r3, #7
}
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	2b00      	cmp	r3, #0
 8001330:	db0b      	blt.n	800134a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	f003 021f 	and.w	r2, r3, #31
 8001338:	4907      	ldr	r1, [pc, #28]	@ (8001358 <__NVIC_EnableIRQ+0x38>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	095b      	lsrs	r3, r3, #5
 8001340:	2001      	movs	r0, #1
 8001342:	fa00 f202 	lsl.w	r2, r0, r2
 8001346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000e100 	.word	0xe000e100

0800135c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	2b00      	cmp	r3, #0
 800136e:	db0a      	blt.n	8001386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	490c      	ldr	r1, [pc, #48]	@ (80013a8 <__NVIC_SetPriority+0x4c>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	0112      	lsls	r2, r2, #4
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	440b      	add	r3, r1
 8001380:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001384:	e00a      	b.n	800139c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4908      	ldr	r1, [pc, #32]	@ (80013ac <__NVIC_SetPriority+0x50>)
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	3b04      	subs	r3, #4
 8001394:	0112      	lsls	r2, r2, #4
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	440b      	add	r3, r1
 800139a:	761a      	strb	r2, [r3, #24]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000e100 	.word	0xe000e100
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	@ 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f1c3 0307 	rsb	r3, r3, #7
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	bf28      	it	cs
 80013ce:	2304      	movcs	r3, #4
 80013d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3304      	adds	r3, #4
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d902      	bls.n	80013e0 <NVIC_EncodePriority+0x30>
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3b03      	subs	r3, #3
 80013de:	e000      	b.n	80013e2 <NVIC_EncodePriority+0x32>
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	f04f 32ff 	mov.w	r2, #4294967295
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43da      	mvns	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	401a      	ands	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f8:	f04f 31ff 	mov.w	r1, #4294967295
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	43d9      	mvns	r1, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	4313      	orrs	r3, r2
         );
}
 800140a:	4618      	mov	r0, r3
 800140c:	3724      	adds	r7, #36	@ 0x24
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ff4c 	bl	80012bc <__NVIC_SetPriorityGrouping>
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
 8001438:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800143e:	f7ff ff61 	bl	8001304 <__NVIC_GetPriorityGrouping>
 8001442:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	68b9      	ldr	r1, [r7, #8]
 8001448:	6978      	ldr	r0, [r7, #20]
 800144a:	f7ff ffb1 	bl	80013b0 <NVIC_EncodePriority>
 800144e:	4602      	mov	r2, r0
 8001450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001454:	4611      	mov	r1, r2
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ff80 	bl	800135c <__NVIC_SetPriority>
}
 800145c:	bf00      	nop
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff ff54 	bl	8001320 <__NVIC_EnableIRQ>
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d008      	beq.n	80014aa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2204      	movs	r2, #4
 800149c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e022      	b.n	80014f0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 020e 	bic.w	r2, r2, #14
 80014b8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0201 	bic.w	r2, r2, #1
 80014c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ce:	f003 021c 	and.w	r2, r3, #28
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	2101      	movs	r1, #1
 80014d8:	fa01 f202 	lsl.w	r2, r1, r2
 80014dc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d005      	beq.n	8001520 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2204      	movs	r2, #4
 8001518:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	73fb      	strb	r3, [r7, #15]
 800151e:	e029      	b.n	8001574 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 020e 	bic.w	r2, r2, #14
 800152e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0201 	bic.w	r2, r2, #1
 800153e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001544:	f003 021c 	and.w	r2, r3, #28
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154c:	2101      	movs	r1, #1
 800154e:	fa01 f202 	lsl.w	r2, r1, r2
 8001552:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	4798      	blx	r3
    }
  }
  return status;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001580:	b480      	push	{r7}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800158e:	e17f      	b.n	8001890 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	2101      	movs	r1, #1
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	fa01 f303 	lsl.w	r3, r1, r3
 800159c:	4013      	ands	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 8171 	beq.w	800188a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d005      	beq.n	80015c0 <HAL_GPIO_Init+0x40>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d130      	bne.n	8001622 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	2203      	movs	r2, #3
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	68da      	ldr	r2, [r3, #12]
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015f6:	2201      	movs	r2, #1
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	091b      	lsrs	r3, r3, #4
 800160c:	f003 0201 	and.w	r2, r3, #1
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	2b03      	cmp	r3, #3
 800162c:	d118      	bne.n	8001660 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001632:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001634:	2201      	movs	r2, #1
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4013      	ands	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	08db      	lsrs	r3, r3, #3
 800164a:	f003 0201 	and.w	r2, r3, #1
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4313      	orrs	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	2b03      	cmp	r3, #3
 800166a:	d017      	beq.n	800169c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	2203      	movs	r2, #3
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4313      	orrs	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d123      	bne.n	80016f0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	08da      	lsrs	r2, r3, #3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3208      	adds	r2, #8
 80016b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	220f      	movs	r2, #15
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	691a      	ldr	r2, [r3, #16]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4313      	orrs	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	08da      	lsrs	r2, r3, #3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3208      	adds	r2, #8
 80016ea:	6939      	ldr	r1, [r7, #16]
 80016ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	2203      	movs	r2, #3
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0203 	and.w	r2, r3, #3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 80ac 	beq.w	800188a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001732:	4b5f      	ldr	r3, [pc, #380]	@ (80018b0 <HAL_GPIO_Init+0x330>)
 8001734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001736:	4a5e      	ldr	r2, [pc, #376]	@ (80018b0 <HAL_GPIO_Init+0x330>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6613      	str	r3, [r2, #96]	@ 0x60
 800173e:	4b5c      	ldr	r3, [pc, #368]	@ (80018b0 <HAL_GPIO_Init+0x330>)
 8001740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800174a:	4a5a      	ldr	r2, [pc, #360]	@ (80018b4 <HAL_GPIO_Init+0x334>)
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	3302      	adds	r3, #2
 8001752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001756:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	220f      	movs	r2, #15
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001774:	d025      	beq.n	80017c2 <HAL_GPIO_Init+0x242>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4f      	ldr	r2, [pc, #316]	@ (80018b8 <HAL_GPIO_Init+0x338>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d01f      	beq.n	80017be <HAL_GPIO_Init+0x23e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a4e      	ldr	r2, [pc, #312]	@ (80018bc <HAL_GPIO_Init+0x33c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d019      	beq.n	80017ba <HAL_GPIO_Init+0x23a>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4d      	ldr	r2, [pc, #308]	@ (80018c0 <HAL_GPIO_Init+0x340>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d013      	beq.n	80017b6 <HAL_GPIO_Init+0x236>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4c      	ldr	r2, [pc, #304]	@ (80018c4 <HAL_GPIO_Init+0x344>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d00d      	beq.n	80017b2 <HAL_GPIO_Init+0x232>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4b      	ldr	r2, [pc, #300]	@ (80018c8 <HAL_GPIO_Init+0x348>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d007      	beq.n	80017ae <HAL_GPIO_Init+0x22e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a4a      	ldr	r2, [pc, #296]	@ (80018cc <HAL_GPIO_Init+0x34c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d101      	bne.n	80017aa <HAL_GPIO_Init+0x22a>
 80017a6:	2306      	movs	r3, #6
 80017a8:	e00c      	b.n	80017c4 <HAL_GPIO_Init+0x244>
 80017aa:	2307      	movs	r3, #7
 80017ac:	e00a      	b.n	80017c4 <HAL_GPIO_Init+0x244>
 80017ae:	2305      	movs	r3, #5
 80017b0:	e008      	b.n	80017c4 <HAL_GPIO_Init+0x244>
 80017b2:	2304      	movs	r3, #4
 80017b4:	e006      	b.n	80017c4 <HAL_GPIO_Init+0x244>
 80017b6:	2303      	movs	r3, #3
 80017b8:	e004      	b.n	80017c4 <HAL_GPIO_Init+0x244>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e002      	b.n	80017c4 <HAL_GPIO_Init+0x244>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <HAL_GPIO_Init+0x244>
 80017c2:	2300      	movs	r3, #0
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	f002 0203 	and.w	r2, r2, #3
 80017ca:	0092      	lsls	r2, r2, #2
 80017cc:	4093      	lsls	r3, r2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017d4:	4937      	ldr	r1, [pc, #220]	@ (80018b4 <HAL_GPIO_Init+0x334>)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	089b      	lsrs	r3, r3, #2
 80017da:	3302      	adds	r3, #2
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017e2:	4b3b      	ldr	r3, [pc, #236]	@ (80018d0 <HAL_GPIO_Init+0x350>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4313      	orrs	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001806:	4a32      	ldr	r2, [pc, #200]	@ (80018d0 <HAL_GPIO_Init+0x350>)
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800180c:	4b30      	ldr	r3, [pc, #192]	@ (80018d0 <HAL_GPIO_Init+0x350>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	43db      	mvns	r3, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001830:	4a27      	ldr	r2, [pc, #156]	@ (80018d0 <HAL_GPIO_Init+0x350>)
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001836:	4b26      	ldr	r3, [pc, #152]	@ (80018d0 <HAL_GPIO_Init+0x350>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800185a:	4a1d      	ldr	r2, [pc, #116]	@ (80018d0 <HAL_GPIO_Init+0x350>)
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001860:	4b1b      	ldr	r3, [pc, #108]	@ (80018d0 <HAL_GPIO_Init+0x350>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	43db      	mvns	r3, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001884:	4a12      	ldr	r2, [pc, #72]	@ (80018d0 <HAL_GPIO_Init+0x350>)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	3301      	adds	r3, #1
 800188e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa22 f303 	lsr.w	r3, r2, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	f47f ae78 	bne.w	8001590 <HAL_GPIO_Init+0x10>
  }
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	371c      	adds	r7, #28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010000 	.word	0x40010000
 80018b8:	48000400 	.word	0x48000400
 80018bc:	48000800 	.word	0x48000800
 80018c0:	48000c00 	.word	0x48000c00
 80018c4:	48001000 	.word	0x48001000
 80018c8:	48001400 	.word	0x48001400
 80018cc:	48001800 	.word	0x48001800
 80018d0:	40010400 	.word	0x40010400

080018d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	807b      	strh	r3, [r7, #2]
 80018e0:	4613      	mov	r3, r2
 80018e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018e4:	787b      	ldrb	r3, [r7, #1]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018ea:	887a      	ldrh	r2, [r7, #2]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018f0:	e002      	b.n	80018f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018f2:	887a      	ldrh	r2, [r7, #2]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001908:	4b04      	ldr	r3, [pc, #16]	@ (800191c <HAL_PWREx_GetVoltageRange+0x18>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40007000 	.word	0x40007000

08001920 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800192e:	d130      	bne.n	8001992 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001930:	4b23      	ldr	r3, [pc, #140]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800193c:	d038      	beq.n	80019b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800193e:	4b20      	ldr	r3, [pc, #128]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001946:	4a1e      	ldr	r2, [pc, #120]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001948:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800194c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800194e:	4b1d      	ldr	r3, [pc, #116]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2232      	movs	r2, #50	@ 0x32
 8001954:	fb02 f303 	mul.w	r3, r2, r3
 8001958:	4a1b      	ldr	r2, [pc, #108]	@ (80019c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800195a:	fba2 2303 	umull	r2, r3, r2, r3
 800195e:	0c9b      	lsrs	r3, r3, #18
 8001960:	3301      	adds	r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001964:	e002      	b.n	800196c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	3b01      	subs	r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800196c:	4b14      	ldr	r3, [pc, #80]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001974:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001978:	d102      	bne.n	8001980 <HAL_PWREx_ControlVoltageScaling+0x60>
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1f2      	bne.n	8001966 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001980:	4b0f      	ldr	r3, [pc, #60]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001988:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800198c:	d110      	bne.n	80019b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e00f      	b.n	80019b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001992:	4b0b      	ldr	r3, [pc, #44]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800199a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800199e:	d007      	beq.n	80019b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019a0:	4b07      	ldr	r3, [pc, #28]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019a8:	4a05      	ldr	r2, [pc, #20]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40007000 	.word	0x40007000
 80019c4:	20000000 	.word	0x20000000
 80019c8:	431bde83 	.word	0x431bde83

080019cc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e3ca      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019de:	4b97      	ldr	r3, [pc, #604]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019e8:	4b94      	ldr	r3, [pc, #592]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 80e4 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d007      	beq.n	8001a16 <HAL_RCC_OscConfig+0x4a>
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	2b0c      	cmp	r3, #12
 8001a0a:	f040 808b 	bne.w	8001b24 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	f040 8087 	bne.w	8001b24 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a16:	4b89      	ldr	r3, [pc, #548]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d005      	beq.n	8001a2e <HAL_RCC_OscConfig+0x62>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e3a2      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a1a      	ldr	r2, [r3, #32]
 8001a32:	4b82      	ldr	r3, [pc, #520]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d004      	beq.n	8001a48 <HAL_RCC_OscConfig+0x7c>
 8001a3e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a46:	e005      	b.n	8001a54 <HAL_RCC_OscConfig+0x88>
 8001a48:	4b7c      	ldr	r3, [pc, #496]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a4e:	091b      	lsrs	r3, r3, #4
 8001a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d223      	bcs.n	8001aa0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f000 fd87 	bl	8002570 <RCC_SetFlashLatencyFromMSIRange>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e383      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a6c:	4b73      	ldr	r3, [pc, #460]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a72      	ldr	r2, [pc, #456]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001a72:	f043 0308 	orr.w	r3, r3, #8
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	4b70      	ldr	r3, [pc, #448]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	496d      	ldr	r1, [pc, #436]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a8a:	4b6c      	ldr	r3, [pc, #432]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	021b      	lsls	r3, r3, #8
 8001a98:	4968      	ldr	r1, [pc, #416]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	604b      	str	r3, [r1, #4]
 8001a9e:	e025      	b.n	8001aec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aa0:	4b66      	ldr	r3, [pc, #408]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a65      	ldr	r2, [pc, #404]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001aa6:	f043 0308 	orr.w	r3, r3, #8
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b63      	ldr	r3, [pc, #396]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	4960      	ldr	r1, [pc, #384]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001abe:	4b5f      	ldr	r3, [pc, #380]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	495b      	ldr	r1, [pc, #364]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d109      	bne.n	8001aec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 fd47 	bl	8002570 <RCC_SetFlashLatencyFromMSIRange>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e343      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001aec:	f000 fc4a 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 8001af0:	4602      	mov	r2, r0
 8001af2:	4b52      	ldr	r3, [pc, #328]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	091b      	lsrs	r3, r3, #4
 8001af8:	f003 030f 	and.w	r3, r3, #15
 8001afc:	4950      	ldr	r1, [pc, #320]	@ (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001afe:	5ccb      	ldrb	r3, [r1, r3]
 8001b00:	f003 031f 	and.w	r3, r3, #31
 8001b04:	fa22 f303 	lsr.w	r3, r2, r3
 8001b08:	4a4e      	ldr	r2, [pc, #312]	@ (8001c44 <HAL_RCC_OscConfig+0x278>)
 8001b0a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b0c:	4b4e      	ldr	r3, [pc, #312]	@ (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff f95d 	bl	8000dd0 <HAL_InitTick>
 8001b16:	4603      	mov	r3, r0
 8001b18:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d052      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
 8001b22:	e327      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d032      	beq.n	8001b92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b2c:	4b43      	ldr	r3, [pc, #268]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a42      	ldr	r2, [pc, #264]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b38:	f7ff fb90 	bl	800125c <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b40:	f7ff fb8c 	bl	800125c <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e310      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b52:	4b3a      	ldr	r3, [pc, #232]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b5e:	4b37      	ldr	r3, [pc, #220]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a36      	ldr	r2, [pc, #216]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001b64:	f043 0308 	orr.w	r3, r3, #8
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b34      	ldr	r3, [pc, #208]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	4931      	ldr	r1, [pc, #196]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b7c:	4b2f      	ldr	r3, [pc, #188]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	021b      	lsls	r3, r3, #8
 8001b8a:	492c      	ldr	r1, [pc, #176]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]
 8001b90:	e01a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b92:	4b2a      	ldr	r3, [pc, #168]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a29      	ldr	r2, [pc, #164]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001b98:	f023 0301 	bic.w	r3, r3, #1
 8001b9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b9e:	f7ff fb5d 	bl	800125c <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ba6:	f7ff fb59 	bl	800125c <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e2dd      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bb8:	4b20      	ldr	r3, [pc, #128]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1f0      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x1da>
 8001bc4:	e000      	b.n	8001bc8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bc6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d074      	beq.n	8001cbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d005      	beq.n	8001be6 <HAL_RCC_OscConfig+0x21a>
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	2b0c      	cmp	r3, #12
 8001bde:	d10e      	bne.n	8001bfe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	2b03      	cmp	r3, #3
 8001be4:	d10b      	bne.n	8001bfe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be6:	4b15      	ldr	r3, [pc, #84]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d064      	beq.n	8001cbc <HAL_RCC_OscConfig+0x2f0>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d160      	bne.n	8001cbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e2ba      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c06:	d106      	bne.n	8001c16 <HAL_RCC_OscConfig+0x24a>
 8001c08:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a0b      	ldr	r2, [pc, #44]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001c0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	e026      	b.n	8001c64 <HAL_RCC_OscConfig+0x298>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c1e:	d115      	bne.n	8001c4c <HAL_RCC_OscConfig+0x280>
 8001c20:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a05      	ldr	r2, [pc, #20]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001c26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	4b03      	ldr	r3, [pc, #12]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a02      	ldr	r2, [pc, #8]	@ (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001c32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	e014      	b.n	8001c64 <HAL_RCC_OscConfig+0x298>
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	08007db4 	.word	0x08007db4
 8001c44:	20000000 	.word	0x20000000
 8001c48:	20000004 	.word	0x20000004
 8001c4c:	4ba0      	ldr	r3, [pc, #640]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a9f      	ldr	r2, [pc, #636]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001c52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	4b9d      	ldr	r3, [pc, #628]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a9c      	ldr	r2, [pc, #624]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001c5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d013      	beq.n	8001c94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6c:	f7ff faf6 	bl	800125c <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c74:	f7ff faf2 	bl	800125c <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b64      	cmp	r3, #100	@ 0x64
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e276      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c86:	4b92      	ldr	r3, [pc, #584]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0x2a8>
 8001c92:	e014      	b.n	8001cbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c94:	f7ff fae2 	bl	800125c <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c9c:	f7ff fade 	bl	800125c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b64      	cmp	r3, #100	@ 0x64
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e262      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cae:	4b88      	ldr	r3, [pc, #544]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x2d0>
 8001cba:	e000      	b.n	8001cbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d060      	beq.n	8001d8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	d005      	beq.n	8001cdc <HAL_RCC_OscConfig+0x310>
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	2b0c      	cmp	r3, #12
 8001cd4:	d119      	bne.n	8001d0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d116      	bne.n	8001d0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cdc:	4b7c      	ldr	r3, [pc, #496]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d005      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x328>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e23f      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf4:	4b76      	ldr	r3, [pc, #472]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	061b      	lsls	r3, r3, #24
 8001d02:	4973      	ldr	r1, [pc, #460]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d08:	e040      	b.n	8001d8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d023      	beq.n	8001d5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d12:	4b6f      	ldr	r3, [pc, #444]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a6e      	ldr	r2, [pc, #440]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1e:	f7ff fa9d 	bl	800125c <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d24:	e008      	b.n	8001d38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d26:	f7ff fa99 	bl	800125c <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e21d      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d38:	4b65      	ldr	r3, [pc, #404]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0f0      	beq.n	8001d26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d44:	4b62      	ldr	r3, [pc, #392]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	061b      	lsls	r3, r3, #24
 8001d52:	495f      	ldr	r1, [pc, #380]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]
 8001d58:	e018      	b.n	8001d8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d5a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a5c      	ldr	r2, [pc, #368]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001d60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d66:	f7ff fa79 	bl	800125c <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d6e:	f7ff fa75 	bl	800125c <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e1f9      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d80:	4b53      	ldr	r3, [pc, #332]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1f0      	bne.n	8001d6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d03c      	beq.n	8001e12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d01c      	beq.n	8001dda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001da0:	4b4b      	ldr	r3, [pc, #300]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001da6:	4a4a      	ldr	r2, [pc, #296]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db0:	f7ff fa54 	bl	800125c <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db8:	f7ff fa50 	bl	800125c <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e1d4      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dca:	4b41      	ldr	r3, [pc, #260]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0ef      	beq.n	8001db8 <HAL_RCC_OscConfig+0x3ec>
 8001dd8:	e01b      	b.n	8001e12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dda:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001de0:	4a3b      	ldr	r2, [pc, #236]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001de2:	f023 0301 	bic.w	r3, r3, #1
 8001de6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dea:	f7ff fa37 	bl	800125c <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df2:	f7ff fa33 	bl	800125c <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e1b7      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e04:	4b32      	ldr	r3, [pc, #200]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1ef      	bne.n	8001df2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 80a6 	beq.w	8001f6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e20:	2300      	movs	r3, #0
 8001e22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e24:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10d      	bne.n	8001e4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e30:	4b27      	ldr	r3, [pc, #156]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e34:	4a26      	ldr	r2, [pc, #152]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e3c:	4b24      	ldr	r3, [pc, #144]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e4c:	4b21      	ldr	r3, [pc, #132]	@ (8001ed4 <HAL_RCC_OscConfig+0x508>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d118      	bne.n	8001e8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e58:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed4 <HAL_RCC_OscConfig+0x508>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed4 <HAL_RCC_OscConfig+0x508>)
 8001e5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e64:	f7ff f9fa 	bl	800125c <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e6c:	f7ff f9f6 	bl	800125c <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e17a      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ed4 <HAL_RCC_OscConfig+0x508>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d108      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x4d8>
 8001e92:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e98:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ea2:	e029      	b.n	8001ef8 <HAL_RCC_OscConfig+0x52c>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b05      	cmp	r3, #5
 8001eaa:	d115      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x50c>
 8001eac:	4b08      	ldr	r3, [pc, #32]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eb2:	4a07      	ldr	r2, [pc, #28]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001eb4:	f043 0304 	orr.w	r3, r3, #4
 8001eb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ebc:	4b04      	ldr	r3, [pc, #16]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec2:	4a03      	ldr	r2, [pc, #12]	@ (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ecc:	e014      	b.n	8001ef8 <HAL_RCC_OscConfig+0x52c>
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40007000 	.word	0x40007000
 8001ed8:	4b9c      	ldr	r3, [pc, #624]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 8001eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ede:	4a9b      	ldr	r2, [pc, #620]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 8001ee0:	f023 0301 	bic.w	r3, r3, #1
 8001ee4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ee8:	4b98      	ldr	r3, [pc, #608]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 8001eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eee:	4a97      	ldr	r2, [pc, #604]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 8001ef0:	f023 0304 	bic.w	r3, r3, #4
 8001ef4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d016      	beq.n	8001f2e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f00:	f7ff f9ac 	bl	800125c <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f06:	e00a      	b.n	8001f1e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f08:	f7ff f9a8 	bl	800125c <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e12a      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f1e:	4b8b      	ldr	r3, [pc, #556]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 8001f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0ed      	beq.n	8001f08 <HAL_RCC_OscConfig+0x53c>
 8001f2c:	e015      	b.n	8001f5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2e:	f7ff f995 	bl	800125c <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f34:	e00a      	b.n	8001f4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f36:	f7ff f991 	bl	800125c <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e113      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f4c:	4b7f      	ldr	r3, [pc, #508]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 8001f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1ed      	bne.n	8001f36 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f5a:	7ffb      	ldrb	r3, [r7, #31]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d105      	bne.n	8001f6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f60:	4b7a      	ldr	r3, [pc, #488]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 8001f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f64:	4a79      	ldr	r2, [pc, #484]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 8001f66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f6a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 80fe 	beq.w	8002172 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	f040 80d0 	bne.w	8002120 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f80:	4b72      	ldr	r3, [pc, #456]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f003 0203 	and.w	r2, r3, #3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d130      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d127      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fb0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d11f      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001fc0:	2a07      	cmp	r2, #7
 8001fc2:	bf14      	ite	ne
 8001fc4:	2201      	movne	r2, #1
 8001fc6:	2200      	moveq	r2, #0
 8001fc8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d113      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fd8:	085b      	lsrs	r3, r3, #1
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d109      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fec:	085b      	lsrs	r3, r3, #1
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d06e      	beq.n	80020d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	2b0c      	cmp	r3, #12
 8001ffa:	d069      	beq.n	80020d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ffc:	4b53      	ldr	r3, [pc, #332]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d105      	bne.n	8002014 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002008:	4b50      	ldr	r3, [pc, #320]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0ad      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002018:	4b4c      	ldr	r3, [pc, #304]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a4b      	ldr	r2, [pc, #300]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 800201e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002022:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002024:	f7ff f91a 	bl	800125c <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202c:	f7ff f916 	bl	800125c <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e09a      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800203e:	4b43      	ldr	r3, [pc, #268]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f0      	bne.n	800202c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800204a:	4b40      	ldr	r3, [pc, #256]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	4b40      	ldr	r3, [pc, #256]	@ (8002150 <HAL_RCC_OscConfig+0x784>)
 8002050:	4013      	ands	r3, r2
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800205a:	3a01      	subs	r2, #1
 800205c:	0112      	lsls	r2, r2, #4
 800205e:	4311      	orrs	r1, r2
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002064:	0212      	lsls	r2, r2, #8
 8002066:	4311      	orrs	r1, r2
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800206c:	0852      	lsrs	r2, r2, #1
 800206e:	3a01      	subs	r2, #1
 8002070:	0552      	lsls	r2, r2, #21
 8002072:	4311      	orrs	r1, r2
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002078:	0852      	lsrs	r2, r2, #1
 800207a:	3a01      	subs	r2, #1
 800207c:	0652      	lsls	r2, r2, #25
 800207e:	4311      	orrs	r1, r2
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002084:	0912      	lsrs	r2, r2, #4
 8002086:	0452      	lsls	r2, r2, #17
 8002088:	430a      	orrs	r2, r1
 800208a:	4930      	ldr	r1, [pc, #192]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 800208c:	4313      	orrs	r3, r2
 800208e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002090:	4b2e      	ldr	r3, [pc, #184]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a2d      	ldr	r2, [pc, #180]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 8002096:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800209a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800209c:	4b2b      	ldr	r3, [pc, #172]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	4a2a      	ldr	r2, [pc, #168]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 80020a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020a8:	f7ff f8d8 	bl	800125c <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b0:	f7ff f8d4 	bl	800125c <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e058      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c2:	4b22      	ldr	r3, [pc, #136]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ce:	e050      	b.n	8002172 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e04f      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d4:	4b1d      	ldr	r3, [pc, #116]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d148      	bne.n	8002172 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020e0:	4b1a      	ldr	r3, [pc, #104]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a19      	ldr	r2, [pc, #100]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 80020e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020ec:	4b17      	ldr	r3, [pc, #92]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4a16      	ldr	r2, [pc, #88]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 80020f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020f8:	f7ff f8b0 	bl	800125c <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002100:	f7ff f8ac 	bl	800125c <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e030      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002112:	4b0e      	ldr	r3, [pc, #56]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x734>
 800211e:	e028      	b.n	8002172 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	2b0c      	cmp	r3, #12
 8002124:	d023      	beq.n	800216e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002126:	4b09      	ldr	r3, [pc, #36]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a08      	ldr	r2, [pc, #32]	@ (800214c <HAL_RCC_OscConfig+0x780>)
 800212c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002132:	f7ff f893 	bl	800125c <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002138:	e00c      	b.n	8002154 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213a:	f7ff f88f 	bl	800125c <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d905      	bls.n	8002154 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e013      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
 800214c:	40021000 	.word	0x40021000
 8002150:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002154:	4b09      	ldr	r3, [pc, #36]	@ (800217c <HAL_RCC_OscConfig+0x7b0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1ec      	bne.n	800213a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002160:	4b06      	ldr	r3, [pc, #24]	@ (800217c <HAL_RCC_OscConfig+0x7b0>)
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	4905      	ldr	r1, [pc, #20]	@ (800217c <HAL_RCC_OscConfig+0x7b0>)
 8002166:	4b06      	ldr	r3, [pc, #24]	@ (8002180 <HAL_RCC_OscConfig+0x7b4>)
 8002168:	4013      	ands	r3, r2
 800216a:	60cb      	str	r3, [r1, #12]
 800216c:	e001      	b.n	8002172 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3720      	adds	r7, #32
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40021000 	.word	0x40021000
 8002180:	feeefffc 	.word	0xfeeefffc

08002184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e0e7      	b.n	8002368 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002198:	4b75      	ldr	r3, [pc, #468]	@ (8002370 <HAL_RCC_ClockConfig+0x1ec>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d910      	bls.n	80021c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a6:	4b72      	ldr	r3, [pc, #456]	@ (8002370 <HAL_RCC_ClockConfig+0x1ec>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 0207 	bic.w	r2, r3, #7
 80021ae:	4970      	ldr	r1, [pc, #448]	@ (8002370 <HAL_RCC_ClockConfig+0x1ec>)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b6:	4b6e      	ldr	r3, [pc, #440]	@ (8002370 <HAL_RCC_ClockConfig+0x1ec>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0cf      	b.n	8002368 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d010      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	4b66      	ldr	r3, [pc, #408]	@ (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d908      	bls.n	80021f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e4:	4b63      	ldr	r3, [pc, #396]	@ (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	4960      	ldr	r1, [pc, #384]	@ (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d04c      	beq.n	800229c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b03      	cmp	r3, #3
 8002208:	d107      	bne.n	800221a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800220a:	4b5a      	ldr	r3, [pc, #360]	@ (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d121      	bne.n	800225a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e0a6      	b.n	8002368 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d107      	bne.n	8002232 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002222:	4b54      	ldr	r3, [pc, #336]	@ (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d115      	bne.n	800225a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e09a      	b.n	8002368 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d107      	bne.n	800224a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800223a:	4b4e      	ldr	r3, [pc, #312]	@ (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d109      	bne.n	800225a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e08e      	b.n	8002368 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800224a:	4b4a      	ldr	r3, [pc, #296]	@ (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e086      	b.n	8002368 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800225a:	4b46      	ldr	r3, [pc, #280]	@ (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f023 0203 	bic.w	r2, r3, #3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4943      	ldr	r1, [pc, #268]	@ (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 8002268:	4313      	orrs	r3, r2
 800226a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800226c:	f7fe fff6 	bl	800125c <HAL_GetTick>
 8002270:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002272:	e00a      	b.n	800228a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002274:	f7fe fff2 	bl	800125c <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002282:	4293      	cmp	r3, r2
 8002284:	d901      	bls.n	800228a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e06e      	b.n	8002368 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228a:	4b3a      	ldr	r3, [pc, #232]	@ (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 020c 	and.w	r2, r3, #12
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	429a      	cmp	r2, r3
 800229a:	d1eb      	bne.n	8002274 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d010      	beq.n	80022ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	4b31      	ldr	r3, [pc, #196]	@ (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d208      	bcs.n	80022ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	492b      	ldr	r1, [pc, #172]	@ (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022ca:	4b29      	ldr	r3, [pc, #164]	@ (8002370 <HAL_RCC_ClockConfig+0x1ec>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d210      	bcs.n	80022fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d8:	4b25      	ldr	r3, [pc, #148]	@ (8002370 <HAL_RCC_ClockConfig+0x1ec>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f023 0207 	bic.w	r2, r3, #7
 80022e0:	4923      	ldr	r1, [pc, #140]	@ (8002370 <HAL_RCC_ClockConfig+0x1ec>)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e8:	4b21      	ldr	r3, [pc, #132]	@ (8002370 <HAL_RCC_ClockConfig+0x1ec>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d001      	beq.n	80022fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e036      	b.n	8002368 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	2b00      	cmp	r3, #0
 8002304:	d008      	beq.n	8002318 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002306:	4b1b      	ldr	r3, [pc, #108]	@ (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	4918      	ldr	r1, [pc, #96]	@ (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 8002314:	4313      	orrs	r3, r2
 8002316:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b00      	cmp	r3, #0
 8002322:	d009      	beq.n	8002338 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002324:	4b13      	ldr	r3, [pc, #76]	@ (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	4910      	ldr	r1, [pc, #64]	@ (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 8002334:	4313      	orrs	r3, r2
 8002336:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002338:	f000 f824 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 800233c:	4602      	mov	r2, r0
 800233e:	4b0d      	ldr	r3, [pc, #52]	@ (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	091b      	lsrs	r3, r3, #4
 8002344:	f003 030f 	and.w	r3, r3, #15
 8002348:	490b      	ldr	r1, [pc, #44]	@ (8002378 <HAL_RCC_ClockConfig+0x1f4>)
 800234a:	5ccb      	ldrb	r3, [r1, r3]
 800234c:	f003 031f 	and.w	r3, r3, #31
 8002350:	fa22 f303 	lsr.w	r3, r2, r3
 8002354:	4a09      	ldr	r2, [pc, #36]	@ (800237c <HAL_RCC_ClockConfig+0x1f8>)
 8002356:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002358:	4b09      	ldr	r3, [pc, #36]	@ (8002380 <HAL_RCC_ClockConfig+0x1fc>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe fd37 	bl	8000dd0 <HAL_InitTick>
 8002362:	4603      	mov	r3, r0
 8002364:	72fb      	strb	r3, [r7, #11]

  return status;
 8002366:	7afb      	ldrb	r3, [r7, #11]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40022000 	.word	0x40022000
 8002374:	40021000 	.word	0x40021000
 8002378:	08007db4 	.word	0x08007db4
 800237c:	20000000 	.word	0x20000000
 8002380:	20000004 	.word	0x20000004

08002384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002384:	b480      	push	{r7}
 8002386:	b089      	sub	sp, #36	@ 0x24
 8002388:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
 800238e:	2300      	movs	r3, #0
 8002390:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002392:	4b3e      	ldr	r3, [pc, #248]	@ (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800239c:	4b3b      	ldr	r3, [pc, #236]	@ (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0x34>
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	2b0c      	cmp	r3, #12
 80023b0:	d121      	bne.n	80023f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d11e      	bne.n	80023f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023b8:	4b34      	ldr	r3, [pc, #208]	@ (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d107      	bne.n	80023d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023c4:	4b31      	ldr	r3, [pc, #196]	@ (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 80023c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ca:	0a1b      	lsrs	r3, r3, #8
 80023cc:	f003 030f 	and.w	r3, r3, #15
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	e005      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023d4:	4b2d      	ldr	r3, [pc, #180]	@ (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023e0:	4a2b      	ldr	r2, [pc, #172]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10d      	bne.n	800240c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023f4:	e00a      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d102      	bne.n	8002402 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023fc:	4b25      	ldr	r3, [pc, #148]	@ (8002494 <HAL_RCC_GetSysClockFreq+0x110>)
 80023fe:	61bb      	str	r3, [r7, #24]
 8002400:	e004      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	2b08      	cmp	r3, #8
 8002406:	d101      	bne.n	800240c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002408:	4b23      	ldr	r3, [pc, #140]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x114>)
 800240a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	2b0c      	cmp	r3, #12
 8002410:	d134      	bne.n	800247c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002412:	4b1e      	ldr	r3, [pc, #120]	@ (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d003      	beq.n	800242a <HAL_RCC_GetSysClockFreq+0xa6>
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b03      	cmp	r3, #3
 8002426:	d003      	beq.n	8002430 <HAL_RCC_GetSysClockFreq+0xac>
 8002428:	e005      	b.n	8002436 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800242a:	4b1a      	ldr	r3, [pc, #104]	@ (8002494 <HAL_RCC_GetSysClockFreq+0x110>)
 800242c:	617b      	str	r3, [r7, #20]
      break;
 800242e:	e005      	b.n	800243c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002430:	4b19      	ldr	r3, [pc, #100]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x114>)
 8002432:	617b      	str	r3, [r7, #20]
      break;
 8002434:	e002      	b.n	800243c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	617b      	str	r3, [r7, #20]
      break;
 800243a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800243c:	4b13      	ldr	r3, [pc, #76]	@ (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	3301      	adds	r3, #1
 8002448:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800244a:	4b10      	ldr	r3, [pc, #64]	@ (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	0a1b      	lsrs	r3, r3, #8
 8002450:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	fb03 f202 	mul.w	r2, r3, r2
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002460:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002462:	4b0a      	ldr	r3, [pc, #40]	@ (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	0e5b      	lsrs	r3, r3, #25
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	3301      	adds	r3, #1
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	fbb2 f3f3 	udiv	r3, r2, r3
 800247a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800247c:	69bb      	ldr	r3, [r7, #24]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3724      	adds	r7, #36	@ 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000
 8002490:	08007dcc 	.word	0x08007dcc
 8002494:	00f42400 	.word	0x00f42400
 8002498:	007a1200 	.word	0x007a1200

0800249c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024a0:	4b03      	ldr	r3, [pc, #12]	@ (80024b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024a2:	681b      	ldr	r3, [r3, #0]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	20000000 	.word	0x20000000

080024b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024b8:	f7ff fff0 	bl	800249c <HAL_RCC_GetHCLKFreq>
 80024bc:	4602      	mov	r2, r0
 80024be:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	0a1b      	lsrs	r3, r3, #8
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	4904      	ldr	r1, [pc, #16]	@ (80024dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80024ca:	5ccb      	ldrb	r3, [r1, r3]
 80024cc:	f003 031f 	and.w	r3, r3, #31
 80024d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40021000 	.word	0x40021000
 80024dc:	08007dc4 	.word	0x08007dc4

080024e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024e4:	f7ff ffda 	bl	800249c <HAL_RCC_GetHCLKFreq>
 80024e8:	4602      	mov	r2, r0
 80024ea:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	0adb      	lsrs	r3, r3, #11
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	4904      	ldr	r1, [pc, #16]	@ (8002508 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024f6:	5ccb      	ldrb	r3, [r1, r3]
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002500:	4618      	mov	r0, r3
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40021000 	.word	0x40021000
 8002508:	08007dc4 	.word	0x08007dc4

0800250c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	220f      	movs	r2, #15
 800251a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800251c:	4b12      	ldr	r3, [pc, #72]	@ (8002568 <HAL_RCC_GetClockConfig+0x5c>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 0203 	and.w	r2, r3, #3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002528:	4b0f      	ldr	r3, [pc, #60]	@ (8002568 <HAL_RCC_GetClockConfig+0x5c>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002534:	4b0c      	ldr	r3, [pc, #48]	@ (8002568 <HAL_RCC_GetClockConfig+0x5c>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002540:	4b09      	ldr	r3, [pc, #36]	@ (8002568 <HAL_RCC_GetClockConfig+0x5c>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	08db      	lsrs	r3, r3, #3
 8002546:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800254e:	4b07      	ldr	r3, [pc, #28]	@ (800256c <HAL_RCC_GetClockConfig+0x60>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0207 	and.w	r2, r3, #7
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	601a      	str	r2, [r3, #0]
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40021000 	.word	0x40021000
 800256c:	40022000 	.word	0x40022000

08002570 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002578:	2300      	movs	r3, #0
 800257a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800257c:	4b2a      	ldr	r3, [pc, #168]	@ (8002628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800257e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002588:	f7ff f9bc 	bl	8001904 <HAL_PWREx_GetVoltageRange>
 800258c:	6178      	str	r0, [r7, #20]
 800258e:	e014      	b.n	80025ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002590:	4b25      	ldr	r3, [pc, #148]	@ (8002628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002594:	4a24      	ldr	r2, [pc, #144]	@ (8002628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800259a:	6593      	str	r3, [r2, #88]	@ 0x58
 800259c:	4b22      	ldr	r3, [pc, #136]	@ (8002628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800259e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025a8:	f7ff f9ac 	bl	8001904 <HAL_PWREx_GetVoltageRange>
 80025ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002628 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025c0:	d10b      	bne.n	80025da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b80      	cmp	r3, #128	@ 0x80
 80025c6:	d919      	bls.n	80025fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80025cc:	d902      	bls.n	80025d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025ce:	2302      	movs	r3, #2
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	e013      	b.n	80025fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025d4:	2301      	movs	r3, #1
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	e010      	b.n	80025fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b80      	cmp	r3, #128	@ 0x80
 80025de:	d902      	bls.n	80025e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025e0:	2303      	movs	r3, #3
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	e00a      	b.n	80025fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b80      	cmp	r3, #128	@ 0x80
 80025ea:	d102      	bne.n	80025f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025ec:	2302      	movs	r3, #2
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	e004      	b.n	80025fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b70      	cmp	r3, #112	@ 0x70
 80025f6:	d101      	bne.n	80025fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025f8:	2301      	movs	r3, #1
 80025fa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025fc:	4b0b      	ldr	r3, [pc, #44]	@ (800262c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f023 0207 	bic.w	r2, r3, #7
 8002604:	4909      	ldr	r1, [pc, #36]	@ (800262c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800260c:	4b07      	ldr	r3, [pc, #28]	@ (800262c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	429a      	cmp	r2, r3
 8002618:	d001      	beq.n	800261e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40021000 	.word	0x40021000
 800262c:	40022000 	.word	0x40022000

08002630 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002638:	2300      	movs	r3, #0
 800263a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800263c:	2300      	movs	r3, #0
 800263e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002648:	2b00      	cmp	r3, #0
 800264a:	d041      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002650:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002654:	d02a      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002656:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800265a:	d824      	bhi.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800265c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002660:	d008      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002662:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002666:	d81e      	bhi.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00a      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800266c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002670:	d010      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002672:	e018      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002674:	4b86      	ldr	r3, [pc, #536]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4a85      	ldr	r2, [pc, #532]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800267e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002680:	e015      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3304      	adds	r3, #4
 8002686:	2100      	movs	r1, #0
 8002688:	4618      	mov	r0, r3
 800268a:	f000 fabb 	bl	8002c04 <RCCEx_PLLSAI1_Config>
 800268e:	4603      	mov	r3, r0
 8002690:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002692:	e00c      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3320      	adds	r3, #32
 8002698:	2100      	movs	r1, #0
 800269a:	4618      	mov	r0, r3
 800269c:	f000 fba6 	bl	8002dec <RCCEx_PLLSAI2_Config>
 80026a0:	4603      	mov	r3, r0
 80026a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026a4:	e003      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	74fb      	strb	r3, [r7, #19]
      break;
 80026aa:	e000      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80026ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026ae:	7cfb      	ldrb	r3, [r7, #19]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10b      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026b4:	4b76      	ldr	r3, [pc, #472]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026c2:	4973      	ldr	r1, [pc, #460]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80026ca:	e001      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026cc:	7cfb      	ldrb	r3, [r7, #19]
 80026ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d041      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80026e4:	d02a      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80026e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80026ea:	d824      	bhi.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80026ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80026f0:	d008      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80026f6:	d81e      	bhi.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80026fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002700:	d010      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002702:	e018      	b.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002704:	4b62      	ldr	r3, [pc, #392]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4a61      	ldr	r2, [pc, #388]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800270e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002710:	e015      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3304      	adds	r3, #4
 8002716:	2100      	movs	r1, #0
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fa73 	bl	8002c04 <RCCEx_PLLSAI1_Config>
 800271e:	4603      	mov	r3, r0
 8002720:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002722:	e00c      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3320      	adds	r3, #32
 8002728:	2100      	movs	r1, #0
 800272a:	4618      	mov	r0, r3
 800272c:	f000 fb5e 	bl	8002dec <RCCEx_PLLSAI2_Config>
 8002730:	4603      	mov	r3, r0
 8002732:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002734:	e003      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	74fb      	strb	r3, [r7, #19]
      break;
 800273a:	e000      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800273c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800273e:	7cfb      	ldrb	r3, [r7, #19]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10b      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002744:	4b52      	ldr	r3, [pc, #328]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800274a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002752:	494f      	ldr	r1, [pc, #316]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800275a:	e001      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800275c:	7cfb      	ldrb	r3, [r7, #19]
 800275e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 80a0 	beq.w	80028ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800276e:	2300      	movs	r3, #0
 8002770:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002772:	4b47      	ldr	r3, [pc, #284]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002782:	2300      	movs	r3, #0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00d      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002788:	4b41      	ldr	r3, [pc, #260]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278c:	4a40      	ldr	r2, [pc, #256]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002792:	6593      	str	r3, [r2, #88]	@ 0x58
 8002794:	4b3e      	ldr	r3, [pc, #248]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027a0:	2301      	movs	r3, #1
 80027a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a3a      	ldr	r2, [pc, #232]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027b0:	f7fe fd54 	bl	800125c <HAL_GetTick>
 80027b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027b6:	e009      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b8:	f7fe fd50 	bl	800125c <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d902      	bls.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	74fb      	strb	r3, [r7, #19]
        break;
 80027ca:	e005      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027cc:	4b31      	ldr	r3, [pc, #196]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0ef      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80027d8:	7cfb      	ldrb	r3, [r7, #19]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d15c      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027de:	4b2c      	ldr	r3, [pc, #176]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d01f      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d019      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027fc:	4b24      	ldr	r3, [pc, #144]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002802:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002806:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002808:	4b21      	ldr	r3, [pc, #132]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800280e:	4a20      	ldr	r2, [pc, #128]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002818:	4b1d      	ldr	r3, [pc, #116]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800281e:	4a1c      	ldr	r2, [pc, #112]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002820:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002824:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002828:	4a19      	ldr	r2, [pc, #100]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d016      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283a:	f7fe fd0f 	bl	800125c <HAL_GetTick>
 800283e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002840:	e00b      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002842:	f7fe fd0b 	bl	800125c <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002850:	4293      	cmp	r3, r2
 8002852:	d902      	bls.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	74fb      	strb	r3, [r7, #19]
            break;
 8002858:	e006      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800285a:	4b0d      	ldr	r3, [pc, #52]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0ec      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002868:	7cfb      	ldrb	r3, [r7, #19]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10c      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800286e:	4b08      	ldr	r3, [pc, #32]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002874:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800287e:	4904      	ldr	r1, [pc, #16]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002886:	e009      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002888:	7cfb      	ldrb	r3, [r7, #19]
 800288a:	74bb      	strb	r3, [r7, #18]
 800288c:	e006      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000
 8002894:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002898:	7cfb      	ldrb	r3, [r7, #19]
 800289a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800289c:	7c7b      	ldrb	r3, [r7, #17]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d105      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a2:	4b9e      	ldr	r3, [pc, #632]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a6:	4a9d      	ldr	r2, [pc, #628]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028ba:	4b98      	ldr	r3, [pc, #608]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c0:	f023 0203 	bic.w	r2, r3, #3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c8:	4994      	ldr	r1, [pc, #592]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00a      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028dc:	4b8f      	ldr	r3, [pc, #572]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e2:	f023 020c 	bic.w	r2, r3, #12
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ea:	498c      	ldr	r1, [pc, #560]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028fe:	4b87      	ldr	r3, [pc, #540]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002904:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290c:	4983      	ldr	r1, [pc, #524]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00a      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002920:	4b7e      	ldr	r3, [pc, #504]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002926:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292e:	497b      	ldr	r1, [pc, #492]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0310 	and.w	r3, r3, #16
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00a      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002942:	4b76      	ldr	r3, [pc, #472]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002948:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002950:	4972      	ldr	r1, [pc, #456]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002952:	4313      	orrs	r3, r2
 8002954:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0320 	and.w	r3, r3, #32
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002964:	4b6d      	ldr	r3, [pc, #436]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800296a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002972:	496a      	ldr	r1, [pc, #424]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00a      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002986:	4b65      	ldr	r3, [pc, #404]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800298c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002994:	4961      	ldr	r1, [pc, #388]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00a      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029a8:	4b5c      	ldr	r3, [pc, #368]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029b6:	4959      	ldr	r1, [pc, #356]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029ca:	4b54      	ldr	r3, [pc, #336]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029d8:	4950      	ldr	r1, [pc, #320]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00a      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029ec:	4b4b      	ldr	r3, [pc, #300]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029fa:	4948      	ldr	r1, [pc, #288]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a0e:	4b43      	ldr	r3, [pc, #268]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a14:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a1c:	493f      	ldr	r1, [pc, #252]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d028      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a30:	4b3a      	ldr	r3, [pc, #232]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a3e:	4937      	ldr	r1, [pc, #220]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a4e:	d106      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a50:	4b32      	ldr	r3, [pc, #200]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4a31      	ldr	r2, [pc, #196]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a5a:	60d3      	str	r3, [r2, #12]
 8002a5c:	e011      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a66:	d10c      	bne.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 f8c8 	bl	8002c04 <RCCEx_PLLSAI1_Config>
 8002a74:	4603      	mov	r3, r0
 8002a76:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a78:	7cfb      	ldrb	r3, [r7, #19]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002a7e:	7cfb      	ldrb	r3, [r7, #19]
 8002a80:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d028      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a8e:	4b23      	ldr	r3, [pc, #140]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a94:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9c:	491f      	ldr	r1, [pc, #124]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002aac:	d106      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aae:	4b1b      	ldr	r3, [pc, #108]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	4a1a      	ldr	r2, [pc, #104]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ab8:	60d3      	str	r3, [r2, #12]
 8002aba:	e011      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	2101      	movs	r1, #1
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 f899 	bl	8002c04 <RCCEx_PLLSAI1_Config>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ad6:	7cfb      	ldrb	r3, [r7, #19]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002adc:	7cfb      	ldrb	r3, [r7, #19]
 8002ade:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d02b      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002aec:	4b0b      	ldr	r3, [pc, #44]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002afa:	4908      	ldr	r1, [pc, #32]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b0a:	d109      	bne.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b0c:	4b03      	ldr	r3, [pc, #12]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	4a02      	ldr	r2, [pc, #8]	@ (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b16:	60d3      	str	r3, [r2, #12]
 8002b18:	e014      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b28:	d10c      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	2101      	movs	r1, #1
 8002b30:	4618      	mov	r0, r3
 8002b32:	f000 f867 	bl	8002c04 <RCCEx_PLLSAI1_Config>
 8002b36:	4603      	mov	r3, r0
 8002b38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b3a:	7cfb      	ldrb	r3, [r7, #19]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002b40:	7cfb      	ldrb	r3, [r7, #19]
 8002b42:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d02f      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b50:	4b2b      	ldr	r3, [pc, #172]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b56:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b5e:	4928      	ldr	r1, [pc, #160]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b6e:	d10d      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3304      	adds	r3, #4
 8002b74:	2102      	movs	r1, #2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 f844 	bl	8002c04 <RCCEx_PLLSAI1_Config>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b80:	7cfb      	ldrb	r3, [r7, #19]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d014      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b86:	7cfb      	ldrb	r3, [r7, #19]
 8002b88:	74bb      	strb	r3, [r7, #18]
 8002b8a:	e011      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b94:	d10c      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3320      	adds	r3, #32
 8002b9a:	2102      	movs	r1, #2
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 f925 	bl	8002dec <RCCEx_PLLSAI2_Config>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ba6:	7cfb      	ldrb	r3, [r7, #19]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002bac:	7cfb      	ldrb	r3, [r7, #19]
 8002bae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00a      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002bbc:	4b10      	ldr	r3, [pc, #64]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bca:	490d      	ldr	r1, [pc, #52]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00b      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bde:	4b08      	ldr	r3, [pc, #32]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bee:	4904      	ldr	r1, [pc, #16]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002bf6:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40021000 	.word	0x40021000

08002c04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c12:	4b75      	ldr	r3, [pc, #468]	@ (8002de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d018      	beq.n	8002c50 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c1e:	4b72      	ldr	r3, [pc, #456]	@ (8002de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f003 0203 	and.w	r2, r3, #3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d10d      	bne.n	8002c4a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
       ||
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d009      	beq.n	8002c4a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c36:	4b6c      	ldr	r3, [pc, #432]	@ (8002de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	091b      	lsrs	r3, r3, #4
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
       ||
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d047      	beq.n	8002cda <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	73fb      	strb	r3, [r7, #15]
 8002c4e:	e044      	b.n	8002cda <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d018      	beq.n	8002c8a <RCCEx_PLLSAI1_Config+0x86>
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d825      	bhi.n	8002ca8 <RCCEx_PLLSAI1_Config+0xa4>
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d002      	beq.n	8002c66 <RCCEx_PLLSAI1_Config+0x62>
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d009      	beq.n	8002c78 <RCCEx_PLLSAI1_Config+0x74>
 8002c64:	e020      	b.n	8002ca8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c66:	4b60      	ldr	r3, [pc, #384]	@ (8002de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d11d      	bne.n	8002cae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c76:	e01a      	b.n	8002cae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c78:	4b5b      	ldr	r3, [pc, #364]	@ (8002de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d116      	bne.n	8002cb2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c88:	e013      	b.n	8002cb2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c8a:	4b57      	ldr	r3, [pc, #348]	@ (8002de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10f      	bne.n	8002cb6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c96:	4b54      	ldr	r3, [pc, #336]	@ (8002de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d109      	bne.n	8002cb6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ca6:	e006      	b.n	8002cb6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	73fb      	strb	r3, [r7, #15]
      break;
 8002cac:	e004      	b.n	8002cb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cae:	bf00      	nop
 8002cb0:	e002      	b.n	8002cb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cb2:	bf00      	nop
 8002cb4:	e000      	b.n	8002cb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10d      	bne.n	8002cda <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cbe:	4b4a      	ldr	r3, [pc, #296]	@ (8002de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6819      	ldr	r1, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	430b      	orrs	r3, r1
 8002cd4:	4944      	ldr	r1, [pc, #272]	@ (8002de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d17d      	bne.n	8002ddc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ce0:	4b41      	ldr	r3, [pc, #260]	@ (8002de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a40      	ldr	r2, [pc, #256]	@ (8002de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cec:	f7fe fab6 	bl	800125c <HAL_GetTick>
 8002cf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cf2:	e009      	b.n	8002d08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cf4:	f7fe fab2 	bl	800125c <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d902      	bls.n	8002d08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	73fb      	strb	r3, [r7, #15]
        break;
 8002d06:	e005      	b.n	8002d14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d08:	4b37      	ldr	r3, [pc, #220]	@ (8002de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1ef      	bne.n	8002cf4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d160      	bne.n	8002ddc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d111      	bne.n	8002d44 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d20:	4b31      	ldr	r3, [pc, #196]	@ (8002de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002d28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6892      	ldr	r2, [r2, #8]
 8002d30:	0211      	lsls	r1, r2, #8
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	68d2      	ldr	r2, [r2, #12]
 8002d36:	0912      	lsrs	r2, r2, #4
 8002d38:	0452      	lsls	r2, r2, #17
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	492a      	ldr	r1, [pc, #168]	@ (8002de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	610b      	str	r3, [r1, #16]
 8002d42:	e027      	b.n	8002d94 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d112      	bne.n	8002d70 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d4a:	4b27      	ldr	r3, [pc, #156]	@ (8002de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002d52:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6892      	ldr	r2, [r2, #8]
 8002d5a:	0211      	lsls	r1, r2, #8
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6912      	ldr	r2, [r2, #16]
 8002d60:	0852      	lsrs	r2, r2, #1
 8002d62:	3a01      	subs	r2, #1
 8002d64:	0552      	lsls	r2, r2, #21
 8002d66:	430a      	orrs	r2, r1
 8002d68:	491f      	ldr	r1, [pc, #124]	@ (8002de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	610b      	str	r3, [r1, #16]
 8002d6e:	e011      	b.n	8002d94 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d70:	4b1d      	ldr	r3, [pc, #116]	@ (8002de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d78:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6892      	ldr	r2, [r2, #8]
 8002d80:	0211      	lsls	r1, r2, #8
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6952      	ldr	r2, [r2, #20]
 8002d86:	0852      	lsrs	r2, r2, #1
 8002d88:	3a01      	subs	r2, #1
 8002d8a:	0652      	lsls	r2, r2, #25
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	4916      	ldr	r1, [pc, #88]	@ (8002de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d94:	4b14      	ldr	r3, [pc, #80]	@ (8002de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a13      	ldr	r2, [pc, #76]	@ (8002de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da0:	f7fe fa5c 	bl	800125c <HAL_GetTick>
 8002da4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002da6:	e009      	b.n	8002dbc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002da8:	f7fe fa58 	bl	800125c <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d902      	bls.n	8002dbc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	73fb      	strb	r3, [r7, #15]
          break;
 8002dba:	e005      	b.n	8002dc8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0ef      	beq.n	8002da8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002dce:	4b06      	ldr	r3, [pc, #24]	@ (8002de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd0:	691a      	ldr	r2, [r3, #16]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	4904      	ldr	r1, [pc, #16]	@ (8002de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000

08002dec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002df6:	2300      	movs	r3, #0
 8002df8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dfa:	4b6a      	ldr	r3, [pc, #424]	@ (8002fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d018      	beq.n	8002e38 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e06:	4b67      	ldr	r3, [pc, #412]	@ (8002fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f003 0203 	and.w	r2, r3, #3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d10d      	bne.n	8002e32 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
       ||
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d009      	beq.n	8002e32 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e1e:	4b61      	ldr	r3, [pc, #388]	@ (8002fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	091b      	lsrs	r3, r3, #4
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
       ||
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d047      	beq.n	8002ec2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	73fb      	strb	r3, [r7, #15]
 8002e36:	e044      	b.n	8002ec2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d018      	beq.n	8002e72 <RCCEx_PLLSAI2_Config+0x86>
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d825      	bhi.n	8002e90 <RCCEx_PLLSAI2_Config+0xa4>
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d002      	beq.n	8002e4e <RCCEx_PLLSAI2_Config+0x62>
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d009      	beq.n	8002e60 <RCCEx_PLLSAI2_Config+0x74>
 8002e4c:	e020      	b.n	8002e90 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e4e:	4b55      	ldr	r3, [pc, #340]	@ (8002fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d11d      	bne.n	8002e96 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e5e:	e01a      	b.n	8002e96 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e60:	4b50      	ldr	r3, [pc, #320]	@ (8002fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d116      	bne.n	8002e9a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e70:	e013      	b.n	8002e9a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e72:	4b4c      	ldr	r3, [pc, #304]	@ (8002fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10f      	bne.n	8002e9e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e7e:	4b49      	ldr	r3, [pc, #292]	@ (8002fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d109      	bne.n	8002e9e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e8e:	e006      	b.n	8002e9e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]
      break;
 8002e94:	e004      	b.n	8002ea0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e96:	bf00      	nop
 8002e98:	e002      	b.n	8002ea0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e9a:	bf00      	nop
 8002e9c:	e000      	b.n	8002ea0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10d      	bne.n	8002ec2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ea6:	4b3f      	ldr	r3, [pc, #252]	@ (8002fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6819      	ldr	r1, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	430b      	orrs	r3, r1
 8002ebc:	4939      	ldr	r1, [pc, #228]	@ (8002fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d167      	bne.n	8002f98 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ec8:	4b36      	ldr	r3, [pc, #216]	@ (8002fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a35      	ldr	r2, [pc, #212]	@ (8002fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ece:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ed2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ed4:	f7fe f9c2 	bl	800125c <HAL_GetTick>
 8002ed8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002eda:	e009      	b.n	8002ef0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002edc:	f7fe f9be 	bl	800125c <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d902      	bls.n	8002ef0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	73fb      	strb	r3, [r7, #15]
        break;
 8002eee:	e005      	b.n	8002efc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ef0:	4b2c      	ldr	r3, [pc, #176]	@ (8002fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1ef      	bne.n	8002edc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d14a      	bne.n	8002f98 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d111      	bne.n	8002f2c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f08:	4b26      	ldr	r3, [pc, #152]	@ (8002fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002f10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6892      	ldr	r2, [r2, #8]
 8002f18:	0211      	lsls	r1, r2, #8
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68d2      	ldr	r2, [r2, #12]
 8002f1e:	0912      	lsrs	r2, r2, #4
 8002f20:	0452      	lsls	r2, r2, #17
 8002f22:	430a      	orrs	r2, r1
 8002f24:	491f      	ldr	r1, [pc, #124]	@ (8002fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	614b      	str	r3, [r1, #20]
 8002f2a:	e011      	b.n	8002f50 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002f34:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6892      	ldr	r2, [r2, #8]
 8002f3c:	0211      	lsls	r1, r2, #8
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6912      	ldr	r2, [r2, #16]
 8002f42:	0852      	lsrs	r2, r2, #1
 8002f44:	3a01      	subs	r2, #1
 8002f46:	0652      	lsls	r2, r2, #25
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	4916      	ldr	r1, [pc, #88]	@ (8002fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f50:	4b14      	ldr	r3, [pc, #80]	@ (8002fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a13      	ldr	r2, [pc, #76]	@ (8002fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5c:	f7fe f97e 	bl	800125c <HAL_GetTick>
 8002f60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f62:	e009      	b.n	8002f78 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f64:	f7fe f97a 	bl	800125c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d902      	bls.n	8002f78 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	73fb      	strb	r3, [r7, #15]
          break;
 8002f76:	e005      	b.n	8002f84 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f78:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0ef      	beq.n	8002f64 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f8a:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	4904      	ldr	r1, [pc, #16]	@ (8002fa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40021000 	.word	0x40021000

08002fa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e095      	b.n	80030e6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d108      	bne.n	8002fd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fca:	d009      	beq.n	8002fe0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	61da      	str	r2, [r3, #28]
 8002fd2:	e005      	b.n	8002fe0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fd fe5e 	bl	8000cbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003016:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003020:	d902      	bls.n	8003028 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	e002      	b.n	800302e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003028:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800302c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003036:	d007      	beq.n	8003048 <HAL_SPI_Init+0xa0>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003040:	d002      	beq.n	8003048 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800308a:	ea42 0103 	orr.w	r1, r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003092:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	0c1b      	lsrs	r3, r3, #16
 80030a4:	f003 0204 	and.w	r2, r3, #4
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80030c4:	ea42 0103 	orr.w	r1, r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b088      	sub	sp, #32
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	603b      	str	r3, [r7, #0]
 80030fa:	4613      	mov	r3, r2
 80030fc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030fe:	f7fe f8ad 	bl	800125c <HAL_GetTick>
 8003102:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003104:	88fb      	ldrh	r3, [r7, #6]
 8003106:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b01      	cmp	r3, #1
 8003112:	d001      	beq.n	8003118 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003114:	2302      	movs	r3, #2
 8003116:	e15c      	b.n	80033d2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <HAL_SPI_Transmit+0x36>
 800311e:	88fb      	ldrh	r3, [r7, #6]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e154      	b.n	80033d2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_SPI_Transmit+0x48>
 8003132:	2302      	movs	r3, #2
 8003134:	e14d      	b.n	80033d2 <HAL_SPI_Transmit+0x2e4>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2203      	movs	r2, #3
 8003142:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	88fa      	ldrh	r2, [r7, #6]
 8003156:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	88fa      	ldrh	r2, [r7, #6]
 800315c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003188:	d10f      	bne.n	80031aa <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003198:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b4:	2b40      	cmp	r3, #64	@ 0x40
 80031b6:	d007      	beq.n	80031c8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031d0:	d952      	bls.n	8003278 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <HAL_SPI_Transmit+0xf2>
 80031da:	8b7b      	ldrh	r3, [r7, #26]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d145      	bne.n	800326c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e4:	881a      	ldrh	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f0:	1c9a      	adds	r2, r3, #2
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003204:	e032      	b.n	800326c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b02      	cmp	r3, #2
 8003212:	d112      	bne.n	800323a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003218:	881a      	ldrh	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003224:	1c9a      	adds	r2, r3, #2
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800322e:	b29b      	uxth	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003238:	e018      	b.n	800326c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800323a:	f7fe f80f 	bl	800125c <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d803      	bhi.n	8003252 <HAL_SPI_Transmit+0x164>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003250:	d102      	bne.n	8003258 <HAL_SPI_Transmit+0x16a>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d109      	bne.n	800326c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e0b2      	b.n	80033d2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003270:	b29b      	uxth	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1c7      	bne.n	8003206 <HAL_SPI_Transmit+0x118>
 8003276:	e083      	b.n	8003380 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <HAL_SPI_Transmit+0x198>
 8003280:	8b7b      	ldrh	r3, [r7, #26]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d177      	bne.n	8003376 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800328a:	b29b      	uxth	r3, r3
 800328c:	2b01      	cmp	r3, #1
 800328e:	d912      	bls.n	80032b6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003294:	881a      	ldrh	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a0:	1c9a      	adds	r2, r3, #2
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	3b02      	subs	r3, #2
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032b4:	e05f      	b.n	8003376 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	330c      	adds	r3, #12
 80032c0:	7812      	ldrb	r2, [r2, #0]
 80032c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80032dc:	e04b      	b.n	8003376 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d12b      	bne.n	8003344 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d912      	bls.n	800331c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fa:	881a      	ldrh	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003306:	1c9a      	adds	r2, r3, #2
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003310:	b29b      	uxth	r3, r3
 8003312:	3b02      	subs	r3, #2
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800331a:	e02c      	b.n	8003376 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	330c      	adds	r3, #12
 8003326:	7812      	ldrb	r2, [r2, #0]
 8003328:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003338:	b29b      	uxth	r3, r3
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003342:	e018      	b.n	8003376 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003344:	f7fd ff8a 	bl	800125c <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d803      	bhi.n	800335c <HAL_SPI_Transmit+0x26e>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335a:	d102      	bne.n	8003362 <HAL_SPI_Transmit+0x274>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d109      	bne.n	8003376 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e02d      	b.n	80033d2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800337a:	b29b      	uxth	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1ae      	bne.n	80032de <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003380:	69fa      	ldr	r2, [r7, #28]
 8003382:	6839      	ldr	r1, [r7, #0]
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 f947 	bl	8003618 <SPI_EndRxTxTransaction>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10a      	bne.n	80033b4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e000      	b.n	80033d2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80033d0:	2300      	movs	r3, #0
  }
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3720      	adds	r7, #32
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	4613      	mov	r3, r2
 80033ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033ec:	f7fd ff36 	bl	800125c <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	4413      	add	r3, r2
 80033fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033fc:	f7fd ff2e 	bl	800125c <HAL_GetTick>
 8003400:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003402:	4b39      	ldr	r3, [pc, #228]	@ (80034e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	015b      	lsls	r3, r3, #5
 8003408:	0d1b      	lsrs	r3, r3, #20
 800340a:	69fa      	ldr	r2, [r7, #28]
 800340c:	fb02 f303 	mul.w	r3, r2, r3
 8003410:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003412:	e054      	b.n	80034be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341a:	d050      	beq.n	80034be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800341c:	f7fd ff1e 	bl	800125c <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	69fa      	ldr	r2, [r7, #28]
 8003428:	429a      	cmp	r2, r3
 800342a:	d902      	bls.n	8003432 <SPI_WaitFlagStateUntilTimeout+0x56>
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d13d      	bne.n	80034ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003440:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800344a:	d111      	bne.n	8003470 <SPI_WaitFlagStateUntilTimeout+0x94>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003454:	d004      	beq.n	8003460 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800345e:	d107      	bne.n	8003470 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800346e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003474:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003478:	d10f      	bne.n	800349a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003498:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e017      	b.n	80034de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	4013      	ands	r3, r2
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	bf0c      	ite	eq
 80034ce:	2301      	moveq	r3, #1
 80034d0:	2300      	movne	r3, #0
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	461a      	mov	r2, r3
 80034d6:	79fb      	ldrb	r3, [r7, #7]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d19b      	bne.n	8003414 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000000 	.word	0x20000000

080034ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08a      	sub	sp, #40	@ 0x28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
 80034f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80034fe:	f7fd fead 	bl	800125c <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	4413      	add	r3, r2
 800350c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800350e:	f7fd fea5 	bl	800125c <HAL_GetTick>
 8003512:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	330c      	adds	r3, #12
 800351a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800351c:	4b3d      	ldr	r3, [pc, #244]	@ (8003614 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	00da      	lsls	r2, r3, #3
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	0d1b      	lsrs	r3, r3, #20
 800352c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800352e:	fb02 f303 	mul.w	r3, r2, r3
 8003532:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003534:	e060      	b.n	80035f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800353c:	d107      	bne.n	800354e <SPI_WaitFifoStateUntilTimeout+0x62>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d104      	bne.n	800354e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800354c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003554:	d050      	beq.n	80035f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003556:	f7fd fe81 	bl	800125c <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003562:	429a      	cmp	r2, r3
 8003564:	d902      	bls.n	800356c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003568:	2b00      	cmp	r3, #0
 800356a:	d13d      	bne.n	80035e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800357a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003584:	d111      	bne.n	80035aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800358e:	d004      	beq.n	800359a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003598:	d107      	bne.n	80035aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035b2:	d10f      	bne.n	80035d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e010      	b.n	800360a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	3b01      	subs	r3, #1
 80035f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	4013      	ands	r3, r2
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	429a      	cmp	r2, r3
 8003606:	d196      	bne.n	8003536 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3728      	adds	r7, #40	@ 0x28
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	20000000 	.word	0x20000000

08003618 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af02      	add	r7, sp, #8
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2200      	movs	r2, #0
 800362c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f7ff ff5b 	bl	80034ec <SPI_WaitFifoStateUntilTimeout>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d007      	beq.n	800364c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003640:	f043 0220 	orr.w	r2, r3, #32
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e027      	b.n	800369c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2200      	movs	r2, #0
 8003654:	2180      	movs	r1, #128	@ 0x80
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f7ff fec0 	bl	80033dc <SPI_WaitFlagStateUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d007      	beq.n	8003672 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003666:	f043 0220 	orr.w	r2, r3, #32
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e014      	b.n	800369c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2200      	movs	r2, #0
 800367a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f7ff ff34 	bl	80034ec <SPI_WaitFifoStateUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d007      	beq.n	800369a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800368e:	f043 0220 	orr.w	r2, r3, #32
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e000      	b.n	800369c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e049      	b.n	800374a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d106      	bne.n	80036d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f841 	bl	8003752 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3304      	adds	r3, #4
 80036e0:	4619      	mov	r1, r3
 80036e2:	4610      	mov	r0, r2
 80036e4:	f000 f9e0 	bl	8003aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
	...

08003768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b01      	cmp	r3, #1
 800377a:	d001      	beq.n	8003780 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e04f      	b.n	8003820 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a23      	ldr	r2, [pc, #140]	@ (800382c <HAL_TIM_Base_Start_IT+0xc4>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d01d      	beq.n	80037de <HAL_TIM_Base_Start_IT+0x76>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037aa:	d018      	beq.n	80037de <HAL_TIM_Base_Start_IT+0x76>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003830 <HAL_TIM_Base_Start_IT+0xc8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d013      	beq.n	80037de <HAL_TIM_Base_Start_IT+0x76>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a1e      	ldr	r2, [pc, #120]	@ (8003834 <HAL_TIM_Base_Start_IT+0xcc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00e      	beq.n	80037de <HAL_TIM_Base_Start_IT+0x76>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003838 <HAL_TIM_Base_Start_IT+0xd0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d009      	beq.n	80037de <HAL_TIM_Base_Start_IT+0x76>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a1b      	ldr	r2, [pc, #108]	@ (800383c <HAL_TIM_Base_Start_IT+0xd4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d004      	beq.n	80037de <HAL_TIM_Base_Start_IT+0x76>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a19      	ldr	r2, [pc, #100]	@ (8003840 <HAL_TIM_Base_Start_IT+0xd8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d115      	bne.n	800380a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	4b17      	ldr	r3, [pc, #92]	@ (8003844 <HAL_TIM_Base_Start_IT+0xdc>)
 80037e6:	4013      	ands	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2b06      	cmp	r3, #6
 80037ee:	d015      	beq.n	800381c <HAL_TIM_Base_Start_IT+0xb4>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037f6:	d011      	beq.n	800381c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0201 	orr.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003808:	e008      	b.n	800381c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 0201 	orr.w	r2, r2, #1
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	e000      	b.n	800381e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800381c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	40012c00 	.word	0x40012c00
 8003830:	40000400 	.word	0x40000400
 8003834:	40000800 	.word	0x40000800
 8003838:	40000c00 	.word	0x40000c00
 800383c:	40013400 	.word	0x40013400
 8003840:	40014000 	.word	0x40014000
 8003844:	00010007 	.word	0x00010007

08003848 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d020      	beq.n	80038ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d01b      	beq.n	80038ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0202 	mvn.w	r2, #2
 800387c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f8e9 	bl	8003a6a <HAL_TIM_IC_CaptureCallback>
 8003898:	e005      	b.n	80038a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f8db 	bl	8003a56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f8ec 	bl	8003a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d020      	beq.n	80038f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d01b      	beq.n	80038f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f06f 0204 	mvn.w	r2, #4
 80038c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2202      	movs	r2, #2
 80038ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f8c3 	bl	8003a6a <HAL_TIM_IC_CaptureCallback>
 80038e4:	e005      	b.n	80038f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f8b5 	bl	8003a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f8c6 	bl	8003a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d020      	beq.n	8003944 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	2b00      	cmp	r3, #0
 800390a:	d01b      	beq.n	8003944 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f06f 0208 	mvn.w	r2, #8
 8003914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2204      	movs	r2, #4
 800391a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f89d 	bl	8003a6a <HAL_TIM_IC_CaptureCallback>
 8003930:	e005      	b.n	800393e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f88f 	bl	8003a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f8a0 	bl	8003a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f003 0310 	and.w	r3, r3, #16
 800394a:	2b00      	cmp	r3, #0
 800394c:	d020      	beq.n	8003990 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f003 0310 	and.w	r3, r3, #16
 8003954:	2b00      	cmp	r3, #0
 8003956:	d01b      	beq.n	8003990 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f06f 0210 	mvn.w	r2, #16
 8003960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2208      	movs	r2, #8
 8003966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f877 	bl	8003a6a <HAL_TIM_IC_CaptureCallback>
 800397c:	e005      	b.n	800398a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f869 	bl	8003a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f87a 	bl	8003a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00c      	beq.n	80039b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d007      	beq.n	80039b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f06f 0201 	mvn.w	r2, #1
 80039ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7fd f92e 	bl	8000c10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d104      	bne.n	80039c8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00c      	beq.n	80039e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d007      	beq.n	80039e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80039da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f913 	bl	8003c08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00c      	beq.n	8003a06 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d007      	beq.n	8003a06 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80039fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f90b 	bl	8003c1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00c      	beq.n	8003a2a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d007      	beq.n	8003a2a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f834 	bl	8003a92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f003 0320 	and.w	r3, r3, #32
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00c      	beq.n	8003a4e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f003 0320 	and.w	r3, r3, #32
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d007      	beq.n	8003a4e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f06f 0220 	mvn.w	r2, #32
 8003a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f8d3 	bl	8003bf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a4e:	bf00      	nop
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
	...

08003aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a46      	ldr	r2, [pc, #280]	@ (8003bd4 <TIM_Base_SetConfig+0x12c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d013      	beq.n	8003ae8 <TIM_Base_SetConfig+0x40>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ac6:	d00f      	beq.n	8003ae8 <TIM_Base_SetConfig+0x40>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a43      	ldr	r2, [pc, #268]	@ (8003bd8 <TIM_Base_SetConfig+0x130>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00b      	beq.n	8003ae8 <TIM_Base_SetConfig+0x40>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a42      	ldr	r2, [pc, #264]	@ (8003bdc <TIM_Base_SetConfig+0x134>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d007      	beq.n	8003ae8 <TIM_Base_SetConfig+0x40>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a41      	ldr	r2, [pc, #260]	@ (8003be0 <TIM_Base_SetConfig+0x138>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d003      	beq.n	8003ae8 <TIM_Base_SetConfig+0x40>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a40      	ldr	r2, [pc, #256]	@ (8003be4 <TIM_Base_SetConfig+0x13c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d108      	bne.n	8003afa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a35      	ldr	r2, [pc, #212]	@ (8003bd4 <TIM_Base_SetConfig+0x12c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d01f      	beq.n	8003b42 <TIM_Base_SetConfig+0x9a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b08:	d01b      	beq.n	8003b42 <TIM_Base_SetConfig+0x9a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a32      	ldr	r2, [pc, #200]	@ (8003bd8 <TIM_Base_SetConfig+0x130>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d017      	beq.n	8003b42 <TIM_Base_SetConfig+0x9a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a31      	ldr	r2, [pc, #196]	@ (8003bdc <TIM_Base_SetConfig+0x134>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d013      	beq.n	8003b42 <TIM_Base_SetConfig+0x9a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a30      	ldr	r2, [pc, #192]	@ (8003be0 <TIM_Base_SetConfig+0x138>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00f      	beq.n	8003b42 <TIM_Base_SetConfig+0x9a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a2f      	ldr	r2, [pc, #188]	@ (8003be4 <TIM_Base_SetConfig+0x13c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d00b      	beq.n	8003b42 <TIM_Base_SetConfig+0x9a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a2e      	ldr	r2, [pc, #184]	@ (8003be8 <TIM_Base_SetConfig+0x140>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d007      	beq.n	8003b42 <TIM_Base_SetConfig+0x9a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a2d      	ldr	r2, [pc, #180]	@ (8003bec <TIM_Base_SetConfig+0x144>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d003      	beq.n	8003b42 <TIM_Base_SetConfig+0x9a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a2c      	ldr	r2, [pc, #176]	@ (8003bf0 <TIM_Base_SetConfig+0x148>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d108      	bne.n	8003b54 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a16      	ldr	r2, [pc, #88]	@ (8003bd4 <TIM_Base_SetConfig+0x12c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d00f      	beq.n	8003ba0 <TIM_Base_SetConfig+0xf8>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a18      	ldr	r2, [pc, #96]	@ (8003be4 <TIM_Base_SetConfig+0x13c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00b      	beq.n	8003ba0 <TIM_Base_SetConfig+0xf8>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a17      	ldr	r2, [pc, #92]	@ (8003be8 <TIM_Base_SetConfig+0x140>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d007      	beq.n	8003ba0 <TIM_Base_SetConfig+0xf8>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a16      	ldr	r2, [pc, #88]	@ (8003bec <TIM_Base_SetConfig+0x144>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d003      	beq.n	8003ba0 <TIM_Base_SetConfig+0xf8>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a15      	ldr	r2, [pc, #84]	@ (8003bf0 <TIM_Base_SetConfig+0x148>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d103      	bne.n	8003ba8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d105      	bne.n	8003bc6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f023 0201 	bic.w	r2, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	611a      	str	r2, [r3, #16]
  }
}
 8003bc6:	bf00      	nop
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	40012c00 	.word	0x40012c00
 8003bd8:	40000400 	.word	0x40000400
 8003bdc:	40000800 	.word	0x40000800
 8003be0:	40000c00 	.word	0x40000c00
 8003be4:	40013400 	.word	0x40013400
 8003be8:	40014000 	.word	0x40014000
 8003bec:	40014400 	.word	0x40014400
 8003bf0:	40014800 	.word	0x40014800

08003bf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e040      	b.n	8003cc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d106      	bne.n	8003c58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7fd fa40 	bl	80010d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2224      	movs	r2, #36	@ 0x24
 8003c5c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0201 	bic.w	r2, r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 ff58 	bl	8004b2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 fc9d 	bl	80045bc <UART_SetConfig>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d101      	bne.n	8003c8c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e01b      	b.n	8003cc4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003caa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0201 	orr.w	r2, r2, #1
 8003cba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 ffd7 	bl	8004c70 <UART_CheckIdleState>
 8003cc2:	4603      	mov	r3, r0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08a      	sub	sp, #40	@ 0x28
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	603b      	str	r3, [r7, #0]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ce0:	2b20      	cmp	r3, #32
 8003ce2:	d177      	bne.n	8003dd4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <HAL_UART_Transmit+0x24>
 8003cea:	88fb      	ldrh	r3, [r7, #6]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e070      	b.n	8003dd6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2221      	movs	r2, #33	@ 0x21
 8003d00:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d02:	f7fd faab 	bl	800125c <HAL_GetTick>
 8003d06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	88fa      	ldrh	r2, [r7, #6]
 8003d0c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	88fa      	ldrh	r2, [r7, #6]
 8003d14:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d20:	d108      	bne.n	8003d34 <HAL_UART_Transmit+0x68>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d104      	bne.n	8003d34 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	e003      	b.n	8003d3c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d3c:	e02f      	b.n	8003d9e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2200      	movs	r2, #0
 8003d46:	2180      	movs	r1, #128	@ 0x80
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f001 f839 	bl	8004dc0 <UART_WaitOnFlagUntilTimeout>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d004      	beq.n	8003d5e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2220      	movs	r2, #32
 8003d58:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e03b      	b.n	8003dd6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10b      	bne.n	8003d7c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	881a      	ldrh	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d70:	b292      	uxth	r2, r2
 8003d72:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	3302      	adds	r3, #2
 8003d78:	61bb      	str	r3, [r7, #24]
 8003d7a:	e007      	b.n	8003d8c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	781a      	ldrb	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1c9      	bne.n	8003d3e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2200      	movs	r2, #0
 8003db2:	2140      	movs	r1, #64	@ 0x40
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f001 f803 	bl	8004dc0 <UART_WaitOnFlagUntilTimeout>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d004      	beq.n	8003dca <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e005      	b.n	8003dd6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	e000      	b.n	8003dd6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003dd4:	2302      	movs	r3, #2
  }
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3720      	adds	r7, #32
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b08a      	sub	sp, #40	@ 0x28
 8003de2:	af02      	add	r7, sp, #8
 8003de4:	60f8      	str	r0, [r7, #12]
 8003de6:	60b9      	str	r1, [r7, #8]
 8003de8:	603b      	str	r3, [r7, #0]
 8003dea:	4613      	mov	r3, r2
 8003dec:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	f040 80b6 	bne.w	8003f66 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <HAL_UART_Receive+0x28>
 8003e00:	88fb      	ldrh	r3, [r7, #6]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e0ae      	b.n	8003f68 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2222      	movs	r2, #34	@ 0x22
 8003e16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e20:	f7fd fa1c 	bl	800125c <HAL_GetTick>
 8003e24:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	88fa      	ldrh	r2, [r7, #6]
 8003e2a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	88fa      	ldrh	r2, [r7, #6]
 8003e32:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e3e:	d10e      	bne.n	8003e5e <HAL_UART_Receive+0x80>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d105      	bne.n	8003e54 <HAL_UART_Receive+0x76>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003e4e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e52:	e02d      	b.n	8003eb0 <HAL_UART_Receive+0xd2>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	22ff      	movs	r2, #255	@ 0xff
 8003e58:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e5c:	e028      	b.n	8003eb0 <HAL_UART_Receive+0xd2>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10d      	bne.n	8003e82 <HAL_UART_Receive+0xa4>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d104      	bne.n	8003e78 <HAL_UART_Receive+0x9a>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	22ff      	movs	r2, #255	@ 0xff
 8003e72:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e76:	e01b      	b.n	8003eb0 <HAL_UART_Receive+0xd2>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	227f      	movs	r2, #127	@ 0x7f
 8003e7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e80:	e016      	b.n	8003eb0 <HAL_UART_Receive+0xd2>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e8a:	d10d      	bne.n	8003ea8 <HAL_UART_Receive+0xca>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d104      	bne.n	8003e9e <HAL_UART_Receive+0xc0>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	227f      	movs	r2, #127	@ 0x7f
 8003e98:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003e9c:	e008      	b.n	8003eb0 <HAL_UART_Receive+0xd2>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	223f      	movs	r2, #63	@ 0x3f
 8003ea2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003ea6:	e003      	b.n	8003eb0 <HAL_UART_Receive+0xd2>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003eb6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ec0:	d108      	bne.n	8003ed4 <HAL_UART_Receive+0xf6>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d104      	bne.n	8003ed4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	e003      	b.n	8003edc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003edc:	e037      	b.n	8003f4e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2120      	movs	r1, #32
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 ff69 	bl	8004dc0 <UART_WaitOnFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d005      	beq.n	8003f00 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e033      	b.n	8003f68 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10c      	bne.n	8003f20 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	8a7b      	ldrh	r3, [r7, #18]
 8003f10:	4013      	ands	r3, r2
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	3302      	adds	r3, #2
 8003f1c:	61bb      	str	r3, [r7, #24]
 8003f1e:	e00d      	b.n	8003f3c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	8a7b      	ldrh	r3, [r7, #18]
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	4013      	ands	r3, r2
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1c1      	bne.n	8003ede <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	e000      	b.n	8003f68 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003f66:	2302      	movs	r3, #2
  }
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3720      	adds	r7, #32
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b0ba      	sub	sp, #232	@ 0xe8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003f9a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003fa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d115      	bne.n	8003fd8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fb0:	f003 0320 	and.w	r3, r3, #32
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00f      	beq.n	8003fd8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fbc:	f003 0320 	and.w	r3, r3, #32
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d009      	beq.n	8003fd8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 82ca 	beq.w	8004562 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	4798      	blx	r3
      }
      return;
 8003fd6:	e2c4      	b.n	8004562 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003fd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 8117 	beq.w	8004210 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d106      	bne.n	8003ffc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003fee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003ff2:	4b85      	ldr	r3, [pc, #532]	@ (8004208 <HAL_UART_IRQHandler+0x298>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 810a 	beq.w	8004210 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d011      	beq.n	800402c <HAL_UART_IRQHandler+0xbc>
 8004008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800400c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00b      	beq.n	800402c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2201      	movs	r2, #1
 800401a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004022:	f043 0201 	orr.w	r2, r3, #1
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800402c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d011      	beq.n	800405c <HAL_UART_IRQHandler+0xec>
 8004038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00b      	beq.n	800405c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2202      	movs	r2, #2
 800404a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004052:	f043 0204 	orr.w	r2, r3, #4
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800405c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b00      	cmp	r3, #0
 8004066:	d011      	beq.n	800408c <HAL_UART_IRQHandler+0x11c>
 8004068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00b      	beq.n	800408c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2204      	movs	r2, #4
 800407a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004082:	f043 0202 	orr.w	r2, r3, #2
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800408c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b00      	cmp	r3, #0
 8004096:	d017      	beq.n	80040c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800409c:	f003 0320 	and.w	r3, r3, #32
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d105      	bne.n	80040b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80040a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00b      	beq.n	80040c8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2208      	movs	r2, #8
 80040b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040be:	f043 0208 	orr.w	r2, r3, #8
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80040c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d012      	beq.n	80040fa <HAL_UART_IRQHandler+0x18a>
 80040d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00c      	beq.n	80040fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040f0:	f043 0220 	orr.w	r2, r3, #32
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 8230 	beq.w	8004566 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00d      	beq.n	800412e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	d007      	beq.n	800412e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004134:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004142:	2b40      	cmp	r3, #64	@ 0x40
 8004144:	d005      	beq.n	8004152 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800414a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800414e:	2b00      	cmp	r3, #0
 8004150:	d04f      	beq.n	80041f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fea1 	bl	8004e9a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004162:	2b40      	cmp	r3, #64	@ 0x40
 8004164:	d141      	bne.n	80041ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	3308      	adds	r3, #8
 800416c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004174:	e853 3f00 	ldrex	r3, [r3]
 8004178:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800417c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004180:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004184:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3308      	adds	r3, #8
 800418e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004192:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004196:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800419e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80041a2:	e841 2300 	strex	r3, r2, [r1]
 80041a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80041aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1d9      	bne.n	8004166 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d013      	beq.n	80041e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041be:	4a13      	ldr	r2, [pc, #76]	@ (800420c <HAL_UART_IRQHandler+0x29c>)
 80041c0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fd f998 	bl	80014fc <HAL_DMA_Abort_IT>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d017      	beq.n	8004202 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80041dc:	4610      	mov	r0, r2
 80041de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e0:	e00f      	b.n	8004202 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f9d4 	bl	8004590 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e8:	e00b      	b.n	8004202 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f9d0 	bl	8004590 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f0:	e007      	b.n	8004202 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f9cc 	bl	8004590 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004200:	e1b1      	b.n	8004566 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004202:	bf00      	nop
    return;
 8004204:	e1af      	b.n	8004566 <HAL_UART_IRQHandler+0x5f6>
 8004206:	bf00      	nop
 8004208:	04000120 	.word	0x04000120
 800420c:	08004f63 	.word	0x08004f63

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004214:	2b01      	cmp	r3, #1
 8004216:	f040 816a 	bne.w	80044ee <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800421a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800421e:	f003 0310 	and.w	r3, r3, #16
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 8163 	beq.w	80044ee <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800422c:	f003 0310 	and.w	r3, r3, #16
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 815c 	beq.w	80044ee <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2210      	movs	r2, #16
 800423c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004248:	2b40      	cmp	r3, #64	@ 0x40
 800424a:	f040 80d4 	bne.w	80043f6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800425a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 80ad 	beq.w	80043be <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800426a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800426e:	429a      	cmp	r2, r3
 8004270:	f080 80a5 	bcs.w	80043be <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800427a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b00      	cmp	r3, #0
 800428c:	f040 8086 	bne.w	800439c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800429c:	e853 3f00 	ldrex	r3, [r3]
 80042a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80042a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80042ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80042be:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80042c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80042ca:	e841 2300 	strex	r3, r2, [r1]
 80042ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80042d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1da      	bne.n	8004290 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3308      	adds	r3, #8
 80042e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042e4:	e853 3f00 	ldrex	r3, [r3]
 80042e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80042ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042ec:	f023 0301 	bic.w	r3, r3, #1
 80042f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3308      	adds	r3, #8
 80042fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004302:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004306:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800430a:	e841 2300 	strex	r3, r2, [r1]
 800430e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004310:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1e1      	bne.n	80042da <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3308      	adds	r3, #8
 800431c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004320:	e853 3f00 	ldrex	r3, [r3]
 8004324:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004326:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004328:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800432c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3308      	adds	r3, #8
 8004336:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800433a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800433c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004340:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004342:	e841 2300 	strex	r3, r2, [r1]
 8004346:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004348:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1e3      	bne.n	8004316 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2220      	movs	r2, #32
 8004352:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004364:	e853 3f00 	ldrex	r3, [r3]
 8004368:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800436a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800436c:	f023 0310 	bic.w	r3, r3, #16
 8004370:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	461a      	mov	r2, r3
 800437a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800437e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004380:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004382:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004384:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004386:	e841 2300 	strex	r3, r2, [r1]
 800438a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800438c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1e4      	bne.n	800435c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004396:	4618      	mov	r0, r3
 8004398:	f7fd f872 	bl	8001480 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	4619      	mov	r1, r3
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f8f4 	bl	80045a4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80043bc:	e0d5      	b.n	800456a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80043c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043c8:	429a      	cmp	r2, r3
 80043ca:	f040 80ce 	bne.w	800456a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0320 	and.w	r3, r3, #32
 80043da:	2b20      	cmp	r3, #32
 80043dc:	f040 80c5 	bne.w	800456a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80043ec:	4619      	mov	r1, r3
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f8d8 	bl	80045a4 <HAL_UARTEx_RxEventCallback>
      return;
 80043f4:	e0b9      	b.n	800456a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004402:	b29b      	uxth	r3, r3
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004410:	b29b      	uxth	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 80ab 	beq.w	800456e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004418:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 80a6 	beq.w	800456e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800442a:	e853 3f00 	ldrex	r3, [r3]
 800442e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004432:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004436:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004444:	647b      	str	r3, [r7, #68]	@ 0x44
 8004446:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004448:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800444a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800444c:	e841 2300 	strex	r3, r2, [r1]
 8004450:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1e4      	bne.n	8004422 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3308      	adds	r3, #8
 800445e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004462:	e853 3f00 	ldrex	r3, [r3]
 8004466:	623b      	str	r3, [r7, #32]
   return(result);
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	f023 0301 	bic.w	r3, r3, #1
 800446e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3308      	adds	r3, #8
 8004478:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800447c:	633a      	str	r2, [r7, #48]	@ 0x30
 800447e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004482:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800448a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e3      	bne.n	8004458 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2220      	movs	r2, #32
 8004494:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	e853 3f00 	ldrex	r3, [r3]
 80044b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f023 0310 	bic.w	r3, r3, #16
 80044b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	461a      	mov	r2, r3
 80044c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80044c6:	61fb      	str	r3, [r7, #28]
 80044c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ca:	69b9      	ldr	r1, [r7, #24]
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	e841 2300 	strex	r3, r2, [r1]
 80044d2:	617b      	str	r3, [r7, #20]
   return(result);
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1e4      	bne.n	80044a4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2202      	movs	r2, #2
 80044de:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044e4:	4619      	mov	r1, r3
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f85c 	bl	80045a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044ec:	e03f      	b.n	800456e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80044ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00e      	beq.n	8004518 <HAL_UART_IRQHandler+0x5a8>
 80044fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d008      	beq.n	8004518 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800450e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 fd66 	bl	8004fe2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004516:	e02d      	b.n	8004574 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800451c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00e      	beq.n	8004542 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800452c:	2b00      	cmp	r3, #0
 800452e:	d008      	beq.n	8004542 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004534:	2b00      	cmp	r3, #0
 8004536:	d01c      	beq.n	8004572 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	4798      	blx	r3
    }
    return;
 8004540:	e017      	b.n	8004572 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800454a:	2b00      	cmp	r3, #0
 800454c:	d012      	beq.n	8004574 <HAL_UART_IRQHandler+0x604>
 800454e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00c      	beq.n	8004574 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 fd17 	bl	8004f8e <UART_EndTransmit_IT>
    return;
 8004560:	e008      	b.n	8004574 <HAL_UART_IRQHandler+0x604>
      return;
 8004562:	bf00      	nop
 8004564:	e006      	b.n	8004574 <HAL_UART_IRQHandler+0x604>
    return;
 8004566:	bf00      	nop
 8004568:	e004      	b.n	8004574 <HAL_UART_IRQHandler+0x604>
      return;
 800456a:	bf00      	nop
 800456c:	e002      	b.n	8004574 <HAL_UART_IRQHandler+0x604>
      return;
 800456e:	bf00      	nop
 8004570:	e000      	b.n	8004574 <HAL_UART_IRQHandler+0x604>
    return;
 8004572:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004574:	37e8      	adds	r7, #232	@ 0xe8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop

0800457c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	460b      	mov	r3, r1
 80045ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045c0:	b08a      	sub	sp, #40	@ 0x28
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	431a      	orrs	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	431a      	orrs	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	4ba4      	ldr	r3, [pc, #656]	@ (800487c <UART_SetConfig+0x2c0>)
 80045ec:	4013      	ands	r3, r2
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	6812      	ldr	r2, [r2, #0]
 80045f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045f4:	430b      	orrs	r3, r1
 80045f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a99      	ldr	r2, [pc, #612]	@ (8004880 <UART_SetConfig+0x2c4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d004      	beq.n	8004628 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004624:	4313      	orrs	r3, r2
 8004626:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004638:	430a      	orrs	r2, r1
 800463a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a90      	ldr	r2, [pc, #576]	@ (8004884 <UART_SetConfig+0x2c8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d126      	bne.n	8004694 <UART_SetConfig+0xd8>
 8004646:	4b90      	ldr	r3, [pc, #576]	@ (8004888 <UART_SetConfig+0x2cc>)
 8004648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800464c:	f003 0303 	and.w	r3, r3, #3
 8004650:	2b03      	cmp	r3, #3
 8004652:	d81b      	bhi.n	800468c <UART_SetConfig+0xd0>
 8004654:	a201      	add	r2, pc, #4	@ (adr r2, 800465c <UART_SetConfig+0xa0>)
 8004656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465a:	bf00      	nop
 800465c:	0800466d 	.word	0x0800466d
 8004660:	0800467d 	.word	0x0800467d
 8004664:	08004675 	.word	0x08004675
 8004668:	08004685 	.word	0x08004685
 800466c:	2301      	movs	r3, #1
 800466e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004672:	e116      	b.n	80048a2 <UART_SetConfig+0x2e6>
 8004674:	2302      	movs	r3, #2
 8004676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800467a:	e112      	b.n	80048a2 <UART_SetConfig+0x2e6>
 800467c:	2304      	movs	r3, #4
 800467e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004682:	e10e      	b.n	80048a2 <UART_SetConfig+0x2e6>
 8004684:	2308      	movs	r3, #8
 8004686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800468a:	e10a      	b.n	80048a2 <UART_SetConfig+0x2e6>
 800468c:	2310      	movs	r3, #16
 800468e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004692:	e106      	b.n	80048a2 <UART_SetConfig+0x2e6>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a7c      	ldr	r2, [pc, #496]	@ (800488c <UART_SetConfig+0x2d0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d138      	bne.n	8004710 <UART_SetConfig+0x154>
 800469e:	4b7a      	ldr	r3, [pc, #488]	@ (8004888 <UART_SetConfig+0x2cc>)
 80046a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a4:	f003 030c 	and.w	r3, r3, #12
 80046a8:	2b0c      	cmp	r3, #12
 80046aa:	d82d      	bhi.n	8004708 <UART_SetConfig+0x14c>
 80046ac:	a201      	add	r2, pc, #4	@ (adr r2, 80046b4 <UART_SetConfig+0xf8>)
 80046ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b2:	bf00      	nop
 80046b4:	080046e9 	.word	0x080046e9
 80046b8:	08004709 	.word	0x08004709
 80046bc:	08004709 	.word	0x08004709
 80046c0:	08004709 	.word	0x08004709
 80046c4:	080046f9 	.word	0x080046f9
 80046c8:	08004709 	.word	0x08004709
 80046cc:	08004709 	.word	0x08004709
 80046d0:	08004709 	.word	0x08004709
 80046d4:	080046f1 	.word	0x080046f1
 80046d8:	08004709 	.word	0x08004709
 80046dc:	08004709 	.word	0x08004709
 80046e0:	08004709 	.word	0x08004709
 80046e4:	08004701 	.word	0x08004701
 80046e8:	2300      	movs	r3, #0
 80046ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ee:	e0d8      	b.n	80048a2 <UART_SetConfig+0x2e6>
 80046f0:	2302      	movs	r3, #2
 80046f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046f6:	e0d4      	b.n	80048a2 <UART_SetConfig+0x2e6>
 80046f8:	2304      	movs	r3, #4
 80046fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046fe:	e0d0      	b.n	80048a2 <UART_SetConfig+0x2e6>
 8004700:	2308      	movs	r3, #8
 8004702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004706:	e0cc      	b.n	80048a2 <UART_SetConfig+0x2e6>
 8004708:	2310      	movs	r3, #16
 800470a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800470e:	e0c8      	b.n	80048a2 <UART_SetConfig+0x2e6>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a5e      	ldr	r2, [pc, #376]	@ (8004890 <UART_SetConfig+0x2d4>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d125      	bne.n	8004766 <UART_SetConfig+0x1aa>
 800471a:	4b5b      	ldr	r3, [pc, #364]	@ (8004888 <UART_SetConfig+0x2cc>)
 800471c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004720:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004724:	2b30      	cmp	r3, #48	@ 0x30
 8004726:	d016      	beq.n	8004756 <UART_SetConfig+0x19a>
 8004728:	2b30      	cmp	r3, #48	@ 0x30
 800472a:	d818      	bhi.n	800475e <UART_SetConfig+0x1a2>
 800472c:	2b20      	cmp	r3, #32
 800472e:	d00a      	beq.n	8004746 <UART_SetConfig+0x18a>
 8004730:	2b20      	cmp	r3, #32
 8004732:	d814      	bhi.n	800475e <UART_SetConfig+0x1a2>
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <UART_SetConfig+0x182>
 8004738:	2b10      	cmp	r3, #16
 800473a:	d008      	beq.n	800474e <UART_SetConfig+0x192>
 800473c:	e00f      	b.n	800475e <UART_SetConfig+0x1a2>
 800473e:	2300      	movs	r3, #0
 8004740:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004744:	e0ad      	b.n	80048a2 <UART_SetConfig+0x2e6>
 8004746:	2302      	movs	r3, #2
 8004748:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800474c:	e0a9      	b.n	80048a2 <UART_SetConfig+0x2e6>
 800474e:	2304      	movs	r3, #4
 8004750:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004754:	e0a5      	b.n	80048a2 <UART_SetConfig+0x2e6>
 8004756:	2308      	movs	r3, #8
 8004758:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800475c:	e0a1      	b.n	80048a2 <UART_SetConfig+0x2e6>
 800475e:	2310      	movs	r3, #16
 8004760:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004764:	e09d      	b.n	80048a2 <UART_SetConfig+0x2e6>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a4a      	ldr	r2, [pc, #296]	@ (8004894 <UART_SetConfig+0x2d8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d125      	bne.n	80047bc <UART_SetConfig+0x200>
 8004770:	4b45      	ldr	r3, [pc, #276]	@ (8004888 <UART_SetConfig+0x2cc>)
 8004772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004776:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800477a:	2bc0      	cmp	r3, #192	@ 0xc0
 800477c:	d016      	beq.n	80047ac <UART_SetConfig+0x1f0>
 800477e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004780:	d818      	bhi.n	80047b4 <UART_SetConfig+0x1f8>
 8004782:	2b80      	cmp	r3, #128	@ 0x80
 8004784:	d00a      	beq.n	800479c <UART_SetConfig+0x1e0>
 8004786:	2b80      	cmp	r3, #128	@ 0x80
 8004788:	d814      	bhi.n	80047b4 <UART_SetConfig+0x1f8>
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <UART_SetConfig+0x1d8>
 800478e:	2b40      	cmp	r3, #64	@ 0x40
 8004790:	d008      	beq.n	80047a4 <UART_SetConfig+0x1e8>
 8004792:	e00f      	b.n	80047b4 <UART_SetConfig+0x1f8>
 8004794:	2300      	movs	r3, #0
 8004796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800479a:	e082      	b.n	80048a2 <UART_SetConfig+0x2e6>
 800479c:	2302      	movs	r3, #2
 800479e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047a2:	e07e      	b.n	80048a2 <UART_SetConfig+0x2e6>
 80047a4:	2304      	movs	r3, #4
 80047a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047aa:	e07a      	b.n	80048a2 <UART_SetConfig+0x2e6>
 80047ac:	2308      	movs	r3, #8
 80047ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047b2:	e076      	b.n	80048a2 <UART_SetConfig+0x2e6>
 80047b4:	2310      	movs	r3, #16
 80047b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ba:	e072      	b.n	80048a2 <UART_SetConfig+0x2e6>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a35      	ldr	r2, [pc, #212]	@ (8004898 <UART_SetConfig+0x2dc>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d12a      	bne.n	800481c <UART_SetConfig+0x260>
 80047c6:	4b30      	ldr	r3, [pc, #192]	@ (8004888 <UART_SetConfig+0x2cc>)
 80047c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047d4:	d01a      	beq.n	800480c <UART_SetConfig+0x250>
 80047d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047da:	d81b      	bhi.n	8004814 <UART_SetConfig+0x258>
 80047dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047e0:	d00c      	beq.n	80047fc <UART_SetConfig+0x240>
 80047e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047e6:	d815      	bhi.n	8004814 <UART_SetConfig+0x258>
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <UART_SetConfig+0x238>
 80047ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047f0:	d008      	beq.n	8004804 <UART_SetConfig+0x248>
 80047f2:	e00f      	b.n	8004814 <UART_SetConfig+0x258>
 80047f4:	2300      	movs	r3, #0
 80047f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047fa:	e052      	b.n	80048a2 <UART_SetConfig+0x2e6>
 80047fc:	2302      	movs	r3, #2
 80047fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004802:	e04e      	b.n	80048a2 <UART_SetConfig+0x2e6>
 8004804:	2304      	movs	r3, #4
 8004806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800480a:	e04a      	b.n	80048a2 <UART_SetConfig+0x2e6>
 800480c:	2308      	movs	r3, #8
 800480e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004812:	e046      	b.n	80048a2 <UART_SetConfig+0x2e6>
 8004814:	2310      	movs	r3, #16
 8004816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800481a:	e042      	b.n	80048a2 <UART_SetConfig+0x2e6>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a17      	ldr	r2, [pc, #92]	@ (8004880 <UART_SetConfig+0x2c4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d13a      	bne.n	800489c <UART_SetConfig+0x2e0>
 8004826:	4b18      	ldr	r3, [pc, #96]	@ (8004888 <UART_SetConfig+0x2cc>)
 8004828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004830:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004834:	d01a      	beq.n	800486c <UART_SetConfig+0x2b0>
 8004836:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800483a:	d81b      	bhi.n	8004874 <UART_SetConfig+0x2b8>
 800483c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004840:	d00c      	beq.n	800485c <UART_SetConfig+0x2a0>
 8004842:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004846:	d815      	bhi.n	8004874 <UART_SetConfig+0x2b8>
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <UART_SetConfig+0x298>
 800484c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004850:	d008      	beq.n	8004864 <UART_SetConfig+0x2a8>
 8004852:	e00f      	b.n	8004874 <UART_SetConfig+0x2b8>
 8004854:	2300      	movs	r3, #0
 8004856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800485a:	e022      	b.n	80048a2 <UART_SetConfig+0x2e6>
 800485c:	2302      	movs	r3, #2
 800485e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004862:	e01e      	b.n	80048a2 <UART_SetConfig+0x2e6>
 8004864:	2304      	movs	r3, #4
 8004866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800486a:	e01a      	b.n	80048a2 <UART_SetConfig+0x2e6>
 800486c:	2308      	movs	r3, #8
 800486e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004872:	e016      	b.n	80048a2 <UART_SetConfig+0x2e6>
 8004874:	2310      	movs	r3, #16
 8004876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800487a:	e012      	b.n	80048a2 <UART_SetConfig+0x2e6>
 800487c:	efff69f3 	.word	0xefff69f3
 8004880:	40008000 	.word	0x40008000
 8004884:	40013800 	.word	0x40013800
 8004888:	40021000 	.word	0x40021000
 800488c:	40004400 	.word	0x40004400
 8004890:	40004800 	.word	0x40004800
 8004894:	40004c00 	.word	0x40004c00
 8004898:	40005000 	.word	0x40005000
 800489c:	2310      	movs	r3, #16
 800489e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a9f      	ldr	r2, [pc, #636]	@ (8004b24 <UART_SetConfig+0x568>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d17a      	bne.n	80049a2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d824      	bhi.n	80048fe <UART_SetConfig+0x342>
 80048b4:	a201      	add	r2, pc, #4	@ (adr r2, 80048bc <UART_SetConfig+0x300>)
 80048b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ba:	bf00      	nop
 80048bc:	080048e1 	.word	0x080048e1
 80048c0:	080048ff 	.word	0x080048ff
 80048c4:	080048e9 	.word	0x080048e9
 80048c8:	080048ff 	.word	0x080048ff
 80048cc:	080048ef 	.word	0x080048ef
 80048d0:	080048ff 	.word	0x080048ff
 80048d4:	080048ff 	.word	0x080048ff
 80048d8:	080048ff 	.word	0x080048ff
 80048dc:	080048f7 	.word	0x080048f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048e0:	f7fd fde8 	bl	80024b4 <HAL_RCC_GetPCLK1Freq>
 80048e4:	61f8      	str	r0, [r7, #28]
        break;
 80048e6:	e010      	b.n	800490a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048e8:	4b8f      	ldr	r3, [pc, #572]	@ (8004b28 <UART_SetConfig+0x56c>)
 80048ea:	61fb      	str	r3, [r7, #28]
        break;
 80048ec:	e00d      	b.n	800490a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ee:	f7fd fd49 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 80048f2:	61f8      	str	r0, [r7, #28]
        break;
 80048f4:	e009      	b.n	800490a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048fa:	61fb      	str	r3, [r7, #28]
        break;
 80048fc:	e005      	b.n	800490a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004908:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 80fb 	beq.w	8004b08 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	4613      	mov	r3, r2
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	4413      	add	r3, r2
 800491c:	69fa      	ldr	r2, [r7, #28]
 800491e:	429a      	cmp	r2, r3
 8004920:	d305      	bcc.n	800492e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004928:	69fa      	ldr	r2, [r7, #28]
 800492a:	429a      	cmp	r2, r3
 800492c:	d903      	bls.n	8004936 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004934:	e0e8      	b.n	8004b08 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	2200      	movs	r2, #0
 800493a:	461c      	mov	r4, r3
 800493c:	4615      	mov	r5, r2
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	022b      	lsls	r3, r5, #8
 8004948:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800494c:	0222      	lsls	r2, r4, #8
 800494e:	68f9      	ldr	r1, [r7, #12]
 8004950:	6849      	ldr	r1, [r1, #4]
 8004952:	0849      	lsrs	r1, r1, #1
 8004954:	2000      	movs	r0, #0
 8004956:	4688      	mov	r8, r1
 8004958:	4681      	mov	r9, r0
 800495a:	eb12 0a08 	adds.w	sl, r2, r8
 800495e:	eb43 0b09 	adc.w	fp, r3, r9
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	603b      	str	r3, [r7, #0]
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004970:	4650      	mov	r0, sl
 8004972:	4659      	mov	r1, fp
 8004974:	f7fb fc7c 	bl	8000270 <__aeabi_uldivmod>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4613      	mov	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004986:	d308      	bcc.n	800499a <UART_SetConfig+0x3de>
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800498e:	d204      	bcs.n	800499a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	60da      	str	r2, [r3, #12]
 8004998:	e0b6      	b.n	8004b08 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80049a0:	e0b2      	b.n	8004b08 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049aa:	d15e      	bne.n	8004a6a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80049ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d828      	bhi.n	8004a06 <UART_SetConfig+0x44a>
 80049b4:	a201      	add	r2, pc, #4	@ (adr r2, 80049bc <UART_SetConfig+0x400>)
 80049b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ba:	bf00      	nop
 80049bc:	080049e1 	.word	0x080049e1
 80049c0:	080049e9 	.word	0x080049e9
 80049c4:	080049f1 	.word	0x080049f1
 80049c8:	08004a07 	.word	0x08004a07
 80049cc:	080049f7 	.word	0x080049f7
 80049d0:	08004a07 	.word	0x08004a07
 80049d4:	08004a07 	.word	0x08004a07
 80049d8:	08004a07 	.word	0x08004a07
 80049dc:	080049ff 	.word	0x080049ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049e0:	f7fd fd68 	bl	80024b4 <HAL_RCC_GetPCLK1Freq>
 80049e4:	61f8      	str	r0, [r7, #28]
        break;
 80049e6:	e014      	b.n	8004a12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049e8:	f7fd fd7a 	bl	80024e0 <HAL_RCC_GetPCLK2Freq>
 80049ec:	61f8      	str	r0, [r7, #28]
        break;
 80049ee:	e010      	b.n	8004a12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049f0:	4b4d      	ldr	r3, [pc, #308]	@ (8004b28 <UART_SetConfig+0x56c>)
 80049f2:	61fb      	str	r3, [r7, #28]
        break;
 80049f4:	e00d      	b.n	8004a12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049f6:	f7fd fcc5 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 80049fa:	61f8      	str	r0, [r7, #28]
        break;
 80049fc:	e009      	b.n	8004a12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a02:	61fb      	str	r3, [r7, #28]
        break;
 8004a04:	e005      	b.n	8004a12 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004a10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d077      	beq.n	8004b08 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	005a      	lsls	r2, r3, #1
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	085b      	lsrs	r3, r3, #1
 8004a22:	441a      	add	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	2b0f      	cmp	r3, #15
 8004a32:	d916      	bls.n	8004a62 <UART_SetConfig+0x4a6>
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a3a:	d212      	bcs.n	8004a62 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	f023 030f 	bic.w	r3, r3, #15
 8004a44:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	085b      	lsrs	r3, r3, #1
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	8afb      	ldrh	r3, [r7, #22]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	8afa      	ldrh	r2, [r7, #22]
 8004a5e:	60da      	str	r2, [r3, #12]
 8004a60:	e052      	b.n	8004b08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004a68:	e04e      	b.n	8004b08 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a6a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a6e:	2b08      	cmp	r3, #8
 8004a70:	d827      	bhi.n	8004ac2 <UART_SetConfig+0x506>
 8004a72:	a201      	add	r2, pc, #4	@ (adr r2, 8004a78 <UART_SetConfig+0x4bc>)
 8004a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a78:	08004a9d 	.word	0x08004a9d
 8004a7c:	08004aa5 	.word	0x08004aa5
 8004a80:	08004aad 	.word	0x08004aad
 8004a84:	08004ac3 	.word	0x08004ac3
 8004a88:	08004ab3 	.word	0x08004ab3
 8004a8c:	08004ac3 	.word	0x08004ac3
 8004a90:	08004ac3 	.word	0x08004ac3
 8004a94:	08004ac3 	.word	0x08004ac3
 8004a98:	08004abb 	.word	0x08004abb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a9c:	f7fd fd0a 	bl	80024b4 <HAL_RCC_GetPCLK1Freq>
 8004aa0:	61f8      	str	r0, [r7, #28]
        break;
 8004aa2:	e014      	b.n	8004ace <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aa4:	f7fd fd1c 	bl	80024e0 <HAL_RCC_GetPCLK2Freq>
 8004aa8:	61f8      	str	r0, [r7, #28]
        break;
 8004aaa:	e010      	b.n	8004ace <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aac:	4b1e      	ldr	r3, [pc, #120]	@ (8004b28 <UART_SetConfig+0x56c>)
 8004aae:	61fb      	str	r3, [r7, #28]
        break;
 8004ab0:	e00d      	b.n	8004ace <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ab2:	f7fd fc67 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 8004ab6:	61f8      	str	r0, [r7, #28]
        break;
 8004ab8:	e009      	b.n	8004ace <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004abe:	61fb      	str	r3, [r7, #28]
        break;
 8004ac0:	e005      	b.n	8004ace <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004acc:	bf00      	nop
    }

    if (pclk != 0U)
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d019      	beq.n	8004b08 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	085a      	lsrs	r2, r3, #1
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	441a      	add	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	2b0f      	cmp	r3, #15
 8004aec:	d909      	bls.n	8004b02 <UART_SetConfig+0x546>
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004af4:	d205      	bcs.n	8004b02 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	60da      	str	r2, [r3, #12]
 8004b00:	e002      	b.n	8004b08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004b14:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3728      	adds	r7, #40	@ 0x28
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b22:	bf00      	nop
 8004b24:	40008000 	.word	0x40008000
 8004b28:	00f42400 	.word	0x00f42400

08004b2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b38:	f003 0308 	and.w	r3, r3, #8
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00a      	beq.n	8004b9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	f003 0304 	and.w	r3, r3, #4
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00a      	beq.n	8004bbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc0:	f003 0310 	and.w	r3, r3, #16
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00a      	beq.n	8004bde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d01a      	beq.n	8004c42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c2a:	d10a      	bne.n	8004c42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00a      	beq.n	8004c64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	605a      	str	r2, [r3, #4]
  }
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b098      	sub	sp, #96	@ 0x60
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c80:	f7fc faec 	bl	800125c <HAL_GetTick>
 8004c84:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d12e      	bne.n	8004cf2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f88c 	bl	8004dc0 <UART_WaitOnFlagUntilTimeout>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d021      	beq.n	8004cf2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb6:	e853 3f00 	ldrex	r3, [r3]
 8004cba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ccc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cd4:	e841 2300 	strex	r3, r2, [r1]
 8004cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e6      	bne.n	8004cae <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e062      	b.n	8004db8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	d149      	bne.n	8004d94 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f856 	bl	8004dc0 <UART_WaitOnFlagUntilTimeout>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d03c      	beq.n	8004d94 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d22:	e853 3f00 	ldrex	r3, [r3]
 8004d26:	623b      	str	r3, [r7, #32]
   return(result);
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	461a      	mov	r2, r3
 8004d36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d38:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d40:	e841 2300 	strex	r3, r2, [r1]
 8004d44:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1e6      	bne.n	8004d1a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3308      	adds	r3, #8
 8004d52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	e853 3f00 	ldrex	r3, [r3]
 8004d5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 0301 	bic.w	r3, r3, #1
 8004d62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3308      	adds	r3, #8
 8004d6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d6c:	61fa      	str	r2, [r7, #28]
 8004d6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d70:	69b9      	ldr	r1, [r7, #24]
 8004d72:	69fa      	ldr	r2, [r7, #28]
 8004d74:	e841 2300 	strex	r3, r2, [r1]
 8004d78:	617b      	str	r3, [r7, #20]
   return(result);
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1e5      	bne.n	8004d4c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2220      	movs	r2, #32
 8004d84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e011      	b.n	8004db8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2220      	movs	r2, #32
 8004d98:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3758      	adds	r7, #88	@ 0x58
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	603b      	str	r3, [r7, #0]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dd0:	e04f      	b.n	8004e72 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd8:	d04b      	beq.n	8004e72 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dda:	f7fc fa3f 	bl	800125c <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d302      	bcc.n	8004df0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e04e      	b.n	8004e92 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0304 	and.w	r3, r3, #4
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d037      	beq.n	8004e72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	2b80      	cmp	r3, #128	@ 0x80
 8004e06:	d034      	beq.n	8004e72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2b40      	cmp	r3, #64	@ 0x40
 8004e0c:	d031      	beq.n	8004e72 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	f003 0308 	and.w	r3, r3, #8
 8004e18:	2b08      	cmp	r3, #8
 8004e1a:	d110      	bne.n	8004e3e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2208      	movs	r2, #8
 8004e22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 f838 	bl	8004e9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2208      	movs	r2, #8
 8004e2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e029      	b.n	8004e92 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e4c:	d111      	bne.n	8004e72 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 f81e 	bl	8004e9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2220      	movs	r2, #32
 8004e62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e00f      	b.n	8004e92 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69da      	ldr	r2, [r3, #28]
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	bf0c      	ite	eq
 8004e82:	2301      	moveq	r3, #1
 8004e84:	2300      	movne	r3, #0
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	461a      	mov	r2, r3
 8004e8a:	79fb      	ldrb	r3, [r7, #7]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d0a0      	beq.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b095      	sub	sp, #84	@ 0x54
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eaa:	e853 3f00 	ldrex	r3, [r3]
 8004eae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ec0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ec2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ec6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ec8:	e841 2300 	strex	r3, r2, [r1]
 8004ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1e6      	bne.n	8004ea2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3308      	adds	r3, #8
 8004eda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	e853 3f00 	ldrex	r3, [r3]
 8004ee2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	f023 0301 	bic.w	r3, r3, #1
 8004eea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3308      	adds	r3, #8
 8004ef2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ef4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004efa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004efc:	e841 2300 	strex	r3, r2, [r1]
 8004f00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1e5      	bne.n	8004ed4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d118      	bne.n	8004f42 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	e853 3f00 	ldrex	r3, [r3]
 8004f1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	f023 0310 	bic.w	r3, r3, #16
 8004f24:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f2e:	61bb      	str	r3, [r7, #24]
 8004f30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f32:	6979      	ldr	r1, [r7, #20]
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	e841 2300 	strex	r3, r2, [r1]
 8004f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1e6      	bne.n	8004f10 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f56:	bf00      	nop
 8004f58:	3754      	adds	r7, #84	@ 0x54
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b084      	sub	sp, #16
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f7ff fb05 	bl	8004590 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f86:	bf00      	nop
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b088      	sub	sp, #32
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	e853 3f00 	ldrex	r3, [r3]
 8004fa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004faa:	61fb      	str	r3, [r7, #28]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	61bb      	str	r3, [r7, #24]
 8004fb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb8:	6979      	ldr	r1, [r7, #20]
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	e841 2300 	strex	r3, r2, [r1]
 8004fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1e6      	bne.n	8004f96 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff fad1 	bl	800457c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fda:	bf00      	nop
 8004fdc:	3720      	adds	r7, #32
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b083      	sub	sp, #12
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004fea:	bf00      	nop
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b085      	sub	sp, #20
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005000:	2300      	movs	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005004:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005008:	2b84      	cmp	r3, #132	@ 0x84
 800500a:	d005      	beq.n	8005018 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800500c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4413      	add	r3, r2
 8005014:	3303      	adds	r3, #3
 8005016:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005018:	68fb      	ldr	r3, [r7, #12]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800502a:	f000 fb8d 	bl	8005748 <vTaskStartScheduler>
  
  return osOK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	bd80      	pop	{r7, pc}

08005034 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005036:	b089      	sub	sp, #36	@ 0x24
 8005038:	af04      	add	r7, sp, #16
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d020      	beq.n	8005088 <osThreadCreate+0x54>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d01c      	beq.n	8005088 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685c      	ldr	r4, [r3, #4]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691e      	ldr	r6, [r3, #16]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005060:	4618      	mov	r0, r3
 8005062:	f7ff ffc8 	bl	8004ff6 <makeFreeRtosPriority>
 8005066:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005070:	9202      	str	r2, [sp, #8]
 8005072:	9301      	str	r3, [sp, #4]
 8005074:	9100      	str	r1, [sp, #0]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	4632      	mov	r2, r6
 800507a:	4629      	mov	r1, r5
 800507c:	4620      	mov	r0, r4
 800507e:	f000 f8ed 	bl	800525c <xTaskCreateStatic>
 8005082:	4603      	mov	r3, r0
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	e01c      	b.n	80050c2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685c      	ldr	r4, [r3, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005094:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff ffaa 	bl	8004ff6 <makeFreeRtosPriority>
 80050a2:	4602      	mov	r2, r0
 80050a4:	f107 030c 	add.w	r3, r7, #12
 80050a8:	9301      	str	r3, [sp, #4]
 80050aa:	9200      	str	r2, [sp, #0]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	4632      	mov	r2, r6
 80050b0:	4629      	mov	r1, r5
 80050b2:	4620      	mov	r0, r4
 80050b4:	f000 f932 	bl	800531c <xTaskCreate>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d001      	beq.n	80050c2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80050be:	2300      	movs	r3, #0
 80050c0:	e000      	b.n	80050c4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80050c2:	68fb      	ldr	r3, [r7, #12]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050cc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <osDelay+0x16>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	e000      	b.n	80050e4 <osDelay+0x18>
 80050e2:	2301      	movs	r3, #1
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 faf9 	bl	80056dc <vTaskDelay>
  
  return osOK;
 80050ea:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f103 0208 	add.w	r2, r3, #8
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f04f 32ff 	mov.w	r2, #4294967295
 800510c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f103 0208 	add.w	r2, r3, #8
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f103 0208 	add.w	r2, r3, #8
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800514e:	b480      	push	{r7}
 8005150:	b085      	sub	sp, #20
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	601a      	str	r2, [r3, #0]
}
 800518a:	bf00      	nop
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005196:	b480      	push	{r7}
 8005198:	b085      	sub	sp, #20
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ac:	d103      	bne.n	80051b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	e00c      	b.n	80051d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	3308      	adds	r3, #8
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	e002      	b.n	80051c4 <vListInsert+0x2e>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d2f6      	bcs.n	80051be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	601a      	str	r2, [r3, #0]
}
 80051fc:	bf00      	nop
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	6892      	ldr	r2, [r2, #8]
 800521e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	6852      	ldr	r2, [r2, #4]
 8005228:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	429a      	cmp	r2, r3
 8005232:	d103      	bne.n	800523c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	1e5a      	subs	r2, r3, #1
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800525c:	b580      	push	{r7, lr}
 800525e:	b08e      	sub	sp, #56	@ 0x38
 8005260:	af04      	add	r7, sp, #16
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
 8005268:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800526a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10b      	bne.n	8005288 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005282:	bf00      	nop
 8005284:	bf00      	nop
 8005286:	e7fd      	b.n	8005284 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10b      	bne.n	80052a6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800528e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	61fb      	str	r3, [r7, #28]
}
 80052a0:	bf00      	nop
 80052a2:	bf00      	nop
 80052a4:	e7fd      	b.n	80052a2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052a6:	23a0      	movs	r3, #160	@ 0xa0
 80052a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	2ba0      	cmp	r3, #160	@ 0xa0
 80052ae:	d00b      	beq.n	80052c8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80052b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	61bb      	str	r3, [r7, #24]
}
 80052c2:	bf00      	nop
 80052c4:	bf00      	nop
 80052c6:	e7fd      	b.n	80052c4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80052c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80052ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01e      	beq.n	800530e <xTaskCreateStatic+0xb2>
 80052d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d01b      	beq.n	800530e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80052da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052de:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80052e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052e8:	2300      	movs	r3, #0
 80052ea:	9303      	str	r3, [sp, #12]
 80052ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ee:	9302      	str	r3, [sp, #8]
 80052f0:	f107 0314 	add.w	r3, r7, #20
 80052f4:	9301      	str	r3, [sp, #4]
 80052f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	68b9      	ldr	r1, [r7, #8]
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 f851 	bl	80053a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005306:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005308:	f000 f8ee 	bl	80054e8 <prvAddNewTaskToReadyList>
 800530c:	e001      	b.n	8005312 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800530e:	2300      	movs	r3, #0
 8005310:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005312:	697b      	ldr	r3, [r7, #20]
	}
 8005314:	4618      	mov	r0, r3
 8005316:	3728      	adds	r7, #40	@ 0x28
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08c      	sub	sp, #48	@ 0x30
 8005320:	af04      	add	r7, sp, #16
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	603b      	str	r3, [r7, #0]
 8005328:	4613      	mov	r3, r2
 800532a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800532c:	88fb      	ldrh	r3, [r7, #6]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4618      	mov	r0, r3
 8005332:	f000 ff91 	bl	8006258 <pvPortMalloc>
 8005336:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00e      	beq.n	800535c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800533e:	20a0      	movs	r0, #160	@ 0xa0
 8005340:	f000 ff8a 	bl	8006258 <pvPortMalloc>
 8005344:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	631a      	str	r2, [r3, #48]	@ 0x30
 8005352:	e005      	b.n	8005360 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005354:	6978      	ldr	r0, [r7, #20]
 8005356:	f001 f84d 	bl	80063f4 <vPortFree>
 800535a:	e001      	b.n	8005360 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800535c:	2300      	movs	r3, #0
 800535e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d017      	beq.n	8005396 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800536e:	88fa      	ldrh	r2, [r7, #6]
 8005370:	2300      	movs	r3, #0
 8005372:	9303      	str	r3, [sp, #12]
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	9302      	str	r3, [sp, #8]
 8005378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800537a:	9301      	str	r3, [sp, #4]
 800537c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	68b9      	ldr	r1, [r7, #8]
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f000 f80f 	bl	80053a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800538a:	69f8      	ldr	r0, [r7, #28]
 800538c:	f000 f8ac 	bl	80054e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005390:	2301      	movs	r3, #1
 8005392:	61bb      	str	r3, [r7, #24]
 8005394:	e002      	b.n	800539c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005396:	f04f 33ff 	mov.w	r3, #4294967295
 800539a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800539c:	69bb      	ldr	r3, [r7, #24]
	}
 800539e:	4618      	mov	r0, r3
 80053a0:	3720      	adds	r7, #32
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
	...

080053a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b088      	sub	sp, #32
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80053b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80053c0:	3b01      	subs	r3, #1
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	f023 0307 	bic.w	r3, r3, #7
 80053ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	f003 0307 	and.w	r3, r3, #7
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00b      	beq.n	80053f2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80053da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	617b      	str	r3, [r7, #20]
}
 80053ec:	bf00      	nop
 80053ee:	bf00      	nop
 80053f0:	e7fd      	b.n	80053ee <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d01f      	beq.n	8005438 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053f8:	2300      	movs	r3, #0
 80053fa:	61fb      	str	r3, [r7, #28]
 80053fc:	e012      	b.n	8005424 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	4413      	add	r3, r2
 8005404:	7819      	ldrb	r1, [r3, #0]
 8005406:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	4413      	add	r3, r2
 800540c:	3334      	adds	r3, #52	@ 0x34
 800540e:	460a      	mov	r2, r1
 8005410:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	4413      	add	r3, r2
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d006      	beq.n	800542c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	3301      	adds	r3, #1
 8005422:	61fb      	str	r3, [r7, #28]
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	2b0f      	cmp	r3, #15
 8005428:	d9e9      	bls.n	80053fe <prvInitialiseNewTask+0x56>
 800542a:	e000      	b.n	800542e <prvInitialiseNewTask+0x86>
			{
				break;
 800542c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800542e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005436:	e003      	b.n	8005440 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005442:	2b06      	cmp	r3, #6
 8005444:	d901      	bls.n	800544a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005446:	2306      	movs	r3, #6
 8005448:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800544a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800544c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800544e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005452:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005454:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005458:	2200      	movs	r2, #0
 800545a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800545c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545e:	3304      	adds	r3, #4
 8005460:	4618      	mov	r0, r3
 8005462:	f7ff fe67 	bl	8005134 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005468:	3318      	adds	r3, #24
 800546a:	4618      	mov	r0, r3
 800546c:	f7ff fe62 	bl	8005134 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005472:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005474:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005478:	f1c3 0207 	rsb	r2, r3, #7
 800547c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005482:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005484:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005488:	2200      	movs	r2, #0
 800548a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800548e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005490:	2200      	movs	r2, #0
 8005492:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005498:	334c      	adds	r3, #76	@ 0x4c
 800549a:	224c      	movs	r2, #76	@ 0x4c
 800549c:	2100      	movs	r1, #0
 800549e:	4618      	mov	r0, r3
 80054a0:	f001 fd5c 	bl	8006f5c <memset>
 80054a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a6:	4a0d      	ldr	r2, [pc, #52]	@ (80054dc <prvInitialiseNewTask+0x134>)
 80054a8:	651a      	str	r2, [r3, #80]	@ 0x50
 80054aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ac:	4a0c      	ldr	r2, [pc, #48]	@ (80054e0 <prvInitialiseNewTask+0x138>)
 80054ae:	655a      	str	r2, [r3, #84]	@ 0x54
 80054b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b2:	4a0c      	ldr	r2, [pc, #48]	@ (80054e4 <prvInitialiseNewTask+0x13c>)
 80054b4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	68f9      	ldr	r1, [r7, #12]
 80054ba:	69b8      	ldr	r0, [r7, #24]
 80054bc:	f000 fcba 	bl	8005e34 <pxPortInitialiseStack>
 80054c0:	4602      	mov	r2, r0
 80054c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80054c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054d2:	bf00      	nop
 80054d4:	3720      	adds	r7, #32
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	200014ec 	.word	0x200014ec
 80054e0:	20001554 	.word	0x20001554
 80054e4:	200015bc 	.word	0x200015bc

080054e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054f0:	f000 fdd2 	bl	8006098 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80054f4:	4b2a      	ldr	r3, [pc, #168]	@ (80055a0 <prvAddNewTaskToReadyList+0xb8>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	3301      	adds	r3, #1
 80054fa:	4a29      	ldr	r2, [pc, #164]	@ (80055a0 <prvAddNewTaskToReadyList+0xb8>)
 80054fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80054fe:	4b29      	ldr	r3, [pc, #164]	@ (80055a4 <prvAddNewTaskToReadyList+0xbc>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d109      	bne.n	800551a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005506:	4a27      	ldr	r2, [pc, #156]	@ (80055a4 <prvAddNewTaskToReadyList+0xbc>)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800550c:	4b24      	ldr	r3, [pc, #144]	@ (80055a0 <prvAddNewTaskToReadyList+0xb8>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d110      	bne.n	8005536 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005514:	f000 fb64 	bl	8005be0 <prvInitialiseTaskLists>
 8005518:	e00d      	b.n	8005536 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800551a:	4b23      	ldr	r3, [pc, #140]	@ (80055a8 <prvAddNewTaskToReadyList+0xc0>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d109      	bne.n	8005536 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005522:	4b20      	ldr	r3, [pc, #128]	@ (80055a4 <prvAddNewTaskToReadyList+0xbc>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552c:	429a      	cmp	r2, r3
 800552e:	d802      	bhi.n	8005536 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005530:	4a1c      	ldr	r2, [pc, #112]	@ (80055a4 <prvAddNewTaskToReadyList+0xbc>)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005536:	4b1d      	ldr	r3, [pc, #116]	@ (80055ac <prvAddNewTaskToReadyList+0xc4>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	3301      	adds	r3, #1
 800553c:	4a1b      	ldr	r2, [pc, #108]	@ (80055ac <prvAddNewTaskToReadyList+0xc4>)
 800553e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005544:	2201      	movs	r2, #1
 8005546:	409a      	lsls	r2, r3
 8005548:	4b19      	ldr	r3, [pc, #100]	@ (80055b0 <prvAddNewTaskToReadyList+0xc8>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4313      	orrs	r3, r2
 800554e:	4a18      	ldr	r2, [pc, #96]	@ (80055b0 <prvAddNewTaskToReadyList+0xc8>)
 8005550:	6013      	str	r3, [r2, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005556:	4613      	mov	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4a15      	ldr	r2, [pc, #84]	@ (80055b4 <prvAddNewTaskToReadyList+0xcc>)
 8005560:	441a      	add	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	3304      	adds	r3, #4
 8005566:	4619      	mov	r1, r3
 8005568:	4610      	mov	r0, r2
 800556a:	f7ff fdf0 	bl	800514e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800556e:	f000 fdc5 	bl	80060fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005572:	4b0d      	ldr	r3, [pc, #52]	@ (80055a8 <prvAddNewTaskToReadyList+0xc0>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00e      	beq.n	8005598 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800557a:	4b0a      	ldr	r3, [pc, #40]	@ (80055a4 <prvAddNewTaskToReadyList+0xbc>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005584:	429a      	cmp	r2, r3
 8005586:	d207      	bcs.n	8005598 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005588:	4b0b      	ldr	r3, [pc, #44]	@ (80055b8 <prvAddNewTaskToReadyList+0xd0>)
 800558a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005598:	bf00      	nop
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	200008e0 	.word	0x200008e0
 80055a4:	200007e0 	.word	0x200007e0
 80055a8:	200008ec 	.word	0x200008ec
 80055ac:	200008fc 	.word	0x200008fc
 80055b0:	200008e8 	.word	0x200008e8
 80055b4:	200007e4 	.word	0x200007e4
 80055b8:	e000ed04 	.word	0xe000ed04

080055bc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80055c4:	f000 fd68 	bl	8006098 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d102      	bne.n	80055d4 <vTaskDelete+0x18>
 80055ce:	4b39      	ldr	r3, [pc, #228]	@ (80056b4 <vTaskDelete+0xf8>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	e000      	b.n	80055d6 <vTaskDelete+0x1a>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	3304      	adds	r3, #4
 80055dc:	4618      	mov	r0, r3
 80055de:	f7ff fe13 	bl	8005208 <uxListRemove>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d115      	bne.n	8005614 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ec:	4932      	ldr	r1, [pc, #200]	@ (80056b8 <vTaskDelete+0xfc>)
 80055ee:	4613      	mov	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	440b      	add	r3, r1
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10a      	bne.n	8005614 <vTaskDelete+0x58>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005602:	2201      	movs	r2, #1
 8005604:	fa02 f303 	lsl.w	r3, r2, r3
 8005608:	43da      	mvns	r2, r3
 800560a:	4b2c      	ldr	r3, [pc, #176]	@ (80056bc <vTaskDelete+0x100>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4013      	ands	r3, r2
 8005610:	4a2a      	ldr	r2, [pc, #168]	@ (80056bc <vTaskDelete+0x100>)
 8005612:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005618:	2b00      	cmp	r3, #0
 800561a:	d004      	beq.n	8005626 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	3318      	adds	r3, #24
 8005620:	4618      	mov	r0, r3
 8005622:	f7ff fdf1 	bl	8005208 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005626:	4b26      	ldr	r3, [pc, #152]	@ (80056c0 <vTaskDelete+0x104>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3301      	adds	r3, #1
 800562c:	4a24      	ldr	r2, [pc, #144]	@ (80056c0 <vTaskDelete+0x104>)
 800562e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005630:	4b20      	ldr	r3, [pc, #128]	@ (80056b4 <vTaskDelete+0xf8>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	429a      	cmp	r2, r3
 8005638:	d10b      	bne.n	8005652 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	3304      	adds	r3, #4
 800563e:	4619      	mov	r1, r3
 8005640:	4820      	ldr	r0, [pc, #128]	@ (80056c4 <vTaskDelete+0x108>)
 8005642:	f7ff fd84 	bl	800514e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005646:	4b20      	ldr	r3, [pc, #128]	@ (80056c8 <vTaskDelete+0x10c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3301      	adds	r3, #1
 800564c:	4a1e      	ldr	r2, [pc, #120]	@ (80056c8 <vTaskDelete+0x10c>)
 800564e:	6013      	str	r3, [r2, #0]
 8005650:	e009      	b.n	8005666 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005652:	4b1e      	ldr	r3, [pc, #120]	@ (80056cc <vTaskDelete+0x110>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3b01      	subs	r3, #1
 8005658:	4a1c      	ldr	r2, [pc, #112]	@ (80056cc <vTaskDelete+0x110>)
 800565a:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 fb2d 	bl	8005cbc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005662:	f000 fb61 	bl	8005d28 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8005666:	f000 fd49 	bl	80060fc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800566a:	4b19      	ldr	r3, [pc, #100]	@ (80056d0 <vTaskDelete+0x114>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d01c      	beq.n	80056ac <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 8005672:	4b10      	ldr	r3, [pc, #64]	@ (80056b4 <vTaskDelete+0xf8>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	429a      	cmp	r2, r3
 800567a:	d117      	bne.n	80056ac <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800567c:	4b15      	ldr	r3, [pc, #84]	@ (80056d4 <vTaskDelete+0x118>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00b      	beq.n	800569c <vTaskDelete+0xe0>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	60bb      	str	r3, [r7, #8]
}
 8005696:	bf00      	nop
 8005698:	bf00      	nop
 800569a:	e7fd      	b.n	8005698 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800569c:	4b0e      	ldr	r3, [pc, #56]	@ (80056d8 <vTaskDelete+0x11c>)
 800569e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80056ac:	bf00      	nop
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	200007e0 	.word	0x200007e0
 80056b8:	200007e4 	.word	0x200007e4
 80056bc:	200008e8 	.word	0x200008e8
 80056c0:	200008fc 	.word	0x200008fc
 80056c4:	200008b4 	.word	0x200008b4
 80056c8:	200008c8 	.word	0x200008c8
 80056cc:	200008e0 	.word	0x200008e0
 80056d0:	200008ec 	.word	0x200008ec
 80056d4:	20000908 	.word	0x20000908
 80056d8:	e000ed04 	.word	0xe000ed04

080056dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056e4:	2300      	movs	r3, #0
 80056e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d018      	beq.n	8005720 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056ee:	4b14      	ldr	r3, [pc, #80]	@ (8005740 <vTaskDelay+0x64>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00b      	beq.n	800570e <vTaskDelay+0x32>
	__asm volatile
 80056f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	60bb      	str	r3, [r7, #8]
}
 8005708:	bf00      	nop
 800570a:	bf00      	nop
 800570c:	e7fd      	b.n	800570a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800570e:	f000 f885 	bl	800581c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005712:	2100      	movs	r1, #0
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fb27 	bl	8005d68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800571a:	f000 f88d 	bl	8005838 <xTaskResumeAll>
 800571e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d107      	bne.n	8005736 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005726:	4b07      	ldr	r3, [pc, #28]	@ (8005744 <vTaskDelay+0x68>)
 8005728:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005736:	bf00      	nop
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	20000908 	.word	0x20000908
 8005744:	e000ed04 	.word	0xe000ed04

08005748 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b08a      	sub	sp, #40	@ 0x28
 800574c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800574e:	2300      	movs	r3, #0
 8005750:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005752:	2300      	movs	r3, #0
 8005754:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005756:	463a      	mov	r2, r7
 8005758:	1d39      	adds	r1, r7, #4
 800575a:	f107 0308 	add.w	r3, r7, #8
 800575e:	4618      	mov	r0, r3
 8005760:	f7fa fefe 	bl	8000560 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005764:	6839      	ldr	r1, [r7, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	9202      	str	r2, [sp, #8]
 800576c:	9301      	str	r3, [sp, #4]
 800576e:	2300      	movs	r3, #0
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	2300      	movs	r3, #0
 8005774:	460a      	mov	r2, r1
 8005776:	4921      	ldr	r1, [pc, #132]	@ (80057fc <vTaskStartScheduler+0xb4>)
 8005778:	4821      	ldr	r0, [pc, #132]	@ (8005800 <vTaskStartScheduler+0xb8>)
 800577a:	f7ff fd6f 	bl	800525c <xTaskCreateStatic>
 800577e:	4603      	mov	r3, r0
 8005780:	4a20      	ldr	r2, [pc, #128]	@ (8005804 <vTaskStartScheduler+0xbc>)
 8005782:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005784:	4b1f      	ldr	r3, [pc, #124]	@ (8005804 <vTaskStartScheduler+0xbc>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800578c:	2301      	movs	r3, #1
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	e001      	b.n	8005796 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005792:	2300      	movs	r3, #0
 8005794:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d11b      	bne.n	80057d4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800579c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a0:	f383 8811 	msr	BASEPRI, r3
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	613b      	str	r3, [r7, #16]
}
 80057ae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057b0:	4b15      	ldr	r3, [pc, #84]	@ (8005808 <vTaskStartScheduler+0xc0>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	334c      	adds	r3, #76	@ 0x4c
 80057b6:	4a15      	ldr	r2, [pc, #84]	@ (800580c <vTaskStartScheduler+0xc4>)
 80057b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057ba:	4b15      	ldr	r3, [pc, #84]	@ (8005810 <vTaskStartScheduler+0xc8>)
 80057bc:	f04f 32ff 	mov.w	r2, #4294967295
 80057c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057c2:	4b14      	ldr	r3, [pc, #80]	@ (8005814 <vTaskStartScheduler+0xcc>)
 80057c4:	2201      	movs	r2, #1
 80057c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057c8:	4b13      	ldr	r3, [pc, #76]	@ (8005818 <vTaskStartScheduler+0xd0>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057ce:	f000 fbbf 	bl	8005f50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057d2:	e00f      	b.n	80057f4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057da:	d10b      	bne.n	80057f4 <vTaskStartScheduler+0xac>
	__asm volatile
 80057dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	60fb      	str	r3, [r7, #12]
}
 80057ee:	bf00      	nop
 80057f0:	bf00      	nop
 80057f2:	e7fd      	b.n	80057f0 <vTaskStartScheduler+0xa8>
}
 80057f4:	bf00      	nop
 80057f6:	3718      	adds	r7, #24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	08007d28 	.word	0x08007d28
 8005800:	08005bb1 	.word	0x08005bb1
 8005804:	20000904 	.word	0x20000904
 8005808:	200007e0 	.word	0x200007e0
 800580c:	20000024 	.word	0x20000024
 8005810:	20000900 	.word	0x20000900
 8005814:	200008ec 	.word	0x200008ec
 8005818:	200008e4 	.word	0x200008e4

0800581c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005820:	4b04      	ldr	r3, [pc, #16]	@ (8005834 <vTaskSuspendAll+0x18>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3301      	adds	r3, #1
 8005826:	4a03      	ldr	r2, [pc, #12]	@ (8005834 <vTaskSuspendAll+0x18>)
 8005828:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800582a:	bf00      	nop
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	20000908 	.word	0x20000908

08005838 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800583e:	2300      	movs	r3, #0
 8005840:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005842:	2300      	movs	r3, #0
 8005844:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005846:	4b42      	ldr	r3, [pc, #264]	@ (8005950 <xTaskResumeAll+0x118>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10b      	bne.n	8005866 <xTaskResumeAll+0x2e>
	__asm volatile
 800584e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	603b      	str	r3, [r7, #0]
}
 8005860:	bf00      	nop
 8005862:	bf00      	nop
 8005864:	e7fd      	b.n	8005862 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005866:	f000 fc17 	bl	8006098 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800586a:	4b39      	ldr	r3, [pc, #228]	@ (8005950 <xTaskResumeAll+0x118>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3b01      	subs	r3, #1
 8005870:	4a37      	ldr	r2, [pc, #220]	@ (8005950 <xTaskResumeAll+0x118>)
 8005872:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005874:	4b36      	ldr	r3, [pc, #216]	@ (8005950 <xTaskResumeAll+0x118>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d161      	bne.n	8005940 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800587c:	4b35      	ldr	r3, [pc, #212]	@ (8005954 <xTaskResumeAll+0x11c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d05d      	beq.n	8005940 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005884:	e02e      	b.n	80058e4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005886:	4b34      	ldr	r3, [pc, #208]	@ (8005958 <xTaskResumeAll+0x120>)
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	3318      	adds	r3, #24
 8005892:	4618      	mov	r0, r3
 8005894:	f7ff fcb8 	bl	8005208 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	3304      	adds	r3, #4
 800589c:	4618      	mov	r0, r3
 800589e:	f7ff fcb3 	bl	8005208 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a6:	2201      	movs	r2, #1
 80058a8:	409a      	lsls	r2, r3
 80058aa:	4b2c      	ldr	r3, [pc, #176]	@ (800595c <xTaskResumeAll+0x124>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	4a2a      	ldr	r2, [pc, #168]	@ (800595c <xTaskResumeAll+0x124>)
 80058b2:	6013      	str	r3, [r2, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058b8:	4613      	mov	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4a27      	ldr	r2, [pc, #156]	@ (8005960 <xTaskResumeAll+0x128>)
 80058c2:	441a      	add	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	3304      	adds	r3, #4
 80058c8:	4619      	mov	r1, r3
 80058ca:	4610      	mov	r0, r2
 80058cc:	f7ff fc3f 	bl	800514e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058d4:	4b23      	ldr	r3, [pc, #140]	@ (8005964 <xTaskResumeAll+0x12c>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058da:	429a      	cmp	r2, r3
 80058dc:	d302      	bcc.n	80058e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80058de:	4b22      	ldr	r3, [pc, #136]	@ (8005968 <xTaskResumeAll+0x130>)
 80058e0:	2201      	movs	r2, #1
 80058e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058e4:	4b1c      	ldr	r3, [pc, #112]	@ (8005958 <xTaskResumeAll+0x120>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1cc      	bne.n	8005886 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058f2:	f000 fa19 	bl	8005d28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058f6:	4b1d      	ldr	r3, [pc, #116]	@ (800596c <xTaskResumeAll+0x134>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d010      	beq.n	8005924 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005902:	f000 f837 	bl	8005974 <xTaskIncrementTick>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d002      	beq.n	8005912 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800590c:	4b16      	ldr	r3, [pc, #88]	@ (8005968 <xTaskResumeAll+0x130>)
 800590e:	2201      	movs	r2, #1
 8005910:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	3b01      	subs	r3, #1
 8005916:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1f1      	bne.n	8005902 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800591e:	4b13      	ldr	r3, [pc, #76]	@ (800596c <xTaskResumeAll+0x134>)
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005924:	4b10      	ldr	r3, [pc, #64]	@ (8005968 <xTaskResumeAll+0x130>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d009      	beq.n	8005940 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800592c:	2301      	movs	r3, #1
 800592e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005930:	4b0f      	ldr	r3, [pc, #60]	@ (8005970 <xTaskResumeAll+0x138>)
 8005932:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005940:	f000 fbdc 	bl	80060fc <vPortExitCritical>

	return xAlreadyYielded;
 8005944:	68bb      	ldr	r3, [r7, #8]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	20000908 	.word	0x20000908
 8005954:	200008e0 	.word	0x200008e0
 8005958:	200008a0 	.word	0x200008a0
 800595c:	200008e8 	.word	0x200008e8
 8005960:	200007e4 	.word	0x200007e4
 8005964:	200007e0 	.word	0x200007e0
 8005968:	200008f4 	.word	0x200008f4
 800596c:	200008f0 	.word	0x200008f0
 8005970:	e000ed04 	.word	0xe000ed04

08005974 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800597a:	2300      	movs	r3, #0
 800597c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800597e:	4b4f      	ldr	r3, [pc, #316]	@ (8005abc <xTaskIncrementTick+0x148>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	f040 808f 	bne.w	8005aa6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005988:	4b4d      	ldr	r3, [pc, #308]	@ (8005ac0 <xTaskIncrementTick+0x14c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	3301      	adds	r3, #1
 800598e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005990:	4a4b      	ldr	r2, [pc, #300]	@ (8005ac0 <xTaskIncrementTick+0x14c>)
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d121      	bne.n	80059e0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800599c:	4b49      	ldr	r3, [pc, #292]	@ (8005ac4 <xTaskIncrementTick+0x150>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00b      	beq.n	80059be <xTaskIncrementTick+0x4a>
	__asm volatile
 80059a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	603b      	str	r3, [r7, #0]
}
 80059b8:	bf00      	nop
 80059ba:	bf00      	nop
 80059bc:	e7fd      	b.n	80059ba <xTaskIncrementTick+0x46>
 80059be:	4b41      	ldr	r3, [pc, #260]	@ (8005ac4 <xTaskIncrementTick+0x150>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	4b40      	ldr	r3, [pc, #256]	@ (8005ac8 <xTaskIncrementTick+0x154>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a3e      	ldr	r2, [pc, #248]	@ (8005ac4 <xTaskIncrementTick+0x150>)
 80059ca:	6013      	str	r3, [r2, #0]
 80059cc:	4a3e      	ldr	r2, [pc, #248]	@ (8005ac8 <xTaskIncrementTick+0x154>)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6013      	str	r3, [r2, #0]
 80059d2:	4b3e      	ldr	r3, [pc, #248]	@ (8005acc <xTaskIncrementTick+0x158>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3301      	adds	r3, #1
 80059d8:	4a3c      	ldr	r2, [pc, #240]	@ (8005acc <xTaskIncrementTick+0x158>)
 80059da:	6013      	str	r3, [r2, #0]
 80059dc:	f000 f9a4 	bl	8005d28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059e0:	4b3b      	ldr	r3, [pc, #236]	@ (8005ad0 <xTaskIncrementTick+0x15c>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d348      	bcc.n	8005a7c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059ea:	4b36      	ldr	r3, [pc, #216]	@ (8005ac4 <xTaskIncrementTick+0x150>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d104      	bne.n	80059fe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059f4:	4b36      	ldr	r3, [pc, #216]	@ (8005ad0 <xTaskIncrementTick+0x15c>)
 80059f6:	f04f 32ff 	mov.w	r2, #4294967295
 80059fa:	601a      	str	r2, [r3, #0]
					break;
 80059fc:	e03e      	b.n	8005a7c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059fe:	4b31      	ldr	r3, [pc, #196]	@ (8005ac4 <xTaskIncrementTick+0x150>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d203      	bcs.n	8005a1e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a16:	4a2e      	ldr	r2, [pc, #184]	@ (8005ad0 <xTaskIncrementTick+0x15c>)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a1c:	e02e      	b.n	8005a7c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	3304      	adds	r3, #4
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7ff fbf0 	bl	8005208 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d004      	beq.n	8005a3a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	3318      	adds	r3, #24
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7ff fbe7 	bl	8005208 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a3e:	2201      	movs	r2, #1
 8005a40:	409a      	lsls	r2, r3
 8005a42:	4b24      	ldr	r3, [pc, #144]	@ (8005ad4 <xTaskIncrementTick+0x160>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	4a22      	ldr	r2, [pc, #136]	@ (8005ad4 <xTaskIncrementTick+0x160>)
 8005a4a:	6013      	str	r3, [r2, #0]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a50:	4613      	mov	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4a1f      	ldr	r2, [pc, #124]	@ (8005ad8 <xTaskIncrementTick+0x164>)
 8005a5a:	441a      	add	r2, r3
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	3304      	adds	r3, #4
 8005a60:	4619      	mov	r1, r3
 8005a62:	4610      	mov	r0, r2
 8005a64:	f7ff fb73 	bl	800514e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8005adc <xTaskIncrementTick+0x168>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d3b9      	bcc.n	80059ea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005a76:	2301      	movs	r3, #1
 8005a78:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a7a:	e7b6      	b.n	80059ea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a7c:	4b17      	ldr	r3, [pc, #92]	@ (8005adc <xTaskIncrementTick+0x168>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a82:	4915      	ldr	r1, [pc, #84]	@ (8005ad8 <xTaskIncrementTick+0x164>)
 8005a84:	4613      	mov	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	440b      	add	r3, r1
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d901      	bls.n	8005a98 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005a94:	2301      	movs	r3, #1
 8005a96:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a98:	4b11      	ldr	r3, [pc, #68]	@ (8005ae0 <xTaskIncrementTick+0x16c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d007      	beq.n	8005ab0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	e004      	b.n	8005ab0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8005ae4 <xTaskIncrementTick+0x170>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	4a0d      	ldr	r2, [pc, #52]	@ (8005ae4 <xTaskIncrementTick+0x170>)
 8005aae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005ab0:	697b      	ldr	r3, [r7, #20]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	20000908 	.word	0x20000908
 8005ac0:	200008e4 	.word	0x200008e4
 8005ac4:	20000898 	.word	0x20000898
 8005ac8:	2000089c 	.word	0x2000089c
 8005acc:	200008f8 	.word	0x200008f8
 8005ad0:	20000900 	.word	0x20000900
 8005ad4:	200008e8 	.word	0x200008e8
 8005ad8:	200007e4 	.word	0x200007e4
 8005adc:	200007e0 	.word	0x200007e0
 8005ae0:	200008f4 	.word	0x200008f4
 8005ae4:	200008f0 	.word	0x200008f0

08005ae8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005aee:	4b2a      	ldr	r3, [pc, #168]	@ (8005b98 <vTaskSwitchContext+0xb0>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005af6:	4b29      	ldr	r3, [pc, #164]	@ (8005b9c <vTaskSwitchContext+0xb4>)
 8005af8:	2201      	movs	r2, #1
 8005afa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005afc:	e045      	b.n	8005b8a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005afe:	4b27      	ldr	r3, [pc, #156]	@ (8005b9c <vTaskSwitchContext+0xb4>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b04:	4b26      	ldr	r3, [pc, #152]	@ (8005ba0 <vTaskSwitchContext+0xb8>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	fab3 f383 	clz	r3, r3
 8005b10:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005b12:	7afb      	ldrb	r3, [r7, #11]
 8005b14:	f1c3 031f 	rsb	r3, r3, #31
 8005b18:	617b      	str	r3, [r7, #20]
 8005b1a:	4922      	ldr	r1, [pc, #136]	@ (8005ba4 <vTaskSwitchContext+0xbc>)
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4413      	add	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	440b      	add	r3, r1
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10b      	bne.n	8005b46 <vTaskSwitchContext+0x5e>
	__asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	607b      	str	r3, [r7, #4]
}
 8005b40:	bf00      	nop
 8005b42:	bf00      	nop
 8005b44:	e7fd      	b.n	8005b42 <vTaskSwitchContext+0x5a>
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4a14      	ldr	r2, [pc, #80]	@ (8005ba4 <vTaskSwitchContext+0xbc>)
 8005b52:	4413      	add	r3, r2
 8005b54:	613b      	str	r3, [r7, #16]
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	605a      	str	r2, [r3, #4]
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	3308      	adds	r3, #8
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d104      	bne.n	8005b76 <vTaskSwitchContext+0x8e>
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	685a      	ldr	r2, [r3, #4]
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	605a      	str	r2, [r3, #4]
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8005ba8 <vTaskSwitchContext+0xc0>)
 8005b7e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b80:	4b09      	ldr	r3, [pc, #36]	@ (8005ba8 <vTaskSwitchContext+0xc0>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	334c      	adds	r3, #76	@ 0x4c
 8005b86:	4a09      	ldr	r2, [pc, #36]	@ (8005bac <vTaskSwitchContext+0xc4>)
 8005b88:	6013      	str	r3, [r2, #0]
}
 8005b8a:	bf00      	nop
 8005b8c:	371c      	adds	r7, #28
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	20000908 	.word	0x20000908
 8005b9c:	200008f4 	.word	0x200008f4
 8005ba0:	200008e8 	.word	0x200008e8
 8005ba4:	200007e4 	.word	0x200007e4
 8005ba8:	200007e0 	.word	0x200007e0
 8005bac:	20000024 	.word	0x20000024

08005bb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005bb8:	f000 f852 	bl	8005c60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005bbc:	4b06      	ldr	r3, [pc, #24]	@ (8005bd8 <prvIdleTask+0x28>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d9f9      	bls.n	8005bb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005bc4:	4b05      	ldr	r3, [pc, #20]	@ (8005bdc <prvIdleTask+0x2c>)
 8005bc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005bd4:	e7f0      	b.n	8005bb8 <prvIdleTask+0x8>
 8005bd6:	bf00      	nop
 8005bd8:	200007e4 	.word	0x200007e4
 8005bdc:	e000ed04 	.word	0xe000ed04

08005be0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005be6:	2300      	movs	r3, #0
 8005be8:	607b      	str	r3, [r7, #4]
 8005bea:	e00c      	b.n	8005c06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4413      	add	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4a12      	ldr	r2, [pc, #72]	@ (8005c40 <prvInitialiseTaskLists+0x60>)
 8005bf8:	4413      	add	r3, r2
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7ff fa7a 	bl	80050f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	3301      	adds	r3, #1
 8005c04:	607b      	str	r3, [r7, #4]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b06      	cmp	r3, #6
 8005c0a:	d9ef      	bls.n	8005bec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c0c:	480d      	ldr	r0, [pc, #52]	@ (8005c44 <prvInitialiseTaskLists+0x64>)
 8005c0e:	f7ff fa71 	bl	80050f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c12:	480d      	ldr	r0, [pc, #52]	@ (8005c48 <prvInitialiseTaskLists+0x68>)
 8005c14:	f7ff fa6e 	bl	80050f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c18:	480c      	ldr	r0, [pc, #48]	@ (8005c4c <prvInitialiseTaskLists+0x6c>)
 8005c1a:	f7ff fa6b 	bl	80050f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c1e:	480c      	ldr	r0, [pc, #48]	@ (8005c50 <prvInitialiseTaskLists+0x70>)
 8005c20:	f7ff fa68 	bl	80050f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c24:	480b      	ldr	r0, [pc, #44]	@ (8005c54 <prvInitialiseTaskLists+0x74>)
 8005c26:	f7ff fa65 	bl	80050f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c58 <prvInitialiseTaskLists+0x78>)
 8005c2c:	4a05      	ldr	r2, [pc, #20]	@ (8005c44 <prvInitialiseTaskLists+0x64>)
 8005c2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c30:	4b0a      	ldr	r3, [pc, #40]	@ (8005c5c <prvInitialiseTaskLists+0x7c>)
 8005c32:	4a05      	ldr	r2, [pc, #20]	@ (8005c48 <prvInitialiseTaskLists+0x68>)
 8005c34:	601a      	str	r2, [r3, #0]
}
 8005c36:	bf00      	nop
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	200007e4 	.word	0x200007e4
 8005c44:	20000870 	.word	0x20000870
 8005c48:	20000884 	.word	0x20000884
 8005c4c:	200008a0 	.word	0x200008a0
 8005c50:	200008b4 	.word	0x200008b4
 8005c54:	200008cc 	.word	0x200008cc
 8005c58:	20000898 	.word	0x20000898
 8005c5c:	2000089c 	.word	0x2000089c

08005c60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c66:	e019      	b.n	8005c9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c68:	f000 fa16 	bl	8006098 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c6c:	4b10      	ldr	r3, [pc, #64]	@ (8005cb0 <prvCheckTasksWaitingTermination+0x50>)
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	3304      	adds	r3, #4
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7ff fac5 	bl	8005208 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005cb4 <prvCheckTasksWaitingTermination+0x54>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3b01      	subs	r3, #1
 8005c84:	4a0b      	ldr	r2, [pc, #44]	@ (8005cb4 <prvCheckTasksWaitingTermination+0x54>)
 8005c86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c88:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb8 <prvCheckTasksWaitingTermination+0x58>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8005cb8 <prvCheckTasksWaitingTermination+0x58>)
 8005c90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c92:	f000 fa33 	bl	80060fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f810 	bl	8005cbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c9c:	4b06      	ldr	r3, [pc, #24]	@ (8005cb8 <prvCheckTasksWaitingTermination+0x58>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1e1      	bne.n	8005c68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ca4:	bf00      	nop
 8005ca6:	bf00      	nop
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	200008b4 	.word	0x200008b4
 8005cb4:	200008e0 	.word	0x200008e0
 8005cb8:	200008c8 	.word	0x200008c8

08005cbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	334c      	adds	r3, #76	@ 0x4c
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f001 f95f 	bl	8006f8c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d108      	bne.n	8005cea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f000 fb89 	bl	80063f4 <vPortFree>
				vPortFree( pxTCB );
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fb86 	bl	80063f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ce8:	e019      	b.n	8005d1e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d103      	bne.n	8005cfc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fb7d 	bl	80063f4 <vPortFree>
	}
 8005cfa:	e010      	b.n	8005d1e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d00b      	beq.n	8005d1e <prvDeleteTCB+0x62>
	__asm volatile
 8005d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d0a:	f383 8811 	msr	BASEPRI, r3
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	f3bf 8f4f 	dsb	sy
 8005d16:	60fb      	str	r3, [r7, #12]
}
 8005d18:	bf00      	nop
 8005d1a:	bf00      	nop
 8005d1c:	e7fd      	b.n	8005d1a <prvDeleteTCB+0x5e>
	}
 8005d1e:	bf00      	nop
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
	...

08005d28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8005d60 <prvResetNextTaskUnblockTime+0x38>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d104      	bne.n	8005d42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d38:	4b0a      	ldr	r3, [pc, #40]	@ (8005d64 <prvResetNextTaskUnblockTime+0x3c>)
 8005d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d40:	e008      	b.n	8005d54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d42:	4b07      	ldr	r3, [pc, #28]	@ (8005d60 <prvResetNextTaskUnblockTime+0x38>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	4a04      	ldr	r2, [pc, #16]	@ (8005d64 <prvResetNextTaskUnblockTime+0x3c>)
 8005d52:	6013      	str	r3, [r2, #0]
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	20000898 	.word	0x20000898
 8005d64:	20000900 	.word	0x20000900

08005d68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d72:	4b29      	ldr	r3, [pc, #164]	@ (8005e18 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d78:	4b28      	ldr	r3, [pc, #160]	@ (8005e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3304      	adds	r3, #4
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7ff fa42 	bl	8005208 <uxListRemove>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10b      	bne.n	8005da2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005d8a:	4b24      	ldr	r3, [pc, #144]	@ (8005e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d90:	2201      	movs	r2, #1
 8005d92:	fa02 f303 	lsl.w	r3, r2, r3
 8005d96:	43da      	mvns	r2, r3
 8005d98:	4b21      	ldr	r3, [pc, #132]	@ (8005e20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	4a20      	ldr	r2, [pc, #128]	@ (8005e20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005da0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da8:	d10a      	bne.n	8005dc0 <prvAddCurrentTaskToDelayedList+0x58>
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d007      	beq.n	8005dc0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005db0:	4b1a      	ldr	r3, [pc, #104]	@ (8005e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3304      	adds	r3, #4
 8005db6:	4619      	mov	r1, r3
 8005db8:	481a      	ldr	r0, [pc, #104]	@ (8005e24 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005dba:	f7ff f9c8 	bl	800514e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005dbe:	e026      	b.n	8005e0e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005dc8:	4b14      	ldr	r3, [pc, #80]	@ (8005e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d209      	bcs.n	8005dec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dd8:	4b13      	ldr	r3, [pc, #76]	@ (8005e28 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8005e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3304      	adds	r3, #4
 8005de2:	4619      	mov	r1, r3
 8005de4:	4610      	mov	r0, r2
 8005de6:	f7ff f9d6 	bl	8005196 <vListInsert>
}
 8005dea:	e010      	b.n	8005e0e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dec:	4b0f      	ldr	r3, [pc, #60]	@ (8005e2c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	4b0a      	ldr	r3, [pc, #40]	@ (8005e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3304      	adds	r3, #4
 8005df6:	4619      	mov	r1, r3
 8005df8:	4610      	mov	r0, r2
 8005dfa:	f7ff f9cc 	bl	8005196 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8005e30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d202      	bcs.n	8005e0e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005e08:	4a09      	ldr	r2, [pc, #36]	@ (8005e30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	6013      	str	r3, [r2, #0]
}
 8005e0e:	bf00      	nop
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	200008e4 	.word	0x200008e4
 8005e1c:	200007e0 	.word	0x200007e0
 8005e20:	200008e8 	.word	0x200008e8
 8005e24:	200008cc 	.word	0x200008cc
 8005e28:	2000089c 	.word	0x2000089c
 8005e2c:	20000898 	.word	0x20000898
 8005e30:	20000900 	.word	0x20000900

08005e34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	3b04      	subs	r3, #4
 8005e44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005e4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	3b04      	subs	r3, #4
 8005e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	f023 0201 	bic.w	r2, r3, #1
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	3b04      	subs	r3, #4
 8005e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e64:	4a0c      	ldr	r2, [pc, #48]	@ (8005e98 <pxPortInitialiseStack+0x64>)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	3b14      	subs	r3, #20
 8005e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	3b04      	subs	r3, #4
 8005e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f06f 0202 	mvn.w	r2, #2
 8005e82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	3b20      	subs	r3, #32
 8005e88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	08005e9d 	.word	0x08005e9d

08005e9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005ea6:	4b13      	ldr	r3, [pc, #76]	@ (8005ef4 <prvTaskExitError+0x58>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eae:	d00b      	beq.n	8005ec8 <prvTaskExitError+0x2c>
	__asm volatile
 8005eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	60fb      	str	r3, [r7, #12]
}
 8005ec2:	bf00      	nop
 8005ec4:	bf00      	nop
 8005ec6:	e7fd      	b.n	8005ec4 <prvTaskExitError+0x28>
	__asm volatile
 8005ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ecc:	f383 8811 	msr	BASEPRI, r3
 8005ed0:	f3bf 8f6f 	isb	sy
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	60bb      	str	r3, [r7, #8]
}
 8005eda:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005edc:	bf00      	nop
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d0fc      	beq.n	8005ede <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ee4:	bf00      	nop
 8005ee6:	bf00      	nop
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	2000000c 	.word	0x2000000c
	...

08005f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f00:	4b07      	ldr	r3, [pc, #28]	@ (8005f20 <pxCurrentTCBConst2>)
 8005f02:	6819      	ldr	r1, [r3, #0]
 8005f04:	6808      	ldr	r0, [r1, #0]
 8005f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0a:	f380 8809 	msr	PSP, r0
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f04f 0000 	mov.w	r0, #0
 8005f16:	f380 8811 	msr	BASEPRI, r0
 8005f1a:	4770      	bx	lr
 8005f1c:	f3af 8000 	nop.w

08005f20 <pxCurrentTCBConst2>:
 8005f20:	200007e0 	.word	0x200007e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f24:	bf00      	nop
 8005f26:	bf00      	nop

08005f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f28:	4808      	ldr	r0, [pc, #32]	@ (8005f4c <prvPortStartFirstTask+0x24>)
 8005f2a:	6800      	ldr	r0, [r0, #0]
 8005f2c:	6800      	ldr	r0, [r0, #0]
 8005f2e:	f380 8808 	msr	MSP, r0
 8005f32:	f04f 0000 	mov.w	r0, #0
 8005f36:	f380 8814 	msr	CONTROL, r0
 8005f3a:	b662      	cpsie	i
 8005f3c:	b661      	cpsie	f
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	df00      	svc	0
 8005f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f4a:	bf00      	nop
 8005f4c:	e000ed08 	.word	0xe000ed08

08005f50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f56:	4b47      	ldr	r3, [pc, #284]	@ (8006074 <xPortStartScheduler+0x124>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a47      	ldr	r2, [pc, #284]	@ (8006078 <xPortStartScheduler+0x128>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d10b      	bne.n	8005f78 <xPortStartScheduler+0x28>
	__asm volatile
 8005f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	613b      	str	r3, [r7, #16]
}
 8005f72:	bf00      	nop
 8005f74:	bf00      	nop
 8005f76:	e7fd      	b.n	8005f74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f78:	4b3e      	ldr	r3, [pc, #248]	@ (8006074 <xPortStartScheduler+0x124>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a3f      	ldr	r2, [pc, #252]	@ (800607c <xPortStartScheduler+0x12c>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d10b      	bne.n	8005f9a <xPortStartScheduler+0x4a>
	__asm volatile
 8005f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	60fb      	str	r3, [r7, #12]
}
 8005f94:	bf00      	nop
 8005f96:	bf00      	nop
 8005f98:	e7fd      	b.n	8005f96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f9a:	4b39      	ldr	r3, [pc, #228]	@ (8006080 <xPortStartScheduler+0x130>)
 8005f9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	22ff      	movs	r2, #255	@ 0xff
 8005faa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005fb4:	78fb      	ldrb	r3, [r7, #3]
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005fbc:	b2da      	uxtb	r2, r3
 8005fbe:	4b31      	ldr	r3, [pc, #196]	@ (8006084 <xPortStartScheduler+0x134>)
 8005fc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005fc2:	4b31      	ldr	r3, [pc, #196]	@ (8006088 <xPortStartScheduler+0x138>)
 8005fc4:	2207      	movs	r2, #7
 8005fc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fc8:	e009      	b.n	8005fde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005fca:	4b2f      	ldr	r3, [pc, #188]	@ (8006088 <xPortStartScheduler+0x138>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8006088 <xPortStartScheduler+0x138>)
 8005fd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005fd4:	78fb      	ldrb	r3, [r7, #3]
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fde:	78fb      	ldrb	r3, [r7, #3]
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fe6:	2b80      	cmp	r3, #128	@ 0x80
 8005fe8:	d0ef      	beq.n	8005fca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005fea:	4b27      	ldr	r3, [pc, #156]	@ (8006088 <xPortStartScheduler+0x138>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f1c3 0307 	rsb	r3, r3, #7
 8005ff2:	2b04      	cmp	r3, #4
 8005ff4:	d00b      	beq.n	800600e <xPortStartScheduler+0xbe>
	__asm volatile
 8005ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffa:	f383 8811 	msr	BASEPRI, r3
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	60bb      	str	r3, [r7, #8]
}
 8006008:	bf00      	nop
 800600a:	bf00      	nop
 800600c:	e7fd      	b.n	800600a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800600e:	4b1e      	ldr	r3, [pc, #120]	@ (8006088 <xPortStartScheduler+0x138>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	021b      	lsls	r3, r3, #8
 8006014:	4a1c      	ldr	r2, [pc, #112]	@ (8006088 <xPortStartScheduler+0x138>)
 8006016:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006018:	4b1b      	ldr	r3, [pc, #108]	@ (8006088 <xPortStartScheduler+0x138>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006020:	4a19      	ldr	r2, [pc, #100]	@ (8006088 <xPortStartScheduler+0x138>)
 8006022:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	b2da      	uxtb	r2, r3
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800602c:	4b17      	ldr	r3, [pc, #92]	@ (800608c <xPortStartScheduler+0x13c>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a16      	ldr	r2, [pc, #88]	@ (800608c <xPortStartScheduler+0x13c>)
 8006032:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006036:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006038:	4b14      	ldr	r3, [pc, #80]	@ (800608c <xPortStartScheduler+0x13c>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a13      	ldr	r2, [pc, #76]	@ (800608c <xPortStartScheduler+0x13c>)
 800603e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006042:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006044:	f000 f8da 	bl	80061fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006048:	4b11      	ldr	r3, [pc, #68]	@ (8006090 <xPortStartScheduler+0x140>)
 800604a:	2200      	movs	r2, #0
 800604c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800604e:	f000 f8f9 	bl	8006244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006052:	4b10      	ldr	r3, [pc, #64]	@ (8006094 <xPortStartScheduler+0x144>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a0f      	ldr	r2, [pc, #60]	@ (8006094 <xPortStartScheduler+0x144>)
 8006058:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800605c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800605e:	f7ff ff63 	bl	8005f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006062:	f7ff fd41 	bl	8005ae8 <vTaskSwitchContext>
	prvTaskExitError();
 8006066:	f7ff ff19 	bl	8005e9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3718      	adds	r7, #24
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	e000ed00 	.word	0xe000ed00
 8006078:	410fc271 	.word	0x410fc271
 800607c:	410fc270 	.word	0x410fc270
 8006080:	e000e400 	.word	0xe000e400
 8006084:	2000090c 	.word	0x2000090c
 8006088:	20000910 	.word	0x20000910
 800608c:	e000ed20 	.word	0xe000ed20
 8006090:	2000000c 	.word	0x2000000c
 8006094:	e000ef34 	.word	0xe000ef34

08006098 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
	__asm volatile
 800609e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	607b      	str	r3, [r7, #4]
}
 80060b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80060b2:	4b10      	ldr	r3, [pc, #64]	@ (80060f4 <vPortEnterCritical+0x5c>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3301      	adds	r3, #1
 80060b8:	4a0e      	ldr	r2, [pc, #56]	@ (80060f4 <vPortEnterCritical+0x5c>)
 80060ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80060bc:	4b0d      	ldr	r3, [pc, #52]	@ (80060f4 <vPortEnterCritical+0x5c>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d110      	bne.n	80060e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80060c4:	4b0c      	ldr	r3, [pc, #48]	@ (80060f8 <vPortEnterCritical+0x60>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00b      	beq.n	80060e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80060ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	603b      	str	r3, [r7, #0]
}
 80060e0:	bf00      	nop
 80060e2:	bf00      	nop
 80060e4:	e7fd      	b.n	80060e2 <vPortEnterCritical+0x4a>
	}
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	2000000c 	.word	0x2000000c
 80060f8:	e000ed04 	.word	0xe000ed04

080060fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006102:	4b12      	ldr	r3, [pc, #72]	@ (800614c <vPortExitCritical+0x50>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10b      	bne.n	8006122 <vPortExitCritical+0x26>
	__asm volatile
 800610a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	607b      	str	r3, [r7, #4]
}
 800611c:	bf00      	nop
 800611e:	bf00      	nop
 8006120:	e7fd      	b.n	800611e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006122:	4b0a      	ldr	r3, [pc, #40]	@ (800614c <vPortExitCritical+0x50>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	3b01      	subs	r3, #1
 8006128:	4a08      	ldr	r2, [pc, #32]	@ (800614c <vPortExitCritical+0x50>)
 800612a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800612c:	4b07      	ldr	r3, [pc, #28]	@ (800614c <vPortExitCritical+0x50>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d105      	bne.n	8006140 <vPortExitCritical+0x44>
 8006134:	2300      	movs	r3, #0
 8006136:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800613e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr
 800614c:	2000000c 	.word	0x2000000c

08006150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006150:	f3ef 8009 	mrs	r0, PSP
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	4b15      	ldr	r3, [pc, #84]	@ (80061b0 <pxCurrentTCBConst>)
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	f01e 0f10 	tst.w	lr, #16
 8006160:	bf08      	it	eq
 8006162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800616a:	6010      	str	r0, [r2, #0]
 800616c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006170:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006174:	f380 8811 	msr	BASEPRI, r0
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f7ff fcb2 	bl	8005ae8 <vTaskSwitchContext>
 8006184:	f04f 0000 	mov.w	r0, #0
 8006188:	f380 8811 	msr	BASEPRI, r0
 800618c:	bc09      	pop	{r0, r3}
 800618e:	6819      	ldr	r1, [r3, #0]
 8006190:	6808      	ldr	r0, [r1, #0]
 8006192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006196:	f01e 0f10 	tst.w	lr, #16
 800619a:	bf08      	it	eq
 800619c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80061a0:	f380 8809 	msr	PSP, r0
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	f3af 8000 	nop.w

080061b0 <pxCurrentTCBConst>:
 80061b0:	200007e0 	.word	0x200007e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80061b4:	bf00      	nop
 80061b6:	bf00      	nop

080061b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	607b      	str	r3, [r7, #4]
}
 80061d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80061d2:	f7ff fbcf 	bl	8005974 <xTaskIncrementTick>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d003      	beq.n	80061e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80061dc:	4b06      	ldr	r3, [pc, #24]	@ (80061f8 <SysTick_Handler+0x40>)
 80061de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	2300      	movs	r3, #0
 80061e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	f383 8811 	msr	BASEPRI, r3
}
 80061ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80061f0:	bf00      	nop
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	e000ed04 	.word	0xe000ed04

080061fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80061fc:	b480      	push	{r7}
 80061fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006200:	4b0b      	ldr	r3, [pc, #44]	@ (8006230 <vPortSetupTimerInterrupt+0x34>)
 8006202:	2200      	movs	r2, #0
 8006204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006206:	4b0b      	ldr	r3, [pc, #44]	@ (8006234 <vPortSetupTimerInterrupt+0x38>)
 8006208:	2200      	movs	r2, #0
 800620a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800620c:	4b0a      	ldr	r3, [pc, #40]	@ (8006238 <vPortSetupTimerInterrupt+0x3c>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a0a      	ldr	r2, [pc, #40]	@ (800623c <vPortSetupTimerInterrupt+0x40>)
 8006212:	fba2 2303 	umull	r2, r3, r2, r3
 8006216:	099b      	lsrs	r3, r3, #6
 8006218:	4a09      	ldr	r2, [pc, #36]	@ (8006240 <vPortSetupTimerInterrupt+0x44>)
 800621a:	3b01      	subs	r3, #1
 800621c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800621e:	4b04      	ldr	r3, [pc, #16]	@ (8006230 <vPortSetupTimerInterrupt+0x34>)
 8006220:	2207      	movs	r2, #7
 8006222:	601a      	str	r2, [r3, #0]
}
 8006224:	bf00      	nop
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	e000e010 	.word	0xe000e010
 8006234:	e000e018 	.word	0xe000e018
 8006238:	20000000 	.word	0x20000000
 800623c:	10624dd3 	.word	0x10624dd3
 8006240:	e000e014 	.word	0xe000e014

08006244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006244:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006254 <vPortEnableVFP+0x10>
 8006248:	6801      	ldr	r1, [r0, #0]
 800624a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800624e:	6001      	str	r1, [r0, #0]
 8006250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006252:	bf00      	nop
 8006254:	e000ed88 	.word	0xe000ed88

08006258 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b08a      	sub	sp, #40	@ 0x28
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006260:	2300      	movs	r3, #0
 8006262:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006264:	f7ff fada 	bl	800581c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006268:	4b5c      	ldr	r3, [pc, #368]	@ (80063dc <pvPortMalloc+0x184>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006270:	f000 f924 	bl	80064bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006274:	4b5a      	ldr	r3, [pc, #360]	@ (80063e0 <pvPortMalloc+0x188>)
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4013      	ands	r3, r2
 800627c:	2b00      	cmp	r3, #0
 800627e:	f040 8095 	bne.w	80063ac <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d01e      	beq.n	80062c6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006288:	2208      	movs	r2, #8
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4413      	add	r3, r2
 800628e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	2b00      	cmp	r3, #0
 8006298:	d015      	beq.n	80062c6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f023 0307 	bic.w	r3, r3, #7
 80062a0:	3308      	adds	r3, #8
 80062a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f003 0307 	and.w	r3, r3, #7
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00b      	beq.n	80062c6 <pvPortMalloc+0x6e>
	__asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	617b      	str	r3, [r7, #20]
}
 80062c0:	bf00      	nop
 80062c2:	bf00      	nop
 80062c4:	e7fd      	b.n	80062c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d06f      	beq.n	80063ac <pvPortMalloc+0x154>
 80062cc:	4b45      	ldr	r3, [pc, #276]	@ (80063e4 <pvPortMalloc+0x18c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d86a      	bhi.n	80063ac <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80062d6:	4b44      	ldr	r3, [pc, #272]	@ (80063e8 <pvPortMalloc+0x190>)
 80062d8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80062da:	4b43      	ldr	r3, [pc, #268]	@ (80063e8 <pvPortMalloc+0x190>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062e0:	e004      	b.n	80062ec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80062e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80062e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d903      	bls.n	80062fe <pvPortMalloc+0xa6>
 80062f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1f1      	bne.n	80062e2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80062fe:	4b37      	ldr	r3, [pc, #220]	@ (80063dc <pvPortMalloc+0x184>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006304:	429a      	cmp	r2, r3
 8006306:	d051      	beq.n	80063ac <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2208      	movs	r2, #8
 800630e:	4413      	add	r3, r2
 8006310:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	6a3b      	ldr	r3, [r7, #32]
 8006318:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800631a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	1ad2      	subs	r2, r2, r3
 8006322:	2308      	movs	r3, #8
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	429a      	cmp	r2, r3
 8006328:	d920      	bls.n	800636c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800632a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4413      	add	r3, r2
 8006330:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	f003 0307 	and.w	r3, r3, #7
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00b      	beq.n	8006354 <pvPortMalloc+0xfc>
	__asm volatile
 800633c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006340:	f383 8811 	msr	BASEPRI, r3
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	613b      	str	r3, [r7, #16]
}
 800634e:	bf00      	nop
 8006350:	bf00      	nop
 8006352:	e7fd      	b.n	8006350 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	1ad2      	subs	r2, r2, r3
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006366:	69b8      	ldr	r0, [r7, #24]
 8006368:	f000 f90a 	bl	8006580 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800636c:	4b1d      	ldr	r3, [pc, #116]	@ (80063e4 <pvPortMalloc+0x18c>)
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	4a1b      	ldr	r2, [pc, #108]	@ (80063e4 <pvPortMalloc+0x18c>)
 8006378:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800637a:	4b1a      	ldr	r3, [pc, #104]	@ (80063e4 <pvPortMalloc+0x18c>)
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	4b1b      	ldr	r3, [pc, #108]	@ (80063ec <pvPortMalloc+0x194>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	429a      	cmp	r2, r3
 8006384:	d203      	bcs.n	800638e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006386:	4b17      	ldr	r3, [pc, #92]	@ (80063e4 <pvPortMalloc+0x18c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a18      	ldr	r2, [pc, #96]	@ (80063ec <pvPortMalloc+0x194>)
 800638c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800638e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	4b13      	ldr	r3, [pc, #76]	@ (80063e0 <pvPortMalloc+0x188>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	431a      	orrs	r2, r3
 8006398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800639c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639e:	2200      	movs	r2, #0
 80063a0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80063a2:	4b13      	ldr	r3, [pc, #76]	@ (80063f0 <pvPortMalloc+0x198>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3301      	adds	r3, #1
 80063a8:	4a11      	ldr	r2, [pc, #68]	@ (80063f0 <pvPortMalloc+0x198>)
 80063aa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80063ac:	f7ff fa44 	bl	8005838 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	f003 0307 	and.w	r3, r3, #7
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00b      	beq.n	80063d2 <pvPortMalloc+0x17a>
	__asm volatile
 80063ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063be:	f383 8811 	msr	BASEPRI, r3
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	60fb      	str	r3, [r7, #12]
}
 80063cc:	bf00      	nop
 80063ce:	bf00      	nop
 80063d0:	e7fd      	b.n	80063ce <pvPortMalloc+0x176>
	return pvReturn;
 80063d2:	69fb      	ldr	r3, [r7, #28]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3728      	adds	r7, #40	@ 0x28
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	200014d4 	.word	0x200014d4
 80063e0:	200014e8 	.word	0x200014e8
 80063e4:	200014d8 	.word	0x200014d8
 80063e8:	200014cc 	.word	0x200014cc
 80063ec:	200014dc 	.word	0x200014dc
 80063f0:	200014e0 	.word	0x200014e0

080063f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d04f      	beq.n	80064a6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006406:	2308      	movs	r3, #8
 8006408:	425b      	negs	r3, r3
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	4413      	add	r3, r2
 800640e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	4b25      	ldr	r3, [pc, #148]	@ (80064b0 <vPortFree+0xbc>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4013      	ands	r3, r2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10b      	bne.n	800643a <vPortFree+0x46>
	__asm volatile
 8006422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	60fb      	str	r3, [r7, #12]
}
 8006434:	bf00      	nop
 8006436:	bf00      	nop
 8006438:	e7fd      	b.n	8006436 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00b      	beq.n	800645a <vPortFree+0x66>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	60bb      	str	r3, [r7, #8]
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop
 8006458:	e7fd      	b.n	8006456 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	4b14      	ldr	r3, [pc, #80]	@ (80064b0 <vPortFree+0xbc>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4013      	ands	r3, r2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d01e      	beq.n	80064a6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d11a      	bne.n	80064a6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	4b0e      	ldr	r3, [pc, #56]	@ (80064b0 <vPortFree+0xbc>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	43db      	mvns	r3, r3
 800647a:	401a      	ands	r2, r3
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006480:	f7ff f9cc 	bl	800581c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	4b0a      	ldr	r3, [pc, #40]	@ (80064b4 <vPortFree+0xc0>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4413      	add	r3, r2
 800648e:	4a09      	ldr	r2, [pc, #36]	@ (80064b4 <vPortFree+0xc0>)
 8006490:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006492:	6938      	ldr	r0, [r7, #16]
 8006494:	f000 f874 	bl	8006580 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006498:	4b07      	ldr	r3, [pc, #28]	@ (80064b8 <vPortFree+0xc4>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3301      	adds	r3, #1
 800649e:	4a06      	ldr	r2, [pc, #24]	@ (80064b8 <vPortFree+0xc4>)
 80064a0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80064a2:	f7ff f9c9 	bl	8005838 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80064a6:	bf00      	nop
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	200014e8 	.word	0x200014e8
 80064b4:	200014d8 	.word	0x200014d8
 80064b8:	200014e4 	.word	0x200014e4

080064bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80064c2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80064c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80064c8:	4b27      	ldr	r3, [pc, #156]	@ (8006568 <prvHeapInit+0xac>)
 80064ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00c      	beq.n	80064f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	3307      	adds	r3, #7
 80064da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f023 0307 	bic.w	r3, r3, #7
 80064e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	4a1f      	ldr	r2, [pc, #124]	@ (8006568 <prvHeapInit+0xac>)
 80064ec:	4413      	add	r3, r2
 80064ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80064f4:	4a1d      	ldr	r2, [pc, #116]	@ (800656c <prvHeapInit+0xb0>)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80064fa:	4b1c      	ldr	r3, [pc, #112]	@ (800656c <prvHeapInit+0xb0>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	4413      	add	r3, r2
 8006506:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006508:	2208      	movs	r2, #8
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	1a9b      	subs	r3, r3, r2
 800650e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f023 0307 	bic.w	r3, r3, #7
 8006516:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4a15      	ldr	r2, [pc, #84]	@ (8006570 <prvHeapInit+0xb4>)
 800651c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800651e:	4b14      	ldr	r3, [pc, #80]	@ (8006570 <prvHeapInit+0xb4>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2200      	movs	r2, #0
 8006524:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006526:	4b12      	ldr	r3, [pc, #72]	@ (8006570 <prvHeapInit+0xb4>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2200      	movs	r2, #0
 800652c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	1ad2      	subs	r2, r2, r3
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800653c:	4b0c      	ldr	r3, [pc, #48]	@ (8006570 <prvHeapInit+0xb4>)
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	4a0a      	ldr	r2, [pc, #40]	@ (8006574 <prvHeapInit+0xb8>)
 800654a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	4a09      	ldr	r2, [pc, #36]	@ (8006578 <prvHeapInit+0xbc>)
 8006552:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006554:	4b09      	ldr	r3, [pc, #36]	@ (800657c <prvHeapInit+0xc0>)
 8006556:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800655a:	601a      	str	r2, [r3, #0]
}
 800655c:	bf00      	nop
 800655e:	3714      	adds	r7, #20
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr
 8006568:	20000914 	.word	0x20000914
 800656c:	200014cc 	.word	0x200014cc
 8006570:	200014d4 	.word	0x200014d4
 8006574:	200014dc 	.word	0x200014dc
 8006578:	200014d8 	.word	0x200014d8
 800657c:	200014e8 	.word	0x200014e8

08006580 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006588:	4b28      	ldr	r3, [pc, #160]	@ (800662c <prvInsertBlockIntoFreeList+0xac>)
 800658a:	60fb      	str	r3, [r7, #12]
 800658c:	e002      	b.n	8006594 <prvInsertBlockIntoFreeList+0x14>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	60fb      	str	r3, [r7, #12]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	429a      	cmp	r2, r3
 800659c:	d8f7      	bhi.n	800658e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	4413      	add	r3, r2
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d108      	bne.n	80065c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	441a      	add	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	441a      	add	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d118      	bne.n	8006608 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	4b15      	ldr	r3, [pc, #84]	@ (8006630 <prvInsertBlockIntoFreeList+0xb0>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d00d      	beq.n	80065fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	441a      	add	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	601a      	str	r2, [r3, #0]
 80065fc:	e008      	b.n	8006610 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80065fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006630 <prvInsertBlockIntoFreeList+0xb0>)
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	e003      	b.n	8006610 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	429a      	cmp	r2, r3
 8006616:	d002      	beq.n	800661e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800661e:	bf00      	nop
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	200014cc 	.word	0x200014cc
 8006630:	200014d4 	.word	0x200014d4

08006634 <drv_uart2_receive>:
#include "main.h"
#include "drv_uart2.h"
#include "usart.h"

uint8_t drv_uart2_receive(char * pData, uint16_t size)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	460b      	mov	r3, r1
 800663e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&huart2, (uint8_t*)(pData), size, HAL_MAX_DELAY);
 8006640:	887a      	ldrh	r2, [r7, #2]
 8006642:	f04f 33ff 	mov.w	r3, #4294967295
 8006646:	6879      	ldr	r1, [r7, #4]
 8006648:	4803      	ldr	r0, [pc, #12]	@ (8006658 <drv_uart2_receive+0x24>)
 800664a:	f7fd fbc8 	bl	8003dde <HAL_UART_Receive>

	return 0;	// Life's too short for error management
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	20000754 	.word	0x20000754

0800665c <drv_uart2_transmit>:

uint8_t drv_uart2_transmit(const char * pData, uint16_t size)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	460b      	mov	r3, r1
 8006666:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, (uint8_t*)pData, size, HAL_MAX_DELAY);
 8006668:	887a      	ldrh	r2, [r7, #2]
 800666a:	f04f 33ff 	mov.w	r3, #4294967295
 800666e:	6879      	ldr	r1, [r7, #4]
 8006670:	4803      	ldr	r0, [pc, #12]	@ (8006680 <drv_uart2_transmit+0x24>)
 8006672:	f7fd fb2b 	bl	8003ccc <HAL_UART_Transmit>

	return 0;	// Srsly, don't do that kids
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	20000754 	.word	0x20000754

08006684 <sh_help>:
static int uart_write(char * s, uint16_t size) {
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
	return size;
}

static int sh_help(h_shell_t * h_shell, int argc, char ** argv) {
 8006684:	b590      	push	{r4, r7, lr}
 8006686:	b089      	sub	sp, #36	@ 0x24
 8006688:	af02      	add	r7, sp, #8
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8006690:	2300      	movs	r3, #0
 8006692:	617b      	str	r3, [r7, #20]
 8006694:	e029      	b.n	80066ea <sh_help+0x66>
		int size;
		size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->func_list[i].c, h_shell->func_list[i].description);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 800669c:	68f9      	ldr	r1, [r7, #12]
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	4613      	mov	r3, r2
 80066a2:	005b      	lsls	r3, r3, #1
 80066a4:	4413      	add	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	440b      	add	r3, r1
 80066aa:	3304      	adds	r3, #4
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	461c      	mov	r4, r3
 80066b0:	68f9      	ldr	r1, [r7, #12]
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	4613      	mov	r3, r2
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	4413      	add	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	440b      	add	r3, r1
 80066be:	330c      	adds	r3, #12
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	4623      	mov	r3, r4
 80066c6:	4a0e      	ldr	r2, [pc, #56]	@ (8006700 <sh_help+0x7c>)
 80066c8:	2128      	movs	r1, #40	@ 0x28
 80066ca:	f000 fb3b 	bl	8006d44 <sniprintf>
 80066ce:	6138      	str	r0, [r7, #16]
		h_shell->drv.transmit(h_shell->print_buffer, size);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80066dc:	6939      	ldr	r1, [r7, #16]
 80066de:	b289      	uxth	r1, r1
 80066e0:	4610      	mov	r0, r2
 80066e2:	4798      	blx	r3
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	3301      	adds	r3, #1
 80066e8:	617b      	str	r3, [r7, #20]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	dbd0      	blt.n	8006696 <sh_help+0x12>
	}

	return 0;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	371c      	adds	r7, #28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd90      	pop	{r4, r7, pc}
 80066fe:	bf00      	nop
 8006700:	08007d30 	.word	0x08007d30

08006704 <shell_init>:

void shell_init(h_shell_t * h_shell) {
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
	int size = 0;
 800670c:	2300      	movs	r3, #0
 800670e:	60fb      	str	r3, [r7, #12]

	h_shell->func_list_size = 0;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800671c:	4a16      	ldr	r2, [pc, #88]	@ (8006778 <shell_init+0x74>)
 800671e:	2128      	movs	r1, #40	@ 0x28
 8006720:	4618      	mov	r0, r3
 8006722:	f000 fb0f 	bl	8006d44 <sniprintf>
 8006726:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8006734:	68f9      	ldr	r1, [r7, #12]
 8006736:	b289      	uxth	r1, r1
 8006738:	4610      	mov	r0, r2
 800673a:	4798      	blx	r3

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "Correction TD (v0.2.1 du coup?)\r\n");
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8006742:	4a0e      	ldr	r2, [pc, #56]	@ (800677c <shell_init+0x78>)
 8006744:	2128      	movs	r1, #40	@ 0x28
 8006746:	4618      	mov	r0, r3
 8006748:	f000 fafc 	bl	8006d44 <sniprintf>
 800674c:	60f8      	str	r0, [r7, #12]
	h_shell->drv.transmit(h_shell->print_buffer, size);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800675a:	68f9      	ldr	r1, [r7, #12]
 800675c:	b289      	uxth	r1, r1
 800675e:	4610      	mov	r0, r2
 8006760:	4798      	blx	r3

	shell_add(h_shell, 'h', sh_help, "Help");
 8006762:	4b07      	ldr	r3, [pc, #28]	@ (8006780 <shell_init+0x7c>)
 8006764:	4a07      	ldr	r2, [pc, #28]	@ (8006784 <shell_init+0x80>)
 8006766:	2168      	movs	r1, #104	@ 0x68
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f80d 	bl	8006788 <shell_add>
}
 800676e:	bf00      	nop
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	08007d3c 	.word	0x08007d3c
 800677c:	08007d64 	.word	0x08007d64
 8006780:	08007d88 	.word	0x08007d88
 8006784:	08006685 	.word	0x08006685

08006788 <shell_add>:

int shell_add(h_shell_t * h_shell, char c, shell_func_pointer_t pfunc, char * description) {
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	607a      	str	r2, [r7, #4]
 8006792:	603b      	str	r3, [r7, #0]
 8006794:	460b      	mov	r3, r1
 8006796:	72fb      	strb	r3, [r7, #11]
	if (h_shell->func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b3f      	cmp	r3, #63	@ 0x3f
 800679e:	dc27      	bgt.n	80067f0 <shell_add+0x68>
		h_shell->func_list[h_shell->func_list_size].c = c;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	68f9      	ldr	r1, [r7, #12]
 80067a6:	4613      	mov	r3, r2
 80067a8:	005b      	lsls	r3, r3, #1
 80067aa:	4413      	add	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	440b      	add	r3, r1
 80067b0:	3304      	adds	r3, #4
 80067b2:	7afa      	ldrb	r2, [r7, #11]
 80067b4:	701a      	strb	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].func = pfunc;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68f9      	ldr	r1, [r7, #12]
 80067bc:	4613      	mov	r3, r2
 80067be:	005b      	lsls	r3, r3, #1
 80067c0:	4413      	add	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	440b      	add	r3, r1
 80067c6:	3308      	adds	r3, #8
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	601a      	str	r2, [r3, #0]
		h_shell->func_list[h_shell->func_list_size].description = description;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	68f9      	ldr	r1, [r7, #12]
 80067d2:	4613      	mov	r3, r2
 80067d4:	005b      	lsls	r3, r3, #1
 80067d6:	4413      	add	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	440b      	add	r3, r1
 80067dc:	330c      	adds	r3, #12
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	601a      	str	r2, [r3, #0]
		h_shell->func_list_size++;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	601a      	str	r2, [r3, #0]
		return 0;
 80067ec:	2300      	movs	r3, #0
 80067ee:	e001      	b.n	80067f4 <shell_add+0x6c>
	}

	return -1;
 80067f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <shell_exec>:

static int shell_exec(h_shell_t * h_shell, char * buf) {
 8006800:	b580      	push	{r7, lr}
 8006802:	b090      	sub	sp, #64	@ 0x40
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
	int i;

	char c = buf[0];
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8006812:	2300      	movs	r3, #0
 8006814:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006816:	e041      	b.n	800689c <shell_exec+0x9c>
		if (h_shell->func_list[i].c == c) {
 8006818:	6879      	ldr	r1, [r7, #4]
 800681a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800681c:	4613      	mov	r3, r2
 800681e:	005b      	lsls	r3, r3, #1
 8006820:	4413      	add	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	440b      	add	r3, r1
 8006826:	3304      	adds	r3, #4
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800682e:	429a      	cmp	r2, r3
 8006830:	d131      	bne.n	8006896 <shell_exec+0x96>
			argc = 1;
 8006832:	2301      	movs	r3, #1
 8006834:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	637b      	str	r3, [r7, #52]	@ 0x34
 800683e:	e013      	b.n	8006868 <shell_exec+0x68>
				if(*p == ' ') {
 8006840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	2b20      	cmp	r3, #32
 8006846:	d10c      	bne.n	8006862 <shell_exec+0x62>
					*p = '\0';
 8006848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800684a:	2200      	movs	r2, #0
 800684c:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 800684e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006854:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006856:	3201      	adds	r2, #1
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	3340      	adds	r3, #64	@ 0x40
 800685c:	443b      	add	r3, r7
 800685e:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8006862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006864:	3301      	adds	r3, #1
 8006866:	637b      	str	r3, [r7, #52]	@ 0x34
 8006868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d002      	beq.n	8006876 <shell_exec+0x76>
 8006870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006872:	2b07      	cmp	r3, #7
 8006874:	dde4      	ble.n	8006840 <shell_exec+0x40>
				}
			}

			return h_shell->func_list[i].func(h_shell, argc, argv);
 8006876:	6879      	ldr	r1, [r7, #4]
 8006878:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800687a:	4613      	mov	r3, r2
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	4413      	add	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	440b      	add	r3, r1
 8006884:	3308      	adds	r3, #8
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f107 020c 	add.w	r2, r7, #12
 800688c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	4798      	blx	r3
 8006892:	4603      	mov	r3, r0
 8006894:	e01d      	b.n	80068d2 <shell_exec+0xd2>
	for(i = 0 ; i < h_shell->func_list_size ; i++) {
 8006896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006898:	3301      	adds	r3, #1
 800689a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80068a2:	429a      	cmp	r2, r3
 80068a4:	dbb8      	blt.n	8006818 <shell_exec+0x18>
		}
	}

	int size;
	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80068ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80068b0:	4a0a      	ldr	r2, [pc, #40]	@ (80068dc <shell_exec+0xdc>)
 80068b2:	2128      	movs	r1, #40	@ 0x28
 80068b4:	f000 fa46 	bl	8006d44 <sniprintf>
 80068b8:	62f8      	str	r0, [r7, #44]	@ 0x2c
	h_shell->drv.transmit(h_shell->print_buffer, size);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 80068c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068c8:	b289      	uxth	r1, r1
 80068ca:	4610      	mov	r0, r2
 80068cc:	4798      	blx	r3
	return -1;
 80068ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3740      	adds	r7, #64	@ 0x40
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	08007d90 	.word	0x08007d90

080068e0 <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run(h_shell_t * h_shell) {
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
	int reading = 0;
 80068e8:	2300      	movs	r3, #0
 80068ea:	617b      	str	r3, [r7, #20]
	int pos = 0;
 80068ec:	2300      	movs	r3, #0
 80068ee:	613b      	str	r3, [r7, #16]

	while (1) {
		h_shell->drv.transmit(prompt, 2);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80068f6:	2102      	movs	r1, #2
 80068f8:	483a      	ldr	r0, [pc, #232]	@ (80069e4 <shell_run+0x104>)
 80068fa:	4798      	blx	r3
		reading = 1;
 80068fc:	2301      	movs	r3, #1
 80068fe:	617b      	str	r3, [r7, #20]

		while(reading) {
 8006900:	e064      	b.n	80069cc <shell_run+0xec>
			char c;
			h_shell->drv.receive(&c, 1);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8006908:	f107 020b 	add.w	r2, r7, #11
 800690c:	2101      	movs	r1, #1
 800690e:	4610      	mov	r0, r2
 8006910:	4798      	blx	r3
			int size;

			switch (c) {
 8006912:	7afb      	ldrb	r3, [r7, #11]
 8006914:	2b08      	cmp	r3, #8
 8006916:	d036      	beq.n	8006986 <shell_run+0xa6>
 8006918:	2b0d      	cmp	r3, #13
 800691a:	d141      	bne.n	80069a0 <shell_run+0xc0>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8006922:	4a31      	ldr	r2, [pc, #196]	@ (80069e8 <shell_run+0x108>)
 8006924:	2128      	movs	r1, #40	@ 0x28
 8006926:	4618      	mov	r0, r3
 8006928:	f000 fa0c 	bl	8006d44 <sniprintf>
 800692c:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 800693a:	68f9      	ldr	r1, [r7, #12]
 800693c:	b289      	uxth	r1, r1
 800693e:	4610      	mov	r0, r2
 8006940:	4798      	blx	r3
				h_shell->cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	1c5a      	adds	r2, r3, #1
 8006946:	613a      	str	r2, [r7, #16]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	4413      	add	r3, r2
 800694c:	2200      	movs	r2, #0
 800694e:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, ":%s\r\n", h_shell->cmd_buffer);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 800695e:	4a23      	ldr	r2, [pc, #140]	@ (80069ec <shell_run+0x10c>)
 8006960:	2128      	movs	r1, #40	@ 0x28
 8006962:	f000 f9ef 	bl	8006d44 <sniprintf>
 8006966:	60f8      	str	r0, [r7, #12]
				h_shell->drv.transmit(h_shell->print_buffer, size);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	f502 7241 	add.w	r2, r2, #772	@ 0x304
 8006974:	68f9      	ldr	r1, [r7, #12]
 8006976:	b289      	uxth	r1, r1
 8006978:	4610      	mov	r0, r2
 800697a:	4798      	blx	r3
				reading = 0;        //exit read loop
 800697c:	2300      	movs	r3, #0
 800697e:	617b      	str	r3, [r7, #20]
				pos = 0;            //reset buffer
 8006980:	2300      	movs	r3, #0
 8006982:	613b      	str	r3, [r7, #16]
				break;
 8006984:	e022      	b.n	80069cc <shell_run+0xec>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	dd1e      	ble.n	80069ca <shell_run+0xea>
					pos--;          //remove it in buffer
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	3b01      	subs	r3, #1
 8006990:	613b      	str	r3, [r7, #16]

					h_shell->drv.transmit(backspace, 3);	// delete the char on the terminal
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8006998:	2103      	movs	r1, #3
 800699a:	4815      	ldr	r0, [pc, #84]	@ (80069f0 <shell_run+0x110>)
 800699c:	4798      	blx	r3
				}
				break;
 800699e:	e014      	b.n	80069ca <shell_run+0xea>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	2b27      	cmp	r3, #39	@ 0x27
 80069a4:	dc12      	bgt.n	80069cc <shell_run+0xec>
					h_shell->drv.transmit(&c, 1);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80069ac:	f107 020b 	add.w	r2, r7, #11
 80069b0:	2101      	movs	r1, #1
 80069b2:	4610      	mov	r0, r2
 80069b4:	4798      	blx	r3
					h_shell->cmd_buffer[pos++] = c; //store
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	613a      	str	r2, [r7, #16]
 80069bc:	7af9      	ldrb	r1, [r7, #11]
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	4413      	add	r3, r2
 80069c2:	460a      	mov	r2, r1
 80069c4:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
 80069c8:	e000      	b.n	80069cc <shell_run+0xec>
				break;
 80069ca:	bf00      	nop
		while(reading) {
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d197      	bne.n	8006902 <shell_run+0x22>
				}
			}
		}
		shell_exec(h_shell, h_shell->cmd_buffer);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 80069d8:	4619      	mov	r1, r3
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7ff ff10 	bl	8006800 <shell_exec>
		h_shell->drv.transmit(prompt, 2);
 80069e0:	e786      	b.n	80068f0 <shell_run+0x10>
 80069e2:	bf00      	nop
 80069e4:	20000014 	.word	0x20000014
 80069e8:	08007da8 	.word	0x08007da8
 80069ec:	08007dac 	.word	0x08007dac
 80069f0:	20000010 	.word	0x20000010

080069f4 <atoi>:
 80069f4:	220a      	movs	r2, #10
 80069f6:	2100      	movs	r1, #0
 80069f8:	f000 b87a 	b.w	8006af0 <strtol>

080069fc <_strtol_l.constprop.0>:
 80069fc:	2b24      	cmp	r3, #36	@ 0x24
 80069fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a02:	4686      	mov	lr, r0
 8006a04:	4690      	mov	r8, r2
 8006a06:	d801      	bhi.n	8006a0c <_strtol_l.constprop.0+0x10>
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d106      	bne.n	8006a1a <_strtol_l.constprop.0+0x1e>
 8006a0c:	f000 fb4a 	bl	80070a4 <__errno>
 8006a10:	2316      	movs	r3, #22
 8006a12:	6003      	str	r3, [r0, #0]
 8006a14:	2000      	movs	r0, #0
 8006a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a1a:	4834      	ldr	r0, [pc, #208]	@ (8006aec <_strtol_l.constprop.0+0xf0>)
 8006a1c:	460d      	mov	r5, r1
 8006a1e:	462a      	mov	r2, r5
 8006a20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a24:	5d06      	ldrb	r6, [r0, r4]
 8006a26:	f016 0608 	ands.w	r6, r6, #8
 8006a2a:	d1f8      	bne.n	8006a1e <_strtol_l.constprop.0+0x22>
 8006a2c:	2c2d      	cmp	r4, #45	@ 0x2d
 8006a2e:	d12d      	bne.n	8006a8c <_strtol_l.constprop.0+0x90>
 8006a30:	782c      	ldrb	r4, [r5, #0]
 8006a32:	2601      	movs	r6, #1
 8006a34:	1c95      	adds	r5, r2, #2
 8006a36:	f033 0210 	bics.w	r2, r3, #16
 8006a3a:	d109      	bne.n	8006a50 <_strtol_l.constprop.0+0x54>
 8006a3c:	2c30      	cmp	r4, #48	@ 0x30
 8006a3e:	d12a      	bne.n	8006a96 <_strtol_l.constprop.0+0x9a>
 8006a40:	782a      	ldrb	r2, [r5, #0]
 8006a42:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006a46:	2a58      	cmp	r2, #88	@ 0x58
 8006a48:	d125      	bne.n	8006a96 <_strtol_l.constprop.0+0x9a>
 8006a4a:	786c      	ldrb	r4, [r5, #1]
 8006a4c:	2310      	movs	r3, #16
 8006a4e:	3502      	adds	r5, #2
 8006a50:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006a54:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006a58:	2200      	movs	r2, #0
 8006a5a:	fbbc f9f3 	udiv	r9, ip, r3
 8006a5e:	4610      	mov	r0, r2
 8006a60:	fb03 ca19 	mls	sl, r3, r9, ip
 8006a64:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006a68:	2f09      	cmp	r7, #9
 8006a6a:	d81b      	bhi.n	8006aa4 <_strtol_l.constprop.0+0xa8>
 8006a6c:	463c      	mov	r4, r7
 8006a6e:	42a3      	cmp	r3, r4
 8006a70:	dd27      	ble.n	8006ac2 <_strtol_l.constprop.0+0xc6>
 8006a72:	1c57      	adds	r7, r2, #1
 8006a74:	d007      	beq.n	8006a86 <_strtol_l.constprop.0+0x8a>
 8006a76:	4581      	cmp	r9, r0
 8006a78:	d320      	bcc.n	8006abc <_strtol_l.constprop.0+0xc0>
 8006a7a:	d101      	bne.n	8006a80 <_strtol_l.constprop.0+0x84>
 8006a7c:	45a2      	cmp	sl, r4
 8006a7e:	db1d      	blt.n	8006abc <_strtol_l.constprop.0+0xc0>
 8006a80:	fb00 4003 	mla	r0, r0, r3, r4
 8006a84:	2201      	movs	r2, #1
 8006a86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a8a:	e7eb      	b.n	8006a64 <_strtol_l.constprop.0+0x68>
 8006a8c:	2c2b      	cmp	r4, #43	@ 0x2b
 8006a8e:	bf04      	itt	eq
 8006a90:	782c      	ldrbeq	r4, [r5, #0]
 8006a92:	1c95      	addeq	r5, r2, #2
 8006a94:	e7cf      	b.n	8006a36 <_strtol_l.constprop.0+0x3a>
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1da      	bne.n	8006a50 <_strtol_l.constprop.0+0x54>
 8006a9a:	2c30      	cmp	r4, #48	@ 0x30
 8006a9c:	bf0c      	ite	eq
 8006a9e:	2308      	moveq	r3, #8
 8006aa0:	230a      	movne	r3, #10
 8006aa2:	e7d5      	b.n	8006a50 <_strtol_l.constprop.0+0x54>
 8006aa4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006aa8:	2f19      	cmp	r7, #25
 8006aaa:	d801      	bhi.n	8006ab0 <_strtol_l.constprop.0+0xb4>
 8006aac:	3c37      	subs	r4, #55	@ 0x37
 8006aae:	e7de      	b.n	8006a6e <_strtol_l.constprop.0+0x72>
 8006ab0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006ab4:	2f19      	cmp	r7, #25
 8006ab6:	d804      	bhi.n	8006ac2 <_strtol_l.constprop.0+0xc6>
 8006ab8:	3c57      	subs	r4, #87	@ 0x57
 8006aba:	e7d8      	b.n	8006a6e <_strtol_l.constprop.0+0x72>
 8006abc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac0:	e7e1      	b.n	8006a86 <_strtol_l.constprop.0+0x8a>
 8006ac2:	1c53      	adds	r3, r2, #1
 8006ac4:	d108      	bne.n	8006ad8 <_strtol_l.constprop.0+0xdc>
 8006ac6:	2322      	movs	r3, #34	@ 0x22
 8006ac8:	f8ce 3000 	str.w	r3, [lr]
 8006acc:	4660      	mov	r0, ip
 8006ace:	f1b8 0f00 	cmp.w	r8, #0
 8006ad2:	d0a0      	beq.n	8006a16 <_strtol_l.constprop.0+0x1a>
 8006ad4:	1e69      	subs	r1, r5, #1
 8006ad6:	e006      	b.n	8006ae6 <_strtol_l.constprop.0+0xea>
 8006ad8:	b106      	cbz	r6, 8006adc <_strtol_l.constprop.0+0xe0>
 8006ada:	4240      	negs	r0, r0
 8006adc:	f1b8 0f00 	cmp.w	r8, #0
 8006ae0:	d099      	beq.n	8006a16 <_strtol_l.constprop.0+0x1a>
 8006ae2:	2a00      	cmp	r2, #0
 8006ae4:	d1f6      	bne.n	8006ad4 <_strtol_l.constprop.0+0xd8>
 8006ae6:	f8c8 1000 	str.w	r1, [r8]
 8006aea:	e794      	b.n	8006a16 <_strtol_l.constprop.0+0x1a>
 8006aec:	08007dfd 	.word	0x08007dfd

08006af0 <strtol>:
 8006af0:	4613      	mov	r3, r2
 8006af2:	460a      	mov	r2, r1
 8006af4:	4601      	mov	r1, r0
 8006af6:	4802      	ldr	r0, [pc, #8]	@ (8006b00 <strtol+0x10>)
 8006af8:	6800      	ldr	r0, [r0, #0]
 8006afa:	f7ff bf7f 	b.w	80069fc <_strtol_l.constprop.0>
 8006afe:	bf00      	nop
 8006b00:	20000024 	.word	0x20000024

08006b04 <std>:
 8006b04:	2300      	movs	r3, #0
 8006b06:	b510      	push	{r4, lr}
 8006b08:	4604      	mov	r4, r0
 8006b0a:	e9c0 3300 	strd	r3, r3, [r0]
 8006b0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b12:	6083      	str	r3, [r0, #8]
 8006b14:	8181      	strh	r1, [r0, #12]
 8006b16:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b18:	81c2      	strh	r2, [r0, #14]
 8006b1a:	6183      	str	r3, [r0, #24]
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	2208      	movs	r2, #8
 8006b20:	305c      	adds	r0, #92	@ 0x5c
 8006b22:	f000 fa1b 	bl	8006f5c <memset>
 8006b26:	4b0d      	ldr	r3, [pc, #52]	@ (8006b5c <std+0x58>)
 8006b28:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b60 <std+0x5c>)
 8006b2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b64 <std+0x60>)
 8006b30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b32:	4b0d      	ldr	r3, [pc, #52]	@ (8006b68 <std+0x64>)
 8006b34:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b36:	4b0d      	ldr	r3, [pc, #52]	@ (8006b6c <std+0x68>)
 8006b38:	6224      	str	r4, [r4, #32]
 8006b3a:	429c      	cmp	r4, r3
 8006b3c:	d006      	beq.n	8006b4c <std+0x48>
 8006b3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006b42:	4294      	cmp	r4, r2
 8006b44:	d002      	beq.n	8006b4c <std+0x48>
 8006b46:	33d0      	adds	r3, #208	@ 0xd0
 8006b48:	429c      	cmp	r4, r3
 8006b4a:	d105      	bne.n	8006b58 <std+0x54>
 8006b4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b54:	f000 bad0 	b.w	80070f8 <__retarget_lock_init_recursive>
 8006b58:	bd10      	pop	{r4, pc}
 8006b5a:	bf00      	nop
 8006b5c:	08006dad 	.word	0x08006dad
 8006b60:	08006dcf 	.word	0x08006dcf
 8006b64:	08006e07 	.word	0x08006e07
 8006b68:	08006e2b 	.word	0x08006e2b
 8006b6c:	200014ec 	.word	0x200014ec

08006b70 <stdio_exit_handler>:
 8006b70:	4a02      	ldr	r2, [pc, #8]	@ (8006b7c <stdio_exit_handler+0xc>)
 8006b72:	4903      	ldr	r1, [pc, #12]	@ (8006b80 <stdio_exit_handler+0x10>)
 8006b74:	4803      	ldr	r0, [pc, #12]	@ (8006b84 <stdio_exit_handler+0x14>)
 8006b76:	f000 b869 	b.w	8006c4c <_fwalk_sglue>
 8006b7a:	bf00      	nop
 8006b7c:	20000018 	.word	0x20000018
 8006b80:	080079e1 	.word	0x080079e1
 8006b84:	20000028 	.word	0x20000028

08006b88 <cleanup_stdio>:
 8006b88:	6841      	ldr	r1, [r0, #4]
 8006b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8006bbc <cleanup_stdio+0x34>)
 8006b8c:	4299      	cmp	r1, r3
 8006b8e:	b510      	push	{r4, lr}
 8006b90:	4604      	mov	r4, r0
 8006b92:	d001      	beq.n	8006b98 <cleanup_stdio+0x10>
 8006b94:	f000 ff24 	bl	80079e0 <_fflush_r>
 8006b98:	68a1      	ldr	r1, [r4, #8]
 8006b9a:	4b09      	ldr	r3, [pc, #36]	@ (8006bc0 <cleanup_stdio+0x38>)
 8006b9c:	4299      	cmp	r1, r3
 8006b9e:	d002      	beq.n	8006ba6 <cleanup_stdio+0x1e>
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f000 ff1d 	bl	80079e0 <_fflush_r>
 8006ba6:	68e1      	ldr	r1, [r4, #12]
 8006ba8:	4b06      	ldr	r3, [pc, #24]	@ (8006bc4 <cleanup_stdio+0x3c>)
 8006baa:	4299      	cmp	r1, r3
 8006bac:	d004      	beq.n	8006bb8 <cleanup_stdio+0x30>
 8006bae:	4620      	mov	r0, r4
 8006bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bb4:	f000 bf14 	b.w	80079e0 <_fflush_r>
 8006bb8:	bd10      	pop	{r4, pc}
 8006bba:	bf00      	nop
 8006bbc:	200014ec 	.word	0x200014ec
 8006bc0:	20001554 	.word	0x20001554
 8006bc4:	200015bc 	.word	0x200015bc

08006bc8 <global_stdio_init.part.0>:
 8006bc8:	b510      	push	{r4, lr}
 8006bca:	4b0b      	ldr	r3, [pc, #44]	@ (8006bf8 <global_stdio_init.part.0+0x30>)
 8006bcc:	4c0b      	ldr	r4, [pc, #44]	@ (8006bfc <global_stdio_init.part.0+0x34>)
 8006bce:	4a0c      	ldr	r2, [pc, #48]	@ (8006c00 <global_stdio_init.part.0+0x38>)
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	2104      	movs	r1, #4
 8006bd8:	f7ff ff94 	bl	8006b04 <std>
 8006bdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006be0:	2201      	movs	r2, #1
 8006be2:	2109      	movs	r1, #9
 8006be4:	f7ff ff8e 	bl	8006b04 <std>
 8006be8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006bec:	2202      	movs	r2, #2
 8006bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bf2:	2112      	movs	r1, #18
 8006bf4:	f7ff bf86 	b.w	8006b04 <std>
 8006bf8:	20001624 	.word	0x20001624
 8006bfc:	200014ec 	.word	0x200014ec
 8006c00:	08006b71 	.word	0x08006b71

08006c04 <__sfp_lock_acquire>:
 8006c04:	4801      	ldr	r0, [pc, #4]	@ (8006c0c <__sfp_lock_acquire+0x8>)
 8006c06:	f000 ba78 	b.w	80070fa <__retarget_lock_acquire_recursive>
 8006c0a:	bf00      	nop
 8006c0c:	2000162d 	.word	0x2000162d

08006c10 <__sfp_lock_release>:
 8006c10:	4801      	ldr	r0, [pc, #4]	@ (8006c18 <__sfp_lock_release+0x8>)
 8006c12:	f000 ba73 	b.w	80070fc <__retarget_lock_release_recursive>
 8006c16:	bf00      	nop
 8006c18:	2000162d 	.word	0x2000162d

08006c1c <__sinit>:
 8006c1c:	b510      	push	{r4, lr}
 8006c1e:	4604      	mov	r4, r0
 8006c20:	f7ff fff0 	bl	8006c04 <__sfp_lock_acquire>
 8006c24:	6a23      	ldr	r3, [r4, #32]
 8006c26:	b11b      	cbz	r3, 8006c30 <__sinit+0x14>
 8006c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c2c:	f7ff bff0 	b.w	8006c10 <__sfp_lock_release>
 8006c30:	4b04      	ldr	r3, [pc, #16]	@ (8006c44 <__sinit+0x28>)
 8006c32:	6223      	str	r3, [r4, #32]
 8006c34:	4b04      	ldr	r3, [pc, #16]	@ (8006c48 <__sinit+0x2c>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1f5      	bne.n	8006c28 <__sinit+0xc>
 8006c3c:	f7ff ffc4 	bl	8006bc8 <global_stdio_init.part.0>
 8006c40:	e7f2      	b.n	8006c28 <__sinit+0xc>
 8006c42:	bf00      	nop
 8006c44:	08006b89 	.word	0x08006b89
 8006c48:	20001624 	.word	0x20001624

08006c4c <_fwalk_sglue>:
 8006c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c50:	4607      	mov	r7, r0
 8006c52:	4688      	mov	r8, r1
 8006c54:	4614      	mov	r4, r2
 8006c56:	2600      	movs	r6, #0
 8006c58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c5c:	f1b9 0901 	subs.w	r9, r9, #1
 8006c60:	d505      	bpl.n	8006c6e <_fwalk_sglue+0x22>
 8006c62:	6824      	ldr	r4, [r4, #0]
 8006c64:	2c00      	cmp	r4, #0
 8006c66:	d1f7      	bne.n	8006c58 <_fwalk_sglue+0xc>
 8006c68:	4630      	mov	r0, r6
 8006c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c6e:	89ab      	ldrh	r3, [r5, #12]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d907      	bls.n	8006c84 <_fwalk_sglue+0x38>
 8006c74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	d003      	beq.n	8006c84 <_fwalk_sglue+0x38>
 8006c7c:	4629      	mov	r1, r5
 8006c7e:	4638      	mov	r0, r7
 8006c80:	47c0      	blx	r8
 8006c82:	4306      	orrs	r6, r0
 8006c84:	3568      	adds	r5, #104	@ 0x68
 8006c86:	e7e9      	b.n	8006c5c <_fwalk_sglue+0x10>

08006c88 <_puts_r>:
 8006c88:	6a03      	ldr	r3, [r0, #32]
 8006c8a:	b570      	push	{r4, r5, r6, lr}
 8006c8c:	6884      	ldr	r4, [r0, #8]
 8006c8e:	4605      	mov	r5, r0
 8006c90:	460e      	mov	r6, r1
 8006c92:	b90b      	cbnz	r3, 8006c98 <_puts_r+0x10>
 8006c94:	f7ff ffc2 	bl	8006c1c <__sinit>
 8006c98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c9a:	07db      	lsls	r3, r3, #31
 8006c9c:	d405      	bmi.n	8006caa <_puts_r+0x22>
 8006c9e:	89a3      	ldrh	r3, [r4, #12]
 8006ca0:	0598      	lsls	r0, r3, #22
 8006ca2:	d402      	bmi.n	8006caa <_puts_r+0x22>
 8006ca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ca6:	f000 fa28 	bl	80070fa <__retarget_lock_acquire_recursive>
 8006caa:	89a3      	ldrh	r3, [r4, #12]
 8006cac:	0719      	lsls	r1, r3, #28
 8006cae:	d502      	bpl.n	8006cb6 <_puts_r+0x2e>
 8006cb0:	6923      	ldr	r3, [r4, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d135      	bne.n	8006d22 <_puts_r+0x9a>
 8006cb6:	4621      	mov	r1, r4
 8006cb8:	4628      	mov	r0, r5
 8006cba:	f000 f8f9 	bl	8006eb0 <__swsetup_r>
 8006cbe:	b380      	cbz	r0, 8006d22 <_puts_r+0x9a>
 8006cc0:	f04f 35ff 	mov.w	r5, #4294967295
 8006cc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006cc6:	07da      	lsls	r2, r3, #31
 8006cc8:	d405      	bmi.n	8006cd6 <_puts_r+0x4e>
 8006cca:	89a3      	ldrh	r3, [r4, #12]
 8006ccc:	059b      	lsls	r3, r3, #22
 8006cce:	d402      	bmi.n	8006cd6 <_puts_r+0x4e>
 8006cd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cd2:	f000 fa13 	bl	80070fc <__retarget_lock_release_recursive>
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	bd70      	pop	{r4, r5, r6, pc}
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	da04      	bge.n	8006ce8 <_puts_r+0x60>
 8006cde:	69a2      	ldr	r2, [r4, #24]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	dc17      	bgt.n	8006d14 <_puts_r+0x8c>
 8006ce4:	290a      	cmp	r1, #10
 8006ce6:	d015      	beq.n	8006d14 <_puts_r+0x8c>
 8006ce8:	6823      	ldr	r3, [r4, #0]
 8006cea:	1c5a      	adds	r2, r3, #1
 8006cec:	6022      	str	r2, [r4, #0]
 8006cee:	7019      	strb	r1, [r3, #0]
 8006cf0:	68a3      	ldr	r3, [r4, #8]
 8006cf2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	60a3      	str	r3, [r4, #8]
 8006cfa:	2900      	cmp	r1, #0
 8006cfc:	d1ed      	bne.n	8006cda <_puts_r+0x52>
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	da11      	bge.n	8006d26 <_puts_r+0x9e>
 8006d02:	4622      	mov	r2, r4
 8006d04:	210a      	movs	r1, #10
 8006d06:	4628      	mov	r0, r5
 8006d08:	f000 f893 	bl	8006e32 <__swbuf_r>
 8006d0c:	3001      	adds	r0, #1
 8006d0e:	d0d7      	beq.n	8006cc0 <_puts_r+0x38>
 8006d10:	250a      	movs	r5, #10
 8006d12:	e7d7      	b.n	8006cc4 <_puts_r+0x3c>
 8006d14:	4622      	mov	r2, r4
 8006d16:	4628      	mov	r0, r5
 8006d18:	f000 f88b 	bl	8006e32 <__swbuf_r>
 8006d1c:	3001      	adds	r0, #1
 8006d1e:	d1e7      	bne.n	8006cf0 <_puts_r+0x68>
 8006d20:	e7ce      	b.n	8006cc0 <_puts_r+0x38>
 8006d22:	3e01      	subs	r6, #1
 8006d24:	e7e4      	b.n	8006cf0 <_puts_r+0x68>
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	1c5a      	adds	r2, r3, #1
 8006d2a:	6022      	str	r2, [r4, #0]
 8006d2c:	220a      	movs	r2, #10
 8006d2e:	701a      	strb	r2, [r3, #0]
 8006d30:	e7ee      	b.n	8006d10 <_puts_r+0x88>
	...

08006d34 <puts>:
 8006d34:	4b02      	ldr	r3, [pc, #8]	@ (8006d40 <puts+0xc>)
 8006d36:	4601      	mov	r1, r0
 8006d38:	6818      	ldr	r0, [r3, #0]
 8006d3a:	f7ff bfa5 	b.w	8006c88 <_puts_r>
 8006d3e:	bf00      	nop
 8006d40:	20000024 	.word	0x20000024

08006d44 <sniprintf>:
 8006d44:	b40c      	push	{r2, r3}
 8006d46:	b530      	push	{r4, r5, lr}
 8006d48:	4b17      	ldr	r3, [pc, #92]	@ (8006da8 <sniprintf+0x64>)
 8006d4a:	1e0c      	subs	r4, r1, #0
 8006d4c:	681d      	ldr	r5, [r3, #0]
 8006d4e:	b09d      	sub	sp, #116	@ 0x74
 8006d50:	da08      	bge.n	8006d64 <sniprintf+0x20>
 8006d52:	238b      	movs	r3, #139	@ 0x8b
 8006d54:	602b      	str	r3, [r5, #0]
 8006d56:	f04f 30ff 	mov.w	r0, #4294967295
 8006d5a:	b01d      	add	sp, #116	@ 0x74
 8006d5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d60:	b002      	add	sp, #8
 8006d62:	4770      	bx	lr
 8006d64:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006d68:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006d6c:	bf14      	ite	ne
 8006d6e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006d72:	4623      	moveq	r3, r4
 8006d74:	9304      	str	r3, [sp, #16]
 8006d76:	9307      	str	r3, [sp, #28]
 8006d78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006d7c:	9002      	str	r0, [sp, #8]
 8006d7e:	9006      	str	r0, [sp, #24]
 8006d80:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006d84:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006d86:	ab21      	add	r3, sp, #132	@ 0x84
 8006d88:	a902      	add	r1, sp, #8
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	9301      	str	r3, [sp, #4]
 8006d8e:	f000 fb19 	bl	80073c4 <_svfiprintf_r>
 8006d92:	1c43      	adds	r3, r0, #1
 8006d94:	bfbc      	itt	lt
 8006d96:	238b      	movlt	r3, #139	@ 0x8b
 8006d98:	602b      	strlt	r3, [r5, #0]
 8006d9a:	2c00      	cmp	r4, #0
 8006d9c:	d0dd      	beq.n	8006d5a <sniprintf+0x16>
 8006d9e:	9b02      	ldr	r3, [sp, #8]
 8006da0:	2200      	movs	r2, #0
 8006da2:	701a      	strb	r2, [r3, #0]
 8006da4:	e7d9      	b.n	8006d5a <sniprintf+0x16>
 8006da6:	bf00      	nop
 8006da8:	20000024 	.word	0x20000024

08006dac <__sread>:
 8006dac:	b510      	push	{r4, lr}
 8006dae:	460c      	mov	r4, r1
 8006db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006db4:	f000 f952 	bl	800705c <_read_r>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	bfab      	itete	ge
 8006dbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006dbe:	89a3      	ldrhlt	r3, [r4, #12]
 8006dc0:	181b      	addge	r3, r3, r0
 8006dc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006dc6:	bfac      	ite	ge
 8006dc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006dca:	81a3      	strhlt	r3, [r4, #12]
 8006dcc:	bd10      	pop	{r4, pc}

08006dce <__swrite>:
 8006dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd2:	461f      	mov	r7, r3
 8006dd4:	898b      	ldrh	r3, [r1, #12]
 8006dd6:	05db      	lsls	r3, r3, #23
 8006dd8:	4605      	mov	r5, r0
 8006dda:	460c      	mov	r4, r1
 8006ddc:	4616      	mov	r6, r2
 8006dde:	d505      	bpl.n	8006dec <__swrite+0x1e>
 8006de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de4:	2302      	movs	r3, #2
 8006de6:	2200      	movs	r2, #0
 8006de8:	f000 f926 	bl	8007038 <_lseek_r>
 8006dec:	89a3      	ldrh	r3, [r4, #12]
 8006dee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006df2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006df6:	81a3      	strh	r3, [r4, #12]
 8006df8:	4632      	mov	r2, r6
 8006dfa:	463b      	mov	r3, r7
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e02:	f000 b93d 	b.w	8007080 <_write_r>

08006e06 <__sseek>:
 8006e06:	b510      	push	{r4, lr}
 8006e08:	460c      	mov	r4, r1
 8006e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e0e:	f000 f913 	bl	8007038 <_lseek_r>
 8006e12:	1c43      	adds	r3, r0, #1
 8006e14:	89a3      	ldrh	r3, [r4, #12]
 8006e16:	bf15      	itete	ne
 8006e18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006e1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006e1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006e22:	81a3      	strheq	r3, [r4, #12]
 8006e24:	bf18      	it	ne
 8006e26:	81a3      	strhne	r3, [r4, #12]
 8006e28:	bd10      	pop	{r4, pc}

08006e2a <__sclose>:
 8006e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e2e:	f000 b89d 	b.w	8006f6c <_close_r>

08006e32 <__swbuf_r>:
 8006e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e34:	460e      	mov	r6, r1
 8006e36:	4614      	mov	r4, r2
 8006e38:	4605      	mov	r5, r0
 8006e3a:	b118      	cbz	r0, 8006e44 <__swbuf_r+0x12>
 8006e3c:	6a03      	ldr	r3, [r0, #32]
 8006e3e:	b90b      	cbnz	r3, 8006e44 <__swbuf_r+0x12>
 8006e40:	f7ff feec 	bl	8006c1c <__sinit>
 8006e44:	69a3      	ldr	r3, [r4, #24]
 8006e46:	60a3      	str	r3, [r4, #8]
 8006e48:	89a3      	ldrh	r3, [r4, #12]
 8006e4a:	071a      	lsls	r2, r3, #28
 8006e4c:	d501      	bpl.n	8006e52 <__swbuf_r+0x20>
 8006e4e:	6923      	ldr	r3, [r4, #16]
 8006e50:	b943      	cbnz	r3, 8006e64 <__swbuf_r+0x32>
 8006e52:	4621      	mov	r1, r4
 8006e54:	4628      	mov	r0, r5
 8006e56:	f000 f82b 	bl	8006eb0 <__swsetup_r>
 8006e5a:	b118      	cbz	r0, 8006e64 <__swbuf_r+0x32>
 8006e5c:	f04f 37ff 	mov.w	r7, #4294967295
 8006e60:	4638      	mov	r0, r7
 8006e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e64:	6823      	ldr	r3, [r4, #0]
 8006e66:	6922      	ldr	r2, [r4, #16]
 8006e68:	1a98      	subs	r0, r3, r2
 8006e6a:	6963      	ldr	r3, [r4, #20]
 8006e6c:	b2f6      	uxtb	r6, r6
 8006e6e:	4283      	cmp	r3, r0
 8006e70:	4637      	mov	r7, r6
 8006e72:	dc05      	bgt.n	8006e80 <__swbuf_r+0x4e>
 8006e74:	4621      	mov	r1, r4
 8006e76:	4628      	mov	r0, r5
 8006e78:	f000 fdb2 	bl	80079e0 <_fflush_r>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	d1ed      	bne.n	8006e5c <__swbuf_r+0x2a>
 8006e80:	68a3      	ldr	r3, [r4, #8]
 8006e82:	3b01      	subs	r3, #1
 8006e84:	60a3      	str	r3, [r4, #8]
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	1c5a      	adds	r2, r3, #1
 8006e8a:	6022      	str	r2, [r4, #0]
 8006e8c:	701e      	strb	r6, [r3, #0]
 8006e8e:	6962      	ldr	r2, [r4, #20]
 8006e90:	1c43      	adds	r3, r0, #1
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d004      	beq.n	8006ea0 <__swbuf_r+0x6e>
 8006e96:	89a3      	ldrh	r3, [r4, #12]
 8006e98:	07db      	lsls	r3, r3, #31
 8006e9a:	d5e1      	bpl.n	8006e60 <__swbuf_r+0x2e>
 8006e9c:	2e0a      	cmp	r6, #10
 8006e9e:	d1df      	bne.n	8006e60 <__swbuf_r+0x2e>
 8006ea0:	4621      	mov	r1, r4
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	f000 fd9c 	bl	80079e0 <_fflush_r>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	d0d9      	beq.n	8006e60 <__swbuf_r+0x2e>
 8006eac:	e7d6      	b.n	8006e5c <__swbuf_r+0x2a>
	...

08006eb0 <__swsetup_r>:
 8006eb0:	b538      	push	{r3, r4, r5, lr}
 8006eb2:	4b29      	ldr	r3, [pc, #164]	@ (8006f58 <__swsetup_r+0xa8>)
 8006eb4:	4605      	mov	r5, r0
 8006eb6:	6818      	ldr	r0, [r3, #0]
 8006eb8:	460c      	mov	r4, r1
 8006eba:	b118      	cbz	r0, 8006ec4 <__swsetup_r+0x14>
 8006ebc:	6a03      	ldr	r3, [r0, #32]
 8006ebe:	b90b      	cbnz	r3, 8006ec4 <__swsetup_r+0x14>
 8006ec0:	f7ff feac 	bl	8006c1c <__sinit>
 8006ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ec8:	0719      	lsls	r1, r3, #28
 8006eca:	d422      	bmi.n	8006f12 <__swsetup_r+0x62>
 8006ecc:	06da      	lsls	r2, r3, #27
 8006ece:	d407      	bmi.n	8006ee0 <__swsetup_r+0x30>
 8006ed0:	2209      	movs	r2, #9
 8006ed2:	602a      	str	r2, [r5, #0]
 8006ed4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ed8:	81a3      	strh	r3, [r4, #12]
 8006eda:	f04f 30ff 	mov.w	r0, #4294967295
 8006ede:	e033      	b.n	8006f48 <__swsetup_r+0x98>
 8006ee0:	0758      	lsls	r0, r3, #29
 8006ee2:	d512      	bpl.n	8006f0a <__swsetup_r+0x5a>
 8006ee4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ee6:	b141      	cbz	r1, 8006efa <__swsetup_r+0x4a>
 8006ee8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006eec:	4299      	cmp	r1, r3
 8006eee:	d002      	beq.n	8006ef6 <__swsetup_r+0x46>
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	f000 f913 	bl	800711c <_free_r>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006efa:	89a3      	ldrh	r3, [r4, #12]
 8006efc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006f00:	81a3      	strh	r3, [r4, #12]
 8006f02:	2300      	movs	r3, #0
 8006f04:	6063      	str	r3, [r4, #4]
 8006f06:	6923      	ldr	r3, [r4, #16]
 8006f08:	6023      	str	r3, [r4, #0]
 8006f0a:	89a3      	ldrh	r3, [r4, #12]
 8006f0c:	f043 0308 	orr.w	r3, r3, #8
 8006f10:	81a3      	strh	r3, [r4, #12]
 8006f12:	6923      	ldr	r3, [r4, #16]
 8006f14:	b94b      	cbnz	r3, 8006f2a <__swsetup_r+0x7a>
 8006f16:	89a3      	ldrh	r3, [r4, #12]
 8006f18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006f1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f20:	d003      	beq.n	8006f2a <__swsetup_r+0x7a>
 8006f22:	4621      	mov	r1, r4
 8006f24:	4628      	mov	r0, r5
 8006f26:	f000 fda9 	bl	8007a7c <__smakebuf_r>
 8006f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f2e:	f013 0201 	ands.w	r2, r3, #1
 8006f32:	d00a      	beq.n	8006f4a <__swsetup_r+0x9a>
 8006f34:	2200      	movs	r2, #0
 8006f36:	60a2      	str	r2, [r4, #8]
 8006f38:	6962      	ldr	r2, [r4, #20]
 8006f3a:	4252      	negs	r2, r2
 8006f3c:	61a2      	str	r2, [r4, #24]
 8006f3e:	6922      	ldr	r2, [r4, #16]
 8006f40:	b942      	cbnz	r2, 8006f54 <__swsetup_r+0xa4>
 8006f42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006f46:	d1c5      	bne.n	8006ed4 <__swsetup_r+0x24>
 8006f48:	bd38      	pop	{r3, r4, r5, pc}
 8006f4a:	0799      	lsls	r1, r3, #30
 8006f4c:	bf58      	it	pl
 8006f4e:	6962      	ldrpl	r2, [r4, #20]
 8006f50:	60a2      	str	r2, [r4, #8]
 8006f52:	e7f4      	b.n	8006f3e <__swsetup_r+0x8e>
 8006f54:	2000      	movs	r0, #0
 8006f56:	e7f7      	b.n	8006f48 <__swsetup_r+0x98>
 8006f58:	20000024 	.word	0x20000024

08006f5c <memset>:
 8006f5c:	4402      	add	r2, r0
 8006f5e:	4603      	mov	r3, r0
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d100      	bne.n	8006f66 <memset+0xa>
 8006f64:	4770      	bx	lr
 8006f66:	f803 1b01 	strb.w	r1, [r3], #1
 8006f6a:	e7f9      	b.n	8006f60 <memset+0x4>

08006f6c <_close_r>:
 8006f6c:	b538      	push	{r3, r4, r5, lr}
 8006f6e:	4d06      	ldr	r5, [pc, #24]	@ (8006f88 <_close_r+0x1c>)
 8006f70:	2300      	movs	r3, #0
 8006f72:	4604      	mov	r4, r0
 8006f74:	4608      	mov	r0, r1
 8006f76:	602b      	str	r3, [r5, #0]
 8006f78:	f7fa f801 	bl	8000f7e <_close>
 8006f7c:	1c43      	adds	r3, r0, #1
 8006f7e:	d102      	bne.n	8006f86 <_close_r+0x1a>
 8006f80:	682b      	ldr	r3, [r5, #0]
 8006f82:	b103      	cbz	r3, 8006f86 <_close_r+0x1a>
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	bd38      	pop	{r3, r4, r5, pc}
 8006f88:	20001628 	.word	0x20001628

08006f8c <_reclaim_reent>:
 8006f8c:	4b29      	ldr	r3, [pc, #164]	@ (8007034 <_reclaim_reent+0xa8>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4283      	cmp	r3, r0
 8006f92:	b570      	push	{r4, r5, r6, lr}
 8006f94:	4604      	mov	r4, r0
 8006f96:	d04b      	beq.n	8007030 <_reclaim_reent+0xa4>
 8006f98:	69c3      	ldr	r3, [r0, #28]
 8006f9a:	b1ab      	cbz	r3, 8006fc8 <_reclaim_reent+0x3c>
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	b16b      	cbz	r3, 8006fbc <_reclaim_reent+0x30>
 8006fa0:	2500      	movs	r5, #0
 8006fa2:	69e3      	ldr	r3, [r4, #28]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	5959      	ldr	r1, [r3, r5]
 8006fa8:	2900      	cmp	r1, #0
 8006faa:	d13b      	bne.n	8007024 <_reclaim_reent+0x98>
 8006fac:	3504      	adds	r5, #4
 8006fae:	2d80      	cmp	r5, #128	@ 0x80
 8006fb0:	d1f7      	bne.n	8006fa2 <_reclaim_reent+0x16>
 8006fb2:	69e3      	ldr	r3, [r4, #28]
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	68d9      	ldr	r1, [r3, #12]
 8006fb8:	f000 f8b0 	bl	800711c <_free_r>
 8006fbc:	69e3      	ldr	r3, [r4, #28]
 8006fbe:	6819      	ldr	r1, [r3, #0]
 8006fc0:	b111      	cbz	r1, 8006fc8 <_reclaim_reent+0x3c>
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f000 f8aa 	bl	800711c <_free_r>
 8006fc8:	6961      	ldr	r1, [r4, #20]
 8006fca:	b111      	cbz	r1, 8006fd2 <_reclaim_reent+0x46>
 8006fcc:	4620      	mov	r0, r4
 8006fce:	f000 f8a5 	bl	800711c <_free_r>
 8006fd2:	69e1      	ldr	r1, [r4, #28]
 8006fd4:	b111      	cbz	r1, 8006fdc <_reclaim_reent+0x50>
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	f000 f8a0 	bl	800711c <_free_r>
 8006fdc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006fde:	b111      	cbz	r1, 8006fe6 <_reclaim_reent+0x5a>
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f000 f89b 	bl	800711c <_free_r>
 8006fe6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fe8:	b111      	cbz	r1, 8006ff0 <_reclaim_reent+0x64>
 8006fea:	4620      	mov	r0, r4
 8006fec:	f000 f896 	bl	800711c <_free_r>
 8006ff0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006ff2:	b111      	cbz	r1, 8006ffa <_reclaim_reent+0x6e>
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	f000 f891 	bl	800711c <_free_r>
 8006ffa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006ffc:	b111      	cbz	r1, 8007004 <_reclaim_reent+0x78>
 8006ffe:	4620      	mov	r0, r4
 8007000:	f000 f88c 	bl	800711c <_free_r>
 8007004:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007006:	b111      	cbz	r1, 800700e <_reclaim_reent+0x82>
 8007008:	4620      	mov	r0, r4
 800700a:	f000 f887 	bl	800711c <_free_r>
 800700e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007010:	b111      	cbz	r1, 8007018 <_reclaim_reent+0x8c>
 8007012:	4620      	mov	r0, r4
 8007014:	f000 f882 	bl	800711c <_free_r>
 8007018:	6a23      	ldr	r3, [r4, #32]
 800701a:	b14b      	cbz	r3, 8007030 <_reclaim_reent+0xa4>
 800701c:	4620      	mov	r0, r4
 800701e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007022:	4718      	bx	r3
 8007024:	680e      	ldr	r6, [r1, #0]
 8007026:	4620      	mov	r0, r4
 8007028:	f000 f878 	bl	800711c <_free_r>
 800702c:	4631      	mov	r1, r6
 800702e:	e7bb      	b.n	8006fa8 <_reclaim_reent+0x1c>
 8007030:	bd70      	pop	{r4, r5, r6, pc}
 8007032:	bf00      	nop
 8007034:	20000024 	.word	0x20000024

08007038 <_lseek_r>:
 8007038:	b538      	push	{r3, r4, r5, lr}
 800703a:	4d07      	ldr	r5, [pc, #28]	@ (8007058 <_lseek_r+0x20>)
 800703c:	4604      	mov	r4, r0
 800703e:	4608      	mov	r0, r1
 8007040:	4611      	mov	r1, r2
 8007042:	2200      	movs	r2, #0
 8007044:	602a      	str	r2, [r5, #0]
 8007046:	461a      	mov	r2, r3
 8007048:	f7f9 ffc0 	bl	8000fcc <_lseek>
 800704c:	1c43      	adds	r3, r0, #1
 800704e:	d102      	bne.n	8007056 <_lseek_r+0x1e>
 8007050:	682b      	ldr	r3, [r5, #0]
 8007052:	b103      	cbz	r3, 8007056 <_lseek_r+0x1e>
 8007054:	6023      	str	r3, [r4, #0]
 8007056:	bd38      	pop	{r3, r4, r5, pc}
 8007058:	20001628 	.word	0x20001628

0800705c <_read_r>:
 800705c:	b538      	push	{r3, r4, r5, lr}
 800705e:	4d07      	ldr	r5, [pc, #28]	@ (800707c <_read_r+0x20>)
 8007060:	4604      	mov	r4, r0
 8007062:	4608      	mov	r0, r1
 8007064:	4611      	mov	r1, r2
 8007066:	2200      	movs	r2, #0
 8007068:	602a      	str	r2, [r5, #0]
 800706a:	461a      	mov	r2, r3
 800706c:	f7f9 ff4e 	bl	8000f0c <_read>
 8007070:	1c43      	adds	r3, r0, #1
 8007072:	d102      	bne.n	800707a <_read_r+0x1e>
 8007074:	682b      	ldr	r3, [r5, #0]
 8007076:	b103      	cbz	r3, 800707a <_read_r+0x1e>
 8007078:	6023      	str	r3, [r4, #0]
 800707a:	bd38      	pop	{r3, r4, r5, pc}
 800707c:	20001628 	.word	0x20001628

08007080 <_write_r>:
 8007080:	b538      	push	{r3, r4, r5, lr}
 8007082:	4d07      	ldr	r5, [pc, #28]	@ (80070a0 <_write_r+0x20>)
 8007084:	4604      	mov	r4, r0
 8007086:	4608      	mov	r0, r1
 8007088:	4611      	mov	r1, r2
 800708a:	2200      	movs	r2, #0
 800708c:	602a      	str	r2, [r5, #0]
 800708e:	461a      	mov	r2, r3
 8007090:	f7f9 ff59 	bl	8000f46 <_write>
 8007094:	1c43      	adds	r3, r0, #1
 8007096:	d102      	bne.n	800709e <_write_r+0x1e>
 8007098:	682b      	ldr	r3, [r5, #0]
 800709a:	b103      	cbz	r3, 800709e <_write_r+0x1e>
 800709c:	6023      	str	r3, [r4, #0]
 800709e:	bd38      	pop	{r3, r4, r5, pc}
 80070a0:	20001628 	.word	0x20001628

080070a4 <__errno>:
 80070a4:	4b01      	ldr	r3, [pc, #4]	@ (80070ac <__errno+0x8>)
 80070a6:	6818      	ldr	r0, [r3, #0]
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	20000024 	.word	0x20000024

080070b0 <__libc_init_array>:
 80070b0:	b570      	push	{r4, r5, r6, lr}
 80070b2:	4d0d      	ldr	r5, [pc, #52]	@ (80070e8 <__libc_init_array+0x38>)
 80070b4:	4c0d      	ldr	r4, [pc, #52]	@ (80070ec <__libc_init_array+0x3c>)
 80070b6:	1b64      	subs	r4, r4, r5
 80070b8:	10a4      	asrs	r4, r4, #2
 80070ba:	2600      	movs	r6, #0
 80070bc:	42a6      	cmp	r6, r4
 80070be:	d109      	bne.n	80070d4 <__libc_init_array+0x24>
 80070c0:	4d0b      	ldr	r5, [pc, #44]	@ (80070f0 <__libc_init_array+0x40>)
 80070c2:	4c0c      	ldr	r4, [pc, #48]	@ (80070f4 <__libc_init_array+0x44>)
 80070c4:	f000 fd98 	bl	8007bf8 <_init>
 80070c8:	1b64      	subs	r4, r4, r5
 80070ca:	10a4      	asrs	r4, r4, #2
 80070cc:	2600      	movs	r6, #0
 80070ce:	42a6      	cmp	r6, r4
 80070d0:	d105      	bne.n	80070de <__libc_init_array+0x2e>
 80070d2:	bd70      	pop	{r4, r5, r6, pc}
 80070d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80070d8:	4798      	blx	r3
 80070da:	3601      	adds	r6, #1
 80070dc:	e7ee      	b.n	80070bc <__libc_init_array+0xc>
 80070de:	f855 3b04 	ldr.w	r3, [r5], #4
 80070e2:	4798      	blx	r3
 80070e4:	3601      	adds	r6, #1
 80070e6:	e7f2      	b.n	80070ce <__libc_init_array+0x1e>
 80070e8:	08007f38 	.word	0x08007f38
 80070ec:	08007f38 	.word	0x08007f38
 80070f0:	08007f38 	.word	0x08007f38
 80070f4:	08007f3c 	.word	0x08007f3c

080070f8 <__retarget_lock_init_recursive>:
 80070f8:	4770      	bx	lr

080070fa <__retarget_lock_acquire_recursive>:
 80070fa:	4770      	bx	lr

080070fc <__retarget_lock_release_recursive>:
 80070fc:	4770      	bx	lr

080070fe <memcpy>:
 80070fe:	440a      	add	r2, r1
 8007100:	4291      	cmp	r1, r2
 8007102:	f100 33ff 	add.w	r3, r0, #4294967295
 8007106:	d100      	bne.n	800710a <memcpy+0xc>
 8007108:	4770      	bx	lr
 800710a:	b510      	push	{r4, lr}
 800710c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007110:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007114:	4291      	cmp	r1, r2
 8007116:	d1f9      	bne.n	800710c <memcpy+0xe>
 8007118:	bd10      	pop	{r4, pc}
	...

0800711c <_free_r>:
 800711c:	b538      	push	{r3, r4, r5, lr}
 800711e:	4605      	mov	r5, r0
 8007120:	2900      	cmp	r1, #0
 8007122:	d041      	beq.n	80071a8 <_free_r+0x8c>
 8007124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007128:	1f0c      	subs	r4, r1, #4
 800712a:	2b00      	cmp	r3, #0
 800712c:	bfb8      	it	lt
 800712e:	18e4      	addlt	r4, r4, r3
 8007130:	f000 f8e0 	bl	80072f4 <__malloc_lock>
 8007134:	4a1d      	ldr	r2, [pc, #116]	@ (80071ac <_free_r+0x90>)
 8007136:	6813      	ldr	r3, [r2, #0]
 8007138:	b933      	cbnz	r3, 8007148 <_free_r+0x2c>
 800713a:	6063      	str	r3, [r4, #4]
 800713c:	6014      	str	r4, [r2, #0]
 800713e:	4628      	mov	r0, r5
 8007140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007144:	f000 b8dc 	b.w	8007300 <__malloc_unlock>
 8007148:	42a3      	cmp	r3, r4
 800714a:	d908      	bls.n	800715e <_free_r+0x42>
 800714c:	6820      	ldr	r0, [r4, #0]
 800714e:	1821      	adds	r1, r4, r0
 8007150:	428b      	cmp	r3, r1
 8007152:	bf01      	itttt	eq
 8007154:	6819      	ldreq	r1, [r3, #0]
 8007156:	685b      	ldreq	r3, [r3, #4]
 8007158:	1809      	addeq	r1, r1, r0
 800715a:	6021      	streq	r1, [r4, #0]
 800715c:	e7ed      	b.n	800713a <_free_r+0x1e>
 800715e:	461a      	mov	r2, r3
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	b10b      	cbz	r3, 8007168 <_free_r+0x4c>
 8007164:	42a3      	cmp	r3, r4
 8007166:	d9fa      	bls.n	800715e <_free_r+0x42>
 8007168:	6811      	ldr	r1, [r2, #0]
 800716a:	1850      	adds	r0, r2, r1
 800716c:	42a0      	cmp	r0, r4
 800716e:	d10b      	bne.n	8007188 <_free_r+0x6c>
 8007170:	6820      	ldr	r0, [r4, #0]
 8007172:	4401      	add	r1, r0
 8007174:	1850      	adds	r0, r2, r1
 8007176:	4283      	cmp	r3, r0
 8007178:	6011      	str	r1, [r2, #0]
 800717a:	d1e0      	bne.n	800713e <_free_r+0x22>
 800717c:	6818      	ldr	r0, [r3, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	6053      	str	r3, [r2, #4]
 8007182:	4408      	add	r0, r1
 8007184:	6010      	str	r0, [r2, #0]
 8007186:	e7da      	b.n	800713e <_free_r+0x22>
 8007188:	d902      	bls.n	8007190 <_free_r+0x74>
 800718a:	230c      	movs	r3, #12
 800718c:	602b      	str	r3, [r5, #0]
 800718e:	e7d6      	b.n	800713e <_free_r+0x22>
 8007190:	6820      	ldr	r0, [r4, #0]
 8007192:	1821      	adds	r1, r4, r0
 8007194:	428b      	cmp	r3, r1
 8007196:	bf04      	itt	eq
 8007198:	6819      	ldreq	r1, [r3, #0]
 800719a:	685b      	ldreq	r3, [r3, #4]
 800719c:	6063      	str	r3, [r4, #4]
 800719e:	bf04      	itt	eq
 80071a0:	1809      	addeq	r1, r1, r0
 80071a2:	6021      	streq	r1, [r4, #0]
 80071a4:	6054      	str	r4, [r2, #4]
 80071a6:	e7ca      	b.n	800713e <_free_r+0x22>
 80071a8:	bd38      	pop	{r3, r4, r5, pc}
 80071aa:	bf00      	nop
 80071ac:	20001634 	.word	0x20001634

080071b0 <sbrk_aligned>:
 80071b0:	b570      	push	{r4, r5, r6, lr}
 80071b2:	4e0f      	ldr	r6, [pc, #60]	@ (80071f0 <sbrk_aligned+0x40>)
 80071b4:	460c      	mov	r4, r1
 80071b6:	6831      	ldr	r1, [r6, #0]
 80071b8:	4605      	mov	r5, r0
 80071ba:	b911      	cbnz	r1, 80071c2 <sbrk_aligned+0x12>
 80071bc:	f000 fcd6 	bl	8007b6c <_sbrk_r>
 80071c0:	6030      	str	r0, [r6, #0]
 80071c2:	4621      	mov	r1, r4
 80071c4:	4628      	mov	r0, r5
 80071c6:	f000 fcd1 	bl	8007b6c <_sbrk_r>
 80071ca:	1c43      	adds	r3, r0, #1
 80071cc:	d103      	bne.n	80071d6 <sbrk_aligned+0x26>
 80071ce:	f04f 34ff 	mov.w	r4, #4294967295
 80071d2:	4620      	mov	r0, r4
 80071d4:	bd70      	pop	{r4, r5, r6, pc}
 80071d6:	1cc4      	adds	r4, r0, #3
 80071d8:	f024 0403 	bic.w	r4, r4, #3
 80071dc:	42a0      	cmp	r0, r4
 80071de:	d0f8      	beq.n	80071d2 <sbrk_aligned+0x22>
 80071e0:	1a21      	subs	r1, r4, r0
 80071e2:	4628      	mov	r0, r5
 80071e4:	f000 fcc2 	bl	8007b6c <_sbrk_r>
 80071e8:	3001      	adds	r0, #1
 80071ea:	d1f2      	bne.n	80071d2 <sbrk_aligned+0x22>
 80071ec:	e7ef      	b.n	80071ce <sbrk_aligned+0x1e>
 80071ee:	bf00      	nop
 80071f0:	20001630 	.word	0x20001630

080071f4 <_malloc_r>:
 80071f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071f8:	1ccd      	adds	r5, r1, #3
 80071fa:	f025 0503 	bic.w	r5, r5, #3
 80071fe:	3508      	adds	r5, #8
 8007200:	2d0c      	cmp	r5, #12
 8007202:	bf38      	it	cc
 8007204:	250c      	movcc	r5, #12
 8007206:	2d00      	cmp	r5, #0
 8007208:	4606      	mov	r6, r0
 800720a:	db01      	blt.n	8007210 <_malloc_r+0x1c>
 800720c:	42a9      	cmp	r1, r5
 800720e:	d904      	bls.n	800721a <_malloc_r+0x26>
 8007210:	230c      	movs	r3, #12
 8007212:	6033      	str	r3, [r6, #0]
 8007214:	2000      	movs	r0, #0
 8007216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800721a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072f0 <_malloc_r+0xfc>
 800721e:	f000 f869 	bl	80072f4 <__malloc_lock>
 8007222:	f8d8 3000 	ldr.w	r3, [r8]
 8007226:	461c      	mov	r4, r3
 8007228:	bb44      	cbnz	r4, 800727c <_malloc_r+0x88>
 800722a:	4629      	mov	r1, r5
 800722c:	4630      	mov	r0, r6
 800722e:	f7ff ffbf 	bl	80071b0 <sbrk_aligned>
 8007232:	1c43      	adds	r3, r0, #1
 8007234:	4604      	mov	r4, r0
 8007236:	d158      	bne.n	80072ea <_malloc_r+0xf6>
 8007238:	f8d8 4000 	ldr.w	r4, [r8]
 800723c:	4627      	mov	r7, r4
 800723e:	2f00      	cmp	r7, #0
 8007240:	d143      	bne.n	80072ca <_malloc_r+0xd6>
 8007242:	2c00      	cmp	r4, #0
 8007244:	d04b      	beq.n	80072de <_malloc_r+0xea>
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	4639      	mov	r1, r7
 800724a:	4630      	mov	r0, r6
 800724c:	eb04 0903 	add.w	r9, r4, r3
 8007250:	f000 fc8c 	bl	8007b6c <_sbrk_r>
 8007254:	4581      	cmp	r9, r0
 8007256:	d142      	bne.n	80072de <_malloc_r+0xea>
 8007258:	6821      	ldr	r1, [r4, #0]
 800725a:	1a6d      	subs	r5, r5, r1
 800725c:	4629      	mov	r1, r5
 800725e:	4630      	mov	r0, r6
 8007260:	f7ff ffa6 	bl	80071b0 <sbrk_aligned>
 8007264:	3001      	adds	r0, #1
 8007266:	d03a      	beq.n	80072de <_malloc_r+0xea>
 8007268:	6823      	ldr	r3, [r4, #0]
 800726a:	442b      	add	r3, r5
 800726c:	6023      	str	r3, [r4, #0]
 800726e:	f8d8 3000 	ldr.w	r3, [r8]
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	bb62      	cbnz	r2, 80072d0 <_malloc_r+0xdc>
 8007276:	f8c8 7000 	str.w	r7, [r8]
 800727a:	e00f      	b.n	800729c <_malloc_r+0xa8>
 800727c:	6822      	ldr	r2, [r4, #0]
 800727e:	1b52      	subs	r2, r2, r5
 8007280:	d420      	bmi.n	80072c4 <_malloc_r+0xd0>
 8007282:	2a0b      	cmp	r2, #11
 8007284:	d917      	bls.n	80072b6 <_malloc_r+0xc2>
 8007286:	1961      	adds	r1, r4, r5
 8007288:	42a3      	cmp	r3, r4
 800728a:	6025      	str	r5, [r4, #0]
 800728c:	bf18      	it	ne
 800728e:	6059      	strne	r1, [r3, #4]
 8007290:	6863      	ldr	r3, [r4, #4]
 8007292:	bf08      	it	eq
 8007294:	f8c8 1000 	streq.w	r1, [r8]
 8007298:	5162      	str	r2, [r4, r5]
 800729a:	604b      	str	r3, [r1, #4]
 800729c:	4630      	mov	r0, r6
 800729e:	f000 f82f 	bl	8007300 <__malloc_unlock>
 80072a2:	f104 000b 	add.w	r0, r4, #11
 80072a6:	1d23      	adds	r3, r4, #4
 80072a8:	f020 0007 	bic.w	r0, r0, #7
 80072ac:	1ac2      	subs	r2, r0, r3
 80072ae:	bf1c      	itt	ne
 80072b0:	1a1b      	subne	r3, r3, r0
 80072b2:	50a3      	strne	r3, [r4, r2]
 80072b4:	e7af      	b.n	8007216 <_malloc_r+0x22>
 80072b6:	6862      	ldr	r2, [r4, #4]
 80072b8:	42a3      	cmp	r3, r4
 80072ba:	bf0c      	ite	eq
 80072bc:	f8c8 2000 	streq.w	r2, [r8]
 80072c0:	605a      	strne	r2, [r3, #4]
 80072c2:	e7eb      	b.n	800729c <_malloc_r+0xa8>
 80072c4:	4623      	mov	r3, r4
 80072c6:	6864      	ldr	r4, [r4, #4]
 80072c8:	e7ae      	b.n	8007228 <_malloc_r+0x34>
 80072ca:	463c      	mov	r4, r7
 80072cc:	687f      	ldr	r7, [r7, #4]
 80072ce:	e7b6      	b.n	800723e <_malloc_r+0x4a>
 80072d0:	461a      	mov	r2, r3
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	42a3      	cmp	r3, r4
 80072d6:	d1fb      	bne.n	80072d0 <_malloc_r+0xdc>
 80072d8:	2300      	movs	r3, #0
 80072da:	6053      	str	r3, [r2, #4]
 80072dc:	e7de      	b.n	800729c <_malloc_r+0xa8>
 80072de:	230c      	movs	r3, #12
 80072e0:	6033      	str	r3, [r6, #0]
 80072e2:	4630      	mov	r0, r6
 80072e4:	f000 f80c 	bl	8007300 <__malloc_unlock>
 80072e8:	e794      	b.n	8007214 <_malloc_r+0x20>
 80072ea:	6005      	str	r5, [r0, #0]
 80072ec:	e7d6      	b.n	800729c <_malloc_r+0xa8>
 80072ee:	bf00      	nop
 80072f0:	20001634 	.word	0x20001634

080072f4 <__malloc_lock>:
 80072f4:	4801      	ldr	r0, [pc, #4]	@ (80072fc <__malloc_lock+0x8>)
 80072f6:	f7ff bf00 	b.w	80070fa <__retarget_lock_acquire_recursive>
 80072fa:	bf00      	nop
 80072fc:	2000162c 	.word	0x2000162c

08007300 <__malloc_unlock>:
 8007300:	4801      	ldr	r0, [pc, #4]	@ (8007308 <__malloc_unlock+0x8>)
 8007302:	f7ff befb 	b.w	80070fc <__retarget_lock_release_recursive>
 8007306:	bf00      	nop
 8007308:	2000162c 	.word	0x2000162c

0800730c <__ssputs_r>:
 800730c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007310:	688e      	ldr	r6, [r1, #8]
 8007312:	461f      	mov	r7, r3
 8007314:	42be      	cmp	r6, r7
 8007316:	680b      	ldr	r3, [r1, #0]
 8007318:	4682      	mov	sl, r0
 800731a:	460c      	mov	r4, r1
 800731c:	4690      	mov	r8, r2
 800731e:	d82d      	bhi.n	800737c <__ssputs_r+0x70>
 8007320:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007324:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007328:	d026      	beq.n	8007378 <__ssputs_r+0x6c>
 800732a:	6965      	ldr	r5, [r4, #20]
 800732c:	6909      	ldr	r1, [r1, #16]
 800732e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007332:	eba3 0901 	sub.w	r9, r3, r1
 8007336:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800733a:	1c7b      	adds	r3, r7, #1
 800733c:	444b      	add	r3, r9
 800733e:	106d      	asrs	r5, r5, #1
 8007340:	429d      	cmp	r5, r3
 8007342:	bf38      	it	cc
 8007344:	461d      	movcc	r5, r3
 8007346:	0553      	lsls	r3, r2, #21
 8007348:	d527      	bpl.n	800739a <__ssputs_r+0x8e>
 800734a:	4629      	mov	r1, r5
 800734c:	f7ff ff52 	bl	80071f4 <_malloc_r>
 8007350:	4606      	mov	r6, r0
 8007352:	b360      	cbz	r0, 80073ae <__ssputs_r+0xa2>
 8007354:	6921      	ldr	r1, [r4, #16]
 8007356:	464a      	mov	r2, r9
 8007358:	f7ff fed1 	bl	80070fe <memcpy>
 800735c:	89a3      	ldrh	r3, [r4, #12]
 800735e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007366:	81a3      	strh	r3, [r4, #12]
 8007368:	6126      	str	r6, [r4, #16]
 800736a:	6165      	str	r5, [r4, #20]
 800736c:	444e      	add	r6, r9
 800736e:	eba5 0509 	sub.w	r5, r5, r9
 8007372:	6026      	str	r6, [r4, #0]
 8007374:	60a5      	str	r5, [r4, #8]
 8007376:	463e      	mov	r6, r7
 8007378:	42be      	cmp	r6, r7
 800737a:	d900      	bls.n	800737e <__ssputs_r+0x72>
 800737c:	463e      	mov	r6, r7
 800737e:	6820      	ldr	r0, [r4, #0]
 8007380:	4632      	mov	r2, r6
 8007382:	4641      	mov	r1, r8
 8007384:	f000 fbb6 	bl	8007af4 <memmove>
 8007388:	68a3      	ldr	r3, [r4, #8]
 800738a:	1b9b      	subs	r3, r3, r6
 800738c:	60a3      	str	r3, [r4, #8]
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	4433      	add	r3, r6
 8007392:	6023      	str	r3, [r4, #0]
 8007394:	2000      	movs	r0, #0
 8007396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800739a:	462a      	mov	r2, r5
 800739c:	f000 fbf6 	bl	8007b8c <_realloc_r>
 80073a0:	4606      	mov	r6, r0
 80073a2:	2800      	cmp	r0, #0
 80073a4:	d1e0      	bne.n	8007368 <__ssputs_r+0x5c>
 80073a6:	6921      	ldr	r1, [r4, #16]
 80073a8:	4650      	mov	r0, sl
 80073aa:	f7ff feb7 	bl	800711c <_free_r>
 80073ae:	230c      	movs	r3, #12
 80073b0:	f8ca 3000 	str.w	r3, [sl]
 80073b4:	89a3      	ldrh	r3, [r4, #12]
 80073b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073ba:	81a3      	strh	r3, [r4, #12]
 80073bc:	f04f 30ff 	mov.w	r0, #4294967295
 80073c0:	e7e9      	b.n	8007396 <__ssputs_r+0x8a>
	...

080073c4 <_svfiprintf_r>:
 80073c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c8:	4698      	mov	r8, r3
 80073ca:	898b      	ldrh	r3, [r1, #12]
 80073cc:	061b      	lsls	r3, r3, #24
 80073ce:	b09d      	sub	sp, #116	@ 0x74
 80073d0:	4607      	mov	r7, r0
 80073d2:	460d      	mov	r5, r1
 80073d4:	4614      	mov	r4, r2
 80073d6:	d510      	bpl.n	80073fa <_svfiprintf_r+0x36>
 80073d8:	690b      	ldr	r3, [r1, #16]
 80073da:	b973      	cbnz	r3, 80073fa <_svfiprintf_r+0x36>
 80073dc:	2140      	movs	r1, #64	@ 0x40
 80073de:	f7ff ff09 	bl	80071f4 <_malloc_r>
 80073e2:	6028      	str	r0, [r5, #0]
 80073e4:	6128      	str	r0, [r5, #16]
 80073e6:	b930      	cbnz	r0, 80073f6 <_svfiprintf_r+0x32>
 80073e8:	230c      	movs	r3, #12
 80073ea:	603b      	str	r3, [r7, #0]
 80073ec:	f04f 30ff 	mov.w	r0, #4294967295
 80073f0:	b01d      	add	sp, #116	@ 0x74
 80073f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f6:	2340      	movs	r3, #64	@ 0x40
 80073f8:	616b      	str	r3, [r5, #20]
 80073fa:	2300      	movs	r3, #0
 80073fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80073fe:	2320      	movs	r3, #32
 8007400:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007404:	f8cd 800c 	str.w	r8, [sp, #12]
 8007408:	2330      	movs	r3, #48	@ 0x30
 800740a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80075a8 <_svfiprintf_r+0x1e4>
 800740e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007412:	f04f 0901 	mov.w	r9, #1
 8007416:	4623      	mov	r3, r4
 8007418:	469a      	mov	sl, r3
 800741a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800741e:	b10a      	cbz	r2, 8007424 <_svfiprintf_r+0x60>
 8007420:	2a25      	cmp	r2, #37	@ 0x25
 8007422:	d1f9      	bne.n	8007418 <_svfiprintf_r+0x54>
 8007424:	ebba 0b04 	subs.w	fp, sl, r4
 8007428:	d00b      	beq.n	8007442 <_svfiprintf_r+0x7e>
 800742a:	465b      	mov	r3, fp
 800742c:	4622      	mov	r2, r4
 800742e:	4629      	mov	r1, r5
 8007430:	4638      	mov	r0, r7
 8007432:	f7ff ff6b 	bl	800730c <__ssputs_r>
 8007436:	3001      	adds	r0, #1
 8007438:	f000 80a7 	beq.w	800758a <_svfiprintf_r+0x1c6>
 800743c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800743e:	445a      	add	r2, fp
 8007440:	9209      	str	r2, [sp, #36]	@ 0x24
 8007442:	f89a 3000 	ldrb.w	r3, [sl]
 8007446:	2b00      	cmp	r3, #0
 8007448:	f000 809f 	beq.w	800758a <_svfiprintf_r+0x1c6>
 800744c:	2300      	movs	r3, #0
 800744e:	f04f 32ff 	mov.w	r2, #4294967295
 8007452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007456:	f10a 0a01 	add.w	sl, sl, #1
 800745a:	9304      	str	r3, [sp, #16]
 800745c:	9307      	str	r3, [sp, #28]
 800745e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007462:	931a      	str	r3, [sp, #104]	@ 0x68
 8007464:	4654      	mov	r4, sl
 8007466:	2205      	movs	r2, #5
 8007468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800746c:	484e      	ldr	r0, [pc, #312]	@ (80075a8 <_svfiprintf_r+0x1e4>)
 800746e:	f7f8 feaf 	bl	80001d0 <memchr>
 8007472:	9a04      	ldr	r2, [sp, #16]
 8007474:	b9d8      	cbnz	r0, 80074ae <_svfiprintf_r+0xea>
 8007476:	06d0      	lsls	r0, r2, #27
 8007478:	bf44      	itt	mi
 800747a:	2320      	movmi	r3, #32
 800747c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007480:	0711      	lsls	r1, r2, #28
 8007482:	bf44      	itt	mi
 8007484:	232b      	movmi	r3, #43	@ 0x2b
 8007486:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800748a:	f89a 3000 	ldrb.w	r3, [sl]
 800748e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007490:	d015      	beq.n	80074be <_svfiprintf_r+0xfa>
 8007492:	9a07      	ldr	r2, [sp, #28]
 8007494:	4654      	mov	r4, sl
 8007496:	2000      	movs	r0, #0
 8007498:	f04f 0c0a 	mov.w	ip, #10
 800749c:	4621      	mov	r1, r4
 800749e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074a2:	3b30      	subs	r3, #48	@ 0x30
 80074a4:	2b09      	cmp	r3, #9
 80074a6:	d94b      	bls.n	8007540 <_svfiprintf_r+0x17c>
 80074a8:	b1b0      	cbz	r0, 80074d8 <_svfiprintf_r+0x114>
 80074aa:	9207      	str	r2, [sp, #28]
 80074ac:	e014      	b.n	80074d8 <_svfiprintf_r+0x114>
 80074ae:	eba0 0308 	sub.w	r3, r0, r8
 80074b2:	fa09 f303 	lsl.w	r3, r9, r3
 80074b6:	4313      	orrs	r3, r2
 80074b8:	9304      	str	r3, [sp, #16]
 80074ba:	46a2      	mov	sl, r4
 80074bc:	e7d2      	b.n	8007464 <_svfiprintf_r+0xa0>
 80074be:	9b03      	ldr	r3, [sp, #12]
 80074c0:	1d19      	adds	r1, r3, #4
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	9103      	str	r1, [sp, #12]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	bfbb      	ittet	lt
 80074ca:	425b      	neglt	r3, r3
 80074cc:	f042 0202 	orrlt.w	r2, r2, #2
 80074d0:	9307      	strge	r3, [sp, #28]
 80074d2:	9307      	strlt	r3, [sp, #28]
 80074d4:	bfb8      	it	lt
 80074d6:	9204      	strlt	r2, [sp, #16]
 80074d8:	7823      	ldrb	r3, [r4, #0]
 80074da:	2b2e      	cmp	r3, #46	@ 0x2e
 80074dc:	d10a      	bne.n	80074f4 <_svfiprintf_r+0x130>
 80074de:	7863      	ldrb	r3, [r4, #1]
 80074e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80074e2:	d132      	bne.n	800754a <_svfiprintf_r+0x186>
 80074e4:	9b03      	ldr	r3, [sp, #12]
 80074e6:	1d1a      	adds	r2, r3, #4
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	9203      	str	r2, [sp, #12]
 80074ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074f0:	3402      	adds	r4, #2
 80074f2:	9305      	str	r3, [sp, #20]
 80074f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80075b8 <_svfiprintf_r+0x1f4>
 80074f8:	7821      	ldrb	r1, [r4, #0]
 80074fa:	2203      	movs	r2, #3
 80074fc:	4650      	mov	r0, sl
 80074fe:	f7f8 fe67 	bl	80001d0 <memchr>
 8007502:	b138      	cbz	r0, 8007514 <_svfiprintf_r+0x150>
 8007504:	9b04      	ldr	r3, [sp, #16]
 8007506:	eba0 000a 	sub.w	r0, r0, sl
 800750a:	2240      	movs	r2, #64	@ 0x40
 800750c:	4082      	lsls	r2, r0
 800750e:	4313      	orrs	r3, r2
 8007510:	3401      	adds	r4, #1
 8007512:	9304      	str	r3, [sp, #16]
 8007514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007518:	4824      	ldr	r0, [pc, #144]	@ (80075ac <_svfiprintf_r+0x1e8>)
 800751a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800751e:	2206      	movs	r2, #6
 8007520:	f7f8 fe56 	bl	80001d0 <memchr>
 8007524:	2800      	cmp	r0, #0
 8007526:	d036      	beq.n	8007596 <_svfiprintf_r+0x1d2>
 8007528:	4b21      	ldr	r3, [pc, #132]	@ (80075b0 <_svfiprintf_r+0x1ec>)
 800752a:	bb1b      	cbnz	r3, 8007574 <_svfiprintf_r+0x1b0>
 800752c:	9b03      	ldr	r3, [sp, #12]
 800752e:	3307      	adds	r3, #7
 8007530:	f023 0307 	bic.w	r3, r3, #7
 8007534:	3308      	adds	r3, #8
 8007536:	9303      	str	r3, [sp, #12]
 8007538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800753a:	4433      	add	r3, r6
 800753c:	9309      	str	r3, [sp, #36]	@ 0x24
 800753e:	e76a      	b.n	8007416 <_svfiprintf_r+0x52>
 8007540:	fb0c 3202 	mla	r2, ip, r2, r3
 8007544:	460c      	mov	r4, r1
 8007546:	2001      	movs	r0, #1
 8007548:	e7a8      	b.n	800749c <_svfiprintf_r+0xd8>
 800754a:	2300      	movs	r3, #0
 800754c:	3401      	adds	r4, #1
 800754e:	9305      	str	r3, [sp, #20]
 8007550:	4619      	mov	r1, r3
 8007552:	f04f 0c0a 	mov.w	ip, #10
 8007556:	4620      	mov	r0, r4
 8007558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800755c:	3a30      	subs	r2, #48	@ 0x30
 800755e:	2a09      	cmp	r2, #9
 8007560:	d903      	bls.n	800756a <_svfiprintf_r+0x1a6>
 8007562:	2b00      	cmp	r3, #0
 8007564:	d0c6      	beq.n	80074f4 <_svfiprintf_r+0x130>
 8007566:	9105      	str	r1, [sp, #20]
 8007568:	e7c4      	b.n	80074f4 <_svfiprintf_r+0x130>
 800756a:	fb0c 2101 	mla	r1, ip, r1, r2
 800756e:	4604      	mov	r4, r0
 8007570:	2301      	movs	r3, #1
 8007572:	e7f0      	b.n	8007556 <_svfiprintf_r+0x192>
 8007574:	ab03      	add	r3, sp, #12
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	462a      	mov	r2, r5
 800757a:	4b0e      	ldr	r3, [pc, #56]	@ (80075b4 <_svfiprintf_r+0x1f0>)
 800757c:	a904      	add	r1, sp, #16
 800757e:	4638      	mov	r0, r7
 8007580:	f3af 8000 	nop.w
 8007584:	1c42      	adds	r2, r0, #1
 8007586:	4606      	mov	r6, r0
 8007588:	d1d6      	bne.n	8007538 <_svfiprintf_r+0x174>
 800758a:	89ab      	ldrh	r3, [r5, #12]
 800758c:	065b      	lsls	r3, r3, #25
 800758e:	f53f af2d 	bmi.w	80073ec <_svfiprintf_r+0x28>
 8007592:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007594:	e72c      	b.n	80073f0 <_svfiprintf_r+0x2c>
 8007596:	ab03      	add	r3, sp, #12
 8007598:	9300      	str	r3, [sp, #0]
 800759a:	462a      	mov	r2, r5
 800759c:	4b05      	ldr	r3, [pc, #20]	@ (80075b4 <_svfiprintf_r+0x1f0>)
 800759e:	a904      	add	r1, sp, #16
 80075a0:	4638      	mov	r0, r7
 80075a2:	f000 f879 	bl	8007698 <_printf_i>
 80075a6:	e7ed      	b.n	8007584 <_svfiprintf_r+0x1c0>
 80075a8:	08007efd 	.word	0x08007efd
 80075ac:	08007f07 	.word	0x08007f07
 80075b0:	00000000 	.word	0x00000000
 80075b4:	0800730d 	.word	0x0800730d
 80075b8:	08007f03 	.word	0x08007f03

080075bc <_printf_common>:
 80075bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075c0:	4616      	mov	r6, r2
 80075c2:	4698      	mov	r8, r3
 80075c4:	688a      	ldr	r2, [r1, #8]
 80075c6:	690b      	ldr	r3, [r1, #16]
 80075c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075cc:	4293      	cmp	r3, r2
 80075ce:	bfb8      	it	lt
 80075d0:	4613      	movlt	r3, r2
 80075d2:	6033      	str	r3, [r6, #0]
 80075d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075d8:	4607      	mov	r7, r0
 80075da:	460c      	mov	r4, r1
 80075dc:	b10a      	cbz	r2, 80075e2 <_printf_common+0x26>
 80075de:	3301      	adds	r3, #1
 80075e0:	6033      	str	r3, [r6, #0]
 80075e2:	6823      	ldr	r3, [r4, #0]
 80075e4:	0699      	lsls	r1, r3, #26
 80075e6:	bf42      	ittt	mi
 80075e8:	6833      	ldrmi	r3, [r6, #0]
 80075ea:	3302      	addmi	r3, #2
 80075ec:	6033      	strmi	r3, [r6, #0]
 80075ee:	6825      	ldr	r5, [r4, #0]
 80075f0:	f015 0506 	ands.w	r5, r5, #6
 80075f4:	d106      	bne.n	8007604 <_printf_common+0x48>
 80075f6:	f104 0a19 	add.w	sl, r4, #25
 80075fa:	68e3      	ldr	r3, [r4, #12]
 80075fc:	6832      	ldr	r2, [r6, #0]
 80075fe:	1a9b      	subs	r3, r3, r2
 8007600:	42ab      	cmp	r3, r5
 8007602:	dc26      	bgt.n	8007652 <_printf_common+0x96>
 8007604:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007608:	6822      	ldr	r2, [r4, #0]
 800760a:	3b00      	subs	r3, #0
 800760c:	bf18      	it	ne
 800760e:	2301      	movne	r3, #1
 8007610:	0692      	lsls	r2, r2, #26
 8007612:	d42b      	bmi.n	800766c <_printf_common+0xb0>
 8007614:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007618:	4641      	mov	r1, r8
 800761a:	4638      	mov	r0, r7
 800761c:	47c8      	blx	r9
 800761e:	3001      	adds	r0, #1
 8007620:	d01e      	beq.n	8007660 <_printf_common+0xa4>
 8007622:	6823      	ldr	r3, [r4, #0]
 8007624:	6922      	ldr	r2, [r4, #16]
 8007626:	f003 0306 	and.w	r3, r3, #6
 800762a:	2b04      	cmp	r3, #4
 800762c:	bf02      	ittt	eq
 800762e:	68e5      	ldreq	r5, [r4, #12]
 8007630:	6833      	ldreq	r3, [r6, #0]
 8007632:	1aed      	subeq	r5, r5, r3
 8007634:	68a3      	ldr	r3, [r4, #8]
 8007636:	bf0c      	ite	eq
 8007638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800763c:	2500      	movne	r5, #0
 800763e:	4293      	cmp	r3, r2
 8007640:	bfc4      	itt	gt
 8007642:	1a9b      	subgt	r3, r3, r2
 8007644:	18ed      	addgt	r5, r5, r3
 8007646:	2600      	movs	r6, #0
 8007648:	341a      	adds	r4, #26
 800764a:	42b5      	cmp	r5, r6
 800764c:	d11a      	bne.n	8007684 <_printf_common+0xc8>
 800764e:	2000      	movs	r0, #0
 8007650:	e008      	b.n	8007664 <_printf_common+0xa8>
 8007652:	2301      	movs	r3, #1
 8007654:	4652      	mov	r2, sl
 8007656:	4641      	mov	r1, r8
 8007658:	4638      	mov	r0, r7
 800765a:	47c8      	blx	r9
 800765c:	3001      	adds	r0, #1
 800765e:	d103      	bne.n	8007668 <_printf_common+0xac>
 8007660:	f04f 30ff 	mov.w	r0, #4294967295
 8007664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007668:	3501      	adds	r5, #1
 800766a:	e7c6      	b.n	80075fa <_printf_common+0x3e>
 800766c:	18e1      	adds	r1, r4, r3
 800766e:	1c5a      	adds	r2, r3, #1
 8007670:	2030      	movs	r0, #48	@ 0x30
 8007672:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007676:	4422      	add	r2, r4
 8007678:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800767c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007680:	3302      	adds	r3, #2
 8007682:	e7c7      	b.n	8007614 <_printf_common+0x58>
 8007684:	2301      	movs	r3, #1
 8007686:	4622      	mov	r2, r4
 8007688:	4641      	mov	r1, r8
 800768a:	4638      	mov	r0, r7
 800768c:	47c8      	blx	r9
 800768e:	3001      	adds	r0, #1
 8007690:	d0e6      	beq.n	8007660 <_printf_common+0xa4>
 8007692:	3601      	adds	r6, #1
 8007694:	e7d9      	b.n	800764a <_printf_common+0x8e>
	...

08007698 <_printf_i>:
 8007698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800769c:	7e0f      	ldrb	r7, [r1, #24]
 800769e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076a0:	2f78      	cmp	r7, #120	@ 0x78
 80076a2:	4691      	mov	r9, r2
 80076a4:	4680      	mov	r8, r0
 80076a6:	460c      	mov	r4, r1
 80076a8:	469a      	mov	sl, r3
 80076aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80076ae:	d807      	bhi.n	80076c0 <_printf_i+0x28>
 80076b0:	2f62      	cmp	r7, #98	@ 0x62
 80076b2:	d80a      	bhi.n	80076ca <_printf_i+0x32>
 80076b4:	2f00      	cmp	r7, #0
 80076b6:	f000 80d2 	beq.w	800785e <_printf_i+0x1c6>
 80076ba:	2f58      	cmp	r7, #88	@ 0x58
 80076bc:	f000 80b9 	beq.w	8007832 <_printf_i+0x19a>
 80076c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80076c8:	e03a      	b.n	8007740 <_printf_i+0xa8>
 80076ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076ce:	2b15      	cmp	r3, #21
 80076d0:	d8f6      	bhi.n	80076c0 <_printf_i+0x28>
 80076d2:	a101      	add	r1, pc, #4	@ (adr r1, 80076d8 <_printf_i+0x40>)
 80076d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076d8:	08007731 	.word	0x08007731
 80076dc:	08007745 	.word	0x08007745
 80076e0:	080076c1 	.word	0x080076c1
 80076e4:	080076c1 	.word	0x080076c1
 80076e8:	080076c1 	.word	0x080076c1
 80076ec:	080076c1 	.word	0x080076c1
 80076f0:	08007745 	.word	0x08007745
 80076f4:	080076c1 	.word	0x080076c1
 80076f8:	080076c1 	.word	0x080076c1
 80076fc:	080076c1 	.word	0x080076c1
 8007700:	080076c1 	.word	0x080076c1
 8007704:	08007845 	.word	0x08007845
 8007708:	0800776f 	.word	0x0800776f
 800770c:	080077ff 	.word	0x080077ff
 8007710:	080076c1 	.word	0x080076c1
 8007714:	080076c1 	.word	0x080076c1
 8007718:	08007867 	.word	0x08007867
 800771c:	080076c1 	.word	0x080076c1
 8007720:	0800776f 	.word	0x0800776f
 8007724:	080076c1 	.word	0x080076c1
 8007728:	080076c1 	.word	0x080076c1
 800772c:	08007807 	.word	0x08007807
 8007730:	6833      	ldr	r3, [r6, #0]
 8007732:	1d1a      	adds	r2, r3, #4
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6032      	str	r2, [r6, #0]
 8007738:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800773c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007740:	2301      	movs	r3, #1
 8007742:	e09d      	b.n	8007880 <_printf_i+0x1e8>
 8007744:	6833      	ldr	r3, [r6, #0]
 8007746:	6820      	ldr	r0, [r4, #0]
 8007748:	1d19      	adds	r1, r3, #4
 800774a:	6031      	str	r1, [r6, #0]
 800774c:	0606      	lsls	r6, r0, #24
 800774e:	d501      	bpl.n	8007754 <_printf_i+0xbc>
 8007750:	681d      	ldr	r5, [r3, #0]
 8007752:	e003      	b.n	800775c <_printf_i+0xc4>
 8007754:	0645      	lsls	r5, r0, #25
 8007756:	d5fb      	bpl.n	8007750 <_printf_i+0xb8>
 8007758:	f9b3 5000 	ldrsh.w	r5, [r3]
 800775c:	2d00      	cmp	r5, #0
 800775e:	da03      	bge.n	8007768 <_printf_i+0xd0>
 8007760:	232d      	movs	r3, #45	@ 0x2d
 8007762:	426d      	negs	r5, r5
 8007764:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007768:	4859      	ldr	r0, [pc, #356]	@ (80078d0 <_printf_i+0x238>)
 800776a:	230a      	movs	r3, #10
 800776c:	e011      	b.n	8007792 <_printf_i+0xfa>
 800776e:	6821      	ldr	r1, [r4, #0]
 8007770:	6833      	ldr	r3, [r6, #0]
 8007772:	0608      	lsls	r0, r1, #24
 8007774:	f853 5b04 	ldr.w	r5, [r3], #4
 8007778:	d402      	bmi.n	8007780 <_printf_i+0xe8>
 800777a:	0649      	lsls	r1, r1, #25
 800777c:	bf48      	it	mi
 800777e:	b2ad      	uxthmi	r5, r5
 8007780:	2f6f      	cmp	r7, #111	@ 0x6f
 8007782:	4853      	ldr	r0, [pc, #332]	@ (80078d0 <_printf_i+0x238>)
 8007784:	6033      	str	r3, [r6, #0]
 8007786:	bf14      	ite	ne
 8007788:	230a      	movne	r3, #10
 800778a:	2308      	moveq	r3, #8
 800778c:	2100      	movs	r1, #0
 800778e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007792:	6866      	ldr	r6, [r4, #4]
 8007794:	60a6      	str	r6, [r4, #8]
 8007796:	2e00      	cmp	r6, #0
 8007798:	bfa2      	ittt	ge
 800779a:	6821      	ldrge	r1, [r4, #0]
 800779c:	f021 0104 	bicge.w	r1, r1, #4
 80077a0:	6021      	strge	r1, [r4, #0]
 80077a2:	b90d      	cbnz	r5, 80077a8 <_printf_i+0x110>
 80077a4:	2e00      	cmp	r6, #0
 80077a6:	d04b      	beq.n	8007840 <_printf_i+0x1a8>
 80077a8:	4616      	mov	r6, r2
 80077aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80077ae:	fb03 5711 	mls	r7, r3, r1, r5
 80077b2:	5dc7      	ldrb	r7, [r0, r7]
 80077b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077b8:	462f      	mov	r7, r5
 80077ba:	42bb      	cmp	r3, r7
 80077bc:	460d      	mov	r5, r1
 80077be:	d9f4      	bls.n	80077aa <_printf_i+0x112>
 80077c0:	2b08      	cmp	r3, #8
 80077c2:	d10b      	bne.n	80077dc <_printf_i+0x144>
 80077c4:	6823      	ldr	r3, [r4, #0]
 80077c6:	07df      	lsls	r7, r3, #31
 80077c8:	d508      	bpl.n	80077dc <_printf_i+0x144>
 80077ca:	6923      	ldr	r3, [r4, #16]
 80077cc:	6861      	ldr	r1, [r4, #4]
 80077ce:	4299      	cmp	r1, r3
 80077d0:	bfde      	ittt	le
 80077d2:	2330      	movle	r3, #48	@ 0x30
 80077d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80077dc:	1b92      	subs	r2, r2, r6
 80077de:	6122      	str	r2, [r4, #16]
 80077e0:	f8cd a000 	str.w	sl, [sp]
 80077e4:	464b      	mov	r3, r9
 80077e6:	aa03      	add	r2, sp, #12
 80077e8:	4621      	mov	r1, r4
 80077ea:	4640      	mov	r0, r8
 80077ec:	f7ff fee6 	bl	80075bc <_printf_common>
 80077f0:	3001      	adds	r0, #1
 80077f2:	d14a      	bne.n	800788a <_printf_i+0x1f2>
 80077f4:	f04f 30ff 	mov.w	r0, #4294967295
 80077f8:	b004      	add	sp, #16
 80077fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	f043 0320 	orr.w	r3, r3, #32
 8007804:	6023      	str	r3, [r4, #0]
 8007806:	4833      	ldr	r0, [pc, #204]	@ (80078d4 <_printf_i+0x23c>)
 8007808:	2778      	movs	r7, #120	@ 0x78
 800780a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800780e:	6823      	ldr	r3, [r4, #0]
 8007810:	6831      	ldr	r1, [r6, #0]
 8007812:	061f      	lsls	r7, r3, #24
 8007814:	f851 5b04 	ldr.w	r5, [r1], #4
 8007818:	d402      	bmi.n	8007820 <_printf_i+0x188>
 800781a:	065f      	lsls	r7, r3, #25
 800781c:	bf48      	it	mi
 800781e:	b2ad      	uxthmi	r5, r5
 8007820:	6031      	str	r1, [r6, #0]
 8007822:	07d9      	lsls	r1, r3, #31
 8007824:	bf44      	itt	mi
 8007826:	f043 0320 	orrmi.w	r3, r3, #32
 800782a:	6023      	strmi	r3, [r4, #0]
 800782c:	b11d      	cbz	r5, 8007836 <_printf_i+0x19e>
 800782e:	2310      	movs	r3, #16
 8007830:	e7ac      	b.n	800778c <_printf_i+0xf4>
 8007832:	4827      	ldr	r0, [pc, #156]	@ (80078d0 <_printf_i+0x238>)
 8007834:	e7e9      	b.n	800780a <_printf_i+0x172>
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	f023 0320 	bic.w	r3, r3, #32
 800783c:	6023      	str	r3, [r4, #0]
 800783e:	e7f6      	b.n	800782e <_printf_i+0x196>
 8007840:	4616      	mov	r6, r2
 8007842:	e7bd      	b.n	80077c0 <_printf_i+0x128>
 8007844:	6833      	ldr	r3, [r6, #0]
 8007846:	6825      	ldr	r5, [r4, #0]
 8007848:	6961      	ldr	r1, [r4, #20]
 800784a:	1d18      	adds	r0, r3, #4
 800784c:	6030      	str	r0, [r6, #0]
 800784e:	062e      	lsls	r6, r5, #24
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	d501      	bpl.n	8007858 <_printf_i+0x1c0>
 8007854:	6019      	str	r1, [r3, #0]
 8007856:	e002      	b.n	800785e <_printf_i+0x1c6>
 8007858:	0668      	lsls	r0, r5, #25
 800785a:	d5fb      	bpl.n	8007854 <_printf_i+0x1bc>
 800785c:	8019      	strh	r1, [r3, #0]
 800785e:	2300      	movs	r3, #0
 8007860:	6123      	str	r3, [r4, #16]
 8007862:	4616      	mov	r6, r2
 8007864:	e7bc      	b.n	80077e0 <_printf_i+0x148>
 8007866:	6833      	ldr	r3, [r6, #0]
 8007868:	1d1a      	adds	r2, r3, #4
 800786a:	6032      	str	r2, [r6, #0]
 800786c:	681e      	ldr	r6, [r3, #0]
 800786e:	6862      	ldr	r2, [r4, #4]
 8007870:	2100      	movs	r1, #0
 8007872:	4630      	mov	r0, r6
 8007874:	f7f8 fcac 	bl	80001d0 <memchr>
 8007878:	b108      	cbz	r0, 800787e <_printf_i+0x1e6>
 800787a:	1b80      	subs	r0, r0, r6
 800787c:	6060      	str	r0, [r4, #4]
 800787e:	6863      	ldr	r3, [r4, #4]
 8007880:	6123      	str	r3, [r4, #16]
 8007882:	2300      	movs	r3, #0
 8007884:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007888:	e7aa      	b.n	80077e0 <_printf_i+0x148>
 800788a:	6923      	ldr	r3, [r4, #16]
 800788c:	4632      	mov	r2, r6
 800788e:	4649      	mov	r1, r9
 8007890:	4640      	mov	r0, r8
 8007892:	47d0      	blx	sl
 8007894:	3001      	adds	r0, #1
 8007896:	d0ad      	beq.n	80077f4 <_printf_i+0x15c>
 8007898:	6823      	ldr	r3, [r4, #0]
 800789a:	079b      	lsls	r3, r3, #30
 800789c:	d413      	bmi.n	80078c6 <_printf_i+0x22e>
 800789e:	68e0      	ldr	r0, [r4, #12]
 80078a0:	9b03      	ldr	r3, [sp, #12]
 80078a2:	4298      	cmp	r0, r3
 80078a4:	bfb8      	it	lt
 80078a6:	4618      	movlt	r0, r3
 80078a8:	e7a6      	b.n	80077f8 <_printf_i+0x160>
 80078aa:	2301      	movs	r3, #1
 80078ac:	4632      	mov	r2, r6
 80078ae:	4649      	mov	r1, r9
 80078b0:	4640      	mov	r0, r8
 80078b2:	47d0      	blx	sl
 80078b4:	3001      	adds	r0, #1
 80078b6:	d09d      	beq.n	80077f4 <_printf_i+0x15c>
 80078b8:	3501      	adds	r5, #1
 80078ba:	68e3      	ldr	r3, [r4, #12]
 80078bc:	9903      	ldr	r1, [sp, #12]
 80078be:	1a5b      	subs	r3, r3, r1
 80078c0:	42ab      	cmp	r3, r5
 80078c2:	dcf2      	bgt.n	80078aa <_printf_i+0x212>
 80078c4:	e7eb      	b.n	800789e <_printf_i+0x206>
 80078c6:	2500      	movs	r5, #0
 80078c8:	f104 0619 	add.w	r6, r4, #25
 80078cc:	e7f5      	b.n	80078ba <_printf_i+0x222>
 80078ce:	bf00      	nop
 80078d0:	08007f0e 	.word	0x08007f0e
 80078d4:	08007f1f 	.word	0x08007f1f

080078d8 <__sflush_r>:
 80078d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e0:	0716      	lsls	r6, r2, #28
 80078e2:	4605      	mov	r5, r0
 80078e4:	460c      	mov	r4, r1
 80078e6:	d454      	bmi.n	8007992 <__sflush_r+0xba>
 80078e8:	684b      	ldr	r3, [r1, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	dc02      	bgt.n	80078f4 <__sflush_r+0x1c>
 80078ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	dd48      	ble.n	8007986 <__sflush_r+0xae>
 80078f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078f6:	2e00      	cmp	r6, #0
 80078f8:	d045      	beq.n	8007986 <__sflush_r+0xae>
 80078fa:	2300      	movs	r3, #0
 80078fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007900:	682f      	ldr	r7, [r5, #0]
 8007902:	6a21      	ldr	r1, [r4, #32]
 8007904:	602b      	str	r3, [r5, #0]
 8007906:	d030      	beq.n	800796a <__sflush_r+0x92>
 8007908:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800790a:	89a3      	ldrh	r3, [r4, #12]
 800790c:	0759      	lsls	r1, r3, #29
 800790e:	d505      	bpl.n	800791c <__sflush_r+0x44>
 8007910:	6863      	ldr	r3, [r4, #4]
 8007912:	1ad2      	subs	r2, r2, r3
 8007914:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007916:	b10b      	cbz	r3, 800791c <__sflush_r+0x44>
 8007918:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800791a:	1ad2      	subs	r2, r2, r3
 800791c:	2300      	movs	r3, #0
 800791e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007920:	6a21      	ldr	r1, [r4, #32]
 8007922:	4628      	mov	r0, r5
 8007924:	47b0      	blx	r6
 8007926:	1c43      	adds	r3, r0, #1
 8007928:	89a3      	ldrh	r3, [r4, #12]
 800792a:	d106      	bne.n	800793a <__sflush_r+0x62>
 800792c:	6829      	ldr	r1, [r5, #0]
 800792e:	291d      	cmp	r1, #29
 8007930:	d82b      	bhi.n	800798a <__sflush_r+0xb2>
 8007932:	4a2a      	ldr	r2, [pc, #168]	@ (80079dc <__sflush_r+0x104>)
 8007934:	410a      	asrs	r2, r1
 8007936:	07d6      	lsls	r6, r2, #31
 8007938:	d427      	bmi.n	800798a <__sflush_r+0xb2>
 800793a:	2200      	movs	r2, #0
 800793c:	6062      	str	r2, [r4, #4]
 800793e:	04d9      	lsls	r1, r3, #19
 8007940:	6922      	ldr	r2, [r4, #16]
 8007942:	6022      	str	r2, [r4, #0]
 8007944:	d504      	bpl.n	8007950 <__sflush_r+0x78>
 8007946:	1c42      	adds	r2, r0, #1
 8007948:	d101      	bne.n	800794e <__sflush_r+0x76>
 800794a:	682b      	ldr	r3, [r5, #0]
 800794c:	b903      	cbnz	r3, 8007950 <__sflush_r+0x78>
 800794e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007950:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007952:	602f      	str	r7, [r5, #0]
 8007954:	b1b9      	cbz	r1, 8007986 <__sflush_r+0xae>
 8007956:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800795a:	4299      	cmp	r1, r3
 800795c:	d002      	beq.n	8007964 <__sflush_r+0x8c>
 800795e:	4628      	mov	r0, r5
 8007960:	f7ff fbdc 	bl	800711c <_free_r>
 8007964:	2300      	movs	r3, #0
 8007966:	6363      	str	r3, [r4, #52]	@ 0x34
 8007968:	e00d      	b.n	8007986 <__sflush_r+0xae>
 800796a:	2301      	movs	r3, #1
 800796c:	4628      	mov	r0, r5
 800796e:	47b0      	blx	r6
 8007970:	4602      	mov	r2, r0
 8007972:	1c50      	adds	r0, r2, #1
 8007974:	d1c9      	bne.n	800790a <__sflush_r+0x32>
 8007976:	682b      	ldr	r3, [r5, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d0c6      	beq.n	800790a <__sflush_r+0x32>
 800797c:	2b1d      	cmp	r3, #29
 800797e:	d001      	beq.n	8007984 <__sflush_r+0xac>
 8007980:	2b16      	cmp	r3, #22
 8007982:	d11e      	bne.n	80079c2 <__sflush_r+0xea>
 8007984:	602f      	str	r7, [r5, #0]
 8007986:	2000      	movs	r0, #0
 8007988:	e022      	b.n	80079d0 <__sflush_r+0xf8>
 800798a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800798e:	b21b      	sxth	r3, r3
 8007990:	e01b      	b.n	80079ca <__sflush_r+0xf2>
 8007992:	690f      	ldr	r7, [r1, #16]
 8007994:	2f00      	cmp	r7, #0
 8007996:	d0f6      	beq.n	8007986 <__sflush_r+0xae>
 8007998:	0793      	lsls	r3, r2, #30
 800799a:	680e      	ldr	r6, [r1, #0]
 800799c:	bf08      	it	eq
 800799e:	694b      	ldreq	r3, [r1, #20]
 80079a0:	600f      	str	r7, [r1, #0]
 80079a2:	bf18      	it	ne
 80079a4:	2300      	movne	r3, #0
 80079a6:	eba6 0807 	sub.w	r8, r6, r7
 80079aa:	608b      	str	r3, [r1, #8]
 80079ac:	f1b8 0f00 	cmp.w	r8, #0
 80079b0:	dde9      	ble.n	8007986 <__sflush_r+0xae>
 80079b2:	6a21      	ldr	r1, [r4, #32]
 80079b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80079b6:	4643      	mov	r3, r8
 80079b8:	463a      	mov	r2, r7
 80079ba:	4628      	mov	r0, r5
 80079bc:	47b0      	blx	r6
 80079be:	2800      	cmp	r0, #0
 80079c0:	dc08      	bgt.n	80079d4 <__sflush_r+0xfc>
 80079c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079ca:	81a3      	strh	r3, [r4, #12]
 80079cc:	f04f 30ff 	mov.w	r0, #4294967295
 80079d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079d4:	4407      	add	r7, r0
 80079d6:	eba8 0800 	sub.w	r8, r8, r0
 80079da:	e7e7      	b.n	80079ac <__sflush_r+0xd4>
 80079dc:	dfbffffe 	.word	0xdfbffffe

080079e0 <_fflush_r>:
 80079e0:	b538      	push	{r3, r4, r5, lr}
 80079e2:	690b      	ldr	r3, [r1, #16]
 80079e4:	4605      	mov	r5, r0
 80079e6:	460c      	mov	r4, r1
 80079e8:	b913      	cbnz	r3, 80079f0 <_fflush_r+0x10>
 80079ea:	2500      	movs	r5, #0
 80079ec:	4628      	mov	r0, r5
 80079ee:	bd38      	pop	{r3, r4, r5, pc}
 80079f0:	b118      	cbz	r0, 80079fa <_fflush_r+0x1a>
 80079f2:	6a03      	ldr	r3, [r0, #32]
 80079f4:	b90b      	cbnz	r3, 80079fa <_fflush_r+0x1a>
 80079f6:	f7ff f911 	bl	8006c1c <__sinit>
 80079fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d0f3      	beq.n	80079ea <_fflush_r+0xa>
 8007a02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a04:	07d0      	lsls	r0, r2, #31
 8007a06:	d404      	bmi.n	8007a12 <_fflush_r+0x32>
 8007a08:	0599      	lsls	r1, r3, #22
 8007a0a:	d402      	bmi.n	8007a12 <_fflush_r+0x32>
 8007a0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a0e:	f7ff fb74 	bl	80070fa <__retarget_lock_acquire_recursive>
 8007a12:	4628      	mov	r0, r5
 8007a14:	4621      	mov	r1, r4
 8007a16:	f7ff ff5f 	bl	80078d8 <__sflush_r>
 8007a1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a1c:	07da      	lsls	r2, r3, #31
 8007a1e:	4605      	mov	r5, r0
 8007a20:	d4e4      	bmi.n	80079ec <_fflush_r+0xc>
 8007a22:	89a3      	ldrh	r3, [r4, #12]
 8007a24:	059b      	lsls	r3, r3, #22
 8007a26:	d4e1      	bmi.n	80079ec <_fflush_r+0xc>
 8007a28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a2a:	f7ff fb67 	bl	80070fc <__retarget_lock_release_recursive>
 8007a2e:	e7dd      	b.n	80079ec <_fflush_r+0xc>

08007a30 <__swhatbuf_r>:
 8007a30:	b570      	push	{r4, r5, r6, lr}
 8007a32:	460c      	mov	r4, r1
 8007a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a38:	2900      	cmp	r1, #0
 8007a3a:	b096      	sub	sp, #88	@ 0x58
 8007a3c:	4615      	mov	r5, r2
 8007a3e:	461e      	mov	r6, r3
 8007a40:	da0d      	bge.n	8007a5e <__swhatbuf_r+0x2e>
 8007a42:	89a3      	ldrh	r3, [r4, #12]
 8007a44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a48:	f04f 0100 	mov.w	r1, #0
 8007a4c:	bf14      	ite	ne
 8007a4e:	2340      	movne	r3, #64	@ 0x40
 8007a50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a54:	2000      	movs	r0, #0
 8007a56:	6031      	str	r1, [r6, #0]
 8007a58:	602b      	str	r3, [r5, #0]
 8007a5a:	b016      	add	sp, #88	@ 0x58
 8007a5c:	bd70      	pop	{r4, r5, r6, pc}
 8007a5e:	466a      	mov	r2, sp
 8007a60:	f000 f862 	bl	8007b28 <_fstat_r>
 8007a64:	2800      	cmp	r0, #0
 8007a66:	dbec      	blt.n	8007a42 <__swhatbuf_r+0x12>
 8007a68:	9901      	ldr	r1, [sp, #4]
 8007a6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a72:	4259      	negs	r1, r3
 8007a74:	4159      	adcs	r1, r3
 8007a76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a7a:	e7eb      	b.n	8007a54 <__swhatbuf_r+0x24>

08007a7c <__smakebuf_r>:
 8007a7c:	898b      	ldrh	r3, [r1, #12]
 8007a7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a80:	079d      	lsls	r5, r3, #30
 8007a82:	4606      	mov	r6, r0
 8007a84:	460c      	mov	r4, r1
 8007a86:	d507      	bpl.n	8007a98 <__smakebuf_r+0x1c>
 8007a88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a8c:	6023      	str	r3, [r4, #0]
 8007a8e:	6123      	str	r3, [r4, #16]
 8007a90:	2301      	movs	r3, #1
 8007a92:	6163      	str	r3, [r4, #20]
 8007a94:	b003      	add	sp, #12
 8007a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a98:	ab01      	add	r3, sp, #4
 8007a9a:	466a      	mov	r2, sp
 8007a9c:	f7ff ffc8 	bl	8007a30 <__swhatbuf_r>
 8007aa0:	9f00      	ldr	r7, [sp, #0]
 8007aa2:	4605      	mov	r5, r0
 8007aa4:	4639      	mov	r1, r7
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	f7ff fba4 	bl	80071f4 <_malloc_r>
 8007aac:	b948      	cbnz	r0, 8007ac2 <__smakebuf_r+0x46>
 8007aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ab2:	059a      	lsls	r2, r3, #22
 8007ab4:	d4ee      	bmi.n	8007a94 <__smakebuf_r+0x18>
 8007ab6:	f023 0303 	bic.w	r3, r3, #3
 8007aba:	f043 0302 	orr.w	r3, r3, #2
 8007abe:	81a3      	strh	r3, [r4, #12]
 8007ac0:	e7e2      	b.n	8007a88 <__smakebuf_r+0xc>
 8007ac2:	89a3      	ldrh	r3, [r4, #12]
 8007ac4:	6020      	str	r0, [r4, #0]
 8007ac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007aca:	81a3      	strh	r3, [r4, #12]
 8007acc:	9b01      	ldr	r3, [sp, #4]
 8007ace:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ad2:	b15b      	cbz	r3, 8007aec <__smakebuf_r+0x70>
 8007ad4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ad8:	4630      	mov	r0, r6
 8007ada:	f000 f837 	bl	8007b4c <_isatty_r>
 8007ade:	b128      	cbz	r0, 8007aec <__smakebuf_r+0x70>
 8007ae0:	89a3      	ldrh	r3, [r4, #12]
 8007ae2:	f023 0303 	bic.w	r3, r3, #3
 8007ae6:	f043 0301 	orr.w	r3, r3, #1
 8007aea:	81a3      	strh	r3, [r4, #12]
 8007aec:	89a3      	ldrh	r3, [r4, #12]
 8007aee:	431d      	orrs	r5, r3
 8007af0:	81a5      	strh	r5, [r4, #12]
 8007af2:	e7cf      	b.n	8007a94 <__smakebuf_r+0x18>

08007af4 <memmove>:
 8007af4:	4288      	cmp	r0, r1
 8007af6:	b510      	push	{r4, lr}
 8007af8:	eb01 0402 	add.w	r4, r1, r2
 8007afc:	d902      	bls.n	8007b04 <memmove+0x10>
 8007afe:	4284      	cmp	r4, r0
 8007b00:	4623      	mov	r3, r4
 8007b02:	d807      	bhi.n	8007b14 <memmove+0x20>
 8007b04:	1e43      	subs	r3, r0, #1
 8007b06:	42a1      	cmp	r1, r4
 8007b08:	d008      	beq.n	8007b1c <memmove+0x28>
 8007b0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b12:	e7f8      	b.n	8007b06 <memmove+0x12>
 8007b14:	4402      	add	r2, r0
 8007b16:	4601      	mov	r1, r0
 8007b18:	428a      	cmp	r2, r1
 8007b1a:	d100      	bne.n	8007b1e <memmove+0x2a>
 8007b1c:	bd10      	pop	{r4, pc}
 8007b1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b26:	e7f7      	b.n	8007b18 <memmove+0x24>

08007b28 <_fstat_r>:
 8007b28:	b538      	push	{r3, r4, r5, lr}
 8007b2a:	4d07      	ldr	r5, [pc, #28]	@ (8007b48 <_fstat_r+0x20>)
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	4604      	mov	r4, r0
 8007b30:	4608      	mov	r0, r1
 8007b32:	4611      	mov	r1, r2
 8007b34:	602b      	str	r3, [r5, #0]
 8007b36:	f7f9 fa2e 	bl	8000f96 <_fstat>
 8007b3a:	1c43      	adds	r3, r0, #1
 8007b3c:	d102      	bne.n	8007b44 <_fstat_r+0x1c>
 8007b3e:	682b      	ldr	r3, [r5, #0]
 8007b40:	b103      	cbz	r3, 8007b44 <_fstat_r+0x1c>
 8007b42:	6023      	str	r3, [r4, #0]
 8007b44:	bd38      	pop	{r3, r4, r5, pc}
 8007b46:	bf00      	nop
 8007b48:	20001628 	.word	0x20001628

08007b4c <_isatty_r>:
 8007b4c:	b538      	push	{r3, r4, r5, lr}
 8007b4e:	4d06      	ldr	r5, [pc, #24]	@ (8007b68 <_isatty_r+0x1c>)
 8007b50:	2300      	movs	r3, #0
 8007b52:	4604      	mov	r4, r0
 8007b54:	4608      	mov	r0, r1
 8007b56:	602b      	str	r3, [r5, #0]
 8007b58:	f7f9 fa2d 	bl	8000fb6 <_isatty>
 8007b5c:	1c43      	adds	r3, r0, #1
 8007b5e:	d102      	bne.n	8007b66 <_isatty_r+0x1a>
 8007b60:	682b      	ldr	r3, [r5, #0]
 8007b62:	b103      	cbz	r3, 8007b66 <_isatty_r+0x1a>
 8007b64:	6023      	str	r3, [r4, #0]
 8007b66:	bd38      	pop	{r3, r4, r5, pc}
 8007b68:	20001628 	.word	0x20001628

08007b6c <_sbrk_r>:
 8007b6c:	b538      	push	{r3, r4, r5, lr}
 8007b6e:	4d06      	ldr	r5, [pc, #24]	@ (8007b88 <_sbrk_r+0x1c>)
 8007b70:	2300      	movs	r3, #0
 8007b72:	4604      	mov	r4, r0
 8007b74:	4608      	mov	r0, r1
 8007b76:	602b      	str	r3, [r5, #0]
 8007b78:	f7f9 fa36 	bl	8000fe8 <_sbrk>
 8007b7c:	1c43      	adds	r3, r0, #1
 8007b7e:	d102      	bne.n	8007b86 <_sbrk_r+0x1a>
 8007b80:	682b      	ldr	r3, [r5, #0]
 8007b82:	b103      	cbz	r3, 8007b86 <_sbrk_r+0x1a>
 8007b84:	6023      	str	r3, [r4, #0]
 8007b86:	bd38      	pop	{r3, r4, r5, pc}
 8007b88:	20001628 	.word	0x20001628

08007b8c <_realloc_r>:
 8007b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b90:	4680      	mov	r8, r0
 8007b92:	4615      	mov	r5, r2
 8007b94:	460c      	mov	r4, r1
 8007b96:	b921      	cbnz	r1, 8007ba2 <_realloc_r+0x16>
 8007b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b9c:	4611      	mov	r1, r2
 8007b9e:	f7ff bb29 	b.w	80071f4 <_malloc_r>
 8007ba2:	b92a      	cbnz	r2, 8007bb0 <_realloc_r+0x24>
 8007ba4:	f7ff faba 	bl	800711c <_free_r>
 8007ba8:	2400      	movs	r4, #0
 8007baa:	4620      	mov	r0, r4
 8007bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bb0:	f000 f81a 	bl	8007be8 <_malloc_usable_size_r>
 8007bb4:	4285      	cmp	r5, r0
 8007bb6:	4606      	mov	r6, r0
 8007bb8:	d802      	bhi.n	8007bc0 <_realloc_r+0x34>
 8007bba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007bbe:	d8f4      	bhi.n	8007baa <_realloc_r+0x1e>
 8007bc0:	4629      	mov	r1, r5
 8007bc2:	4640      	mov	r0, r8
 8007bc4:	f7ff fb16 	bl	80071f4 <_malloc_r>
 8007bc8:	4607      	mov	r7, r0
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	d0ec      	beq.n	8007ba8 <_realloc_r+0x1c>
 8007bce:	42b5      	cmp	r5, r6
 8007bd0:	462a      	mov	r2, r5
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	bf28      	it	cs
 8007bd6:	4632      	movcs	r2, r6
 8007bd8:	f7ff fa91 	bl	80070fe <memcpy>
 8007bdc:	4621      	mov	r1, r4
 8007bde:	4640      	mov	r0, r8
 8007be0:	f7ff fa9c 	bl	800711c <_free_r>
 8007be4:	463c      	mov	r4, r7
 8007be6:	e7e0      	b.n	8007baa <_realloc_r+0x1e>

08007be8 <_malloc_usable_size_r>:
 8007be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bec:	1f18      	subs	r0, r3, #4
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	bfbc      	itt	lt
 8007bf2:	580b      	ldrlt	r3, [r1, r0]
 8007bf4:	18c0      	addlt	r0, r0, r3
 8007bf6:	4770      	bx	lr

08007bf8 <_init>:
 8007bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bfa:	bf00      	nop
 8007bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bfe:	bc08      	pop	{r3}
 8007c00:	469e      	mov	lr, r3
 8007c02:	4770      	bx	lr

08007c04 <_fini>:
 8007c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c06:	bf00      	nop
 8007c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c0a:	bc08      	pop	{r3}
 8007c0c:	469e      	mov	lr, r3
 8007c0e:	4770      	bx	lr
